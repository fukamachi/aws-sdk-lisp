;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(uiop/package:define-package #:aws-sdk/services/polly/api (:use)
                             (:nicknames #:aws/polly)
                             (:import-from #:aws-sdk/generator/shape)
                             (:import-from #:aws-sdk/generator/operation)
                             (:import-from #:aws-sdk/api)
                             (:import-from #:aws-sdk/request)
                             (:import-from #:aws-sdk/json-request)
                             (:import-from #:aws-sdk/rest-json-request)
                             (:import-from #:aws-sdk/rest-xml-request)
                             (:import-from #:aws-sdk/query-request)
                             (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/polly/api)
(common-lisp:progn
 (common-lisp:define-condition polly-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'polly-error))
(common-lisp:progn
 (common-lisp:defclass polly-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "polly" :api-version
                        "2016-06-10" :host-prefix "polly" :signing-name
                        common-lisp:nil :global-host common-lisp:nil))
 (common-lisp:export 'polly-request))
(common-lisp:defvar *error-map*
  '(("EngineNotSupportedException" . engine-not-supported-exception)
    ("InvalidLexiconException" . invalid-lexicon-exception)
    ("InvalidNextTokenException" . invalid-next-token-exception)
    ("InvalidS3BucketException" . invalid-s3bucket-exception)
    ("InvalidS3KeyException" . invalid-s3key-exception)
    ("InvalidSampleRateException" . invalid-sample-rate-exception)
    ("InvalidSnsTopicArnException" . invalid-sns-topic-arn-exception)
    ("InvalidSsmlException" . invalid-ssml-exception)
    ("InvalidTaskIdException" . invalid-task-id-exception)
    ("LanguageNotSupportedException" . language-not-supported-exception)
    ("LexiconNotFoundException" . lexicon-not-found-exception)
    ("LexiconSizeExceededException" . lexicon-size-exceeded-exception)
    ("MarksNotSupportedForFormatException"
     . marks-not-supported-for-format-exception)
    ("MaxLexemeLengthExceededException" . max-lexeme-length-exceeded-exception)
    ("MaxLexiconsNumberExceededException"
     . max-lexicons-number-exceeded-exception)
    ("ServiceFailureException" . service-failure-exception)
    ("SsmlMarksNotSupportedForTextTypeException"
     . ssml-marks-not-supported-for-text-type-exception)
    ("SynthesisTaskNotFoundException" . synthesis-task-not-found-exception)
    ("TextLengthExceededException" . text-length-exceeded-exception)
    ("UnsupportedPlsAlphabetException" . unsupported-pls-alphabet-exception)
    ("UnsupportedPlsLanguageException" . unsupported-pls-language-exception)))
(common-lisp:deftype alphabet () 'common-lisp:string)
(common-lisp:deftype audio-stream ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype content-type () 'common-lisp:string)
(common-lisp:deftype date-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-lexicon-input common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or lexicon-name common-lisp:null)
                         :accessor struct-shape-delete-lexicon-input-name
                         :shape "LexiconName" :location "uri" :location-name
                         "LexiconName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-lexicon-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-lexicon-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-lexicon-input 'make-delete-lexicon-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-lexicon-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-lexicon-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-lexicon-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-lexicon-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-lexicon-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-lexicon-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-lexicon-output 'make-delete-lexicon-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-lexicon-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-lexicon-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-lexicon-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-voices-input common-lisp:nil
                       ((engine :initarg :engine :initform common-lisp:nil
                         :type (common-lisp:or engine common-lisp:null)
                         :accessor struct-shape-describe-voices-input-engine
                         :shape "Engine" :location "querystring" :location-name
                         "Engine")
                        (language-code :initarg :language-code :initform
                         common-lisp:nil :type
                         (common-lisp:or language-code common-lisp:null)
                         :accessor
                         struct-shape-describe-voices-input-language-code
                         :shape "LanguageCode" :location "querystring"
                         :location-name "LanguageCode")
                        (include-additional-language-codes :initarg
                         :include-additional-language-codes :initform
                         common-lisp:nil :type
                         (common-lisp:or include-additional-language-codes
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-voices-input-include-additional-language-codes
                         :shape "IncludeAdditionalLanguageCodes" :location
                         "querystring" :location-name
                         "IncludeAdditionalLanguageCodes")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-voices-input-next-token :shape
                         "NextToken" :location "querystring" :location-name
                         "NextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-voices-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-voices-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-voices-input 'make-describe-voices-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-voices-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-voices-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-voices-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-voices-output common-lisp:nil
                       ((voices :initarg :voices :initform common-lisp:nil
                         :type (common-lisp:or voice-list common-lisp:null)
                         :accessor struct-shape-describe-voices-output-voices
                         :shape "VoiceList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-voices-output-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-voices-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-voices-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-voices-output 'make-describe-voices-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-voices-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-voices-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'voices))
      (common-lisp:list
       (common-lisp:cons "Voices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-voices-output))
   common-lisp:nil))
(common-lisp:deftype engine () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype engine-list () '(trivial-types:proper-list engine))
 (common-lisp:defun make-engine-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list engine))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition engine-not-supported-exception
     (polly-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       engine-not-supported-exception-message)))
 (common-lisp:export
  (common-lisp:list 'engine-not-supported-exception
                    'engine-not-supported-exception-message)))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype gender () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-lexicon-input common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or lexicon-name common-lisp:null)
                         :accessor struct-shape-get-lexicon-input-name :shape
                         "LexiconName" :location "uri" :location-name
                         "LexiconName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-lexicon-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-lexicon-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-lexicon-input 'make-get-lexicon-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-lexicon-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-lexicon-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-lexicon-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-lexicon-output common-lisp:nil
                       ((lexicon :initarg :lexicon :initform common-lisp:nil
                         :type (common-lisp:or lexicon common-lisp:null)
                         :accessor struct-shape-get-lexicon-output-lexicon
                         :shape "Lexicon" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lexicon-attributes :initarg :lexicon-attributes
                         :initform common-lisp:nil :type
                         (common-lisp:or lexicon-attributes common-lisp:null)
                         :accessor
                         struct-shape-get-lexicon-output-lexicon-attributes
                         :shape "LexiconAttributes" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-lexicon-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-lexicon-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-lexicon-output 'make-get-lexicon-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-lexicon-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-lexicon-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lexicon))
      (common-lisp:list
       (common-lisp:cons "Lexicon"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lexicon-attributes))
      (common-lisp:list
       (common-lisp:cons "LexiconAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-lexicon-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-speech-synthesis-task-input common-lisp:nil
                       ((task-id :initarg :task-id :initform
                         (common-lisp:error ":task-id is required") :type
                         (common-lisp:or task-id common-lisp:null) :accessor
                         struct-shape-get-speech-synthesis-task-input-task-id
                         :shape "TaskId" :location "uri" :location-name
                         "TaskId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-speech-synthesis-task-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-speech-synthesis-task-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-speech-synthesis-task-input
                    'make-get-speech-synthesis-task-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-speech-synthesis-task-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-speech-synthesis-task-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-speech-synthesis-task-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-speech-synthesis-task-output common-lisp:nil
                       ((synthesis-task :initarg :synthesis-task :initform
                         common-lisp:nil :type
                         (common-lisp:or synthesis-task common-lisp:null)
                         :accessor
                         struct-shape-get-speech-synthesis-task-output-synthesis-task
                         :shape "SynthesisTask" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-speech-synthesis-task-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-speech-synthesis-task-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-speech-synthesis-task-output
                    'make-get-speech-synthesis-task-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-speech-synthesis-task-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-speech-synthesis-task-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'synthesis-task))
      (common-lisp:list
       (common-lisp:cons "SynthesisTask"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-speech-synthesis-task-output))
   common-lisp:nil))
(common-lisp:deftype include-additional-language-codes () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:define-condition invalid-lexicon-exception
     (polly-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-lexicon-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-lexicon-exception
                    'invalid-lexicon-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-next-token-exception
     (polly-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-next-token-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-next-token-exception
                    'invalid-next-token-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-s3bucket-exception
     (polly-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-s3bucket-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-s3bucket-exception
                    'invalid-s3bucket-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-s3key-exception
     (polly-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-s3key-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-s3key-exception 'invalid-s3key-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-sample-rate-exception
     (polly-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-sample-rate-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-sample-rate-exception
                    'invalid-sample-rate-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-sns-topic-arn-exception
     (polly-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-sns-topic-arn-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-sns-topic-arn-exception
                    'invalid-sns-topic-arn-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-ssml-exception
     (polly-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-ssml-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-ssml-exception 'invalid-ssml-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-task-id-exception
     (polly-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-task-id-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-task-id-exception
                    'invalid-task-id-exception-message)))
(common-lisp:deftype language-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype language-code-list ()
   '(trivial-types:proper-list language-code))
 (common-lisp:defun make-language-code-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list language-code))
   aws-sdk/generator/shape::members))
(common-lisp:deftype language-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition language-not-supported-exception
     (polly-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       language-not-supported-exception-message)))
 (common-lisp:export
  (common-lisp:list 'language-not-supported-exception
                    'language-not-supported-exception-message)))
(common-lisp:deftype last-modified () 'common-lisp:string)
(common-lisp:deftype lexemes-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass lexicon common-lisp:nil
                       ((content :initarg :content :initform common-lisp:nil
                         :type
                         (common-lisp:or lexicon-content common-lisp:null)
                         :accessor struct-shape-lexicon-content :shape
                         "LexiconContent" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or lexicon-name common-lisp:null)
                         :accessor struct-shape-lexicon-name :shape
                         "LexiconName" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-lexicon
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'lexicon
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'lexicon 'make-lexicon))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lexicon))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lexicon))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lexicon))
   common-lisp:nil))
(common-lisp:deftype lexicon-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass lexicon-attributes common-lisp:nil
                       ((alphabet :initarg :alphabet :initform common-lisp:nil
                         :type (common-lisp:or alphabet common-lisp:null)
                         :accessor struct-shape-lexicon-attributes-alphabet
                         :shape "Alphabet" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (language-code :initarg :language-code :initform
                         common-lisp:nil :type
                         (common-lisp:or language-code common-lisp:null)
                         :accessor
                         struct-shape-lexicon-attributes-language-code :shape
                         "LanguageCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified :initarg :last-modified :initform
                         common-lisp:nil :type
                         (common-lisp:or last-modified common-lisp:null)
                         :accessor
                         struct-shape-lexicon-attributes-last-modified :shape
                         "LastModified" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lexicon-arn :initarg :lexicon-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or lexicon-arn common-lisp:null)
                         :accessor struct-shape-lexicon-attributes-lexicon-arn
                         :shape "LexiconArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lexemes-count :initarg :lexemes-count :initform
                         common-lisp:nil :type
                         (common-lisp:or lexemes-count common-lisp:null)
                         :accessor
                         struct-shape-lexicon-attributes-lexemes-count :shape
                         "LexemesCount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (size :initarg :size :initform common-lisp:nil :type
                         (common-lisp:or size common-lisp:null) :accessor
                         struct-shape-lexicon-attributes-size :shape "Size"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-lexicon-attributes
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'lexicon-attributes
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'lexicon-attributes 'make-lexicon-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lexicon-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lexicon-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alphabet))
      (common-lisp:list
       (common-lisp:cons "Alphabet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "LastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lexicon-arn))
      (common-lisp:list
       (common-lisp:cons "LexiconArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lexemes-count))
      (common-lisp:list
       (common-lisp:cons "LexemesCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "Size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lexicon-attributes))
   common-lisp:nil))
(common-lisp:deftype lexicon-content () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass lexicon-description common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or lexicon-name common-lisp:null)
                         :accessor struct-shape-lexicon-description-name :shape
                         "LexiconName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or lexicon-attributes common-lisp:null)
                         :accessor struct-shape-lexicon-description-attributes
                         :shape "LexiconAttributes" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-lexicon-description
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'lexicon-description
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'lexicon-description 'make-lexicon-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lexicon-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lexicon-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lexicon-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype lexicon-description-list ()
   '(trivial-types:proper-list lexicon-description))
 (common-lisp:defun make-lexicon-description-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lexicon-description))
   aws-sdk/generator/shape::members))
(common-lisp:deftype lexicon-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype lexicon-name-list ()
   '(trivial-types:proper-list lexicon-name))
 (common-lisp:defun make-lexicon-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lexicon-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition lexicon-not-found-exception
     (polly-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       lexicon-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'lexicon-not-found-exception
                    'lexicon-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition lexicon-size-exceeded-exception
     (polly-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       lexicon-size-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'lexicon-size-exceeded-exception
                    'lexicon-size-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass list-lexicons-input common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-lexicons-input-next-token :shape
                         "NextToken" :location "querystring" :location-name
                         "NextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-lexicons-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-lexicons-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-lexicons-input 'make-list-lexicons-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-lexicons-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-lexicons-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-lexicons-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-lexicons-output common-lisp:nil
                       ((lexicons :initarg :lexicons :initform common-lisp:nil
                         :type
                         (common-lisp:or lexicon-description-list
                                         common-lisp:null)
                         :accessor struct-shape-list-lexicons-output-lexicons
                         :shape "LexiconDescriptionList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-lexicons-output-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-lexicons-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-lexicons-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-lexicons-output 'make-list-lexicons-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-lexicons-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-lexicons-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lexicons))
      (common-lisp:list
       (common-lisp:cons "Lexicons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-lexicons-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-speech-synthesis-tasks-input common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-speech-synthesis-tasks-input-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "MaxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-speech-synthesis-tasks-input-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "NextToken")
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or task-status common-lisp:null)
                         :accessor
                         struct-shape-list-speech-synthesis-tasks-input-status
                         :shape "TaskStatus" :location "querystring"
                         :location-name "Status"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-speech-synthesis-tasks-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-speech-synthesis-tasks-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-speech-synthesis-tasks-input
                    'make-list-speech-synthesis-tasks-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-speech-synthesis-tasks-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-speech-synthesis-tasks-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-speech-synthesis-tasks-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-speech-synthesis-tasks-output common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-speech-synthesis-tasks-output-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (synthesis-tasks :initarg :synthesis-tasks :initform
                         common-lisp:nil :type
                         (common-lisp:or synthesis-tasks common-lisp:null)
                         :accessor
                         struct-shape-list-speech-synthesis-tasks-output-synthesis-tasks
                         :shape "SynthesisTasks" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-speech-synthesis-tasks-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-speech-synthesis-tasks-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-speech-synthesis-tasks-output
                    'make-list-speech-synthesis-tasks-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-speech-synthesis-tasks-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-speech-synthesis-tasks-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'synthesis-tasks))
      (common-lisp:list
       (common-lisp:cons "SynthesisTasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-speech-synthesis-tasks-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition marks-not-supported-for-format-exception
     (polly-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       marks-not-supported-for-format-exception-message)))
 (common-lisp:export
  (common-lisp:list 'marks-not-supported-for-format-exception
                    'marks-not-supported-for-format-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition max-lexeme-length-exceeded-exception
     (polly-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       max-lexeme-length-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'max-lexeme-length-exceeded-exception
                    'max-lexeme-length-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition max-lexicons-number-exceeded-exception
     (polly-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       max-lexicons-number-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'max-lexicons-number-exceeded-exception
                    'max-lexicons-number-exceeded-exception-message)))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype output-format () 'common-lisp:string)
(common-lisp:deftype output-s3bucket-name () 'common-lisp:string)
(common-lisp:deftype output-s3key-prefix () 'common-lisp:string)
(common-lisp:deftype output-uri () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass put-lexicon-input common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or lexicon-name common-lisp:null)
                         :accessor struct-shape-put-lexicon-input-name :shape
                         "LexiconName" :location "uri" :location-name
                         "LexiconName")
                        (content :initarg :content :initform
                         (common-lisp:error ":content is required") :type
                         (common-lisp:or lexicon-content common-lisp:null)
                         :accessor struct-shape-put-lexicon-input-content
                         :shape "LexiconContent" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-lexicon-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-lexicon-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-lexicon-input 'make-put-lexicon-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-lexicon-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-lexicon-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-lexicon-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-lexicon-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-lexicon-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-lexicon-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-lexicon-output 'make-put-lexicon-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-lexicon-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-lexicon-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-lexicon-output))
   common-lisp:nil))
(common-lisp:deftype request-characters () 'common-lisp:integer)
(common-lisp:deftype sample-rate () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-failure-exception
     (polly-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-failure-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-failure-exception
                    'service-failure-exception-message)))
(common-lisp:deftype size () 'common-lisp:integer)
(common-lisp:deftype sns-topic-arn () 'common-lisp:string)
(common-lisp:deftype speech-mark-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype speech-mark-type-list ()
   '(trivial-types:proper-list speech-mark-type))
 (common-lisp:defun make-speech-mark-type-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list speech-mark-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition ssml-marks-not-supported-for-text-type-exception
     (polly-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       ssml-marks-not-supported-for-text-type-exception-message)))
 (common-lisp:export
  (common-lisp:list 'ssml-marks-not-supported-for-text-type-exception
                    'ssml-marks-not-supported-for-text-type-exception-message)))
(common-lisp:progn
 (common-lisp:defclass start-speech-synthesis-task-input common-lisp:nil
                       ((engine :initarg :engine :initform common-lisp:nil
                         :type (common-lisp:or engine common-lisp:null)
                         :accessor
                         struct-shape-start-speech-synthesis-task-input-engine
                         :shape "Engine" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (language-code :initarg :language-code :initform
                         common-lisp:nil :type
                         (common-lisp:or language-code common-lisp:null)
                         :accessor
                         struct-shape-start-speech-synthesis-task-input-language-code
                         :shape "LanguageCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lexicon-names :initarg :lexicon-names :initform
                         common-lisp:nil :type
                         (common-lisp:or lexicon-name-list common-lisp:null)
                         :accessor
                         struct-shape-start-speech-synthesis-task-input-lexicon-names
                         :shape "LexiconNameList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-format :initarg :output-format :initform
                         (common-lisp:error ":output-format is required") :type
                         (common-lisp:or output-format common-lisp:null)
                         :accessor
                         struct-shape-start-speech-synthesis-task-input-output-format
                         :shape "OutputFormat" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-s3bucket-name :initarg :output-s3bucket-name
                         :initform
                         (common-lisp:error
                          ":output-s3bucket-name is required")
                         :type
                         (common-lisp:or output-s3bucket-name common-lisp:null)
                         :accessor
                         struct-shape-start-speech-synthesis-task-input-output-s3bucket-name
                         :shape "OutputS3BucketName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-s3key-prefix :initarg :output-s3key-prefix
                         :initform common-lisp:nil :type
                         (common-lisp:or output-s3key-prefix common-lisp:null)
                         :accessor
                         struct-shape-start-speech-synthesis-task-input-output-s3key-prefix
                         :shape "OutputS3KeyPrefix" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sample-rate :initarg :sample-rate :initform
                         common-lisp:nil :type
                         (common-lisp:or sample-rate common-lisp:null)
                         :accessor
                         struct-shape-start-speech-synthesis-task-input-sample-rate
                         :shape "SampleRate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sns-topic-arn :initarg :sns-topic-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or sns-topic-arn common-lisp:null)
                         :accessor
                         struct-shape-start-speech-synthesis-task-input-sns-topic-arn
                         :shape "SnsTopicArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (speech-mark-types :initarg :speech-mark-types
                         :initform common-lisp:nil :type
                         (common-lisp:or speech-mark-type-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-speech-synthesis-task-input-speech-mark-types
                         :shape "SpeechMarkTypeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (text :initarg :text :initform
                         (common-lisp:error ":text is required") :type
                         (common-lisp:or text common-lisp:null) :accessor
                         struct-shape-start-speech-synthesis-task-input-text
                         :shape "Text" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (text-type :initarg :text-type :initform
                         common-lisp:nil :type
                         (common-lisp:or text-type common-lisp:null) :accessor
                         struct-shape-start-speech-synthesis-task-input-text-type
                         :shape "TextType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (voice-id :initarg :voice-id :initform
                         (common-lisp:error ":voice-id is required") :type
                         (common-lisp:or voice-id common-lisp:null) :accessor
                         struct-shape-start-speech-synthesis-task-input-voice-id
                         :shape "VoiceId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-speech-synthesis-task-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-speech-synthesis-task-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-speech-synthesis-task-input
                    'make-start-speech-synthesis-task-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-speech-synthesis-task-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-speech-synthesis-task-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lexicon-names))
      (common-lisp:list
       (common-lisp:cons "LexiconNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-format))
      (common-lisp:list
       (common-lisp:cons "OutputFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-s3bucket-name))
      (common-lisp:list
       (common-lisp:cons "OutputS3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-s3key-prefix))
      (common-lisp:list
       (common-lisp:cons "OutputS3KeyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-rate))
      (common-lisp:list
       (common-lisp:cons "SampleRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "SnsTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'speech-mark-types))
      (common-lisp:list
       (common-lisp:cons "SpeechMarkTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "Text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-type))
      (common-lisp:list
       (common-lisp:cons "TextType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'voice-id))
      (common-lisp:list
       (common-lisp:cons "VoiceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-speech-synthesis-task-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-speech-synthesis-task-output common-lisp:nil
                       ((synthesis-task :initarg :synthesis-task :initform
                         common-lisp:nil :type
                         (common-lisp:or synthesis-task common-lisp:null)
                         :accessor
                         struct-shape-start-speech-synthesis-task-output-synthesis-task
                         :shape "SynthesisTask" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-speech-synthesis-task-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-speech-synthesis-task-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-speech-synthesis-task-output
                    'make-start-speech-synthesis-task-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-speech-synthesis-task-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-speech-synthesis-task-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'synthesis-task))
      (common-lisp:list
       (common-lisp:cons "SynthesisTask"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-speech-synthesis-task-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass synthesis-task common-lisp:nil
                       ((engine :initarg :engine :initform common-lisp:nil
                         :type (common-lisp:or engine common-lisp:null)
                         :accessor struct-shape-synthesis-task-engine :shape
                         "Engine" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (task-id :initarg :task-id :initform common-lisp:nil
                         :type (common-lisp:or task-id common-lisp:null)
                         :accessor struct-shape-synthesis-task-task-id :shape
                         "TaskId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (task-status :initarg :task-status :initform
                         common-lisp:nil :type
                         (common-lisp:or task-status common-lisp:null)
                         :accessor struct-shape-synthesis-task-task-status
                         :shape "TaskStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (task-status-reason :initarg :task-status-reason
                         :initform common-lisp:nil :type
                         (common-lisp:or task-status-reason common-lisp:null)
                         :accessor
                         struct-shape-synthesis-task-task-status-reason :shape
                         "TaskStatusReason" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-uri :initarg :output-uri :initform
                         common-lisp:nil :type
                         (common-lisp:or output-uri common-lisp:null) :accessor
                         struct-shape-synthesis-task-output-uri :shape
                         "OutputUri" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-synthesis-task-creation-time :shape
                         "DateTime" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (request-characters :initarg :request-characters
                         :initform common-lisp:nil :type
                         (common-lisp:or request-characters common-lisp:null)
                         :accessor
                         struct-shape-synthesis-task-request-characters :shape
                         "RequestCharacters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sns-topic-arn :initarg :sns-topic-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or sns-topic-arn common-lisp:null)
                         :accessor struct-shape-synthesis-task-sns-topic-arn
                         :shape "SnsTopicArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lexicon-names :initarg :lexicon-names :initform
                         common-lisp:nil :type
                         (common-lisp:or lexicon-name-list common-lisp:null)
                         :accessor struct-shape-synthesis-task-lexicon-names
                         :shape "LexiconNameList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-format :initarg :output-format :initform
                         common-lisp:nil :type
                         (common-lisp:or output-format common-lisp:null)
                         :accessor struct-shape-synthesis-task-output-format
                         :shape "OutputFormat" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sample-rate :initarg :sample-rate :initform
                         common-lisp:nil :type
                         (common-lisp:or sample-rate common-lisp:null)
                         :accessor struct-shape-synthesis-task-sample-rate
                         :shape "SampleRate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (speech-mark-types :initarg :speech-mark-types
                         :initform common-lisp:nil :type
                         (common-lisp:or speech-mark-type-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-synthesis-task-speech-mark-types :shape
                         "SpeechMarkTypeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (text-type :initarg :text-type :initform
                         common-lisp:nil :type
                         (common-lisp:or text-type common-lisp:null) :accessor
                         struct-shape-synthesis-task-text-type :shape
                         "TextType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (voice-id :initarg :voice-id :initform common-lisp:nil
                         :type (common-lisp:or voice-id common-lisp:null)
                         :accessor struct-shape-synthesis-task-voice-id :shape
                         "VoiceId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (language-code :initarg :language-code :initform
                         common-lisp:nil :type
                         (common-lisp:or language-code common-lisp:null)
                         :accessor struct-shape-synthesis-task-language-code
                         :shape "LanguageCode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-synthesis-task
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'synthesis-task
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'synthesis-task 'make-synthesis-task))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input synthesis-task))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input synthesis-task))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "TaskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-status))
      (common-lisp:list
       (common-lisp:cons "TaskStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-status-reason))
      (common-lisp:list
       (common-lisp:cons "TaskStatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-uri))
      (common-lisp:list
       (common-lisp:cons "OutputUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-characters))
      (common-lisp:list
       (common-lisp:cons "RequestCharacters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "SnsTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lexicon-names))
      (common-lisp:list
       (common-lisp:cons "LexiconNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-format))
      (common-lisp:list
       (common-lisp:cons "OutputFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-rate))
      (common-lisp:list
       (common-lisp:cons "SampleRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'speech-mark-types))
      (common-lisp:list
       (common-lisp:cons "SpeechMarkTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-type))
      (common-lisp:list
       (common-lisp:cons "TextType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'voice-id))
      (common-lisp:list
       (common-lisp:cons "VoiceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input synthesis-task))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition synthesis-task-not-found-exception
     (polly-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       synthesis-task-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'synthesis-task-not-found-exception
                    'synthesis-task-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:deftype synthesis-tasks ()
   '(trivial-types:proper-list synthesis-task))
 (common-lisp:defun make-synthesis-tasks
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list synthesis-task))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass synthesize-speech-input common-lisp:nil
                       ((engine :initarg :engine :initform common-lisp:nil
                         :type (common-lisp:or engine common-lisp:null)
                         :accessor struct-shape-synthesize-speech-input-engine
                         :shape "Engine" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (language-code :initarg :language-code :initform
                         common-lisp:nil :type
                         (common-lisp:or language-code common-lisp:null)
                         :accessor
                         struct-shape-synthesize-speech-input-language-code
                         :shape "LanguageCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lexicon-names :initarg :lexicon-names :initform
                         common-lisp:nil :type
                         (common-lisp:or lexicon-name-list common-lisp:null)
                         :accessor
                         struct-shape-synthesize-speech-input-lexicon-names
                         :shape "LexiconNameList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-format :initarg :output-format :initform
                         (common-lisp:error ":output-format is required") :type
                         (common-lisp:or output-format common-lisp:null)
                         :accessor
                         struct-shape-synthesize-speech-input-output-format
                         :shape "OutputFormat" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sample-rate :initarg :sample-rate :initform
                         common-lisp:nil :type
                         (common-lisp:or sample-rate common-lisp:null)
                         :accessor
                         struct-shape-synthesize-speech-input-sample-rate
                         :shape "SampleRate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (speech-mark-types :initarg :speech-mark-types
                         :initform common-lisp:nil :type
                         (common-lisp:or speech-mark-type-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-synthesize-speech-input-speech-mark-types
                         :shape "SpeechMarkTypeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (text :initarg :text :initform
                         (common-lisp:error ":text is required") :type
                         (common-lisp:or text common-lisp:null) :accessor
                         struct-shape-synthesize-speech-input-text :shape
                         "Text" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (text-type :initarg :text-type :initform
                         common-lisp:nil :type
                         (common-lisp:or text-type common-lisp:null) :accessor
                         struct-shape-synthesize-speech-input-text-type :shape
                         "TextType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (voice-id :initarg :voice-id :initform
                         (common-lisp:error ":voice-id is required") :type
                         (common-lisp:or voice-id common-lisp:null) :accessor
                         struct-shape-synthesize-speech-input-voice-id :shape
                         "VoiceId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-synthesize-speech-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'synthesize-speech-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'synthesize-speech-input 'make-synthesize-speech-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          synthesize-speech-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          synthesize-speech-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lexicon-names))
      (common-lisp:list
       (common-lisp:cons "LexiconNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-format))
      (common-lisp:list
       (common-lisp:cons "OutputFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-rate))
      (common-lisp:list
       (common-lisp:cons "SampleRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'speech-mark-types))
      (common-lisp:list
       (common-lisp:cons "SpeechMarkTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "Text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-type))
      (common-lisp:list
       (common-lisp:cons "TextType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'voice-id))
      (common-lisp:list
       (common-lisp:cons "VoiceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          synthesize-speech-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass synthesize-speech-output common-lisp:nil
                       ((audio-stream :initarg :audio-stream :initform
                         common-lisp:nil :type
                         (common-lisp:or audio-stream common-lisp:null)
                         :accessor
                         struct-shape-synthesize-speech-output-audio-stream
                         :shape "AudioStream" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (content-type :initarg :content-type :initform
                         common-lisp:nil :type
                         (common-lisp:or content-type common-lisp:null)
                         :accessor
                         struct-shape-synthesize-speech-output-content-type
                         :shape "ContentType" :location "header" :location-name
                         "Content-Type")
                        (request-characters :initarg :request-characters
                         :initform common-lisp:nil :type
                         (common-lisp:or request-characters common-lisp:null)
                         :accessor
                         struct-shape-synthesize-speech-output-request-characters
                         :shape "RequestCharacters" :location "header"
                         :location-name "x-amzn-RequestCharacters"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-synthesize-speech-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'synthesize-speech-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'synthesize-speech-output 'make-synthesize-speech-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          synthesize-speech-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-characters))
      (common-lisp:cons "x-amzn-RequestCharacters"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          synthesize-speech-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-stream))
      (common-lisp:list
       (common-lisp:cons "AudioStream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          synthesize-speech-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'audio-stream))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          synthesize-speech-output))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:deftype task-id () 'common-lisp:string)
(common-lisp:deftype task-status () 'common-lisp:string)
(common-lisp:deftype task-status-reason () 'common-lisp:string)
(common-lisp:deftype text () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition text-length-exceeded-exception
     (polly-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       text-length-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'text-length-exceeded-exception
                    'text-length-exceeded-exception-message)))
(common-lisp:deftype text-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition unsupported-pls-alphabet-exception
     (polly-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unsupported-pls-alphabet-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unsupported-pls-alphabet-exception
                    'unsupported-pls-alphabet-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition unsupported-pls-language-exception
     (polly-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unsupported-pls-language-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unsupported-pls-language-exception
                    'unsupported-pls-language-exception-message)))
(common-lisp:progn
 (common-lisp:defclass voice common-lisp:nil
                       ((gender :initarg :gender :initform common-lisp:nil
                         :type (common-lisp:or gender common-lisp:null)
                         :accessor struct-shape-voice-gender :shape "Gender"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or voice-id common-lisp:null) :accessor
                         struct-shape-voice-id :shape "VoiceId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (language-code :initarg :language-code :initform
                         common-lisp:nil :type
                         (common-lisp:or language-code common-lisp:null)
                         :accessor struct-shape-voice-language-code :shape
                         "LanguageCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (language-name :initarg :language-name :initform
                         common-lisp:nil :type
                         (common-lisp:or language-name common-lisp:null)
                         :accessor struct-shape-voice-language-name :shape
                         "LanguageName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or voice-name common-lisp:null) :accessor
                         struct-shape-voice-name :shape "VoiceName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (additional-language-codes :initarg
                         :additional-language-codes :initform common-lisp:nil
                         :type
                         (common-lisp:or language-code-list common-lisp:null)
                         :accessor struct-shape-voice-additional-language-codes
                         :shape "LanguageCodeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (supported-engines :initarg :supported-engines
                         :initform common-lisp:nil :type
                         (common-lisp:or engine-list common-lisp:null)
                         :accessor struct-shape-voice-supported-engines :shape
                         "EngineList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-voice
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'voice
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'voice 'make-voice))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input voice))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input voice))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gender))
      (common-lisp:list
       (common-lisp:cons "Gender"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-name))
      (common-lisp:list
       (common-lisp:cons "LanguageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-language-codes))
      (common-lisp:list
       (common-lisp:cons "AdditionalLanguageCodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'supported-engines))
      (common-lisp:list
       (common-lisp:cons "SupportedEngines"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input voice))
   common-lisp:nil))
(common-lisp:deftype voice-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype voice-list () '(trivial-types:proper-list voice))
 (common-lisp:defun make-voice-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list voice))
   aws-sdk/generator/shape::members))
(common-lisp:deftype voice-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun delete-lexicon
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-lexicon-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'polly-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/lexicons/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'lexicon-name))))
                                                        "DeleteLexicon"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-lexicon))
(common-lisp:progn
 (common-lisp:defun describe-voices
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key engine language-code
                     include-additional-language-codes next-token)
   (common-lisp:declare
    (common-lisp:ignorable engine language-code
     include-additional-language-codes next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-voices-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'polly-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/v1/voices"
                                                        "DescribeVoices"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-voices))
(common-lisp:progn
 (common-lisp:defun get-lexicon
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-lexicon-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'polly-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/lexicons/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'lexicon-name))))
                                                        "GetLexicon"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-lexicon))
(common-lisp:progn
 (common-lisp:defun get-speech-synthesis-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-id)
   (common-lisp:declare (common-lisp:ignorable task-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-speech-synthesis-task-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'polly-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/synthesisTasks/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'task-id))))
                                                        "GetSpeechSynthesisTask"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-speech-synthesis-task))
(common-lisp:progn
 (common-lisp:defun list-lexicons
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token)
   (common-lisp:declare (common-lisp:ignorable next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-lexicons-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'polly-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/v1/lexicons"
                                                        "ListLexicons"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-lexicons))
(common-lisp:progn
 (common-lisp:defun list-speech-synthesis-tasks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token status)
   (common-lisp:declare (common-lisp:ignorable max-results next-token status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-speech-synthesis-tasks-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'polly-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/v1/synthesisTasks"
                                                        "ListSpeechSynthesisTasks"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-speech-synthesis-tasks))
(common-lisp:progn
 (common-lisp:defun put-lexicon
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name content)
   (common-lisp:declare (common-lisp:ignorable name content))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-lexicon-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'polly-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/lexicons/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'lexicon-name))))
                                                        "PutLexicon"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-lexicon))
(common-lisp:progn
 (common-lisp:defun start-speech-synthesis-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key engine language-code lexicon-names
                     output-format output-s3bucket-name output-s3key-prefix
                     sample-rate sns-topic-arn speech-mark-types text text-type
                     voice-id)
   (common-lisp:declare
    (common-lisp:ignorable engine language-code lexicon-names output-format
     output-s3bucket-name output-s3key-prefix sample-rate sns-topic-arn
     speech-mark-types text text-type voice-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-speech-synthesis-task-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'polly-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/v1/synthesisTasks"
                                                        "StartSpeechSynthesisTask"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-speech-synthesis-task))
(common-lisp:progn
 (common-lisp:defun synthesize-speech
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key engine language-code lexicon-names
                     output-format sample-rate speech-mark-types text text-type
                     voice-id)
   (common-lisp:declare
    (common-lisp:ignorable engine language-code lexicon-names output-format
     sample-rate speech-mark-types text text-type voice-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-synthesize-speech-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'polly-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/v1/speech"
                                                        "SynthesizeSpeech")
       :want-stream common-lisp:t)
      "blob" common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'synthesize-speech))
