;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/codepipeline/api
  (:use)
  (:nicknames #:aws/codepipeline)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/codepipeline/api)
(common-lisp:progn
 (common-lisp:define-condition codepipeline-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'codepipeline-error))
(common-lisp:progn
 (common-lisp:defclass codepipeline-request (aws-sdk/json-request:json-request)
                       common-lisp:nil
                       (:default-initargs :service "codepipeline" :api-version
                        "2015-07-09" :host-prefix "codepipeline" :signing-name
                        common-lisp:nil :global-host common-lisp:nil
                        :target-prefix "CodePipeline_20150709" :json-version
                        "1.1"))
 (common-lisp:export 'codepipeline-request))
(common-lisp:defvar *error-map*
  '(("ActionNotFoundException" . action-not-found-exception)
    ("ActionTypeAlreadyExistsException" . action-type-already-exists-exception)
    ("ActionTypeNotFoundException" . action-type-not-found-exception)
    ("ApprovalAlreadyCompletedException"
     . approval-already-completed-exception)
    ("ConcurrentModificationException" . concurrent-modification-exception)
    ("ConcurrentPipelineExecutionsLimitExceededException"
     . concurrent-pipeline-executions-limit-exceeded-exception)
    ("ConflictException" . conflict-exception)
    ("DuplicatedStopRequestException" . duplicated-stop-request-exception)
    ("InvalidActionDeclarationException"
     . invalid-action-declaration-exception)
    ("InvalidApprovalTokenException" . invalid-approval-token-exception)
    ("InvalidArnException" . invalid-arn-exception)
    ("InvalidBlockerDeclarationException"
     . invalid-blocker-declaration-exception)
    ("InvalidClientTokenException" . invalid-client-token-exception)
    ("InvalidJobException" . invalid-job-exception)
    ("InvalidJobStateException" . invalid-job-state-exception)
    ("InvalidNextTokenException" . invalid-next-token-exception)
    ("InvalidNonceException" . invalid-nonce-exception)
    ("InvalidStageDeclarationException" . invalid-stage-declaration-exception)
    ("InvalidStructureException" . invalid-structure-exception)
    ("InvalidTagsException" . invalid-tags-exception)
    ("InvalidWebhookAuthenticationParametersException"
     . invalid-webhook-authentication-parameters-exception)
    ("InvalidWebhookFilterPatternException"
     . invalid-webhook-filter-pattern-exception)
    ("JobNotFoundException" . job-not-found-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("NotLatestPipelineExecutionException"
     . not-latest-pipeline-execution-exception)
    ("OutputVariablesSizeExceededException"
     . output-variables-size-exceeded-exception)
    ("PipelineExecutionNotFoundException"
     . pipeline-execution-not-found-exception)
    ("PipelineExecutionNotStoppableException"
     . pipeline-execution-not-stoppable-exception)
    ("PipelineNameInUseException" . pipeline-name-in-use-exception)
    ("PipelineNotFoundException" . pipeline-not-found-exception)
    ("PipelineVersionNotFoundException" . pipeline-version-not-found-exception)
    ("RequestFailedException" . request-failed-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("StageNotFoundException" . stage-not-found-exception)
    ("StageNotRetryableException" . stage-not-retryable-exception)
    ("TooManyTagsException" . too-many-tags-exception)
    ("ValidationException" . validation-exception)
    ("WebhookNotFoundException" . webhook-not-found-exception)))
(common-lisp:deftype awsregion-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass awssession-credentials common-lisp:nil
                       ((access-key-id :initarg :access-key-id :initform
                         (common-lisp:error ":accesskeyid is required") :type
                         (common-lisp:or access-key-id common-lisp:null)
                         :accessor
                         struct-shape-awssession-credentials-access-key-id
                         :shape "AccessKeyId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (secret-access-key :initarg :secret-access-key
                         :initform
                         (common-lisp:error ":secretaccesskey is required")
                         :type
                         (common-lisp:or secret-access-key common-lisp:null)
                         :accessor
                         struct-shape-awssession-credentials-secret-access-key
                         :shape "SecretAccessKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (session-token :initarg :session-token :initform
                         (common-lisp:error ":sessiontoken is required") :type
                         (common-lisp:or session-token common-lisp:null)
                         :accessor
                         struct-shape-awssession-credentials-session-token
                         :shape "SessionToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-awssession-credentials
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'awssession-credentials
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'awssession-credentials 'make-awssession-credentials))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          awssession-credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          awssession-credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-key-id))
      (common-lisp:list
       (common-lisp:cons "accessKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-access-key))
      (common-lisp:list
       (common-lisp:cons "secretAccessKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-token))
      (common-lisp:list
       (common-lisp:cons "sessionToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          awssession-credentials))
   common-lisp:nil))
(common-lisp:deftype access-key-id () 'common-lisp:string)
(common-lisp:deftype account-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass acknowledge-job-input common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":jobid is required") :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-acknowledge-job-input-job-id :shape
                         "JobId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (nonce :initarg :nonce :initform
                         (common-lisp:error ":nonce is required") :type
                         (common-lisp:or nonce common-lisp:null) :accessor
                         struct-shape-acknowledge-job-input-nonce :shape
                         "Nonce" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-acknowledge-job-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'acknowledge-job-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'acknowledge-job-input 'make-acknowledge-job-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          acknowledge-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          acknowledge-job-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nonce))
      (common-lisp:list
       (common-lisp:cons "nonce"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          acknowledge-job-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass acknowledge-job-output common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or job-status common-lisp:null)
                         :accessor struct-shape-acknowledge-job-output-status
                         :shape "JobStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-acknowledge-job-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'acknowledge-job-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'acknowledge-job-output 'make-acknowledge-job-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          acknowledge-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          acknowledge-job-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          acknowledge-job-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass acknowledge-third-party-job-input common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":jobid is required") :type
                         (common-lisp:or third-party-job-id common-lisp:null)
                         :accessor
                         struct-shape-acknowledge-third-party-job-input-job-id
                         :shape "ThirdPartyJobId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (nonce :initarg :nonce :initform
                         (common-lisp:error ":nonce is required") :type
                         (common-lisp:or nonce common-lisp:null) :accessor
                         struct-shape-acknowledge-third-party-job-input-nonce
                         :shape "Nonce" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         (common-lisp:error ":clienttoken is required") :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-acknowledge-third-party-job-input-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-acknowledge-third-party-job-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'acknowledge-third-party-job-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'acknowledge-third-party-job-input
                    'make-acknowledge-third-party-job-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          acknowledge-third-party-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          acknowledge-third-party-job-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nonce))
      (common-lisp:list
       (common-lisp:cons "nonce"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          acknowledge-third-party-job-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass acknowledge-third-party-job-output common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or job-status common-lisp:null)
                         :accessor
                         struct-shape-acknowledge-third-party-job-output-status
                         :shape "JobStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-acknowledge-third-party-job-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'acknowledge-third-party-job-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'acknowledge-third-party-job-output
                    'make-acknowledge-third-party-job-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          acknowledge-third-party-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          acknowledge-third-party-job-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          acknowledge-third-party-job-output))
   common-lisp:nil))
(common-lisp:deftype action-category () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass action-configuration common-lisp:nil
                       ((configuration :initarg :configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or action-configuration-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-action-configuration-configuration :shape
                         "ActionConfigurationMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-action-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'action-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'action-configuration 'make-action-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action-configuration))
   common-lisp:nil))
(common-lisp:deftype action-configuration-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype action-configuration-map () 'common-lisp:hash-table)
 (common-lisp:defun make-action-configuration-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass action-configuration-property common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or action-configuration-key
                                         common-lisp:null)
                         :accessor
                         struct-shape-action-configuration-property-name :shape
                         "ActionConfigurationKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (required :initarg :required :initform
                         (common-lisp:error ":required is required") :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-action-configuration-property-required
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-action-configuration-property-key :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (secret :initarg :secret :initform
                         (common-lisp:error ":secret is required") :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-action-configuration-property-secret
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (queryable :initarg :queryable :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-action-configuration-property-queryable
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-action-configuration-property-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or action-configuration-property-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-action-configuration-property-type :shape
                         "ActionConfigurationPropertyType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-action-configuration-property
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'action-configuration-property
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'action-configuration-property
                    'make-action-configuration-property))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          action-configuration-property))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          action-configuration-property))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'required))
      (common-lisp:list
       (common-lisp:cons "required"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret))
      (common-lisp:list
       (common-lisp:cons "secret"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queryable))
      (common-lisp:list
       (common-lisp:cons "queryable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          action-configuration-property))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype action-configuration-property-list ()
   '(trivial-types:proper-list action-configuration-property))
 (common-lisp:defun make-action-configuration-property-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            action-configuration-property))
   aws-sdk/generator/shape::members))
(common-lisp:deftype action-configuration-property-type () 'common-lisp:string)
(common-lisp:deftype action-configuration-queryable-value ()
  'common-lisp:string)
(common-lisp:deftype action-configuration-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass action-context common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or action-name common-lisp:null)
                         :accessor struct-shape-action-context-name :shape
                         "ActionName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (action-execution-id :initarg :action-execution-id
                         :initform common-lisp:nil :type
                         (common-lisp:or action-execution-id common-lisp:null)
                         :accessor
                         struct-shape-action-context-action-execution-id :shape
                         "ActionExecutionId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-action-context
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'action-context
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'action-context 'make-action-context))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-execution-id))
      (common-lisp:list
       (common-lisp:cons "actionExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action-context))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass action-declaration common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or action-name common-lisp:null)
                         :accessor struct-shape-action-declaration-name :shape
                         "ActionName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (action-type-id :initarg :action-type-id :initform
                         (common-lisp:error ":actiontypeid is required") :type
                         (common-lisp:or action-type-id common-lisp:null)
                         :accessor
                         struct-shape-action-declaration-action-type-id :shape
                         "ActionTypeId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (run-order :initarg :run-order :initform
                         common-lisp:nil :type
                         (common-lisp:or action-run-order common-lisp:null)
                         :accessor struct-shape-action-declaration-run-order
                         :shape "ActionRunOrder" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (configuration :initarg :configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or action-configuration-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-action-declaration-configuration :shape
                         "ActionConfigurationMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-artifacts :initarg :output-artifacts :initform
                         common-lisp:nil :type
                         (common-lisp:or output-artifact-list common-lisp:null)
                         :accessor
                         struct-shape-action-declaration-output-artifacts
                         :shape "OutputArtifactList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (input-artifacts :initarg :input-artifacts :initform
                         common-lisp:nil :type
                         (common-lisp:or input-artifact-list common-lisp:null)
                         :accessor
                         struct-shape-action-declaration-input-artifacts :shape
                         "InputArtifactList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor struct-shape-action-declaration-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (region :initarg :region :initform common-lisp:nil
                         :type (common-lisp:or awsregion-name common-lisp:null)
                         :accessor struct-shape-action-declaration-region
                         :shape "AWSRegionName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (namespace :initarg :namespace :initform
                         common-lisp:nil :type
                         (common-lisp:or action-namespace common-lisp:null)
                         :accessor struct-shape-action-declaration-namespace
                         :shape "ActionNamespace" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timeout-in-minutes :initarg :timeout-in-minutes
                         :initform common-lisp:nil :type
                         (common-lisp:or action-timeout common-lisp:null)
                         :accessor
                         struct-shape-action-declaration-timeout-in-minutes
                         :shape "ActionTimeout" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-action-declaration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'action-declaration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'action-declaration 'make-action-declaration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action-declaration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action-declaration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-type-id))
      (common-lisp:list
       (common-lisp:cons "actionTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-order))
      (common-lisp:list
       (common-lisp:cons "runOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-artifacts))
      (common-lisp:list
       (common-lisp:cons "outputArtifacts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-artifacts))
      (common-lisp:list
       (common-lisp:cons "inputArtifacts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-in-minutes))
      (common-lisp:list
       (common-lisp:cons "timeoutInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action-declaration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass action-execution common-lisp:nil
                       ((action-execution-id :initarg :action-execution-id
                         :initform common-lisp:nil :type
                         (common-lisp:or action-execution-id common-lisp:null)
                         :accessor
                         struct-shape-action-execution-action-execution-id
                         :shape "ActionExecutionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or action-execution-status
                                         common-lisp:null)
                         :accessor struct-shape-action-execution-status :shape
                         "ActionExecutionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (summary :initarg :summary :initform common-lisp:nil
                         :type
                         (common-lisp:or execution-summary common-lisp:null)
                         :accessor struct-shape-action-execution-summary :shape
                         "ExecutionSummary" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-status-change :initarg :last-status-change
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-action-execution-last-status-change
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (token :initarg :token :initform common-lisp:nil :type
                         (common-lisp:or action-execution-token
                                         common-lisp:null)
                         :accessor struct-shape-action-execution-token :shape
                         "ActionExecutionToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-by :initarg :last-updated-by :initform
                         common-lisp:nil :type
                         (common-lisp:or last-updated-by common-lisp:null)
                         :accessor
                         struct-shape-action-execution-last-updated-by :shape
                         "LastUpdatedBy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (external-execution-id :initarg :external-execution-id
                         :initform common-lisp:nil :type
                         (common-lisp:or execution-id common-lisp:null)
                         :accessor
                         struct-shape-action-execution-external-execution-id
                         :shape "ExecutionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (external-execution-url :initarg
                         :external-execution-url :initform common-lisp:nil
                         :type (common-lisp:or url common-lisp:null) :accessor
                         struct-shape-action-execution-external-execution-url
                         :shape "Url" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (percent-complete :initarg :percent-complete :initform
                         common-lisp:nil :type
                         (common-lisp:or percentage common-lisp:null) :accessor
                         struct-shape-action-execution-percent-complete :shape
                         "Percentage" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (error-details :initarg :error-details :initform
                         common-lisp:nil :type
                         (common-lisp:or error-details common-lisp:null)
                         :accessor struct-shape-action-execution-error-details
                         :shape "ErrorDetails" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-action-execution
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'action-execution
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'action-execution 'make-action-execution))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action-execution))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action-execution))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-execution-id))
      (common-lisp:list
       (common-lisp:cons "actionExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summary))
      (common-lisp:list
       (common-lisp:cons "summary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-status-change))
      (common-lisp:list
       (common-lisp:cons "lastStatusChange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token))
      (common-lisp:list
       (common-lisp:cons "token"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-by))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-execution-id))
      (common-lisp:list
       (common-lisp:cons "externalExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-execution-url))
      (common-lisp:list
       (common-lisp:cons "externalExecutionUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percent-complete))
      (common-lisp:list
       (common-lisp:cons "percentComplete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-details))
      (common-lisp:list
       (common-lisp:cons "errorDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action-execution))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass action-execution-detail common-lisp:nil
                       ((pipeline-execution-id :initarg :pipeline-execution-id
                         :initform common-lisp:nil :type
                         (common-lisp:or pipeline-execution-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-action-execution-detail-pipeline-execution-id
                         :shape "PipelineExecutionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (action-execution-id :initarg :action-execution-id
                         :initform common-lisp:nil :type
                         (common-lisp:or action-execution-id common-lisp:null)
                         :accessor
                         struct-shape-action-execution-detail-action-execution-id
                         :shape "ActionExecutionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pipeline-version :initarg :pipeline-version :initform
                         common-lisp:nil :type
                         (common-lisp:or pipeline-version common-lisp:null)
                         :accessor
                         struct-shape-action-execution-detail-pipeline-version
                         :shape "PipelineVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stage-name :initarg :stage-name :initform
                         common-lisp:nil :type
                         (common-lisp:or stage-name common-lisp:null) :accessor
                         struct-shape-action-execution-detail-stage-name :shape
                         "StageName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (action-name :initarg :action-name :initform
                         common-lisp:nil :type
                         (common-lisp:or action-name common-lisp:null)
                         :accessor
                         struct-shape-action-execution-detail-action-name
                         :shape "ActionName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-action-execution-detail-start-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-update-time :initarg :last-update-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-action-execution-detail-last-update-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-by :initarg :updated-by :initform
                         common-lisp:nil :type
                         (common-lisp:or last-updated-by common-lisp:null)
                         :accessor
                         struct-shape-action-execution-detail-updated-by :shape
                         "LastUpdatedBy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or action-execution-status
                                         common-lisp:null)
                         :accessor struct-shape-action-execution-detail-status
                         :shape "ActionExecutionStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (input :initarg :input :initform common-lisp:nil :type
                         (common-lisp:or action-execution-input
                                         common-lisp:null)
                         :accessor struct-shape-action-execution-detail-input
                         :shape "ActionExecutionInput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (output :initarg :output :initform common-lisp:nil
                         :type
                         (common-lisp:or action-execution-output
                                         common-lisp:null)
                         :accessor struct-shape-action-execution-detail-output
                         :shape "ActionExecutionOutput" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-action-execution-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'action-execution-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'action-execution-detail 'make-action-execution-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          action-execution-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          action-execution-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-id))
      (common-lisp:list
       (common-lisp:cons "pipelineExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-execution-id))
      (common-lisp:list
       (common-lisp:cons "actionExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-version))
      (common-lisp:list
       (common-lisp:cons "pipelineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stage-name))
      (common-lisp:list
       (common-lisp:cons "stageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-name))
      (common-lisp:list
       (common-lisp:cons "actionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output))
      (common-lisp:list
       (common-lisp:cons "output"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          action-execution-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype action-execution-detail-list ()
   '(trivial-types:proper-list action-execution-detail))
 (common-lisp:defun make-action-execution-detail-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list action-execution-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass action-execution-filter common-lisp:nil
                       ((pipeline-execution-id :initarg :pipeline-execution-id
                         :initform common-lisp:nil :type
                         (common-lisp:or pipeline-execution-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-action-execution-filter-pipeline-execution-id
                         :shape "PipelineExecutionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (latest-in-pipeline-execution :initarg
                         :latest-in-pipeline-execution :initform
                         common-lisp:nil :type
                         (common-lisp:or latest-in-pipeline-execution-filter
                                         common-lisp:null)
                         :accessor
                         struct-shape-action-execution-filter-latest-in-pipeline-execution
                         :shape "LatestInPipelineExecutionFilter" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-action-execution-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'action-execution-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'action-execution-filter 'make-action-execution-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          action-execution-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          action-execution-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-id))
      (common-lisp:list
       (common-lisp:cons "pipelineExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-in-pipeline-execution))
      (common-lisp:list
       (common-lisp:cons "latestInPipelineExecution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          action-execution-filter))
   common-lisp:nil))
(common-lisp:deftype action-execution-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass action-execution-input common-lisp:nil
                       ((action-type-id :initarg :action-type-id :initform
                         common-lisp:nil :type
                         (common-lisp:or action-type-id common-lisp:null)
                         :accessor
                         struct-shape-action-execution-input-action-type-id
                         :shape "ActionTypeId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (configuration :initarg :configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or action-configuration-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-action-execution-input-configuration
                         :shape "ActionConfigurationMap" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (resolved-configuration :initarg
                         :resolved-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or resolved-action-configuration-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-action-execution-input-resolved-configuration
                         :shape "ResolvedActionConfigurationMap" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor struct-shape-action-execution-input-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (region :initarg :region :initform common-lisp:nil
                         :type (common-lisp:or awsregion-name common-lisp:null)
                         :accessor struct-shape-action-execution-input-region
                         :shape "AWSRegionName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (input-artifacts :initarg :input-artifacts :initform
                         common-lisp:nil :type
                         (common-lisp:or artifact-detail-list common-lisp:null)
                         :accessor
                         struct-shape-action-execution-input-input-artifacts
                         :shape "ArtifactDetailList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (namespace :initarg :namespace :initform
                         common-lisp:nil :type
                         (common-lisp:or action-namespace common-lisp:null)
                         :accessor
                         struct-shape-action-execution-input-namespace :shape
                         "ActionNamespace" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-action-execution-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'action-execution-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'action-execution-input 'make-action-execution-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          action-execution-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          action-execution-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-type-id))
      (common-lisp:list
       (common-lisp:cons "actionTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolved-configuration))
      (common-lisp:list
       (common-lisp:cons "resolvedConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-artifacts))
      (common-lisp:list
       (common-lisp:cons "inputArtifacts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          action-execution-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass action-execution-output common-lisp:nil
                       ((output-artifacts :initarg :output-artifacts :initform
                         common-lisp:nil :type
                         (common-lisp:or artifact-detail-list common-lisp:null)
                         :accessor
                         struct-shape-action-execution-output-output-artifacts
                         :shape "ArtifactDetailList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (execution-result :initarg :execution-result :initform
                         common-lisp:nil :type
                         (common-lisp:or action-execution-result
                                         common-lisp:null)
                         :accessor
                         struct-shape-action-execution-output-execution-result
                         :shape "ActionExecutionResult" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (output-variables :initarg :output-variables :initform
                         common-lisp:nil :type
                         (common-lisp:or output-variables-map common-lisp:null)
                         :accessor
                         struct-shape-action-execution-output-output-variables
                         :shape "OutputVariablesMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-action-execution-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'action-execution-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'action-execution-output 'make-action-execution-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          action-execution-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          action-execution-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-artifacts))
      (common-lisp:list
       (common-lisp:cons "outputArtifacts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-result))
      (common-lisp:list
       (common-lisp:cons "executionResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-variables))
      (common-lisp:list
       (common-lisp:cons "outputVariables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          action-execution-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass action-execution-result common-lisp:nil
                       ((external-execution-id :initarg :external-execution-id
                         :initform common-lisp:nil :type
                         (common-lisp:or external-execution-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-action-execution-result-external-execution-id
                         :shape "ExternalExecutionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (external-execution-summary :initarg
                         :external-execution-summary :initform common-lisp:nil
                         :type
                         (common-lisp:or external-execution-summary
                                         common-lisp:null)
                         :accessor
                         struct-shape-action-execution-result-external-execution-summary
                         :shape "ExternalExecutionSummary" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (external-execution-url :initarg
                         :external-execution-url :initform common-lisp:nil
                         :type (common-lisp:or url common-lisp:null) :accessor
                         struct-shape-action-execution-result-external-execution-url
                         :shape "Url" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (error-details :initarg :error-details :initform
                         common-lisp:nil :type
                         (common-lisp:or error-details common-lisp:null)
                         :accessor
                         struct-shape-action-execution-result-error-details
                         :shape "ErrorDetails" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-action-execution-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'action-execution-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'action-execution-result 'make-action-execution-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          action-execution-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          action-execution-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-execution-id))
      (common-lisp:list
       (common-lisp:cons "externalExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-execution-summary))
      (common-lisp:list
       (common-lisp:cons "externalExecutionSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-execution-url))
      (common-lisp:list
       (common-lisp:cons "externalExecutionUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-details))
      (common-lisp:list
       (common-lisp:cons "errorDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          action-execution-result))
   common-lisp:nil))
(common-lisp:deftype action-execution-status () 'common-lisp:string)
(common-lisp:deftype action-execution-token () 'common-lisp:string)
(common-lisp:deftype action-name () 'common-lisp:string)
(common-lisp:deftype action-namespace () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition action-not-found-exception
     (codepipeline-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'action-not-found-exception)))
(common-lisp:deftype action-owner () 'common-lisp:string)
(common-lisp:deftype action-provider () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass action-revision common-lisp:nil
                       ((revision-id :initarg :revision-id :initform
                         (common-lisp:error ":revisionid is required") :type
                         (common-lisp:or revision common-lisp:null) :accessor
                         struct-shape-action-revision-revision-id :shape
                         "Revision" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (revision-change-id :initarg :revision-change-id
                         :initform
                         (common-lisp:error ":revisionchangeid is required")
                         :type
                         (common-lisp:or revision-change-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-action-revision-revision-change-id :shape
                         "RevisionChangeIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created :initarg :created :initform
                         (common-lisp:error ":created is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-action-revision-created :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-action-revision
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'action-revision
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'action-revision 'make-action-revision))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action-revision))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action-revision))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "revisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-change-id))
      (common-lisp:list
       (common-lisp:cons "revisionChangeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created))
      (common-lisp:list
       (common-lisp:cons "created"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action-revision))
   common-lisp:nil))
(common-lisp:deftype action-run-order () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass action-state common-lisp:nil
                       ((action-name :initarg :action-name :initform
                         common-lisp:nil :type
                         (common-lisp:or action-name common-lisp:null)
                         :accessor struct-shape-action-state-action-name :shape
                         "ActionName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (current-revision :initarg :current-revision :initform
                         common-lisp:nil :type
                         (common-lisp:or action-revision common-lisp:null)
                         :accessor struct-shape-action-state-current-revision
                         :shape "ActionRevision" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (latest-execution :initarg :latest-execution :initform
                         common-lisp:nil :type
                         (common-lisp:or action-execution common-lisp:null)
                         :accessor struct-shape-action-state-latest-execution
                         :shape "ActionExecution" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (entity-url :initarg :entity-url :initform
                         common-lisp:nil :type
                         (common-lisp:or url common-lisp:null) :accessor
                         struct-shape-action-state-entity-url :shape "Url"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (revision-url :initarg :revision-url :initform
                         common-lisp:nil :type
                         (common-lisp:or url common-lisp:null) :accessor
                         struct-shape-action-state-revision-url :shape "Url"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-action-state
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'action-state
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'action-state 'make-action-state))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-name))
      (common-lisp:list
       (common-lisp:cons "actionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-revision))
      (common-lisp:list
       (common-lisp:cons "currentRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-execution))
      (common-lisp:list
       (common-lisp:cons "latestExecution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-url))
      (common-lisp:list
       (common-lisp:cons "entityUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-url))
      (common-lisp:list
       (common-lisp:cons "revisionUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action-state))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype action-state-list ()
   '(trivial-types:proper-list action-state))
 (common-lisp:defun make-action-state-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list action-state))
   aws-sdk/generator/shape::members))
(common-lisp:deftype action-timeout () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass action-type common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or action-type-id common-lisp:null)
                         :accessor struct-shape-action-type-id :shape
                         "ActionTypeId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (settings :initarg :settings :initform common-lisp:nil
                         :type
                         (common-lisp:or action-type-settings common-lisp:null)
                         :accessor struct-shape-action-type-settings :shape
                         "ActionTypeSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (action-configuration-properties :initarg
                         :action-configuration-properties :initform
                         common-lisp:nil :type
                         (common-lisp:or action-configuration-property-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-action-type-action-configuration-properties
                         :shape "ActionConfigurationPropertyList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (input-artifact-details :initarg
                         :input-artifact-details :initform
                         (common-lisp:error
                          ":inputartifactdetails is required")
                         :type
                         (common-lisp:or artifact-details common-lisp:null)
                         :accessor
                         struct-shape-action-type-input-artifact-details :shape
                         "ArtifactDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-artifact-details :initarg
                         :output-artifact-details :initform
                         (common-lisp:error
                          ":outputartifactdetails is required")
                         :type
                         (common-lisp:or artifact-details common-lisp:null)
                         :accessor
                         struct-shape-action-type-output-artifact-details
                         :shape "ArtifactDetails" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-action-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'action-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'action-type 'make-action-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'action-configuration-properties))
      (common-lisp:list
       (common-lisp:cons "actionConfigurationProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-artifact-details))
      (common-lisp:list
       (common-lisp:cons "inputArtifactDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-artifact-details))
      (common-lisp:list
       (common-lisp:cons "outputArtifactDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition action-type-already-exists-exception
     (codepipeline-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'action-type-already-exists-exception)))
(common-lisp:progn
 (common-lisp:defclass action-type-artifact-details common-lisp:nil
                       ((minimum-count :initarg :minimum-count :initform
                         (common-lisp:error ":minimumcount is required") :type
                         (common-lisp:or minimum-action-type-artifact-count
                                         common-lisp:null)
                         :accessor
                         struct-shape-action-type-artifact-details-minimum-count
                         :shape "MinimumActionTypeArtifactCount" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (maximum-count :initarg :maximum-count :initform
                         (common-lisp:error ":maximumcount is required") :type
                         (common-lisp:or maximum-action-type-artifact-count
                                         common-lisp:null)
                         :accessor
                         struct-shape-action-type-artifact-details-maximum-count
                         :shape "MaximumActionTypeArtifactCount" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-action-type-artifact-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'action-type-artifact-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'action-type-artifact-details
                    'make-action-type-artifact-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          action-type-artifact-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          action-type-artifact-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimum-count))
      (common-lisp:list
       (common-lisp:cons "minimumCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-count))
      (common-lisp:list
       (common-lisp:cons "maximumCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          action-type-artifact-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass action-type-declaration common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or action-type-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-action-type-declaration-description
                         :shape "ActionTypeDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (executor :initarg :executor :initform
                         (common-lisp:error ":executor is required") :type
                         (common-lisp:or action-type-executor common-lisp:null)
                         :accessor
                         struct-shape-action-type-declaration-executor :shape
                         "ActionTypeExecutor" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or action-type-identifier
                                         common-lisp:null)
                         :accessor struct-shape-action-type-declaration-id
                         :shape "ActionTypeIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (input-artifact-details :initarg
                         :input-artifact-details :initform
                         (common-lisp:error
                          ":inputartifactdetails is required")
                         :type
                         (common-lisp:or action-type-artifact-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-action-type-declaration-input-artifact-details
                         :shape "ActionTypeArtifactDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (output-artifact-details :initarg
                         :output-artifact-details :initform
                         (common-lisp:error
                          ":outputartifactdetails is required")
                         :type
                         (common-lisp:or action-type-artifact-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-action-type-declaration-output-artifact-details
                         :shape "ActionTypeArtifactDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (permissions :initarg :permissions :initform
                         common-lisp:nil :type
                         (common-lisp:or action-type-permissions
                                         common-lisp:null)
                         :accessor
                         struct-shape-action-type-declaration-permissions
                         :shape "ActionTypePermissions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (properties :initarg :properties :initform
                         common-lisp:nil :type
                         (common-lisp:or action-type-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-action-type-declaration-properties :shape
                         "ActionTypeProperties" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (urls :initarg :urls :initform common-lisp:nil :type
                         (common-lisp:or action-type-urls common-lisp:null)
                         :accessor struct-shape-action-type-declaration-urls
                         :shape "ActionTypeUrls" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-action-type-declaration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'action-type-declaration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'action-type-declaration 'make-action-type-declaration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          action-type-declaration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          action-type-declaration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'executor))
      (common-lisp:list
       (common-lisp:cons "executor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-artifact-details))
      (common-lisp:list
       (common-lisp:cons "inputArtifactDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-artifact-details))
      (common-lisp:list
       (common-lisp:cons "outputArtifactDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'properties))
      (common-lisp:list
       (common-lisp:cons "properties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'urls))
      (common-lisp:list
       (common-lisp:cons "urls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          action-type-declaration))
   common-lisp:nil))
(common-lisp:deftype action-type-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass action-type-executor common-lisp:nil
                       ((configuration :initarg :configuration :initform
                         (common-lisp:error ":configuration is required") :type
                         (common-lisp:or executor-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-action-type-executor-configuration :shape
                         "ExecutorConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or executor-type common-lisp:null)
                         :accessor struct-shape-action-type-executor-type
                         :shape "ExecutorType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-statements-template :initarg
                         :policy-statements-template :initform common-lisp:nil
                         :type
                         (common-lisp:or policy-statements-template
                                         common-lisp:null)
                         :accessor
                         struct-shape-action-type-executor-policy-statements-template
                         :shape "PolicyStatementsTemplate" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (job-timeout :initarg :job-timeout :initform
                         common-lisp:nil :type
                         (common-lisp:or job-timeout common-lisp:null)
                         :accessor
                         struct-shape-action-type-executor-job-timeout :shape
                         "JobTimeout" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-action-type-executor
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'action-type-executor
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'action-type-executor 'make-action-type-executor))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action-type-executor))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action-type-executor))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'policy-statements-template))
      (common-lisp:list
       (common-lisp:cons "policyStatementsTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-timeout))
      (common-lisp:list
       (common-lisp:cons "jobTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action-type-executor))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass action-type-id common-lisp:nil
                       ((category :initarg :category :initform
                         (common-lisp:error ":category is required") :type
                         (common-lisp:or action-category common-lisp:null)
                         :accessor struct-shape-action-type-id-category :shape
                         "ActionCategory" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owner :initarg :owner :initform
                         (common-lisp:error ":owner is required") :type
                         (common-lisp:or action-owner common-lisp:null)
                         :accessor struct-shape-action-type-id-owner :shape
                         "ActionOwner" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (provider :initarg :provider :initform
                         (common-lisp:error ":provider is required") :type
                         (common-lisp:or action-provider common-lisp:null)
                         :accessor struct-shape-action-type-id-provider :shape
                         "ActionProvider" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (version :initarg :version :initform
                         (common-lisp:error ":version is required") :type
                         (common-lisp:or version common-lisp:null) :accessor
                         struct-shape-action-type-id-version :shape "Version"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-action-type-id
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'action-type-id
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'action-type-id 'make-action-type-id))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action-type-id))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action-type-id))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action-type-id))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass action-type-identifier common-lisp:nil
                       ((category :initarg :category :initform
                         (common-lisp:error ":category is required") :type
                         (common-lisp:or action-category common-lisp:null)
                         :accessor struct-shape-action-type-identifier-category
                         :shape "ActionCategory" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owner :initarg :owner :initform
                         (common-lisp:error ":owner is required") :type
                         (common-lisp:or action-type-owner common-lisp:null)
                         :accessor struct-shape-action-type-identifier-owner
                         :shape "ActionTypeOwner" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provider :initarg :provider :initform
                         (common-lisp:error ":provider is required") :type
                         (common-lisp:or action-provider common-lisp:null)
                         :accessor struct-shape-action-type-identifier-provider
                         :shape "ActionProvider" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (version :initarg :version :initform
                         (common-lisp:error ":version is required") :type
                         (common-lisp:or version common-lisp:null) :accessor
                         struct-shape-action-type-identifier-version :shape
                         "Version" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-action-type-identifier
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'action-type-identifier
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'action-type-identifier 'make-action-type-identifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          action-type-identifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          action-type-identifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          action-type-identifier))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype action-type-list ()
   '(trivial-types:proper-list action-type))
 (common-lisp:defun make-action-type-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list action-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition action-type-not-found-exception
     (codepipeline-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'action-type-not-found-exception)))
(common-lisp:deftype action-type-owner () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass action-type-permissions common-lisp:nil
                       ((allowed-accounts :initarg :allowed-accounts :initform
                         (common-lisp:error ":allowedaccounts is required")
                         :type
                         (common-lisp:or allowed-accounts common-lisp:null)
                         :accessor
                         struct-shape-action-type-permissions-allowed-accounts
                         :shape "AllowedAccounts" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-action-type-permissions
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'action-type-permissions
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'action-type-permissions 'make-action-type-permissions))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          action-type-permissions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          action-type-permissions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-accounts))
      (common-lisp:list
       (common-lisp:cons "allowedAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          action-type-permissions))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype action-type-properties ()
   '(trivial-types:proper-list action-type-property))
 (common-lisp:defun make-action-type-properties
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list action-type-property))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass action-type-property common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or action-configuration-key
                                         common-lisp:null)
                         :accessor struct-shape-action-type-property-name
                         :shape "ActionConfigurationKey" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (optional :initarg :optional :initform
                         (common-lisp:error ":optional is required") :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-action-type-property-optional :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-action-type-property-key :shape "Boolean"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (no-echo :initarg :no-echo :initform
                         (common-lisp:error ":noecho is required") :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-action-type-property-no-echo :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (queryable :initarg :queryable :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-action-type-property-queryable :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or property-description common-lisp:null)
                         :accessor
                         struct-shape-action-type-property-description :shape
                         "PropertyDescription" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-action-type-property
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'action-type-property
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'action-type-property 'make-action-type-property))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action-type-property))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action-type-property))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'optional))
      (common-lisp:list
       (common-lisp:cons "optional"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'no-echo))
      (common-lisp:list
       (common-lisp:cons "noEcho"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queryable))
      (common-lisp:list
       (common-lisp:cons "queryable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action-type-property))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass action-type-settings common-lisp:nil
                       ((third-party-configuration-url :initarg
                         :third-party-configuration-url :initform
                         common-lisp:nil :type
                         (common-lisp:or url common-lisp:null) :accessor
                         struct-shape-action-type-settings-third-party-configuration-url
                         :shape "Url" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (entity-url-template :initarg :entity-url-template
                         :initform common-lisp:nil :type
                         (common-lisp:or url-template common-lisp:null)
                         :accessor
                         struct-shape-action-type-settings-entity-url-template
                         :shape "UrlTemplate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (execution-url-template :initarg
                         :execution-url-template :initform common-lisp:nil
                         :type (common-lisp:or url-template common-lisp:null)
                         :accessor
                         struct-shape-action-type-settings-execution-url-template
                         :shape "UrlTemplate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (revision-url-template :initarg :revision-url-template
                         :initform common-lisp:nil :type
                         (common-lisp:or url-template common-lisp:null)
                         :accessor
                         struct-shape-action-type-settings-revision-url-template
                         :shape "UrlTemplate" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-action-type-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'action-type-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'action-type-settings 'make-action-type-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action-type-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action-type-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'third-party-configuration-url))
      (common-lisp:list
       (common-lisp:cons "thirdPartyConfigurationUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-url-template))
      (common-lisp:list
       (common-lisp:cons "entityUrlTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execution-url-template))
      (common-lisp:list
       (common-lisp:cons "executionUrlTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'revision-url-template))
      (common-lisp:list
       (common-lisp:cons "revisionUrlTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action-type-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass action-type-urls common-lisp:nil
                       ((configuration-url :initarg :configuration-url
                         :initform common-lisp:nil :type
                         (common-lisp:or url common-lisp:null) :accessor
                         struct-shape-action-type-urls-configuration-url :shape
                         "Url" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (entity-url-template :initarg :entity-url-template
                         :initform common-lisp:nil :type
                         (common-lisp:or url-template common-lisp:null)
                         :accessor
                         struct-shape-action-type-urls-entity-url-template
                         :shape "UrlTemplate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (execution-url-template :initarg
                         :execution-url-template :initform common-lisp:nil
                         :type (common-lisp:or url-template common-lisp:null)
                         :accessor
                         struct-shape-action-type-urls-execution-url-template
                         :shape "UrlTemplate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (revision-url-template :initarg :revision-url-template
                         :initform common-lisp:nil :type
                         (common-lisp:or url-template common-lisp:null)
                         :accessor
                         struct-shape-action-type-urls-revision-url-template
                         :shape "UrlTemplate" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-action-type-urls
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'action-type-urls
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'action-type-urls 'make-action-type-urls))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action-type-urls))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action-type-urls))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-url))
      (common-lisp:list
       (common-lisp:cons "configurationUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-url-template))
      (common-lisp:list
       (common-lisp:cons "entityUrlTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execution-url-template))
      (common-lisp:list
       (common-lisp:cons "executionUrlTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'revision-url-template))
      (common-lisp:list
       (common-lisp:cons "revisionUrlTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action-type-urls))
   common-lisp:nil))
(common-lisp:deftype allowed-account () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype allowed-accounts ()
   '(trivial-types:proper-list allowed-account))
 (common-lisp:defun make-allowed-accounts
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list allowed-account))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition approval-already-completed-exception
     (codepipeline-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'approval-already-completed-exception)))
(common-lisp:progn
 (common-lisp:defclass approval-result common-lisp:nil
                       ((summary :initarg :summary :initform
                         (common-lisp:error ":summary is required") :type
                         (common-lisp:or approval-summary common-lisp:null)
                         :accessor struct-shape-approval-result-summary :shape
                         "ApprovalSummary" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or approval-status common-lisp:null)
                         :accessor struct-shape-approval-result-status :shape
                         "ApprovalStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-approval-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'approval-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'approval-result 'make-approval-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input approval-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input approval-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summary))
      (common-lisp:list
       (common-lisp:cons "summary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input approval-result))
   common-lisp:nil))
(common-lisp:deftype approval-status () 'common-lisp:string)
(common-lisp:deftype approval-summary () 'common-lisp:string)
(common-lisp:deftype approval-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass artifact common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or artifact-name common-lisp:null)
                         :accessor struct-shape-artifact-name :shape
                         "ArtifactName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (revision :initarg :revision :initform common-lisp:nil
                         :type (common-lisp:or revision common-lisp:null)
                         :accessor struct-shape-artifact-revision :shape
                         "Revision" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (location :initarg :location :initform common-lisp:nil
                         :type
                         (common-lisp:or artifact-location common-lisp:null)
                         :accessor struct-shape-artifact-location :shape
                         "ArtifactLocation" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-artifact
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'artifact
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'artifact 'make-artifact))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input artifact))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input artifact))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input artifact))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass artifact-detail common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or artifact-name common-lisp:null)
                         :accessor struct-shape-artifact-detail-name :shape
                         "ArtifactName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3location :initarg :s3location :initform
                         common-lisp:nil :type
                         (common-lisp:or s3location common-lisp:null) :accessor
                         struct-shape-artifact-detail-s3location :shape
                         "S3Location" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-artifact-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'artifact-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'artifact-detail 'make-artifact-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input artifact-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input artifact-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3location))
      (common-lisp:list
       (common-lisp:cons "s3location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input artifact-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype artifact-detail-list ()
   '(trivial-types:proper-list artifact-detail))
 (common-lisp:defun make-artifact-detail-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list artifact-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass artifact-details common-lisp:nil
                       ((minimum-count :initarg :minimum-count :initform
                         (common-lisp:error ":minimumcount is required") :type
                         (common-lisp:or minimum-artifact-count
                                         common-lisp:null)
                         :accessor struct-shape-artifact-details-minimum-count
                         :shape "MinimumArtifactCount" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (maximum-count :initarg :maximum-count :initform
                         (common-lisp:error ":maximumcount is required") :type
                         (common-lisp:or maximum-artifact-count
                                         common-lisp:null)
                         :accessor struct-shape-artifact-details-maximum-count
                         :shape "MaximumArtifactCount" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-artifact-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'artifact-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'artifact-details 'make-artifact-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input artifact-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input artifact-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimum-count))
      (common-lisp:list
       (common-lisp:cons "minimumCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-count))
      (common-lisp:list
       (common-lisp:cons "maximumCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input artifact-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype artifact-list () '(trivial-types:proper-list artifact))
 (common-lisp:defun make-artifact-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list artifact))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass artifact-location common-lisp:nil
                       ((type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or artifact-location-type
                                         common-lisp:null)
                         :accessor struct-shape-artifact-location-type :shape
                         "ArtifactLocationType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3location :initarg :s3location :initform
                         common-lisp:nil :type
                         (common-lisp:or s3artifact-location common-lisp:null)
                         :accessor struct-shape-artifact-location-s3location
                         :shape "S3ArtifactLocation" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-artifact-location
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'artifact-location
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'artifact-location 'make-artifact-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input artifact-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input artifact-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3location))
      (common-lisp:list
       (common-lisp:cons "s3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input artifact-location))
   common-lisp:nil))
(common-lisp:deftype artifact-location-type () 'common-lisp:string)
(common-lisp:deftype artifact-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass artifact-revision common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or artifact-name common-lisp:null)
                         :accessor struct-shape-artifact-revision-name :shape
                         "ArtifactName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (revision-id :initarg :revision-id :initform
                         common-lisp:nil :type
                         (common-lisp:or revision common-lisp:null) :accessor
                         struct-shape-artifact-revision-revision-id :shape
                         "Revision" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (revision-change-identifier :initarg
                         :revision-change-identifier :initform common-lisp:nil
                         :type
                         (common-lisp:or revision-change-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-artifact-revision-revision-change-identifier
                         :shape "RevisionChangeIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (revision-summary :initarg :revision-summary :initform
                         common-lisp:nil :type
                         (common-lisp:or revision-summary common-lisp:null)
                         :accessor
                         struct-shape-artifact-revision-revision-summary :shape
                         "RevisionSummary" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created :initarg :created :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor struct-shape-artifact-revision-created
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (revision-url :initarg :revision-url :initform
                         common-lisp:nil :type
                         (common-lisp:or url common-lisp:null) :accessor
                         struct-shape-artifact-revision-revision-url :shape
                         "Url" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-artifact-revision
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'artifact-revision
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'artifact-revision 'make-artifact-revision))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input artifact-revision))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input artifact-revision))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "revisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'revision-change-identifier))
      (common-lisp:list
       (common-lisp:cons "revisionChangeIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-summary))
      (common-lisp:list
       (common-lisp:cons "revisionSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created))
      (common-lisp:list
       (common-lisp:cons "created"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-url))
      (common-lisp:list
       (common-lisp:cons "revisionUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input artifact-revision))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype artifact-revision-list ()
   '(trivial-types:proper-list artifact-revision))
 (common-lisp:defun make-artifact-revision-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list artifact-revision))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass artifact-store common-lisp:nil
                       ((type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or artifact-store-type common-lisp:null)
                         :accessor struct-shape-artifact-store-type :shape
                         "ArtifactStoreType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (location :initarg :location :initform
                         (common-lisp:error ":location is required") :type
                         (common-lisp:or artifact-store-location
                                         common-lisp:null)
                         :accessor struct-shape-artifact-store-location :shape
                         "ArtifactStoreLocation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encryption-key :initarg :encryption-key :initform
                         common-lisp:nil :type
                         (common-lisp:or encryption-key common-lisp:null)
                         :accessor struct-shape-artifact-store-encryption-key
                         :shape "EncryptionKey" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-artifact-store
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'artifact-store
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'artifact-store 'make-artifact-store))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input artifact-store))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input artifact-store))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key))
      (common-lisp:list
       (common-lisp:cons "encryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input artifact-store))
   common-lisp:nil))
(common-lisp:deftype artifact-store-location () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype artifact-store-map () 'common-lisp:hash-table)
 (common-lisp:defun make-artifact-store-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype artifact-store-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass blocker-declaration common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or blocker-name common-lisp:null)
                         :accessor struct-shape-blocker-declaration-name :shape
                         "BlockerName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or blocker-type common-lisp:null)
                         :accessor struct-shape-blocker-declaration-type :shape
                         "BlockerType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-blocker-declaration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'blocker-declaration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'blocker-declaration 'make-blocker-declaration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input blocker-declaration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input blocker-declaration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input blocker-declaration))
   common-lisp:nil))
(common-lisp:deftype blocker-name () 'common-lisp:string)
(common-lisp:deftype blocker-type () 'common-lisp:string)
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype client-id () 'common-lisp:string)
(common-lisp:deftype client-request-token () 'common-lisp:string)
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:deftype code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition concurrent-modification-exception
     (codepipeline-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       concurrent-modification-exception-message)))
 (common-lisp:export
  (common-lisp:list 'concurrent-modification-exception
                    'concurrent-modification-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition concurrent-pipeline-executions-limit-exceeded-exception
     (codepipeline-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       concurrent-pipeline-executions-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'concurrent-pipeline-executions-limit-exceeded-exception
                    'concurrent-pipeline-executions-limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (codepipeline-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:deftype continuation-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-custom-action-type-input common-lisp:nil
                       ((category :initarg :category :initform
                         (common-lisp:error ":category is required") :type
                         (common-lisp:or action-category common-lisp:null)
                         :accessor
                         struct-shape-create-custom-action-type-input-category
                         :shape "ActionCategory" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provider :initarg :provider :initform
                         (common-lisp:error ":provider is required") :type
                         (common-lisp:or action-provider common-lisp:null)
                         :accessor
                         struct-shape-create-custom-action-type-input-provider
                         :shape "ActionProvider" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (version :initarg :version :initform
                         (common-lisp:error ":version is required") :type
                         (common-lisp:or version common-lisp:null) :accessor
                         struct-shape-create-custom-action-type-input-version
                         :shape "Version" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (settings :initarg :settings :initform common-lisp:nil
                         :type
                         (common-lisp:or action-type-settings common-lisp:null)
                         :accessor
                         struct-shape-create-custom-action-type-input-settings
                         :shape "ActionTypeSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (configuration-properties :initarg
                         :configuration-properties :initform common-lisp:nil
                         :type
                         (common-lisp:or action-configuration-property-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-custom-action-type-input-configuration-properties
                         :shape "ActionConfigurationPropertyList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (input-artifact-details :initarg
                         :input-artifact-details :initform
                         (common-lisp:error
                          ":inputartifactdetails is required")
                         :type
                         (common-lisp:or artifact-details common-lisp:null)
                         :accessor
                         struct-shape-create-custom-action-type-input-input-artifact-details
                         :shape "ArtifactDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-artifact-details :initarg
                         :output-artifact-details :initform
                         (common-lisp:error
                          ":outputartifactdetails is required")
                         :type
                         (common-lisp:or artifact-details common-lisp:null)
                         :accessor
                         struct-shape-create-custom-action-type-input-output-artifact-details
                         :shape "ArtifactDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-custom-action-type-input-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-custom-action-type-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-custom-action-type-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-custom-action-type-input
                    'make-create-custom-action-type-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-action-type-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-action-type-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-properties))
      (common-lisp:list
       (common-lisp:cons "configurationProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-artifact-details))
      (common-lisp:list
       (common-lisp:cons "inputArtifactDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-artifact-details))
      (common-lisp:list
       (common-lisp:cons "outputArtifactDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-action-type-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-custom-action-type-output common-lisp:nil
                       ((action-type :initarg :action-type :initform
                         (common-lisp:error ":actiontype is required") :type
                         (common-lisp:or action-type common-lisp:null)
                         :accessor
                         struct-shape-create-custom-action-type-output-action-type
                         :shape "ActionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-custom-action-type-output-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-custom-action-type-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-custom-action-type-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-custom-action-type-output
                    'make-create-custom-action-type-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-action-type-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-action-type-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-type))
      (common-lisp:list
       (common-lisp:cons "actionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-action-type-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-pipeline-input common-lisp:nil
                       ((pipeline :initarg :pipeline :initform
                         (common-lisp:error ":pipeline is required") :type
                         (common-lisp:or pipeline-declaration common-lisp:null)
                         :accessor struct-shape-create-pipeline-input-pipeline
                         :shape "PipelineDeclaration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-pipeline-input-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-pipeline-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-pipeline-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-pipeline-input 'make-create-pipeline-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-pipeline-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-pipeline-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline))
      (common-lisp:list
       (common-lisp:cons "pipeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-pipeline-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-pipeline-output common-lisp:nil
                       ((pipeline :initarg :pipeline :initform common-lisp:nil
                         :type
                         (common-lisp:or pipeline-declaration common-lisp:null)
                         :accessor struct-shape-create-pipeline-output-pipeline
                         :shape "PipelineDeclaration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-pipeline-output-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-pipeline-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-pipeline-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-pipeline-output 'make-create-pipeline-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-pipeline-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-pipeline-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline))
      (common-lisp:list
       (common-lisp:cons "pipeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-pipeline-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass current-revision common-lisp:nil
                       ((revision :initarg :revision :initform
                         (common-lisp:error ":revision is required") :type
                         (common-lisp:or revision common-lisp:null) :accessor
                         struct-shape-current-revision-revision :shape
                         "Revision" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (change-identifier :initarg :change-identifier
                         :initform
                         (common-lisp:error ":changeidentifier is required")
                         :type
                         (common-lisp:or revision-change-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-current-revision-change-identifier :shape
                         "RevisionChangeIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created :initarg :created :initform common-lisp:nil
                         :type (common-lisp:or time common-lisp:null) :accessor
                         struct-shape-current-revision-created :shape "Time"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (revision-summary :initarg :revision-summary :initform
                         common-lisp:nil :type
                         (common-lisp:or revision-summary common-lisp:null)
                         :accessor
                         struct-shape-current-revision-revision-summary :shape
                         "RevisionSummary" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-current-revision
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'current-revision
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'current-revision 'make-current-revision))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input current-revision))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input current-revision))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-identifier))
      (common-lisp:list
       (common-lisp:cons "changeIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created))
      (common-lisp:list
       (common-lisp:cons "created"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-summary))
      (common-lisp:list
       (common-lisp:cons "revisionSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input current-revision))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-custom-action-type-input common-lisp:nil
                       ((category :initarg :category :initform
                         (common-lisp:error ":category is required") :type
                         (common-lisp:or action-category common-lisp:null)
                         :accessor
                         struct-shape-delete-custom-action-type-input-category
                         :shape "ActionCategory" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provider :initarg :provider :initform
                         (common-lisp:error ":provider is required") :type
                         (common-lisp:or action-provider common-lisp:null)
                         :accessor
                         struct-shape-delete-custom-action-type-input-provider
                         :shape "ActionProvider" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (version :initarg :version :initform
                         (common-lisp:error ":version is required") :type
                         (common-lisp:or version common-lisp:null) :accessor
                         struct-shape-delete-custom-action-type-input-version
                         :shape "Version" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-custom-action-type-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-custom-action-type-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-custom-action-type-input
                    'make-delete-custom-action-type-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-action-type-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-action-type-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-action-type-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-pipeline-input common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or pipeline-name common-lisp:null)
                         :accessor struct-shape-delete-pipeline-input-name
                         :shape "PipelineName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-pipeline-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-pipeline-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-pipeline-input 'make-delete-pipeline-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-pipeline-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-pipeline-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-pipeline-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-webhook-input common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or webhook-name common-lisp:null)
                         :accessor struct-shape-delete-webhook-input-name
                         :shape "WebhookName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-webhook-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-webhook-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-webhook-input 'make-delete-webhook-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-webhook-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-webhook-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-webhook-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-webhook-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-webhook-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-webhook-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-webhook-output 'make-delete-webhook-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-webhook-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-webhook-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-webhook-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-webhook-with-third-party-input
                       common-lisp:nil
                       ((webhook-name :initarg :webhook-name :initform
                         common-lisp:nil :type
                         (common-lisp:or webhook-name common-lisp:null)
                         :accessor
                         struct-shape-deregister-webhook-with-third-party-input-webhook-name
                         :shape "WebhookName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deregister-webhook-with-third-party-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'deregister-webhook-with-third-party-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deregister-webhook-with-third-party-input
                    'make-deregister-webhook-with-third-party-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-webhook-with-third-party-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-webhook-with-third-party-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'webhook-name))
      (common-lisp:list
       (common-lisp:cons "webhookName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-webhook-with-third-party-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-webhook-with-third-party-output
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deregister-webhook-with-third-party-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'deregister-webhook-with-third-party-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deregister-webhook-with-third-party-output
                    'make-deregister-webhook-with-third-party-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-webhook-with-third-party-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-webhook-with-third-party-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-webhook-with-third-party-output))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass disable-stage-transition-input common-lisp:nil
                       ((pipeline-name :initarg :pipeline-name :initform
                         (common-lisp:error ":pipelinename is required") :type
                         (common-lisp:or pipeline-name common-lisp:null)
                         :accessor
                         struct-shape-disable-stage-transition-input-pipeline-name
                         :shape "PipelineName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stage-name :initarg :stage-name :initform
                         (common-lisp:error ":stagename is required") :type
                         (common-lisp:or stage-name common-lisp:null) :accessor
                         struct-shape-disable-stage-transition-input-stage-name
                         :shape "StageName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transition-type :initarg :transition-type :initform
                         (common-lisp:error ":transitiontype is required")
                         :type
                         (common-lisp:or stage-transition-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-disable-stage-transition-input-transition-type
                         :shape "StageTransitionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reason :initarg :reason :initform
                         (common-lisp:error ":reason is required") :type
                         (common-lisp:or disabled-reason common-lisp:null)
                         :accessor
                         struct-shape-disable-stage-transition-input-reason
                         :shape "DisabledReason" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disable-stage-transition-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disable-stage-transition-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disable-stage-transition-input
                    'make-disable-stage-transition-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-stage-transition-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-stage-transition-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-name))
      (common-lisp:list
       (common-lisp:cons "pipelineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stage-name))
      (common-lisp:list
       (common-lisp:cons "stageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transition-type))
      (common-lisp:list
       (common-lisp:cons "transitionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-stage-transition-input))
   common-lisp:nil))
(common-lisp:deftype disabled-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition duplicated-stop-request-exception
     (codepipeline-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       duplicated-stop-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'duplicated-stop-request-exception
                    'duplicated-stop-request-exception-message)))
(common-lisp:progn
 (common-lisp:defclass enable-stage-transition-input common-lisp:nil
                       ((pipeline-name :initarg :pipeline-name :initform
                         (common-lisp:error ":pipelinename is required") :type
                         (common-lisp:or pipeline-name common-lisp:null)
                         :accessor
                         struct-shape-enable-stage-transition-input-pipeline-name
                         :shape "PipelineName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stage-name :initarg :stage-name :initform
                         (common-lisp:error ":stagename is required") :type
                         (common-lisp:or stage-name common-lisp:null) :accessor
                         struct-shape-enable-stage-transition-input-stage-name
                         :shape "StageName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transition-type :initarg :transition-type :initform
                         (common-lisp:error ":transitiontype is required")
                         :type
                         (common-lisp:or stage-transition-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-enable-stage-transition-input-transition-type
                         :shape "StageTransitionType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-enable-stage-transition-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'enable-stage-transition-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'enable-stage-transition-input
                    'make-enable-stage-transition-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-stage-transition-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-stage-transition-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-name))
      (common-lisp:list
       (common-lisp:cons "pipelineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stage-name))
      (common-lisp:list
       (common-lisp:cons "stageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transition-type))
      (common-lisp:list
       (common-lisp:cons "transitionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-stage-transition-input))
   common-lisp:nil))
(common-lisp:deftype enabled () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass encryption-key common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or encryption-key-id common-lisp:null)
                         :accessor struct-shape-encryption-key-id :shape
                         "EncryptionKeyId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or encryption-key-type common-lisp:null)
                         :accessor struct-shape-encryption-key-type :shape
                         "EncryptionKeyType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-encryption-key
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'encryption-key
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'encryption-key 'make-encryption-key))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input encryption-key))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input encryption-key))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input encryption-key))
   common-lisp:nil))
(common-lisp:deftype encryption-key-id () 'common-lisp:string)
(common-lisp:deftype encryption-key-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass error-details common-lisp:nil
                       ((code :initarg :code :initform common-lisp:nil :type
                         (common-lisp:or code common-lisp:null) :accessor
                         struct-shape-error-details-code :shape "Code"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or message common-lisp:null)
                         :accessor struct-shape-error-details-message :shape
                         "Message" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-error-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'error-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'error-details 'make-error-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input error-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input error-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input error-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass execution-details common-lisp:nil
                       ((summary :initarg :summary :initform common-lisp:nil
                         :type
                         (common-lisp:or execution-summary common-lisp:null)
                         :accessor struct-shape-execution-details-summary
                         :shape "ExecutionSummary" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (external-execution-id :initarg :external-execution-id
                         :initform common-lisp:nil :type
                         (common-lisp:or execution-id common-lisp:null)
                         :accessor
                         struct-shape-execution-details-external-execution-id
                         :shape "ExecutionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (percent-complete :initarg :percent-complete :initform
                         common-lisp:nil :type
                         (common-lisp:or percentage common-lisp:null) :accessor
                         struct-shape-execution-details-percent-complete :shape
                         "Percentage" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-execution-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'execution-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'execution-details 'make-execution-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input execution-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input execution-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summary))
      (common-lisp:list
       (common-lisp:cons "summary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-execution-id))
      (common-lisp:list
       (common-lisp:cons "externalExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percent-complete))
      (common-lisp:list
       (common-lisp:cons "percentComplete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input execution-details))
   common-lisp:nil))
(common-lisp:deftype execution-id () 'common-lisp:string)
(common-lisp:deftype execution-mode () 'common-lisp:string)
(common-lisp:deftype execution-summary () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass execution-trigger common-lisp:nil
                       ((trigger-type :initarg :trigger-type :initform
                         common-lisp:nil :type
                         (common-lisp:or trigger-type common-lisp:null)
                         :accessor struct-shape-execution-trigger-trigger-type
                         :shape "TriggerType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (trigger-detail :initarg :trigger-detail :initform
                         common-lisp:nil :type
                         (common-lisp:or trigger-detail common-lisp:null)
                         :accessor
                         struct-shape-execution-trigger-trigger-detail :shape
                         "TriggerDetail" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-execution-trigger
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'execution-trigger
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'execution-trigger 'make-execution-trigger))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input execution-trigger))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input execution-trigger))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trigger-type))
      (common-lisp:list
       (common-lisp:cons "triggerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trigger-detail))
      (common-lisp:list
       (common-lisp:cons "triggerDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input execution-trigger))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass executor-configuration common-lisp:nil
                       ((lambda-executor-configuration :initarg
                         :lambda-executor-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or lambda-executor-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-executor-configuration-lambda-executor-configuration
                         :shape "LambdaExecutorConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (job-worker-executor-configuration :initarg
                         :job-worker-executor-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or job-worker-executor-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-executor-configuration-job-worker-executor-configuration
                         :shape "JobWorkerExecutorConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-executor-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'executor-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'executor-configuration 'make-executor-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          executor-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          executor-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-executor-configuration))
      (common-lisp:list
       (common-lisp:cons "lambdaExecutorConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'job-worker-executor-configuration))
      (common-lisp:list
       (common-lisp:cons "jobWorkerExecutorConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          executor-configuration))
   common-lisp:nil))
(common-lisp:deftype executor-type () 'common-lisp:string)
(common-lisp:deftype external-execution-id () 'common-lisp:string)
(common-lisp:deftype external-execution-summary () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass failure-details common-lisp:nil
                       ((type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or failure-type common-lisp:null)
                         :accessor struct-shape-failure-details-type :shape
                         "FailureType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message :initarg :message :initform
                         (common-lisp:error ":message is required") :type
                         (common-lisp:or message common-lisp:null) :accessor
                         struct-shape-failure-details-message :shape "Message"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (external-execution-id :initarg :external-execution-id
                         :initform common-lisp:nil :type
                         (common-lisp:or execution-id common-lisp:null)
                         :accessor
                         struct-shape-failure-details-external-execution-id
                         :shape "ExecutionId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-failure-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'failure-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'failure-details 'make-failure-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input failure-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input failure-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-execution-id))
      (common-lisp:list
       (common-lisp:cons "externalExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input failure-details))
   common-lisp:nil))
(common-lisp:deftype failure-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-action-type-input common-lisp:nil
                       ((category :initarg :category :initform
                         (common-lisp:error ":category is required") :type
                         (common-lisp:or action-category common-lisp:null)
                         :accessor struct-shape-get-action-type-input-category
                         :shape "ActionCategory" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owner :initarg :owner :initform
                         (common-lisp:error ":owner is required") :type
                         (common-lisp:or action-type-owner common-lisp:null)
                         :accessor struct-shape-get-action-type-input-owner
                         :shape "ActionTypeOwner" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provider :initarg :provider :initform
                         (common-lisp:error ":provider is required") :type
                         (common-lisp:or action-provider common-lisp:null)
                         :accessor struct-shape-get-action-type-input-provider
                         :shape "ActionProvider" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (version :initarg :version :initform
                         (common-lisp:error ":version is required") :type
                         (common-lisp:or version common-lisp:null) :accessor
                         struct-shape-get-action-type-input-version :shape
                         "Version" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-action-type-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-action-type-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-action-type-input 'make-get-action-type-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-action-type-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-action-type-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-action-type-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-action-type-output common-lisp:nil
                       ((action-type :initarg :action-type :initform
                         common-lisp:nil :type
                         (common-lisp:or action-type-declaration
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-action-type-output-action-type :shape
                         "ActionTypeDeclaration" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-action-type-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-action-type-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-action-type-output 'make-get-action-type-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-action-type-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-action-type-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-type))
      (common-lisp:list
       (common-lisp:cons "actionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-action-type-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-job-details-input common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":jobid is required") :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-get-job-details-input-job-id :shape
                         "JobId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-job-details-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-job-details-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-job-details-input 'make-get-job-details-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-job-details-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-job-details-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-job-details-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-job-details-output common-lisp:nil
                       ((job-details :initarg :job-details :initform
                         common-lisp:nil :type
                         (common-lisp:or job-details common-lisp:null)
                         :accessor
                         struct-shape-get-job-details-output-job-details :shape
                         "JobDetails" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-job-details-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-job-details-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-job-details-output 'make-get-job-details-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-job-details-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-job-details-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-details))
      (common-lisp:list
       (common-lisp:cons "jobDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-job-details-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-pipeline-execution-input common-lisp:nil
                       ((pipeline-name :initarg :pipeline-name :initform
                         (common-lisp:error ":pipelinename is required") :type
                         (common-lisp:or pipeline-name common-lisp:null)
                         :accessor
                         struct-shape-get-pipeline-execution-input-pipeline-name
                         :shape "PipelineName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pipeline-execution-id :initarg :pipeline-execution-id
                         :initform
                         (common-lisp:error ":pipelineexecutionid is required")
                         :type
                         (common-lisp:or pipeline-execution-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-pipeline-execution-input-pipeline-execution-id
                         :shape "PipelineExecutionId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-pipeline-execution-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-pipeline-execution-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-pipeline-execution-input
                    'make-get-pipeline-execution-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-pipeline-execution-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-pipeline-execution-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-name))
      (common-lisp:list
       (common-lisp:cons "pipelineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-id))
      (common-lisp:list
       (common-lisp:cons "pipelineExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-pipeline-execution-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-pipeline-execution-output common-lisp:nil
                       ((pipeline-execution :initarg :pipeline-execution
                         :initform common-lisp:nil :type
                         (common-lisp:or pipeline-execution common-lisp:null)
                         :accessor
                         struct-shape-get-pipeline-execution-output-pipeline-execution
                         :shape "PipelineExecution" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-pipeline-execution-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-pipeline-execution-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-pipeline-execution-output
                    'make-get-pipeline-execution-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-pipeline-execution-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-pipeline-execution-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-execution))
      (common-lisp:list
       (common-lisp:cons "pipelineExecution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-pipeline-execution-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-pipeline-input common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or pipeline-name common-lisp:null)
                         :accessor struct-shape-get-pipeline-input-name :shape
                         "PipelineName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (version :initarg :version :initform common-lisp:nil
                         :type
                         (common-lisp:or pipeline-version common-lisp:null)
                         :accessor struct-shape-get-pipeline-input-version
                         :shape "PipelineVersion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-pipeline-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-pipeline-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-pipeline-input 'make-get-pipeline-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-pipeline-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-pipeline-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-pipeline-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-pipeline-output common-lisp:nil
                       ((pipeline :initarg :pipeline :initform common-lisp:nil
                         :type
                         (common-lisp:or pipeline-declaration common-lisp:null)
                         :accessor struct-shape-get-pipeline-output-pipeline
                         :shape "PipelineDeclaration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metadata :initarg :metadata :initform common-lisp:nil
                         :type
                         (common-lisp:or pipeline-metadata common-lisp:null)
                         :accessor struct-shape-get-pipeline-output-metadata
                         :shape "PipelineMetadata" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-pipeline-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-pipeline-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-pipeline-output 'make-get-pipeline-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-pipeline-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-pipeline-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline))
      (common-lisp:list
       (common-lisp:cons "pipeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-pipeline-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-pipeline-state-input common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or pipeline-name common-lisp:null)
                         :accessor struct-shape-get-pipeline-state-input-name
                         :shape "PipelineName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-pipeline-state-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-pipeline-state-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-pipeline-state-input 'make-get-pipeline-state-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-pipeline-state-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-pipeline-state-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-pipeline-state-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-pipeline-state-output common-lisp:nil
                       ((pipeline-name :initarg :pipeline-name :initform
                         common-lisp:nil :type
                         (common-lisp:or pipeline-name common-lisp:null)
                         :accessor
                         struct-shape-get-pipeline-state-output-pipeline-name
                         :shape "PipelineName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pipeline-version :initarg :pipeline-version :initform
                         common-lisp:nil :type
                         (common-lisp:or pipeline-version common-lisp:null)
                         :accessor
                         struct-shape-get-pipeline-state-output-pipeline-version
                         :shape "PipelineVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stage-states :initarg :stage-states :initform
                         common-lisp:nil :type
                         (common-lisp:or stage-state-list common-lisp:null)
                         :accessor
                         struct-shape-get-pipeline-state-output-stage-states
                         :shape "StageStateList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created :initarg :created :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-get-pipeline-state-output-created :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated :initarg :updated :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-get-pipeline-state-output-updated :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-pipeline-state-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-pipeline-state-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-pipeline-state-output
                    'make-get-pipeline-state-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-pipeline-state-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-pipeline-state-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-name))
      (common-lisp:list
       (common-lisp:cons "pipelineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-version))
      (common-lisp:list
       (common-lisp:cons "pipelineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stage-states))
      (common-lisp:list
       (common-lisp:cons "stageStates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created))
      (common-lisp:list
       (common-lisp:cons "created"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated))
      (common-lisp:list
       (common-lisp:cons "updated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-pipeline-state-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-third-party-job-details-input common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":jobid is required") :type
                         (common-lisp:or third-party-job-id common-lisp:null)
                         :accessor
                         struct-shape-get-third-party-job-details-input-job-id
                         :shape "ThirdPartyJobId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         (common-lisp:error ":clienttoken is required") :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-get-third-party-job-details-input-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-third-party-job-details-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-third-party-job-details-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-third-party-job-details-input
                    'make-get-third-party-job-details-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-third-party-job-details-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-third-party-job-details-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-third-party-job-details-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-third-party-job-details-output common-lisp:nil
                       ((job-details :initarg :job-details :initform
                         common-lisp:nil :type
                         (common-lisp:or third-party-job-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-third-party-job-details-output-job-details
                         :shape "ThirdPartyJobDetails" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-third-party-job-details-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-third-party-job-details-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-third-party-job-details-output
                    'make-get-third-party-job-details-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-third-party-job-details-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-third-party-job-details-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-details))
      (common-lisp:list
       (common-lisp:cons "jobDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-third-party-job-details-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass git-branch-filter-criteria common-lisp:nil
                       ((includes :initarg :includes :initform common-lisp:nil
                         :type
                         (common-lisp:or git-branch-pattern-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-git-branch-filter-criteria-includes
                         :shape "GitBranchPatternList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (excludes :initarg :excludes :initform common-lisp:nil
                         :type
                         (common-lisp:or git-branch-pattern-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-git-branch-filter-criteria-excludes
                         :shape "GitBranchPatternList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-git-branch-filter-criteria
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'git-branch-filter-criteria
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'git-branch-filter-criteria
                    'make-git-branch-filter-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          git-branch-filter-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          git-branch-filter-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'includes))
      (common-lisp:list
       (common-lisp:cons "includes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'excludes))
      (common-lisp:list
       (common-lisp:cons "excludes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          git-branch-filter-criteria))
   common-lisp:nil))
(common-lisp:deftype git-branch-name-pattern () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype git-branch-pattern-list ()
   '(trivial-types:proper-list git-branch-name-pattern))
 (common-lisp:defun make-git-branch-pattern-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list git-branch-name-pattern))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass git-configuration common-lisp:nil
                       ((source-action-name :initarg :source-action-name
                         :initform
                         (common-lisp:error ":sourceactionname is required")
                         :type (common-lisp:or action-name common-lisp:null)
                         :accessor
                         struct-shape-git-configuration-source-action-name
                         :shape "ActionName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (push :initarg :push :initform common-lisp:nil :type
                         (common-lisp:or git-push-filter-list common-lisp:null)
                         :accessor struct-shape-git-configuration-push :shape
                         "GitPushFilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pull-request :initarg :pull-request :initform
                         common-lisp:nil :type
                         (common-lisp:or git-pull-request-filter-list
                                         common-lisp:null)
                         :accessor struct-shape-git-configuration-pull-request
                         :shape "GitPullRequestFilterList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-git-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'git-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'git-configuration 'make-git-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input git-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input git-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-action-name))
      (common-lisp:list
       (common-lisp:cons "sourceActionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'push))
      (common-lisp:list
       (common-lisp:cons "push"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pull-request))
      (common-lisp:list
       (common-lisp:cons "pullRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input git-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass git-file-path-filter-criteria common-lisp:nil
                       ((includes :initarg :includes :initform common-lisp:nil
                         :type
                         (common-lisp:or git-file-path-pattern-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-git-file-path-filter-criteria-includes
                         :shape "GitFilePathPatternList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (excludes :initarg :excludes :initform common-lisp:nil
                         :type
                         (common-lisp:or git-file-path-pattern-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-git-file-path-filter-criteria-excludes
                         :shape "GitFilePathPatternList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-git-file-path-filter-criteria
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'git-file-path-filter-criteria
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'git-file-path-filter-criteria
                    'make-git-file-path-filter-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          git-file-path-filter-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          git-file-path-filter-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'includes))
      (common-lisp:list
       (common-lisp:cons "includes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'excludes))
      (common-lisp:list
       (common-lisp:cons "excludes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          git-file-path-filter-criteria))
   common-lisp:nil))
(common-lisp:deftype git-file-path-pattern () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype git-file-path-pattern-list ()
   '(trivial-types:proper-list git-file-path-pattern))
 (common-lisp:defun make-git-file-path-pattern-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list git-file-path-pattern))
   aws-sdk/generator/shape::members))
(common-lisp:deftype git-pull-request-event-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype git-pull-request-event-type-list ()
   '(trivial-types:proper-list git-pull-request-event-type))
 (common-lisp:defun make-git-pull-request-event-type-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            git-pull-request-event-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass git-pull-request-filter common-lisp:nil
                       ((events :initarg :events :initform common-lisp:nil
                         :type
                         (common-lisp:or git-pull-request-event-type-list
                                         common-lisp:null)
                         :accessor struct-shape-git-pull-request-filter-events
                         :shape "GitPullRequestEventTypeList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (branches :initarg :branches :initform common-lisp:nil
                         :type
                         (common-lisp:or git-branch-filter-criteria
                                         common-lisp:null)
                         :accessor
                         struct-shape-git-pull-request-filter-branches :shape
                         "GitBranchFilterCriteria" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (file-paths :initarg :file-paths :initform
                         common-lisp:nil :type
                         (common-lisp:or git-file-path-filter-criteria
                                         common-lisp:null)
                         :accessor
                         struct-shape-git-pull-request-filter-file-paths :shape
                         "GitFilePathFilterCriteria" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-git-pull-request-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'git-pull-request-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'git-pull-request-filter 'make-git-pull-request-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          git-pull-request-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          git-pull-request-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branches))
      (common-lisp:list
       (common-lisp:cons "branches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-paths))
      (common-lisp:list
       (common-lisp:cons "filePaths"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          git-pull-request-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype git-pull-request-filter-list ()
   '(trivial-types:proper-list git-pull-request-filter))
 (common-lisp:defun make-git-pull-request-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list git-pull-request-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass git-push-filter common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or git-tag-filter-criteria
                                         common-lisp:null)
                         :accessor struct-shape-git-push-filter-tags :shape
                         "GitTagFilterCriteria" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (branches :initarg :branches :initform common-lisp:nil
                         :type
                         (common-lisp:or git-branch-filter-criteria
                                         common-lisp:null)
                         :accessor struct-shape-git-push-filter-branches :shape
                         "GitBranchFilterCriteria" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (file-paths :initarg :file-paths :initform
                         common-lisp:nil :type
                         (common-lisp:or git-file-path-filter-criteria
                                         common-lisp:null)
                         :accessor struct-shape-git-push-filter-file-paths
                         :shape "GitFilePathFilterCriteria" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-git-push-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'git-push-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'git-push-filter 'make-git-push-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input git-push-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input git-push-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branches))
      (common-lisp:list
       (common-lisp:cons "branches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-paths))
      (common-lisp:list
       (common-lisp:cons "filePaths"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input git-push-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype git-push-filter-list ()
   '(trivial-types:proper-list git-push-filter))
 (common-lisp:defun make-git-push-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list git-push-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass git-tag-filter-criteria common-lisp:nil
                       ((includes :initarg :includes :initform common-lisp:nil
                         :type
                         (common-lisp:or git-tag-pattern-list common-lisp:null)
                         :accessor
                         struct-shape-git-tag-filter-criteria-includes :shape
                         "GitTagPatternList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (excludes :initarg :excludes :initform common-lisp:nil
                         :type
                         (common-lisp:or git-tag-pattern-list common-lisp:null)
                         :accessor
                         struct-shape-git-tag-filter-criteria-excludes :shape
                         "GitTagPatternList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-git-tag-filter-criteria
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'git-tag-filter-criteria
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'git-tag-filter-criteria 'make-git-tag-filter-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          git-tag-filter-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          git-tag-filter-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'includes))
      (common-lisp:list
       (common-lisp:cons "includes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'excludes))
      (common-lisp:list
       (common-lisp:cons "excludes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          git-tag-filter-criteria))
   common-lisp:nil))
(common-lisp:deftype git-tag-name-pattern () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype git-tag-pattern-list ()
   '(trivial-types:proper-list git-tag-name-pattern))
 (common-lisp:defun make-git-tag-pattern-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list git-tag-name-pattern))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass input-artifact common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or artifact-name common-lisp:null)
                         :accessor struct-shape-input-artifact-name :shape
                         "ArtifactName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-input-artifact
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'input-artifact
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'input-artifact 'make-input-artifact))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-artifact))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-artifact))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-artifact))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype input-artifact-list ()
   '(trivial-types:proper-list input-artifact))
 (common-lisp:defun make-input-artifact-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input-artifact))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition invalid-action-declaration-exception
     (codepipeline-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-action-declaration-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-approval-token-exception
     (codepipeline-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-approval-token-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-arn-exception
     (codepipeline-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-arn-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-arn-exception 'invalid-arn-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-blocker-declaration-exception
     (codepipeline-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-blocker-declaration-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-client-token-exception
     (codepipeline-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-client-token-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-job-exception
     (codepipeline-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-job-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-job-state-exception
     (codepipeline-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-job-state-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-next-token-exception
     (codepipeline-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-next-token-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-nonce-exception
     (codepipeline-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-nonce-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-stage-declaration-exception
     (codepipeline-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-stage-declaration-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-structure-exception
     (codepipeline-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-structure-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-tags-exception
     (codepipeline-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-tags-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-tags-exception 'invalid-tags-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-webhook-authentication-parameters-exception
     (codepipeline-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-webhook-authentication-parameters-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-webhook-filter-pattern-exception
     (codepipeline-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-webhook-filter-pattern-exception)))
(common-lisp:progn
 (common-lisp:defclass job common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-job-id :shape "JobId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (data :initarg :data :initform common-lisp:nil :type
                         (common-lisp:or job-data common-lisp:null) :accessor
                         struct-shape-job-data :shape "JobData" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (nonce :initarg :nonce :initform common-lisp:nil :type
                         (common-lisp:or nonce common-lisp:null) :accessor
                         struct-shape-job-nonce :shape "Nonce" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-job-account-id :shape "AccountId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-job (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'job
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'job 'make-job))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nonce))
      (common-lisp:list
       (common-lisp:cons "nonce"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass job-data common-lisp:nil
                       ((action-type-id :initarg :action-type-id :initform
                         common-lisp:nil :type
                         (common-lisp:or action-type-id common-lisp:null)
                         :accessor struct-shape-job-data-action-type-id :shape
                         "ActionTypeId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (action-configuration :initarg :action-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or action-configuration common-lisp:null)
                         :accessor struct-shape-job-data-action-configuration
                         :shape "ActionConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pipeline-context :initarg :pipeline-context :initform
                         common-lisp:nil :type
                         (common-lisp:or pipeline-context common-lisp:null)
                         :accessor struct-shape-job-data-pipeline-context
                         :shape "PipelineContext" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (input-artifacts :initarg :input-artifacts :initform
                         common-lisp:nil :type
                         (common-lisp:or artifact-list common-lisp:null)
                         :accessor struct-shape-job-data-input-artifacts :shape
                         "ArtifactList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-artifacts :initarg :output-artifacts :initform
                         common-lisp:nil :type
                         (common-lisp:or artifact-list common-lisp:null)
                         :accessor struct-shape-job-data-output-artifacts
                         :shape "ArtifactList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (artifact-credentials :initarg :artifact-credentials
                         :initform common-lisp:nil :type
                         (common-lisp:or awssession-credentials
                                         common-lisp:null)
                         :accessor struct-shape-job-data-artifact-credentials
                         :shape "AWSSessionCredentials" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (continuation-token :initarg :continuation-token
                         :initform common-lisp:nil :type
                         (common-lisp:or continuation-token common-lisp:null)
                         :accessor struct-shape-job-data-continuation-token
                         :shape "ContinuationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encryption-key :initarg :encryption-key :initform
                         common-lisp:nil :type
                         (common-lisp:or encryption-key common-lisp:null)
                         :accessor struct-shape-job-data-encryption-key :shape
                         "EncryptionKey" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-job-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'job-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'job-data 'make-job-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-type-id))
      (common-lisp:list
       (common-lisp:cons "actionTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'action-configuration))
      (common-lisp:list
       (common-lisp:cons "actionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-context))
      (common-lisp:list
       (common-lisp:cons "pipelineContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-artifacts))
      (common-lisp:list
       (common-lisp:cons "inputArtifacts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-artifacts))
      (common-lisp:list
       (common-lisp:cons "outputArtifacts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'artifact-credentials))
      (common-lisp:list
       (common-lisp:cons "artifactCredentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'continuation-token))
      (common-lisp:list
       (common-lisp:cons "continuationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key))
      (common-lisp:list
       (common-lisp:cons "encryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass job-details common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-job-details-id :shape "JobId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (data :initarg :data :initform common-lisp:nil :type
                         (common-lisp:or job-data common-lisp:null) :accessor
                         struct-shape-job-details-data :shape "JobData"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-job-details-account-id :shape "AccountId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-job-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'job-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'job-details 'make-job-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-details))
   common-lisp:nil))
(common-lisp:deftype job-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype job-list () '(trivial-types:proper-list job))
 (common-lisp:defun make-job-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition job-not-found-exception
     (codepipeline-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'job-not-found-exception)))
(common-lisp:deftype job-status () 'common-lisp:string)
(common-lisp:deftype job-timeout () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass job-worker-executor-configuration common-lisp:nil
                       ((polling-accounts :initarg :polling-accounts :initform
                         common-lisp:nil :type
                         (common-lisp:or polling-account-list common-lisp:null)
                         :accessor
                         struct-shape-job-worker-executor-configuration-polling-accounts
                         :shape "PollingAccountList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (polling-service-principals :initarg
                         :polling-service-principals :initform common-lisp:nil
                         :type
                         (common-lisp:or polling-service-principal-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-job-worker-executor-configuration-polling-service-principals
                         :shape "PollingServicePrincipalList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-job-worker-executor-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'job-worker-executor-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'job-worker-executor-configuration
                    'make-job-worker-executor-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          job-worker-executor-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          job-worker-executor-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'polling-accounts))
      (common-lisp:list
       (common-lisp:cons "pollingAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'polling-service-principals))
      (common-lisp:list
       (common-lisp:cons "pollingServicePrincipals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          job-worker-executor-configuration))
   common-lisp:nil))
(common-lisp:deftype json-path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass lambda-executor-configuration common-lisp:nil
                       ((lambda-function-arn :initarg :lambda-function-arn
                         :initform
                         (common-lisp:error ":lambdafunctionarn is required")
                         :type
                         (common-lisp:or lambda-function-arn common-lisp:null)
                         :accessor
                         struct-shape-lambda-executor-configuration-lambda-function-arn
                         :shape "LambdaFunctionArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-lambda-executor-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'lambda-executor-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'lambda-executor-configuration
                    'make-lambda-executor-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lambda-executor-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lambda-executor-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-function-arn))
      (common-lisp:list
       (common-lisp:cons "lambdaFunctionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lambda-executor-configuration))
   common-lisp:nil))
(common-lisp:deftype lambda-function-arn () 'common-lisp:string)
(common-lisp:deftype last-changed-at () 'common-lisp:string)
(common-lisp:deftype last-changed-by () 'common-lisp:string)
(common-lisp:deftype last-updated-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass latest-in-pipeline-execution-filter common-lisp:nil
                       ((pipeline-execution-id :initarg :pipeline-execution-id
                         :initform
                         (common-lisp:error ":pipelineexecutionid is required")
                         :type
                         (common-lisp:or pipeline-execution-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-latest-in-pipeline-execution-filter-pipeline-execution-id
                         :shape "PipelineExecutionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time-range :initarg :start-time-range :initform
                         (common-lisp:error ":starttimerange is required")
                         :type
                         (common-lisp:or start-time-range common-lisp:null)
                         :accessor
                         struct-shape-latest-in-pipeline-execution-filter-start-time-range
                         :shape "StartTimeRange" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-latest-in-pipeline-execution-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'latest-in-pipeline-execution-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'latest-in-pipeline-execution-filter
                    'make-latest-in-pipeline-execution-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          latest-in-pipeline-execution-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          latest-in-pipeline-execution-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-id))
      (common-lisp:list
       (common-lisp:cons "pipelineExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time-range))
      (common-lisp:list
       (common-lisp:cons "startTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          latest-in-pipeline-execution-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (codepipeline-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'limit-exceeded-exception)))
(common-lisp:progn
 (common-lisp:defclass list-action-executions-input common-lisp:nil
                       ((pipeline-name :initarg :pipeline-name :initform
                         (common-lisp:error ":pipelinename is required") :type
                         (common-lisp:or pipeline-name common-lisp:null)
                         :accessor
                         struct-shape-list-action-executions-input-pipeline-name
                         :shape "PipelineName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filter :initarg :filter :initform common-lisp:nil
                         :type
                         (common-lisp:or action-execution-filter
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-action-executions-input-filter
                         :shape "ActionExecutionFilter" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-action-executions-input-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-action-executions-input-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-action-executions-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-action-executions-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-action-executions-input
                    'make-list-action-executions-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-action-executions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-action-executions-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-name))
      (common-lisp:list
       (common-lisp:cons "pipelineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-action-executions-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-action-executions-output common-lisp:nil
                       ((action-execution-details :initarg
                         :action-execution-details :initform common-lisp:nil
                         :type
                         (common-lisp:or action-execution-detail-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-action-executions-output-action-execution-details
                         :shape "ActionExecutionDetailList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-action-executions-output-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-action-executions-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-action-executions-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-action-executions-output
                    'make-list-action-executions-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-action-executions-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-action-executions-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'action-execution-details))
      (common-lisp:list
       (common-lisp:cons "actionExecutionDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-action-executions-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-action-types-input common-lisp:nil
                       ((action-owner-filter :initarg :action-owner-filter
                         :initform common-lisp:nil :type
                         (common-lisp:or action-owner common-lisp:null)
                         :accessor
                         struct-shape-list-action-types-input-action-owner-filter
                         :shape "ActionOwner" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-action-types-input-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (region-filter :initarg :region-filter :initform
                         common-lisp:nil :type
                         (common-lisp:or awsregion-name common-lisp:null)
                         :accessor
                         struct-shape-list-action-types-input-region-filter
                         :shape "AWSRegionName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-action-types-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-action-types-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-action-types-input 'make-list-action-types-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-action-types-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-action-types-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-owner-filter))
      (common-lisp:list
       (common-lisp:cons "actionOwnerFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region-filter))
      (common-lisp:list
       (common-lisp:cons "regionFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-action-types-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-action-types-output common-lisp:nil
                       ((action-types :initarg :action-types :initform
                         (common-lisp:error ":actiontypes is required") :type
                         (common-lisp:or action-type-list common-lisp:null)
                         :accessor
                         struct-shape-list-action-types-output-action-types
                         :shape "ActionTypeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-action-types-output-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-action-types-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-action-types-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-action-types-output 'make-list-action-types-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-action-types-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-action-types-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-types))
      (common-lisp:list
       (common-lisp:cons "actionTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-action-types-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-pipeline-executions-input common-lisp:nil
                       ((pipeline-name :initarg :pipeline-name :initform
                         (common-lisp:error ":pipelinename is required") :type
                         (common-lisp:or pipeline-name common-lisp:null)
                         :accessor
                         struct-shape-list-pipeline-executions-input-pipeline-name
                         :shape "PipelineName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-pipeline-executions-input-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-pipeline-executions-input-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-pipeline-executions-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-pipeline-executions-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-pipeline-executions-input
                    'make-list-pipeline-executions-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-pipeline-executions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-pipeline-executions-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-name))
      (common-lisp:list
       (common-lisp:cons "pipelineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-pipeline-executions-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-pipeline-executions-output common-lisp:nil
                       ((pipeline-execution-summaries :initarg
                         :pipeline-execution-summaries :initform
                         common-lisp:nil :type
                         (common-lisp:or pipeline-execution-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-pipeline-executions-output-pipeline-execution-summaries
                         :shape "PipelineExecutionSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-pipeline-executions-output-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-pipeline-executions-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-pipeline-executions-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-pipeline-executions-output
                    'make-list-pipeline-executions-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-pipeline-executions-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-pipeline-executions-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-summaries))
      (common-lisp:list
       (common-lisp:cons "pipelineExecutionSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-pipeline-executions-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-pipelines-input common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-pipelines-input-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-pipelines common-lisp:null)
                         :accessor
                         struct-shape-list-pipelines-input-max-results :shape
                         "MaxPipelines" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-pipelines-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-pipelines-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-pipelines-input 'make-list-pipelines-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-pipelines-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-pipelines-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-pipelines-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-pipelines-output common-lisp:nil
                       ((pipelines :initarg :pipelines :initform
                         common-lisp:nil :type
                         (common-lisp:or pipeline-list common-lisp:null)
                         :accessor struct-shape-list-pipelines-output-pipelines
                         :shape "PipelineList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-pipelines-output-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-pipelines-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-pipelines-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-pipelines-output 'make-list-pipelines-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-pipelines-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-pipelines-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipelines))
      (common-lisp:list
       (common-lisp:cons "pipelines"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-pipelines-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-input common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-list-tags-for-resource-input-resource-arn
                         :shape "ResourceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-input-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-tags-for-resource-input-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-tags-for-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-input
                    'make-list-tags-for-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-output common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-output-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-output-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-output
                    'make-list-tags-for-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-webhook-item common-lisp:nil
                       ((definition :initarg :definition :initform
                         (common-lisp:error ":definition is required") :type
                         (common-lisp:or webhook-definition common-lisp:null)
                         :accessor struct-shape-list-webhook-item-definition
                         :shape "WebhookDefinition" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (url :initarg :url :initform
                         (common-lisp:error ":url is required") :type
                         (common-lisp:or webhook-url common-lisp:null)
                         :accessor struct-shape-list-webhook-item-url :shape
                         "WebhookUrl" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or webhook-error-message
                                         common-lisp:null)
                         :accessor struct-shape-list-webhook-item-error-message
                         :shape "WebhookErrorMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-code :initarg :error-code :initform
                         common-lisp:nil :type
                         (common-lisp:or webhook-error-code common-lisp:null)
                         :accessor struct-shape-list-webhook-item-error-code
                         :shape "WebhookErrorCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-triggered :initarg :last-triggered :initform
                         common-lisp:nil :type
                         (common-lisp:or webhook-last-triggered
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-webhook-item-last-triggered :shape
                         "WebhookLastTriggered" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or webhook-arn common-lisp:null)
                         :accessor struct-shape-list-webhook-item-arn :shape
                         "WebhookArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-list-webhook-item-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-webhook-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-webhook-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-webhook-item 'make-list-webhook-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-webhook-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-webhook-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-triggered))
      (common-lisp:list
       (common-lisp:cons "lastTriggered"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-webhook-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-webhooks-input common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-webhooks-input-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor struct-shape-list-webhooks-input-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-webhooks-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-webhooks-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-webhooks-input 'make-list-webhooks-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-webhooks-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-webhooks-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-webhooks-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-webhooks-output common-lisp:nil
                       ((webhooks :initarg :webhooks :initform common-lisp:nil
                         :type (common-lisp:or webhook-list common-lisp:null)
                         :accessor struct-shape-list-webhooks-output-webhooks
                         :shape "WebhookList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-webhooks-output-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-webhooks-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-webhooks-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-webhooks-output 'make-list-webhooks-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-webhooks-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-webhooks-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'webhooks))
      (common-lisp:list
       (common-lisp:cons "webhooks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-webhooks-output))
   common-lisp:nil))
(common-lisp:deftype match-equals () 'common-lisp:string)
(common-lisp:deftype max-batch-size () 'common-lisp:integer)
(common-lisp:deftype max-pipelines () 'common-lisp:integer)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype maximum-action-type-artifact-count () 'common-lisp:integer)
(common-lisp:deftype maximum-artifact-count () 'common-lisp:integer)
(common-lisp:deftype message () 'common-lisp:string)
(common-lisp:deftype minimum-action-type-artifact-count () 'common-lisp:integer)
(common-lisp:deftype minimum-artifact-count () 'common-lisp:integer)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype nonce () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition not-latest-pipeline-execution-exception
     (codepipeline-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'not-latest-pipeline-execution-exception)))
(common-lisp:progn
 (common-lisp:defclass output-artifact common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or artifact-name common-lisp:null)
                         :accessor struct-shape-output-artifact-name :shape
                         "ArtifactName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-output-artifact
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'output-artifact
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'output-artifact 'make-output-artifact))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-artifact))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-artifact))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-artifact))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype output-artifact-list ()
   '(trivial-types:proper-list output-artifact))
 (common-lisp:defun make-output-artifact-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list output-artifact))
   aws-sdk/generator/shape::members))
(common-lisp:deftype output-variables-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype output-variables-map () 'common-lisp:hash-table)
 (common-lisp:defun make-output-variables-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:define-condition output-variables-size-exceeded-exception
     (codepipeline-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       output-variables-size-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'output-variables-size-exceeded-exception
                    'output-variables-size-exceeded-exception-message)))
(common-lisp:deftype output-variables-value () 'common-lisp:string)
(common-lisp:deftype percentage () 'common-lisp:integer)
(common-lisp:deftype pipeline-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass pipeline-context common-lisp:nil
                       ((pipeline-name :initarg :pipeline-name :initform
                         common-lisp:nil :type
                         (common-lisp:or pipeline-name common-lisp:null)
                         :accessor struct-shape-pipeline-context-pipeline-name
                         :shape "PipelineName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stage :initarg :stage :initform common-lisp:nil :type
                         (common-lisp:or stage-context common-lisp:null)
                         :accessor struct-shape-pipeline-context-stage :shape
                         "StageContext" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (action :initarg :action :initform common-lisp:nil
                         :type (common-lisp:or action-context common-lisp:null)
                         :accessor struct-shape-pipeline-context-action :shape
                         "ActionContext" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pipeline-arn :initarg :pipeline-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or pipeline-arn common-lisp:null)
                         :accessor struct-shape-pipeline-context-pipeline-arn
                         :shape "PipelineArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pipeline-execution-id :initarg :pipeline-execution-id
                         :initform common-lisp:nil :type
                         (common-lisp:or pipeline-execution-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-pipeline-context-pipeline-execution-id
                         :shape "PipelineExecutionId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-pipeline-context
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'pipeline-context
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'pipeline-context 'make-pipeline-context))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pipeline-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pipeline-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-name))
      (common-lisp:list
       (common-lisp:cons "pipelineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stage))
      (common-lisp:list
       (common-lisp:cons "stage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-arn))
      (common-lisp:list
       (common-lisp:cons "pipelineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-id))
      (common-lisp:list
       (common-lisp:cons "pipelineExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pipeline-context))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass pipeline-declaration common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or pipeline-name common-lisp:null)
                         :accessor struct-shape-pipeline-declaration-name
                         :shape "PipelineName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-pipeline-declaration-role-arn :shape
                         "RoleArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (artifact-store :initarg :artifact-store :initform
                         common-lisp:nil :type
                         (common-lisp:or artifact-store common-lisp:null)
                         :accessor
                         struct-shape-pipeline-declaration-artifact-store
                         :shape "ArtifactStore" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (artifact-stores :initarg :artifact-stores :initform
                         common-lisp:nil :type
                         (common-lisp:or artifact-store-map common-lisp:null)
                         :accessor
                         struct-shape-pipeline-declaration-artifact-stores
                         :shape "ArtifactStoreMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stages :initarg :stages :initform
                         (common-lisp:error ":stages is required") :type
                         (common-lisp:or pipeline-stage-declaration-list
                                         common-lisp:null)
                         :accessor struct-shape-pipeline-declaration-stages
                         :shape "PipelineStageDeclarationList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (version :initarg :version :initform common-lisp:nil
                         :type
                         (common-lisp:or pipeline-version common-lisp:null)
                         :accessor struct-shape-pipeline-declaration-version
                         :shape "PipelineVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (execution-mode :initarg :execution-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or execution-mode common-lisp:null)
                         :accessor
                         struct-shape-pipeline-declaration-execution-mode
                         :shape "ExecutionMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pipeline-type :initarg :pipeline-type :initform
                         common-lisp:nil :type
                         (common-lisp:or pipeline-type common-lisp:null)
                         :accessor
                         struct-shape-pipeline-declaration-pipeline-type :shape
                         "PipelineType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (variables :initarg :variables :initform
                         common-lisp:nil :type
                         (common-lisp:or pipeline-variable-declaration-list
                                         common-lisp:null)
                         :accessor struct-shape-pipeline-declaration-variables
                         :shape "PipelineVariableDeclarationList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (triggers :initarg :triggers :initform common-lisp:nil
                         :type
                         (common-lisp:or pipeline-trigger-declaration-list
                                         common-lisp:null)
                         :accessor struct-shape-pipeline-declaration-triggers
                         :shape "PipelineTriggerDeclarationList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-pipeline-declaration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'pipeline-declaration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'pipeline-declaration 'make-pipeline-declaration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pipeline-declaration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pipeline-declaration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'artifact-store))
      (common-lisp:list
       (common-lisp:cons "artifactStore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'artifact-stores))
      (common-lisp:list
       (common-lisp:cons "artifactStores"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stages))
      (common-lisp:list
       (common-lisp:cons "stages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-mode))
      (common-lisp:list
       (common-lisp:cons "executionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-type))
      (common-lisp:list
       (common-lisp:cons "pipelineType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variables))
      (common-lisp:list
       (common-lisp:cons "variables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'triggers))
      (common-lisp:list
       (common-lisp:cons "triggers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pipeline-declaration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass pipeline-execution common-lisp:nil
                       ((pipeline-name :initarg :pipeline-name :initform
                         common-lisp:nil :type
                         (common-lisp:or pipeline-name common-lisp:null)
                         :accessor
                         struct-shape-pipeline-execution-pipeline-name :shape
                         "PipelineName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pipeline-version :initarg :pipeline-version :initform
                         common-lisp:nil :type
                         (common-lisp:or pipeline-version common-lisp:null)
                         :accessor
                         struct-shape-pipeline-execution-pipeline-version
                         :shape "PipelineVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pipeline-execution-id :initarg :pipeline-execution-id
                         :initform common-lisp:nil :type
                         (common-lisp:or pipeline-execution-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-pipeline-execution-pipeline-execution-id
                         :shape "PipelineExecutionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or pipeline-execution-status
                                         common-lisp:null)
                         :accessor struct-shape-pipeline-execution-status
                         :shape "PipelineExecutionStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status-summary :initarg :status-summary :initform
                         common-lisp:nil :type
                         (common-lisp:or pipeline-execution-status-summary
                                         common-lisp:null)
                         :accessor
                         struct-shape-pipeline-execution-status-summary :shape
                         "PipelineExecutionStatusSummary" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (artifact-revisions :initarg :artifact-revisions
                         :initform common-lisp:nil :type
                         (common-lisp:or artifact-revision-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-pipeline-execution-artifact-revisions
                         :shape "ArtifactRevisionList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (variables :initarg :variables :initform
                         common-lisp:nil :type
                         (common-lisp:or resolved-pipeline-variable-list
                                         common-lisp:null)
                         :accessor struct-shape-pipeline-execution-variables
                         :shape "ResolvedPipelineVariableList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (trigger :initarg :trigger :initform common-lisp:nil
                         :type
                         (common-lisp:or execution-trigger common-lisp:null)
                         :accessor struct-shape-pipeline-execution-trigger
                         :shape "ExecutionTrigger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (execution-mode :initarg :execution-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or execution-mode common-lisp:null)
                         :accessor
                         struct-shape-pipeline-execution-execution-mode :shape
                         "ExecutionMode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-pipeline-execution
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'pipeline-execution
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'pipeline-execution 'make-pipeline-execution))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pipeline-execution))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pipeline-execution))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-name))
      (common-lisp:list
       (common-lisp:cons "pipelineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-version))
      (common-lisp:list
       (common-lisp:cons "pipelineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-id))
      (common-lisp:list
       (common-lisp:cons "pipelineExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-summary))
      (common-lisp:list
       (common-lisp:cons "statusSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'artifact-revisions))
      (common-lisp:list
       (common-lisp:cons "artifactRevisions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variables))
      (common-lisp:list
       (common-lisp:cons "variables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trigger))
      (common-lisp:list
       (common-lisp:cons "trigger"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-mode))
      (common-lisp:list
       (common-lisp:cons "executionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pipeline-execution))
   common-lisp:nil))
(common-lisp:deftype pipeline-execution-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition pipeline-execution-not-found-exception
     (codepipeline-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'pipeline-execution-not-found-exception)))
(common-lisp:progn
 (common-lisp:define-condition pipeline-execution-not-stoppable-exception
     (codepipeline-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       pipeline-execution-not-stoppable-exception-message)))
 (common-lisp:export
  (common-lisp:list 'pipeline-execution-not-stoppable-exception
                    'pipeline-execution-not-stoppable-exception-message)))
(common-lisp:deftype pipeline-execution-status () 'common-lisp:string)
(common-lisp:deftype pipeline-execution-status-summary () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass pipeline-execution-summary common-lisp:nil
                       ((pipeline-execution-id :initarg :pipeline-execution-id
                         :initform common-lisp:nil :type
                         (common-lisp:or pipeline-execution-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-pipeline-execution-summary-pipeline-execution-id
                         :shape "PipelineExecutionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or pipeline-execution-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-pipeline-execution-summary-status :shape
                         "PipelineExecutionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-pipeline-execution-summary-start-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-update-time :initarg :last-update-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-pipeline-execution-summary-last-update-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-revisions :initarg :source-revisions :initform
                         common-lisp:nil :type
                         (common-lisp:or source-revision-list common-lisp:null)
                         :accessor
                         struct-shape-pipeline-execution-summary-source-revisions
                         :shape "SourceRevisionList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (trigger :initarg :trigger :initform common-lisp:nil
                         :type
                         (common-lisp:or execution-trigger common-lisp:null)
                         :accessor
                         struct-shape-pipeline-execution-summary-trigger :shape
                         "ExecutionTrigger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stop-trigger :initarg :stop-trigger :initform
                         common-lisp:nil :type
                         (common-lisp:or stop-execution-trigger
                                         common-lisp:null)
                         :accessor
                         struct-shape-pipeline-execution-summary-stop-trigger
                         :shape "StopExecutionTrigger" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (execution-mode :initarg :execution-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or execution-mode common-lisp:null)
                         :accessor
                         struct-shape-pipeline-execution-summary-execution-mode
                         :shape "ExecutionMode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-pipeline-execution-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'pipeline-execution-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'pipeline-execution-summary
                    'make-pipeline-execution-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pipeline-execution-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pipeline-execution-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-id))
      (common-lisp:list
       (common-lisp:cons "pipelineExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-revisions))
      (common-lisp:list
       (common-lisp:cons "sourceRevisions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trigger))
      (common-lisp:list
       (common-lisp:cons "trigger"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stop-trigger))
      (common-lisp:list
       (common-lisp:cons "stopTrigger"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-mode))
      (common-lisp:list
       (common-lisp:cons "executionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pipeline-execution-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype pipeline-execution-summary-list ()
   '(trivial-types:proper-list pipeline-execution-summary))
 (common-lisp:defun make-pipeline-execution-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            pipeline-execution-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype pipeline-list ()
   '(trivial-types:proper-list pipeline-summary))
 (common-lisp:defun make-pipeline-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list pipeline-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass pipeline-metadata common-lisp:nil
                       ((pipeline-arn :initarg :pipeline-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or pipeline-arn common-lisp:null)
                         :accessor struct-shape-pipeline-metadata-pipeline-arn
                         :shape "PipelineArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created :initarg :created :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor struct-shape-pipeline-metadata-created
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated :initarg :updated :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor struct-shape-pipeline-metadata-updated
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (polling-disabled-at :initarg :polling-disabled-at
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-pipeline-metadata-polling-disabled-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-pipeline-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'pipeline-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'pipeline-metadata 'make-pipeline-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pipeline-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pipeline-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-arn))
      (common-lisp:list
       (common-lisp:cons "pipelineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created))
      (common-lisp:list
       (common-lisp:cons "created"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated))
      (common-lisp:list
       (common-lisp:cons "updated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'polling-disabled-at))
      (common-lisp:list
       (common-lisp:cons "pollingDisabledAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pipeline-metadata))
   common-lisp:nil))
(common-lisp:deftype pipeline-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition pipeline-name-in-use-exception
     (codepipeline-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'pipeline-name-in-use-exception)))
(common-lisp:progn
 (common-lisp:define-condition pipeline-not-found-exception
     (codepipeline-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'pipeline-not-found-exception)))
(common-lisp:progn
 (common-lisp:deftype pipeline-stage-declaration-list ()
   '(trivial-types:proper-list stage-declaration))
 (common-lisp:defun make-pipeline-stage-declaration-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list stage-declaration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass pipeline-summary common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or pipeline-name common-lisp:null)
                         :accessor struct-shape-pipeline-summary-name :shape
                         "PipelineName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (version :initarg :version :initform common-lisp:nil
                         :type
                         (common-lisp:or pipeline-version common-lisp:null)
                         :accessor struct-shape-pipeline-summary-version :shape
                         "PipelineVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pipeline-type :initarg :pipeline-type :initform
                         common-lisp:nil :type
                         (common-lisp:or pipeline-type common-lisp:null)
                         :accessor struct-shape-pipeline-summary-pipeline-type
                         :shape "PipelineType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (execution-mode :initarg :execution-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or execution-mode common-lisp:null)
                         :accessor struct-shape-pipeline-summary-execution-mode
                         :shape "ExecutionMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created :initarg :created :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor struct-shape-pipeline-summary-created :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated :initarg :updated :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor struct-shape-pipeline-summary-updated :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-pipeline-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'pipeline-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'pipeline-summary 'make-pipeline-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pipeline-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pipeline-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-type))
      (common-lisp:list
       (common-lisp:cons "pipelineType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-mode))
      (common-lisp:list
       (common-lisp:cons "executionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created))
      (common-lisp:list
       (common-lisp:cons "created"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated))
      (common-lisp:list
       (common-lisp:cons "updated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pipeline-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass pipeline-trigger-declaration common-lisp:nil
                       ((provider-type :initarg :provider-type :initform
                         (common-lisp:error ":providertype is required") :type
                         (common-lisp:or pipeline-trigger-provider-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-pipeline-trigger-declaration-provider-type
                         :shape "PipelineTriggerProviderType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (git-configuration :initarg :git-configuration
                         :initform
                         (common-lisp:error ":gitconfiguration is required")
                         :type
                         (common-lisp:or git-configuration common-lisp:null)
                         :accessor
                         struct-shape-pipeline-trigger-declaration-git-configuration
                         :shape "GitConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-pipeline-trigger-declaration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'pipeline-trigger-declaration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'pipeline-trigger-declaration
                    'make-pipeline-trigger-declaration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pipeline-trigger-declaration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pipeline-trigger-declaration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-type))
      (common-lisp:list
       (common-lisp:cons "providerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'git-configuration))
      (common-lisp:list
       (common-lisp:cons "gitConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pipeline-trigger-declaration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype pipeline-trigger-declaration-list ()
   '(trivial-types:proper-list pipeline-trigger-declaration))
 (common-lisp:defun make-pipeline-trigger-declaration-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            pipeline-trigger-declaration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype pipeline-trigger-provider-type () 'common-lisp:string)
(common-lisp:deftype pipeline-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass pipeline-variable common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or pipeline-variable-name
                                         common-lisp:null)
                         :accessor struct-shape-pipeline-variable-name :shape
                         "PipelineVariableName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or pipeline-variable-value
                                         common-lisp:null)
                         :accessor struct-shape-pipeline-variable-value :shape
                         "PipelineVariableValue" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-pipeline-variable
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'pipeline-variable
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'pipeline-variable 'make-pipeline-variable))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pipeline-variable))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pipeline-variable))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pipeline-variable))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass pipeline-variable-declaration common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or pipeline-variable-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-pipeline-variable-declaration-name :shape
                         "PipelineVariableName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-value :initarg :default-value :initform
                         common-lisp:nil :type
                         (common-lisp:or pipeline-variable-value
                                         common-lisp:null)
                         :accessor
                         struct-shape-pipeline-variable-declaration-default-value
                         :shape "PipelineVariableValue" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or pipeline-variable-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-pipeline-variable-declaration-description
                         :shape "PipelineVariableDescription" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-pipeline-variable-declaration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'pipeline-variable-declaration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'pipeline-variable-declaration
                    'make-pipeline-variable-declaration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pipeline-variable-declaration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pipeline-variable-declaration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "defaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pipeline-variable-declaration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype pipeline-variable-declaration-list ()
   '(trivial-types:proper-list pipeline-variable-declaration))
 (common-lisp:defun make-pipeline-variable-declaration-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            pipeline-variable-declaration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype pipeline-variable-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype pipeline-variable-list ()
   '(trivial-types:proper-list pipeline-variable))
 (common-lisp:defun make-pipeline-variable-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list pipeline-variable))
   aws-sdk/generator/shape::members))
(common-lisp:deftype pipeline-variable-name () 'common-lisp:string)
(common-lisp:deftype pipeline-variable-value () 'common-lisp:string)
(common-lisp:deftype pipeline-version () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition pipeline-version-not-found-exception
     (codepipeline-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'pipeline-version-not-found-exception)))
(common-lisp:deftype policy-statements-template () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass poll-for-jobs-input common-lisp:nil
                       ((action-type-id :initarg :action-type-id :initform
                         (common-lisp:error ":actiontypeid is required") :type
                         (common-lisp:or action-type-id common-lisp:null)
                         :accessor
                         struct-shape-poll-for-jobs-input-action-type-id :shape
                         "ActionTypeId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-batch-size :initarg :max-batch-size :initform
                         common-lisp:nil :type
                         (common-lisp:or max-batch-size common-lisp:null)
                         :accessor
                         struct-shape-poll-for-jobs-input-max-batch-size :shape
                         "MaxBatchSize" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (query-param :initarg :query-param :initform
                         common-lisp:nil :type
                         (common-lisp:or query-param-map common-lisp:null)
                         :accessor struct-shape-poll-for-jobs-input-query-param
                         :shape "QueryParamMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-poll-for-jobs-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'poll-for-jobs-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'poll-for-jobs-input 'make-poll-for-jobs-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input poll-for-jobs-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input poll-for-jobs-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-type-id))
      (common-lisp:list
       (common-lisp:cons "actionTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-batch-size))
      (common-lisp:list
       (common-lisp:cons "maxBatchSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-param))
      (common-lisp:list
       (common-lisp:cons "queryParam"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input poll-for-jobs-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass poll-for-jobs-output common-lisp:nil
                       ((jobs :initarg :jobs :initform common-lisp:nil :type
                         (common-lisp:or job-list common-lisp:null) :accessor
                         struct-shape-poll-for-jobs-output-jobs :shape
                         "JobList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-poll-for-jobs-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'poll-for-jobs-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'poll-for-jobs-output 'make-poll-for-jobs-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input poll-for-jobs-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input poll-for-jobs-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'jobs))
      (common-lisp:list
       (common-lisp:cons "jobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input poll-for-jobs-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass poll-for-third-party-jobs-input common-lisp:nil
                       ((action-type-id :initarg :action-type-id :initform
                         (common-lisp:error ":actiontypeid is required") :type
                         (common-lisp:or action-type-id common-lisp:null)
                         :accessor
                         struct-shape-poll-for-third-party-jobs-input-action-type-id
                         :shape "ActionTypeId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-batch-size :initarg :max-batch-size :initform
                         common-lisp:nil :type
                         (common-lisp:or max-batch-size common-lisp:null)
                         :accessor
                         struct-shape-poll-for-third-party-jobs-input-max-batch-size
                         :shape "MaxBatchSize" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-poll-for-third-party-jobs-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'poll-for-third-party-jobs-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'poll-for-third-party-jobs-input
                    'make-poll-for-third-party-jobs-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          poll-for-third-party-jobs-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          poll-for-third-party-jobs-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-type-id))
      (common-lisp:list
       (common-lisp:cons "actionTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-batch-size))
      (common-lisp:list
       (common-lisp:cons "maxBatchSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          poll-for-third-party-jobs-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass poll-for-third-party-jobs-output common-lisp:nil
                       ((jobs :initarg :jobs :initform common-lisp:nil :type
                         (common-lisp:or third-party-job-list common-lisp:null)
                         :accessor
                         struct-shape-poll-for-third-party-jobs-output-jobs
                         :shape "ThirdPartyJobList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-poll-for-third-party-jobs-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'poll-for-third-party-jobs-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'poll-for-third-party-jobs-output
                    'make-poll-for-third-party-jobs-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          poll-for-third-party-jobs-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          poll-for-third-party-jobs-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'jobs))
      (common-lisp:list
       (common-lisp:cons "jobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          poll-for-third-party-jobs-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype polling-account-list ()
   '(trivial-types:proper-list account-id))
 (common-lisp:defun make-polling-account-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list account-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype polling-service-principal-list ()
   '(trivial-types:proper-list service-principal))
 (common-lisp:defun make-polling-service-principal-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list service-principal))
   aws-sdk/generator/shape::members))
(common-lisp:deftype property-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass put-action-revision-input common-lisp:nil
                       ((pipeline-name :initarg :pipeline-name :initform
                         (common-lisp:error ":pipelinename is required") :type
                         (common-lisp:or pipeline-name common-lisp:null)
                         :accessor
                         struct-shape-put-action-revision-input-pipeline-name
                         :shape "PipelineName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stage-name :initarg :stage-name :initform
                         (common-lisp:error ":stagename is required") :type
                         (common-lisp:or stage-name common-lisp:null) :accessor
                         struct-shape-put-action-revision-input-stage-name
                         :shape "StageName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (action-name :initarg :action-name :initform
                         (common-lisp:error ":actionname is required") :type
                         (common-lisp:or action-name common-lisp:null)
                         :accessor
                         struct-shape-put-action-revision-input-action-name
                         :shape "ActionName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (action-revision :initarg :action-revision :initform
                         (common-lisp:error ":actionrevision is required")
                         :type
                         (common-lisp:or action-revision common-lisp:null)
                         :accessor
                         struct-shape-put-action-revision-input-action-revision
                         :shape "ActionRevision" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-action-revision-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-action-revision-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-action-revision-input
                    'make-put-action-revision-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-action-revision-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-action-revision-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-name))
      (common-lisp:list
       (common-lisp:cons "pipelineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stage-name))
      (common-lisp:list
       (common-lisp:cons "stageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-name))
      (common-lisp:list
       (common-lisp:cons "actionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-revision))
      (common-lisp:list
       (common-lisp:cons "actionRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-action-revision-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-action-revision-output common-lisp:nil
                       ((new-revision :initarg :new-revision :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-put-action-revision-output-new-revision
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pipeline-execution-id :initarg :pipeline-execution-id
                         :initform common-lisp:nil :type
                         (common-lisp:or pipeline-execution-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-action-revision-output-pipeline-execution-id
                         :shape "PipelineExecutionId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-action-revision-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-action-revision-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-action-revision-output
                    'make-put-action-revision-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-action-revision-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-action-revision-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-revision))
      (common-lisp:list
       (common-lisp:cons "newRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-id))
      (common-lisp:list
       (common-lisp:cons "pipelineExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-action-revision-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-approval-result-input common-lisp:nil
                       ((pipeline-name :initarg :pipeline-name :initform
                         (common-lisp:error ":pipelinename is required") :type
                         (common-lisp:or pipeline-name common-lisp:null)
                         :accessor
                         struct-shape-put-approval-result-input-pipeline-name
                         :shape "PipelineName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stage-name :initarg :stage-name :initform
                         (common-lisp:error ":stagename is required") :type
                         (common-lisp:or stage-name common-lisp:null) :accessor
                         struct-shape-put-approval-result-input-stage-name
                         :shape "StageName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (action-name :initarg :action-name :initform
                         (common-lisp:error ":actionname is required") :type
                         (common-lisp:or action-name common-lisp:null)
                         :accessor
                         struct-shape-put-approval-result-input-action-name
                         :shape "ActionName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (result :initarg :result :initform
                         (common-lisp:error ":result is required") :type
                         (common-lisp:or approval-result common-lisp:null)
                         :accessor
                         struct-shape-put-approval-result-input-result :shape
                         "ApprovalResult" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (token :initarg :token :initform
                         (common-lisp:error ":token is required") :type
                         (common-lisp:or approval-token common-lisp:null)
                         :accessor struct-shape-put-approval-result-input-token
                         :shape "ApprovalToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-approval-result-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-approval-result-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-approval-result-input
                    'make-put-approval-result-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-approval-result-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-approval-result-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-name))
      (common-lisp:list
       (common-lisp:cons "pipelineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stage-name))
      (common-lisp:list
       (common-lisp:cons "stageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-name))
      (common-lisp:list
       (common-lisp:cons "actionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result))
      (common-lisp:list
       (common-lisp:cons "result"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token))
      (common-lisp:list
       (common-lisp:cons "token"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-approval-result-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-approval-result-output common-lisp:nil
                       ((approved-at :initarg :approved-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-put-approval-result-output-approved-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-approval-result-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-approval-result-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-approval-result-output
                    'make-put-approval-result-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-approval-result-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-approval-result-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'approved-at))
      (common-lisp:list
       (common-lisp:cons "approvedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-approval-result-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-job-failure-result-input common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":jobid is required") :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-put-job-failure-result-input-job-id
                         :shape "JobId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failure-details :initarg :failure-details :initform
                         (common-lisp:error ":failuredetails is required")
                         :type
                         (common-lisp:or failure-details common-lisp:null)
                         :accessor
                         struct-shape-put-job-failure-result-input-failure-details
                         :shape "FailureDetails" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-job-failure-result-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-job-failure-result-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-job-failure-result-input
                    'make-put-job-failure-result-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-job-failure-result-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-job-failure-result-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-details))
      (common-lisp:list
       (common-lisp:cons "failureDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-job-failure-result-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-job-success-result-input common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":jobid is required") :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-put-job-success-result-input-job-id
                         :shape "JobId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (current-revision :initarg :current-revision :initform
                         common-lisp:nil :type
                         (common-lisp:or current-revision common-lisp:null)
                         :accessor
                         struct-shape-put-job-success-result-input-current-revision
                         :shape "CurrentRevision" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (continuation-token :initarg :continuation-token
                         :initform common-lisp:nil :type
                         (common-lisp:or continuation-token common-lisp:null)
                         :accessor
                         struct-shape-put-job-success-result-input-continuation-token
                         :shape "ContinuationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (execution-details :initarg :execution-details
                         :initform common-lisp:nil :type
                         (common-lisp:or execution-details common-lisp:null)
                         :accessor
                         struct-shape-put-job-success-result-input-execution-details
                         :shape "ExecutionDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-variables :initarg :output-variables :initform
                         common-lisp:nil :type
                         (common-lisp:or output-variables-map common-lisp:null)
                         :accessor
                         struct-shape-put-job-success-result-input-output-variables
                         :shape "OutputVariablesMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-job-success-result-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-job-success-result-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-job-success-result-input
                    'make-put-job-success-result-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-job-success-result-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-job-success-result-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-revision))
      (common-lisp:list
       (common-lisp:cons "currentRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'continuation-token))
      (common-lisp:list
       (common-lisp:cons "continuationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-details))
      (common-lisp:list
       (common-lisp:cons "executionDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-variables))
      (common-lisp:list
       (common-lisp:cons "outputVariables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-job-success-result-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-third-party-job-failure-result-input common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":jobid is required") :type
                         (common-lisp:or third-party-job-id common-lisp:null)
                         :accessor
                         struct-shape-put-third-party-job-failure-result-input-job-id
                         :shape "ThirdPartyJobId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         (common-lisp:error ":clienttoken is required") :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-put-third-party-job-failure-result-input-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failure-details :initarg :failure-details :initform
                         (common-lisp:error ":failuredetails is required")
                         :type
                         (common-lisp:or failure-details common-lisp:null)
                         :accessor
                         struct-shape-put-third-party-job-failure-result-input-failure-details
                         :shape "FailureDetails" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-third-party-job-failure-result-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-third-party-job-failure-result-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-third-party-job-failure-result-input
                    'make-put-third-party-job-failure-result-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-third-party-job-failure-result-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-third-party-job-failure-result-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-details))
      (common-lisp:list
       (common-lisp:cons "failureDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-third-party-job-failure-result-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-third-party-job-success-result-input common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":jobid is required") :type
                         (common-lisp:or third-party-job-id common-lisp:null)
                         :accessor
                         struct-shape-put-third-party-job-success-result-input-job-id
                         :shape "ThirdPartyJobId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         (common-lisp:error ":clienttoken is required") :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-put-third-party-job-success-result-input-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (current-revision :initarg :current-revision :initform
                         common-lisp:nil :type
                         (common-lisp:or current-revision common-lisp:null)
                         :accessor
                         struct-shape-put-third-party-job-success-result-input-current-revision
                         :shape "CurrentRevision" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (continuation-token :initarg :continuation-token
                         :initform common-lisp:nil :type
                         (common-lisp:or continuation-token common-lisp:null)
                         :accessor
                         struct-shape-put-third-party-job-success-result-input-continuation-token
                         :shape "ContinuationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (execution-details :initarg :execution-details
                         :initform common-lisp:nil :type
                         (common-lisp:or execution-details common-lisp:null)
                         :accessor
                         struct-shape-put-third-party-job-success-result-input-execution-details
                         :shape "ExecutionDetails" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-third-party-job-success-result-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-third-party-job-success-result-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-third-party-job-success-result-input
                    'make-put-third-party-job-success-result-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-third-party-job-success-result-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-third-party-job-success-result-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-revision))
      (common-lisp:list
       (common-lisp:cons "currentRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'continuation-token))
      (common-lisp:list
       (common-lisp:cons "continuationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-details))
      (common-lisp:list
       (common-lisp:cons "executionDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-third-party-job-success-result-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-webhook-input common-lisp:nil
                       ((webhook :initarg :webhook :initform
                         (common-lisp:error ":webhook is required") :type
                         (common-lisp:or webhook-definition common-lisp:null)
                         :accessor struct-shape-put-webhook-input-webhook
                         :shape "WebhookDefinition" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-put-webhook-input-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-webhook-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-webhook-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-webhook-input 'make-put-webhook-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-webhook-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-webhook-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'webhook))
      (common-lisp:list
       (common-lisp:cons "webhook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-webhook-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-webhook-output common-lisp:nil
                       ((webhook :initarg :webhook :initform common-lisp:nil
                         :type
                         (common-lisp:or list-webhook-item common-lisp:null)
                         :accessor struct-shape-put-webhook-output-webhook
                         :shape "ListWebhookItem" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-webhook-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-webhook-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-webhook-output 'make-put-webhook-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-webhook-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-webhook-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'webhook))
      (common-lisp:list
       (common-lisp:cons "webhook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-webhook-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype query-param-map () 'common-lisp:hash-table)
 (common-lisp:defun make-query-param-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass register-webhook-with-third-party-input common-lisp:nil
                       ((webhook-name :initarg :webhook-name :initform
                         common-lisp:nil :type
                         (common-lisp:or webhook-name common-lisp:null)
                         :accessor
                         struct-shape-register-webhook-with-third-party-input-webhook-name
                         :shape "WebhookName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-register-webhook-with-third-party-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'register-webhook-with-third-party-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'register-webhook-with-third-party-input
                    'make-register-webhook-with-third-party-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-webhook-with-third-party-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-webhook-with-third-party-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'webhook-name))
      (common-lisp:list
       (common-lisp:cons "webhookName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-webhook-with-third-party-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-webhook-with-third-party-output common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-register-webhook-with-third-party-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'register-webhook-with-third-party-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'register-webhook-with-third-party-output
                    'make-register-webhook-with-third-party-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-webhook-with-third-party-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-webhook-with-third-party-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-webhook-with-third-party-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition request-failed-exception
     (codepipeline-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       request-failed-exception-message)))
 (common-lisp:export
  (common-lisp:list 'request-failed-exception
                    'request-failed-exception-message)))
(common-lisp:progn
 (common-lisp:deftype resolved-action-configuration-map ()
   'common-lisp:hash-table)
 (common-lisp:defun make-resolved-action-configuration-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass resolved-pipeline-variable common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-resolved-pipeline-variable-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resolved-value :initarg :resolved-value :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-resolved-pipeline-variable-resolved-value
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resolved-pipeline-variable
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resolved-pipeline-variable
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resolved-pipeline-variable
                    'make-resolved-pipeline-variable))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resolved-pipeline-variable))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resolved-pipeline-variable))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolved-value))
      (common-lisp:list
       (common-lisp:cons "resolvedValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resolved-pipeline-variable))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resolved-pipeline-variable-list ()
   '(trivial-types:proper-list resolved-pipeline-variable))
 (common-lisp:defun make-resolved-pipeline-variable-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            resolved-pipeline-variable))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (codepipeline-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'resource-not-found-exception)))
(common-lisp:progn
 (common-lisp:defclass retry-stage-execution-input common-lisp:nil
                       ((pipeline-name :initarg :pipeline-name :initform
                         (common-lisp:error ":pipelinename is required") :type
                         (common-lisp:or pipeline-name common-lisp:null)
                         :accessor
                         struct-shape-retry-stage-execution-input-pipeline-name
                         :shape "PipelineName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stage-name :initarg :stage-name :initform
                         (common-lisp:error ":stagename is required") :type
                         (common-lisp:or stage-name common-lisp:null) :accessor
                         struct-shape-retry-stage-execution-input-stage-name
                         :shape "StageName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pipeline-execution-id :initarg :pipeline-execution-id
                         :initform
                         (common-lisp:error ":pipelineexecutionid is required")
                         :type
                         (common-lisp:or pipeline-execution-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-retry-stage-execution-input-pipeline-execution-id
                         :shape "PipelineExecutionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (retry-mode :initarg :retry-mode :initform
                         (common-lisp:error ":retrymode is required") :type
                         (common-lisp:or stage-retry-mode common-lisp:null)
                         :accessor
                         struct-shape-retry-stage-execution-input-retry-mode
                         :shape "StageRetryMode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-retry-stage-execution-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'retry-stage-execution-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'retry-stage-execution-input
                    'make-retry-stage-execution-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          retry-stage-execution-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          retry-stage-execution-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-name))
      (common-lisp:list
       (common-lisp:cons "pipelineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stage-name))
      (common-lisp:list
       (common-lisp:cons "stageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-id))
      (common-lisp:list
       (common-lisp:cons "pipelineExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retry-mode))
      (common-lisp:list
       (common-lisp:cons "retryMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          retry-stage-execution-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass retry-stage-execution-output common-lisp:nil
                       ((pipeline-execution-id :initarg :pipeline-execution-id
                         :initform common-lisp:nil :type
                         (common-lisp:or pipeline-execution-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-retry-stage-execution-output-pipeline-execution-id
                         :shape "PipelineExecutionId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-retry-stage-execution-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'retry-stage-execution-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'retry-stage-execution-output
                    'make-retry-stage-execution-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          retry-stage-execution-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          retry-stage-execution-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-id))
      (common-lisp:list
       (common-lisp:cons "pipelineExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          retry-stage-execution-output))
   common-lisp:nil))
(common-lisp:deftype revision () 'common-lisp:string)
(common-lisp:deftype revision-change-identifier () 'common-lisp:string)
(common-lisp:deftype revision-summary () 'common-lisp:string)
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3artifact-location common-lisp:nil
                       ((bucket-name :initarg :bucket-name :initform
                         (common-lisp:error ":bucketname is required") :type
                         (common-lisp:or s3bucket-name common-lisp:null)
                         :accessor struct-shape-s3artifact-location-bucket-name
                         :shape "S3BucketName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (object-key :initarg :object-key :initform
                         (common-lisp:error ":objectkey is required") :type
                         (common-lisp:or s3object-key common-lisp:null)
                         :accessor struct-shape-s3artifact-location-object-key
                         :shape "S3ObjectKey" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3artifact-location
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 's3artifact-location
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 's3artifact-location 'make-s3artifact-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3artifact-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3artifact-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "bucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-key))
      (common-lisp:list
       (common-lisp:cons "objectKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3artifact-location))
   common-lisp:nil))
(common-lisp:deftype s3bucket () 'common-lisp:string)
(common-lisp:deftype s3bucket-name () 'common-lisp:string)
(common-lisp:deftype s3key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3location common-lisp:nil
                       ((bucket :initarg :bucket :initform common-lisp:nil
                         :type (common-lisp:or s3bucket common-lisp:null)
                         :accessor struct-shape-s3location-bucket :shape
                         "S3Bucket" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (key :initarg :key :initform common-lisp:nil :type
                         (common-lisp:or s3key common-lisp:null) :accessor
                         struct-shape-s3location-key :shape "S3Key" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3location
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 's3location
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 's3location 'make-s3location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3location))
   common-lisp:nil))
(common-lisp:deftype s3object-key () 'common-lisp:string)
(common-lisp:deftype secret-access-key () 'common-lisp:string)
(common-lisp:deftype service-principal () 'common-lisp:string)
(common-lisp:deftype session-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass source-revision common-lisp:nil
                       ((action-name :initarg :action-name :initform
                         (common-lisp:error ":actionname is required") :type
                         (common-lisp:or action-name common-lisp:null)
                         :accessor struct-shape-source-revision-action-name
                         :shape "ActionName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (revision-id :initarg :revision-id :initform
                         common-lisp:nil :type
                         (common-lisp:or revision common-lisp:null) :accessor
                         struct-shape-source-revision-revision-id :shape
                         "Revision" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (revision-summary :initarg :revision-summary :initform
                         common-lisp:nil :type
                         (common-lisp:or revision-summary common-lisp:null)
                         :accessor
                         struct-shape-source-revision-revision-summary :shape
                         "RevisionSummary" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (revision-url :initarg :revision-url :initform
                         common-lisp:nil :type
                         (common-lisp:or url common-lisp:null) :accessor
                         struct-shape-source-revision-revision-url :shape "Url"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-source-revision
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'source-revision
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'source-revision 'make-source-revision))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input source-revision))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input source-revision))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-name))
      (common-lisp:list
       (common-lisp:cons "actionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "revisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-summary))
      (common-lisp:list
       (common-lisp:cons "revisionSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-url))
      (common-lisp:list
       (common-lisp:cons "revisionUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input source-revision))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype source-revision-list ()
   '(trivial-types:proper-list source-revision))
 (common-lisp:defun make-source-revision-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list source-revision))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass source-revision-override common-lisp:nil
                       ((action-name :initarg :action-name :initform
                         (common-lisp:error ":actionname is required") :type
                         (common-lisp:or action-name common-lisp:null)
                         :accessor
                         struct-shape-source-revision-override-action-name
                         :shape "ActionName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (revision-type :initarg :revision-type :initform
                         (common-lisp:error ":revisiontype is required") :type
                         (common-lisp:or source-revision-type common-lisp:null)
                         :accessor
                         struct-shape-source-revision-override-revision-type
                         :shape "SourceRevisionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (revision-value :initarg :revision-value :initform
                         (common-lisp:error ":revisionvalue is required") :type
                         (common-lisp:or revision common-lisp:null) :accessor
                         struct-shape-source-revision-override-revision-value
                         :shape "Revision" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-source-revision-override
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'source-revision-override
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'source-revision-override 'make-source-revision-override))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          source-revision-override))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          source-revision-override))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-name))
      (common-lisp:list
       (common-lisp:cons "actionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-type))
      (common-lisp:list
       (common-lisp:cons "revisionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-value))
      (common-lisp:list
       (common-lisp:cons "revisionValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          source-revision-override))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype source-revision-override-list ()
   '(trivial-types:proper-list source-revision-override))
 (common-lisp:defun make-source-revision-override-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            source-revision-override))
   aws-sdk/generator/shape::members))
(common-lisp:deftype source-revision-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype stage-action-declaration-list ()
   '(trivial-types:proper-list action-declaration))
 (common-lisp:defun make-stage-action-declaration-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list action-declaration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype stage-blocker-declaration-list ()
   '(trivial-types:proper-list blocker-declaration))
 (common-lisp:defun make-stage-blocker-declaration-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list blocker-declaration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass stage-context common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or stage-name common-lisp:null) :accessor
                         struct-shape-stage-context-name :shape "StageName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stage-context
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stage-context
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'stage-context 'make-stage-context))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stage-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stage-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stage-context))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stage-declaration common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or stage-name common-lisp:null) :accessor
                         struct-shape-stage-declaration-name :shape "StageName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (blockers :initarg :blockers :initform common-lisp:nil
                         :type
                         (common-lisp:or stage-blocker-declaration-list
                                         common-lisp:null)
                         :accessor struct-shape-stage-declaration-blockers
                         :shape "StageBlockerDeclarationList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (actions :initarg :actions :initform
                         (common-lisp:error ":actions is required") :type
                         (common-lisp:or stage-action-declaration-list
                                         common-lisp:null)
                         :accessor struct-shape-stage-declaration-actions
                         :shape "StageActionDeclarationList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stage-declaration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stage-declaration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stage-declaration 'make-stage-declaration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stage-declaration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stage-declaration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blockers))
      (common-lisp:list
       (common-lisp:cons "blockers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stage-declaration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stage-execution common-lisp:nil
                       ((pipeline-execution-id :initarg :pipeline-execution-id
                         :initform
                         (common-lisp:error ":pipelineexecutionid is required")
                         :type
                         (common-lisp:or pipeline-execution-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-stage-execution-pipeline-execution-id
                         :shape "PipelineExecutionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or stage-execution-status
                                         common-lisp:null)
                         :accessor struct-shape-stage-execution-status :shape
                         "StageExecutionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stage-execution
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stage-execution
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'stage-execution 'make-stage-execution))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stage-execution))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stage-execution))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-id))
      (common-lisp:list
       (common-lisp:cons "pipelineExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stage-execution))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype stage-execution-list ()
   '(trivial-types:proper-list stage-execution))
 (common-lisp:defun make-stage-execution-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list stage-execution))
   aws-sdk/generator/shape::members))
(common-lisp:deftype stage-execution-status () 'common-lisp:string)
(common-lisp:deftype stage-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition stage-not-found-exception
     (codepipeline-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'stage-not-found-exception)))
(common-lisp:progn
 (common-lisp:define-condition stage-not-retryable-exception
     (codepipeline-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'stage-not-retryable-exception)))
(common-lisp:deftype stage-retry-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass stage-state common-lisp:nil
                       ((stage-name :initarg :stage-name :initform
                         common-lisp:nil :type
                         (common-lisp:or stage-name common-lisp:null) :accessor
                         struct-shape-stage-state-stage-name :shape "StageName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (inbound-execution :initarg :inbound-execution
                         :initform common-lisp:nil :type
                         (common-lisp:or stage-execution common-lisp:null)
                         :accessor struct-shape-stage-state-inbound-execution
                         :shape "StageExecution" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (inbound-executions :initarg :inbound-executions
                         :initform common-lisp:nil :type
                         (common-lisp:or stage-execution-list common-lisp:null)
                         :accessor struct-shape-stage-state-inbound-executions
                         :shape "StageExecutionList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (inbound-transition-state :initarg
                         :inbound-transition-state :initform common-lisp:nil
                         :type
                         (common-lisp:or transition-state common-lisp:null)
                         :accessor
                         struct-shape-stage-state-inbound-transition-state
                         :shape "TransitionState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (action-states :initarg :action-states :initform
                         common-lisp:nil :type
                         (common-lisp:or action-state-list common-lisp:null)
                         :accessor struct-shape-stage-state-action-states
                         :shape "ActionStateList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (latest-execution :initarg :latest-execution :initform
                         common-lisp:nil :type
                         (common-lisp:or stage-execution common-lisp:null)
                         :accessor struct-shape-stage-state-latest-execution
                         :shape "StageExecution" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stage-state
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stage-state
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'stage-state 'make-stage-state))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stage-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stage-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stage-name))
      (common-lisp:list
       (common-lisp:cons "stageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inbound-execution))
      (common-lisp:list
       (common-lisp:cons "inboundExecution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inbound-executions))
      (common-lisp:list
       (common-lisp:cons "inboundExecutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inbound-transition-state))
      (common-lisp:list
       (common-lisp:cons "inboundTransitionState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-states))
      (common-lisp:list
       (common-lisp:cons "actionStates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-execution))
      (common-lisp:list
       (common-lisp:cons "latestExecution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stage-state))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype stage-state-list ()
   '(trivial-types:proper-list stage-state))
 (common-lisp:defun make-stage-state-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list stage-state))
   aws-sdk/generator/shape::members))
(common-lisp:deftype stage-transition-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass start-pipeline-execution-input common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or pipeline-name common-lisp:null)
                         :accessor
                         struct-shape-start-pipeline-execution-input-name
                         :shape "PipelineName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (variables :initarg :variables :initform
                         common-lisp:nil :type
                         (common-lisp:or pipeline-variable-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-pipeline-execution-input-variables
                         :shape "PipelineVariableList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-start-pipeline-execution-input-client-request-token
                         :shape "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-revisions :initarg :source-revisions :initform
                         common-lisp:nil :type
                         (common-lisp:or source-revision-override-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-pipeline-execution-input-source-revisions
                         :shape "SourceRevisionOverrideList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-pipeline-execution-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-pipeline-execution-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-pipeline-execution-input
                    'make-start-pipeline-execution-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-pipeline-execution-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-pipeline-execution-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variables))
      (common-lisp:list
       (common-lisp:cons "variables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-revisions))
      (common-lisp:list
       (common-lisp:cons "sourceRevisions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-pipeline-execution-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-pipeline-execution-output common-lisp:nil
                       ((pipeline-execution-id :initarg :pipeline-execution-id
                         :initform common-lisp:nil :type
                         (common-lisp:or pipeline-execution-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-pipeline-execution-output-pipeline-execution-id
                         :shape "PipelineExecutionId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-pipeline-execution-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-pipeline-execution-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-pipeline-execution-output
                    'make-start-pipeline-execution-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-pipeline-execution-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-pipeline-execution-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-id))
      (common-lisp:list
       (common-lisp:cons "pipelineExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-pipeline-execution-output))
   common-lisp:nil))
(common-lisp:deftype start-time-range () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass stop-execution-trigger common-lisp:nil
                       ((reason :initarg :reason :initform common-lisp:nil
                         :type
                         (common-lisp:or stop-pipeline-execution-reason
                                         common-lisp:null)
                         :accessor struct-shape-stop-execution-trigger-reason
                         :shape "StopPipelineExecutionReason" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-execution-trigger
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stop-execution-trigger
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-execution-trigger 'make-stop-execution-trigger))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-execution-trigger))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-execution-trigger))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-execution-trigger))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-pipeline-execution-input common-lisp:nil
                       ((pipeline-name :initarg :pipeline-name :initform
                         (common-lisp:error ":pipelinename is required") :type
                         (common-lisp:or pipeline-name common-lisp:null)
                         :accessor
                         struct-shape-stop-pipeline-execution-input-pipeline-name
                         :shape "PipelineName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pipeline-execution-id :initarg :pipeline-execution-id
                         :initform
                         (common-lisp:error ":pipelineexecutionid is required")
                         :type
                         (common-lisp:or pipeline-execution-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-stop-pipeline-execution-input-pipeline-execution-id
                         :shape "PipelineExecutionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (abandon :initarg :abandon :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-stop-pipeline-execution-input-abandon
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reason :initarg :reason :initform common-lisp:nil
                         :type
                         (common-lisp:or stop-pipeline-execution-reason
                                         common-lisp:null)
                         :accessor
                         struct-shape-stop-pipeline-execution-input-reason
                         :shape "StopPipelineExecutionReason" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-pipeline-execution-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-pipeline-execution-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-pipeline-execution-input
                    'make-stop-pipeline-execution-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-pipeline-execution-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-pipeline-execution-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-name))
      (common-lisp:list
       (common-lisp:cons "pipelineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-id))
      (common-lisp:list
       (common-lisp:cons "pipelineExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'abandon))
      (common-lisp:list
       (common-lisp:cons "abandon"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-pipeline-execution-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-pipeline-execution-output common-lisp:nil
                       ((pipeline-execution-id :initarg :pipeline-execution-id
                         :initform common-lisp:nil :type
                         (common-lisp:or pipeline-execution-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-stop-pipeline-execution-output-pipeline-execution-id
                         :shape "PipelineExecutionId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-pipeline-execution-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-pipeline-execution-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-pipeline-execution-output
                    'make-stop-pipeline-execution-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-pipeline-execution-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-pipeline-execution-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-id))
      (common-lisp:list
       (common-lisp:cons "pipelineExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-pipeline-execution-output))
   common-lisp:nil))
(common-lisp:deftype stop-pipeline-execution-reason () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         struct-shape-tag-key :shape "TagKey" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         struct-shape-tag-value :shape "TagValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-input common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor struct-shape-tag-resource-input-resource-arn
                         :shape "ResourceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-tag-resource-input-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-input 'make-tag-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-output 'make-tag-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-output))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass third-party-job common-lisp:nil
                       ((client-id :initarg :client-id :initform
                         common-lisp:nil :type
                         (common-lisp:or client-id common-lisp:null) :accessor
                         struct-shape-third-party-job-client-id :shape
                         "ClientId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or job-id common-lisp:null)
                         :accessor struct-shape-third-party-job-job-id :shape
                         "JobId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-third-party-job
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'third-party-job
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'third-party-job 'make-third-party-job))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input third-party-job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input third-party-job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "clientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input third-party-job))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass third-party-job-data common-lisp:nil
                       ((action-type-id :initarg :action-type-id :initform
                         common-lisp:nil :type
                         (common-lisp:or action-type-id common-lisp:null)
                         :accessor
                         struct-shape-third-party-job-data-action-type-id
                         :shape "ActionTypeId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (action-configuration :initarg :action-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or action-configuration common-lisp:null)
                         :accessor
                         struct-shape-third-party-job-data-action-configuration
                         :shape "ActionConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pipeline-context :initarg :pipeline-context :initform
                         common-lisp:nil :type
                         (common-lisp:or pipeline-context common-lisp:null)
                         :accessor
                         struct-shape-third-party-job-data-pipeline-context
                         :shape "PipelineContext" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (input-artifacts :initarg :input-artifacts :initform
                         common-lisp:nil :type
                         (common-lisp:or artifact-list common-lisp:null)
                         :accessor
                         struct-shape-third-party-job-data-input-artifacts
                         :shape "ArtifactList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-artifacts :initarg :output-artifacts :initform
                         common-lisp:nil :type
                         (common-lisp:or artifact-list common-lisp:null)
                         :accessor
                         struct-shape-third-party-job-data-output-artifacts
                         :shape "ArtifactList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (artifact-credentials :initarg :artifact-credentials
                         :initform common-lisp:nil :type
                         (common-lisp:or awssession-credentials
                                         common-lisp:null)
                         :accessor
                         struct-shape-third-party-job-data-artifact-credentials
                         :shape "AWSSessionCredentials" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (continuation-token :initarg :continuation-token
                         :initform common-lisp:nil :type
                         (common-lisp:or continuation-token common-lisp:null)
                         :accessor
                         struct-shape-third-party-job-data-continuation-token
                         :shape "ContinuationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encryption-key :initarg :encryption-key :initform
                         common-lisp:nil :type
                         (common-lisp:or encryption-key common-lisp:null)
                         :accessor
                         struct-shape-third-party-job-data-encryption-key
                         :shape "EncryptionKey" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-third-party-job-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'third-party-job-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'third-party-job-data 'make-third-party-job-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input third-party-job-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input third-party-job-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-type-id))
      (common-lisp:list
       (common-lisp:cons "actionTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'action-configuration))
      (common-lisp:list
       (common-lisp:cons "actionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-context))
      (common-lisp:list
       (common-lisp:cons "pipelineContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-artifacts))
      (common-lisp:list
       (common-lisp:cons "inputArtifacts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-artifacts))
      (common-lisp:list
       (common-lisp:cons "outputArtifacts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'artifact-credentials))
      (common-lisp:list
       (common-lisp:cons "artifactCredentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'continuation-token))
      (common-lisp:list
       (common-lisp:cons "continuationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key))
      (common-lisp:list
       (common-lisp:cons "encryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input third-party-job-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass third-party-job-details common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or third-party-job-id common-lisp:null)
                         :accessor struct-shape-third-party-job-details-id
                         :shape "ThirdPartyJobId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data :initarg :data :initform common-lisp:nil :type
                         (common-lisp:or third-party-job-data common-lisp:null)
                         :accessor struct-shape-third-party-job-details-data
                         :shape "ThirdPartyJobData" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (nonce :initarg :nonce :initform common-lisp:nil :type
                         (common-lisp:or nonce common-lisp:null) :accessor
                         struct-shape-third-party-job-details-nonce :shape
                         "Nonce" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-third-party-job-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'third-party-job-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'third-party-job-details 'make-third-party-job-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          third-party-job-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          third-party-job-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nonce))
      (common-lisp:list
       (common-lisp:cons "nonce"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          third-party-job-details))
   common-lisp:nil))
(common-lisp:deftype third-party-job-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype third-party-job-list ()
   '(trivial-types:proper-list third-party-job))
 (common-lisp:defun make-third-party-job-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list third-party-job))
   aws-sdk/generator/shape::members))
(common-lisp:deftype time () 'common-lisp:string)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition too-many-tags-exception
     (codepipeline-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-tags-exception-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-tags-exception 'too-many-tags-exception-message)))
(common-lisp:progn
 (common-lisp:defclass transition-state common-lisp:nil
                       ((enabled :initarg :enabled :initform common-lisp:nil
                         :type (common-lisp:or enabled common-lisp:null)
                         :accessor struct-shape-transition-state-enabled :shape
                         "Enabled" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-changed-by :initarg :last-changed-by :initform
                         common-lisp:nil :type
                         (common-lisp:or last-changed-by common-lisp:null)
                         :accessor
                         struct-shape-transition-state-last-changed-by :shape
                         "LastChangedBy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-changed-at :initarg :last-changed-at :initform
                         common-lisp:nil :type
                         (common-lisp:or last-changed-at common-lisp:null)
                         :accessor
                         struct-shape-transition-state-last-changed-at :shape
                         "LastChangedAt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (disabled-reason :initarg :disabled-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or disabled-reason common-lisp:null)
                         :accessor
                         struct-shape-transition-state-disabled-reason :shape
                         "DisabledReason" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-transition-state
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'transition-state
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'transition-state 'make-transition-state))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input transition-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input transition-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-changed-by))
      (common-lisp:list
       (common-lisp:cons "lastChangedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-changed-at))
      (common-lisp:list
       (common-lisp:cons "lastChangedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disabled-reason))
      (common-lisp:list
       (common-lisp:cons "disabledReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input transition-state))
   common-lisp:nil))
(common-lisp:deftype trigger-detail () 'common-lisp:string)
(common-lisp:deftype trigger-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-input common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-untag-resource-input-resource-arn :shape
                         "ResourceArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tagkeys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-untag-resource-input-tag-keys
                         :shape "TagKeyList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-input 'make-untag-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "tagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input untag-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-output 'make-untag-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-action-type-input common-lisp:nil
                       ((action-type :initarg :action-type :initform
                         (common-lisp:error ":actiontype is required") :type
                         (common-lisp:or action-type-declaration
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-action-type-input-action-type
                         :shape "ActionTypeDeclaration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-action-type-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-action-type-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-action-type-input 'make-update-action-type-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-action-type-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-action-type-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-type))
      (common-lisp:list
       (common-lisp:cons "actionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-action-type-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-pipeline-input common-lisp:nil
                       ((pipeline :initarg :pipeline :initform
                         (common-lisp:error ":pipeline is required") :type
                         (common-lisp:or pipeline-declaration common-lisp:null)
                         :accessor struct-shape-update-pipeline-input-pipeline
                         :shape "PipelineDeclaration" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-pipeline-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-pipeline-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-pipeline-input 'make-update-pipeline-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-pipeline-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-pipeline-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline))
      (common-lisp:list
       (common-lisp:cons "pipeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-pipeline-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-pipeline-output common-lisp:nil
                       ((pipeline :initarg :pipeline :initform common-lisp:nil
                         :type
                         (common-lisp:or pipeline-declaration common-lisp:null)
                         :accessor struct-shape-update-pipeline-output-pipeline
                         :shape "PipelineDeclaration" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-pipeline-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-pipeline-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-pipeline-output 'make-update-pipeline-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-pipeline-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-pipeline-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline))
      (common-lisp:list
       (common-lisp:cons "pipeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-pipeline-output))
   common-lisp:nil))
(common-lisp:deftype url () 'common-lisp:string)
(common-lisp:deftype url-template () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (codepipeline-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'validation-exception)))
(common-lisp:deftype version () 'common-lisp:string)
(common-lisp:deftype webhook-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass webhook-auth-configuration common-lisp:nil
                       ((allowed-iprange :initarg :allowed-iprange :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          webhook-auth-configuration-allowed-iprange
                          common-lisp:null)
                         :accessor
                         struct-shape-webhook-auth-configuration-allowed-iprange
                         :shape "WebhookAuthConfigurationAllowedIPRange"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (secret-token :initarg :secret-token :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          webhook-auth-configuration-secret-token
                          common-lisp:null)
                         :accessor
                         struct-shape-webhook-auth-configuration-secret-token
                         :shape "WebhookAuthConfigurationSecretToken" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-webhook-auth-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'webhook-auth-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'webhook-auth-configuration
                    'make-webhook-auth-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          webhook-auth-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          webhook-auth-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-iprange))
      (common-lisp:list
       (common-lisp:cons "AllowedIPRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-token))
      (common-lisp:list
       (common-lisp:cons "SecretToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          webhook-auth-configuration))
   common-lisp:nil))
(common-lisp:deftype webhook-auth-configuration-allowed-iprange ()
  'common-lisp:string)
(common-lisp:deftype webhook-auth-configuration-secret-token ()
  'common-lisp:string)
(common-lisp:deftype webhook-authentication-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass webhook-definition common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or webhook-name common-lisp:null)
                         :accessor struct-shape-webhook-definition-name :shape
                         "WebhookName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (target-pipeline :initarg :target-pipeline :initform
                         (common-lisp:error ":targetpipeline is required")
                         :type (common-lisp:or pipeline-name common-lisp:null)
                         :accessor
                         struct-shape-webhook-definition-target-pipeline :shape
                         "PipelineName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-action :initarg :target-action :initform
                         (common-lisp:error ":targetaction is required") :type
                         (common-lisp:or action-name common-lisp:null)
                         :accessor
                         struct-shape-webhook-definition-target-action :shape
                         "ActionName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (filters :initarg :filters :initform
                         (common-lisp:error ":filters is required") :type
                         (common-lisp:or webhook-filters common-lisp:null)
                         :accessor struct-shape-webhook-definition-filters
                         :shape "WebhookFilters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (authentication :initarg :authentication :initform
                         (common-lisp:error ":authentication is required")
                         :type
                         (common-lisp:or webhook-authentication-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-webhook-definition-authentication :shape
                         "WebhookAuthenticationType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (authentication-configuration :initarg
                         :authentication-configuration :initform
                         (common-lisp:error
                          ":authenticationconfiguration is required")
                         :type
                         (common-lisp:or webhook-auth-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-webhook-definition-authentication-configuration
                         :shape "WebhookAuthConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-webhook-definition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'webhook-definition
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'webhook-definition 'make-webhook-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input webhook-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input webhook-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-pipeline))
      (common-lisp:list
       (common-lisp:cons "targetPipeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-action))
      (common-lisp:list
       (common-lisp:cons "targetAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication))
      (common-lisp:list
       (common-lisp:cons "authentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-configuration))
      (common-lisp:list
       (common-lisp:cons "authenticationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input webhook-definition))
   common-lisp:nil))
(common-lisp:deftype webhook-error-code () 'common-lisp:string)
(common-lisp:deftype webhook-error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass webhook-filter-rule common-lisp:nil
                       ((json-path :initarg :json-path :initform
                         (common-lisp:error ":jsonpath is required") :type
                         (common-lisp:or json-path common-lisp:null) :accessor
                         struct-shape-webhook-filter-rule-json-path :shape
                         "JsonPath" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (match-equals :initarg :match-equals :initform
                         common-lisp:nil :type
                         (common-lisp:or match-equals common-lisp:null)
                         :accessor
                         struct-shape-webhook-filter-rule-match-equals :shape
                         "MatchEquals" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-webhook-filter-rule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'webhook-filter-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'webhook-filter-rule 'make-webhook-filter-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input webhook-filter-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input webhook-filter-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'json-path))
      (common-lisp:list
       (common-lisp:cons "jsonPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match-equals))
      (common-lisp:list
       (common-lisp:cons "matchEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input webhook-filter-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype webhook-filters ()
   '(trivial-types:proper-list webhook-filter-rule))
 (common-lisp:defun make-webhook-filters
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list webhook-filter-rule))
   aws-sdk/generator/shape::members))
(common-lisp:deftype webhook-last-triggered () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype webhook-list ()
   '(trivial-types:proper-list list-webhook-item))
 (common-lisp:defun make-webhook-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list list-webhook-item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype webhook-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition webhook-not-found-exception
     (codepipeline-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'webhook-not-found-exception)))
(common-lisp:deftype webhook-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun acknowledge-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id nonce)
   (common-lisp:declare (common-lisp:ignorable job-id nonce))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-acknowledge-job-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AcknowledgeJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'acknowledge-job))
(common-lisp:progn
 (common-lisp:defun acknowledge-third-party-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id nonce client-token)
   (common-lisp:declare (common-lisp:ignorable job-id nonce client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-acknowledge-third-party-job-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AcknowledgeThirdPartyJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'acknowledge-third-party-job))
(common-lisp:progn
 (common-lisp:defun create-custom-action-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key category provider version settings
                     configuration-properties input-artifact-details
                     output-artifact-details tags)
   (common-lisp:declare
    (common-lisp:ignorable category provider version settings
     configuration-properties input-artifact-details output-artifact-details
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-custom-action-type-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateCustomActionType"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-custom-action-type))
(common-lisp:progn
 (common-lisp:defun create-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline tags)
   (common-lisp:declare (common-lisp:ignorable pipeline tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-pipeline-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreatePipeline"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-pipeline))
(common-lisp:progn
 (common-lisp:defun delete-custom-action-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key category provider version)
   (common-lisp:declare (common-lisp:ignorable category provider version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-custom-action-type-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteCustomActionType"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-custom-action-type))
(common-lisp:progn
 (common-lisp:defun delete-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-pipeline-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeletePipeline"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-pipeline))
(common-lisp:progn
 (common-lisp:defun delete-webhook
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-webhook-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteWebhook"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-webhook))
(common-lisp:progn
 (common-lisp:defun deregister-webhook-with-third-party
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key webhook-name)
   (common-lisp:declare (common-lisp:ignorable webhook-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-deregister-webhook-with-third-party-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeregisterWebhookWithThirdParty"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'deregister-webhook-with-third-party))
(common-lisp:progn
 (common-lisp:defun disable-stage-transition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-name stage-name transition-type
                     reason)
   (common-lisp:declare
    (common-lisp:ignorable pipeline-name stage-name transition-type reason))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disable-stage-transition-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DisableStageTransition"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disable-stage-transition))
(common-lisp:progn
 (common-lisp:defun enable-stage-transition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-name stage-name transition-type)
   (common-lisp:declare
    (common-lisp:ignorable pipeline-name stage-name transition-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-enable-stage-transition-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "EnableStageTransition"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'enable-stage-transition))
(common-lisp:progn
 (common-lisp:defun get-action-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key category owner provider version)
   (common-lisp:declare
    (common-lisp:ignorable category owner provider version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-action-type-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetActionType"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-action-type))
(common-lisp:progn
 (common-lisp:defun get-job-details
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-job-details-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetJobDetails"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-job-details))
(common-lisp:progn
 (common-lisp:defun get-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name version)
   (common-lisp:declare (common-lisp:ignorable name version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-pipeline-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetPipeline"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-pipeline))
(common-lisp:progn
 (common-lisp:defun get-pipeline-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-name pipeline-execution-id)
   (common-lisp:declare
    (common-lisp:ignorable pipeline-name pipeline-execution-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-pipeline-execution-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetPipelineExecution"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-pipeline-execution))
(common-lisp:progn
 (common-lisp:defun get-pipeline-state
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-pipeline-state-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetPipelineState"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-pipeline-state))
(common-lisp:progn
 (common-lisp:defun get-third-party-job-details
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id client-token)
   (common-lisp:declare (common-lisp:ignorable job-id client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-third-party-job-details-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetThirdPartyJobDetails"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-third-party-job-details))
(common-lisp:progn
 (common-lisp:defun list-action-executions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-name filter max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable pipeline-name filter max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-action-executions-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListActionExecutions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-action-executions))
(common-lisp:progn
 (common-lisp:defun list-action-types
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action-owner-filter next-token
                     region-filter)
   (common-lisp:declare
    (common-lisp:ignorable action-owner-filter next-token region-filter))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-action-types-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListActionTypes"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-action-types))
(common-lisp:progn
 (common-lisp:defun list-pipeline-executions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-name max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable pipeline-name max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-pipeline-executions-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListPipelineExecutions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-pipeline-executions))
(common-lisp:progn
 (common-lisp:defun list-pipelines
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-pipelines-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListPipelines"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-pipelines))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-webhooks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-webhooks-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListWebhooks"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-webhooks))
(common-lisp:progn
 (common-lisp:defun poll-for-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action-type-id max-batch-size
                     query-param)
   (common-lisp:declare
    (common-lisp:ignorable action-type-id max-batch-size query-param))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-poll-for-jobs-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PollForJobs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'poll-for-jobs))
(common-lisp:progn
 (common-lisp:defun poll-for-third-party-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action-type-id max-batch-size)
   (common-lisp:declare (common-lisp:ignorable action-type-id max-batch-size))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-poll-for-third-party-jobs-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PollForThirdPartyJobs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'poll-for-third-party-jobs))
(common-lisp:progn
 (common-lisp:defun put-action-revision
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-name stage-name action-name
                     action-revision)
   (common-lisp:declare
    (common-lisp:ignorable pipeline-name stage-name action-name
     action-revision))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-action-revision-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutActionRevision"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-action-revision))
(common-lisp:progn
 (common-lisp:defun put-approval-result
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-name stage-name action-name
                     result token)
   (common-lisp:declare
    (common-lisp:ignorable pipeline-name stage-name action-name result token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-approval-result-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutApprovalResult"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-approval-result))
(common-lisp:progn
 (common-lisp:defun put-job-failure-result
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id failure-details)
   (common-lisp:declare (common-lisp:ignorable job-id failure-details))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-job-failure-result-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutJobFailureResult"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-job-failure-result))
(common-lisp:progn
 (common-lisp:defun put-job-success-result
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id current-revision
                     continuation-token execution-details output-variables)
   (common-lisp:declare
    (common-lisp:ignorable job-id current-revision continuation-token
     execution-details output-variables))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-job-success-result-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutJobSuccessResult"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-job-success-result))
(common-lisp:progn
 (common-lisp:defun put-third-party-job-failure-result
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id client-token failure-details)
   (common-lisp:declare
    (common-lisp:ignorable job-id client-token failure-details))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-third-party-job-failure-result-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutThirdPartyJobFailureResult"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-third-party-job-failure-result))
(common-lisp:progn
 (common-lisp:defun put-third-party-job-success-result
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id client-token current-revision
                     continuation-token execution-details)
   (common-lisp:declare
    (common-lisp:ignorable job-id client-token current-revision
     continuation-token execution-details))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-third-party-job-success-result-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutThirdPartyJobSuccessResult"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-third-party-job-success-result))
(common-lisp:progn
 (common-lisp:defun put-webhook
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key webhook tags)
   (common-lisp:declare (common-lisp:ignorable webhook tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-webhook-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutWebhook"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-webhook))
(common-lisp:progn
 (common-lisp:defun register-webhook-with-third-party
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key webhook-name)
   (common-lisp:declare (common-lisp:ignorable webhook-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-register-webhook-with-third-party-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RegisterWebhookWithThirdParty"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'register-webhook-with-third-party))
(common-lisp:progn
 (common-lisp:defun retry-stage-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-name stage-name
                     pipeline-execution-id retry-mode)
   (common-lisp:declare
    (common-lisp:ignorable pipeline-name stage-name pipeline-execution-id
     retry-mode))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-retry-stage-execution-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RetryStageExecution"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'retry-stage-execution))
(common-lisp:progn
 (common-lisp:defun start-pipeline-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name variables client-request-token
                     source-revisions)
   (common-lisp:declare
    (common-lisp:ignorable name variables client-request-token
     source-revisions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-pipeline-execution-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartPipelineExecution"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-pipeline-execution))
(common-lisp:progn
 (common-lisp:defun stop-pipeline-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-name pipeline-execution-id
                     abandon reason)
   (common-lisp:declare
    (common-lisp:ignorable pipeline-name pipeline-execution-id abandon reason))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-pipeline-execution-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopPipelineExecution"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'stop-pipeline-execution))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-action-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action-type)
   (common-lisp:declare (common-lisp:ignorable action-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-action-type-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateActionType"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-action-type))
(common-lisp:progn
 (common-lisp:defun update-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline)
   (common-lisp:declare (common-lisp:ignorable pipeline))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-pipeline-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdatePipeline"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-pipeline))
