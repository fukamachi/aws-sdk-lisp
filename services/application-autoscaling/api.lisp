;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/application-autoscaling/api
  (:use)
  (:nicknames #:aws/application-autoscaling)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/application-autoscaling/api)
(common-lisp:progn
 (common-lisp:define-condition application-autoscaling-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'application-autoscaling-error))
(common-lisp:progn
 (common-lisp:defclass application-autoscaling-request
                       (aws-sdk/json-request:json-request) common-lisp:nil
                       (:default-initargs :service "application-autoscaling"
                        :api-version "2016-02-06" :host-prefix
                        "application-autoscaling" :signing-name
                        "application-autoscaling" :global-host common-lisp:nil
                        :target-prefix "AnyScaleFrontendService" :json-version
                        "1.1"))
 (common-lisp:export 'application-autoscaling-request))
(common-lisp:defvar *error-map*
  '(("ConcurrentUpdateException" . concurrent-update-exception)
    ("FailedResourceAccessException" . failed-resource-access-exception)
    ("InternalServiceException" . internal-service-exception)
    ("InvalidNextTokenException" . invalid-next-token-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("ObjectNotFoundException" . object-not-found-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("TooManyTagsException" . too-many-tags-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:deftype adjustment-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass alarm common-lisp:nil
                       ((alarm-name :initarg :alarm-name :initform
                         (common-lisp:error ":alarm-name is required") :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor struct-shape-alarm-alarm-name :shape
                         "ResourceId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (alarm-arn :initarg :alarm-arn :initform
                         (common-lisp:error ":alarm-arn is required") :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor struct-shape-alarm-alarm-arn :shape
                         "ResourceId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-alarm
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'alarm
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'alarm 'make-alarm))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input alarm))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input alarm))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarm-name))
      (common-lisp:list
       (common-lisp:cons "AlarmName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarm-arn))
      (common-lisp:list
       (common-lisp:cons "AlarmARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input alarm))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype alarms () '(trivial-types:proper-list alarm))
 (common-lisp:defun make-alarms
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list alarm))
   aws-sdk/generator/shape::members))
(common-lisp:deftype amazon-resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition concurrent-update-exception
     (application-autoscaling-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       concurrent-update-exception-message)))
 (common-lisp:export
  (common-lisp:list 'concurrent-update-exception
                    'concurrent-update-exception-message)))
(common-lisp:deftype cooldown () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass customized-metric-specification common-lisp:nil
                       ((metric-name :initarg :metric-name :initform
                         common-lisp:nil :type
                         (common-lisp:or metric-name common-lisp:null)
                         :accessor
                         struct-shape-customized-metric-specification-metric-name
                         :shape "MetricName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (namespace :initarg :namespace :initform
                         common-lisp:nil :type
                         (common-lisp:or metric-namespace common-lisp:null)
                         :accessor
                         struct-shape-customized-metric-specification-namespace
                         :shape "MetricNamespace" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dimensions :initarg :dimensions :initform
                         common-lisp:nil :type
                         (common-lisp:or metric-dimensions common-lisp:null)
                         :accessor
                         struct-shape-customized-metric-specification-dimensions
                         :shape "MetricDimensions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (statistic :initarg :statistic :initform
                         common-lisp:nil :type
                         (common-lisp:or metric-statistic common-lisp:null)
                         :accessor
                         struct-shape-customized-metric-specification-statistic
                         :shape "MetricStatistic" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unit :initarg :unit :initform common-lisp:nil :type
                         (common-lisp:or metric-unit common-lisp:null)
                         :accessor
                         struct-shape-customized-metric-specification-unit
                         :shape "MetricUnit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metrics :initarg :metrics :initform common-lisp:nil
                         :type
                         (common-lisp:or target-tracking-metric-data-queries
                                         common-lisp:null)
                         :accessor
                         struct-shape-customized-metric-specification-metrics
                         :shape "TargetTrackingMetricDataQueries" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-customized-metric-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'customized-metric-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'customized-metric-specification
                    'make-customized-metric-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          customized-metric-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          customized-metric-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "Namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimensions))
      (common-lisp:list
       (common-lisp:cons "Dimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistic))
      (common-lisp:list
       (common-lisp:cons "Statistic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "Unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "Metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          customized-metric-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-scaling-policy-request common-lisp:nil
                       ((policy-name :initarg :policy-name :initform
                         (common-lisp:error ":policy-name is required") :type
                         (common-lisp:or resource-id-max-len1600
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-scaling-policy-request-policy-name
                         :shape "ResourceIdMaxLen1600" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (service-namespace :initarg :service-namespace
                         :initform
                         (common-lisp:error ":service-namespace is required")
                         :type
                         (common-lisp:or service-namespace common-lisp:null)
                         :accessor
                         struct-shape-delete-scaling-policy-request-service-namespace
                         :shape "ServiceNamespace" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-id :initarg :resource-id :initform
                         (common-lisp:error ":resource-id is required") :type
                         (common-lisp:or resource-id-max-len1600
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-scaling-policy-request-resource-id
                         :shape "ResourceIdMaxLen1600" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (scalable-dimension :initarg :scalable-dimension
                         :initform
                         (common-lisp:error ":scalable-dimension is required")
                         :type
                         (common-lisp:or scalable-dimension common-lisp:null)
                         :accessor
                         struct-shape-delete-scaling-policy-request-scalable-dimension
                         :shape "ScalableDimension" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-scaling-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-scaling-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-scaling-policy-request
                    'make-delete-scaling-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-scaling-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-scaling-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-namespace))
      (common-lisp:list
       (common-lisp:cons "ServiceNamespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scalable-dimension))
      (common-lisp:list
       (common-lisp:cons "ScalableDimension"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-scaling-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-scaling-policy-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-scaling-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-scaling-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-scaling-policy-response
                    'make-delete-scaling-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-scaling-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-scaling-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-scaling-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-scheduled-action-request common-lisp:nil
                       ((service-namespace :initarg :service-namespace
                         :initform
                         (common-lisp:error ":service-namespace is required")
                         :type
                         (common-lisp:or service-namespace common-lisp:null)
                         :accessor
                         struct-shape-delete-scheduled-action-request-service-namespace
                         :shape "ServiceNamespace" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scheduled-action-name :initarg :scheduled-action-name
                         :initform
                         (common-lisp:error
                          ":scheduled-action-name is required")
                         :type
                         (common-lisp:or resource-id-max-len1600
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-scheduled-action-request-scheduled-action-name
                         :shape "ResourceIdMaxLen1600" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (resource-id :initarg :resource-id :initform
                         (common-lisp:error ":resource-id is required") :type
                         (common-lisp:or resource-id-max-len1600
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-scheduled-action-request-resource-id
                         :shape "ResourceIdMaxLen1600" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (scalable-dimension :initarg :scalable-dimension
                         :initform
                         (common-lisp:error ":scalable-dimension is required")
                         :type
                         (common-lisp:or scalable-dimension common-lisp:null)
                         :accessor
                         struct-shape-delete-scheduled-action-request-scalable-dimension
                         :shape "ScalableDimension" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-scheduled-action-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-scheduled-action-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-scheduled-action-request
                    'make-delete-scheduled-action-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-scheduled-action-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-scheduled-action-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-namespace))
      (common-lisp:list
       (common-lisp:cons "ServiceNamespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-action-name))
      (common-lisp:list
       (common-lisp:cons "ScheduledActionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scalable-dimension))
      (common-lisp:list
       (common-lisp:cons "ScalableDimension"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-scheduled-action-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-scheduled-action-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-scheduled-action-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-scheduled-action-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-scheduled-action-response
                    'make-delete-scheduled-action-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-scheduled-action-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-scheduled-action-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-scheduled-action-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-scalable-target-request common-lisp:nil
                       ((service-namespace :initarg :service-namespace
                         :initform
                         (common-lisp:error ":service-namespace is required")
                         :type
                         (common-lisp:or service-namespace common-lisp:null)
                         :accessor
                         struct-shape-deregister-scalable-target-request-service-namespace
                         :shape "ServiceNamespace" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-id :initarg :resource-id :initform
                         (common-lisp:error ":resource-id is required") :type
                         (common-lisp:or resource-id-max-len1600
                                         common-lisp:null)
                         :accessor
                         struct-shape-deregister-scalable-target-request-resource-id
                         :shape "ResourceIdMaxLen1600" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (scalable-dimension :initarg :scalable-dimension
                         :initform
                         (common-lisp:error ":scalable-dimension is required")
                         :type
                         (common-lisp:or scalable-dimension common-lisp:null)
                         :accessor
                         struct-shape-deregister-scalable-target-request-scalable-dimension
                         :shape "ScalableDimension" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deregister-scalable-target-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'deregister-scalable-target-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deregister-scalable-target-request
                    'make-deregister-scalable-target-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-scalable-target-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-scalable-target-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-namespace))
      (common-lisp:list
       (common-lisp:cons "ServiceNamespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scalable-dimension))
      (common-lisp:list
       (common-lisp:cons "ScalableDimension"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-scalable-target-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-scalable-target-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deregister-scalable-target-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'deregister-scalable-target-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deregister-scalable-target-response
                    'make-deregister-scalable-target-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-scalable-target-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-scalable-target-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-scalable-target-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-scalable-targets-request common-lisp:nil
                       ((service-namespace :initarg :service-namespace
                         :initform
                         (common-lisp:error ":service-namespace is required")
                         :type
                         (common-lisp:or service-namespace common-lisp:null)
                         :accessor
                         struct-shape-describe-scalable-targets-request-service-namespace
                         :shape "ServiceNamespace" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-ids :initarg :resource-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-ids-max-len1600
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-scalable-targets-request-resource-ids
                         :shape "ResourceIdsMaxLen1600" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (scalable-dimension :initarg :scalable-dimension
                         :initform common-lisp:nil :type
                         (common-lisp:or scalable-dimension common-lisp:null)
                         :accessor
                         struct-shape-describe-scalable-targets-request-scalable-dimension
                         :shape "ScalableDimension" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-describe-scalable-targets-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         struct-shape-describe-scalable-targets-request-next-token
                         :shape "XmlString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-scalable-targets-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-scalable-targets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-scalable-targets-request
                    'make-describe-scalable-targets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-scalable-targets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-scalable-targets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-namespace))
      (common-lisp:list
       (common-lisp:cons "ServiceNamespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-ids))
      (common-lisp:list
       (common-lisp:cons "ResourceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scalable-dimension))
      (common-lisp:list
       (common-lisp:cons "ScalableDimension"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-scalable-targets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-scalable-targets-response common-lisp:nil
                       ((scalable-targets :initarg :scalable-targets :initform
                         common-lisp:nil :type
                         (common-lisp:or scalable-targets common-lisp:null)
                         :accessor
                         struct-shape-describe-scalable-targets-response-scalable-targets
                         :shape "ScalableTargets" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         struct-shape-describe-scalable-targets-response-next-token
                         :shape "XmlString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-scalable-targets-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-scalable-targets-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-scalable-targets-response
                    'make-describe-scalable-targets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-scalable-targets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-scalable-targets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scalable-targets))
      (common-lisp:list
       (common-lisp:cons "ScalableTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-scalable-targets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-scaling-activities-request common-lisp:nil
                       ((service-namespace :initarg :service-namespace
                         :initform
                         (common-lisp:error ":service-namespace is required")
                         :type
                         (common-lisp:or service-namespace common-lisp:null)
                         :accessor
                         struct-shape-describe-scaling-activities-request-service-namespace
                         :shape "ServiceNamespace" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-id :initarg :resource-id :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-id-max-len1600
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-scaling-activities-request-resource-id
                         :shape "ResourceIdMaxLen1600" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (scalable-dimension :initarg :scalable-dimension
                         :initform common-lisp:nil :type
                         (common-lisp:or scalable-dimension common-lisp:null)
                         :accessor
                         struct-shape-describe-scaling-activities-request-scalable-dimension
                         :shape "ScalableDimension" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-describe-scaling-activities-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         struct-shape-describe-scaling-activities-request-next-token
                         :shape "XmlString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (include-not-scaled-activities :initarg
                         :include-not-scaled-activities :initform
                         common-lisp:nil :type
                         (common-lisp:or include-not-scaled-activities
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-scaling-activities-request-include-not-scaled-activities
                         :shape "IncludeNotScaledActivities" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-scaling-activities-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-scaling-activities-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-scaling-activities-request
                    'make-describe-scaling-activities-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-scaling-activities-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-scaling-activities-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-namespace))
      (common-lisp:list
       (common-lisp:cons "ServiceNamespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scalable-dimension))
      (common-lisp:list
       (common-lisp:cons "ScalableDimension"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-not-scaled-activities))
      (common-lisp:list
       (common-lisp:cons "IncludeNotScaledActivities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-scaling-activities-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-scaling-activities-response common-lisp:nil
                       ((scaling-activities :initarg :scaling-activities
                         :initform common-lisp:nil :type
                         (common-lisp:or scaling-activities common-lisp:null)
                         :accessor
                         struct-shape-describe-scaling-activities-response-scaling-activities
                         :shape "ScalingActivities" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         struct-shape-describe-scaling-activities-response-next-token
                         :shape "XmlString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-scaling-activities-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-scaling-activities-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-scaling-activities-response
                    'make-describe-scaling-activities-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-scaling-activities-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-scaling-activities-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-activities))
      (common-lisp:list
       (common-lisp:cons "ScalingActivities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-scaling-activities-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-scaling-policies-request common-lisp:nil
                       ((policy-names :initarg :policy-names :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-ids-max-len1600
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-scaling-policies-request-policy-names
                         :shape "ResourceIdsMaxLen1600" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (service-namespace :initarg :service-namespace
                         :initform
                         (common-lisp:error ":service-namespace is required")
                         :type
                         (common-lisp:or service-namespace common-lisp:null)
                         :accessor
                         struct-shape-describe-scaling-policies-request-service-namespace
                         :shape "ServiceNamespace" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-id :initarg :resource-id :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-id-max-len1600
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-scaling-policies-request-resource-id
                         :shape "ResourceIdMaxLen1600" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (scalable-dimension :initarg :scalable-dimension
                         :initform common-lisp:nil :type
                         (common-lisp:or scalable-dimension common-lisp:null)
                         :accessor
                         struct-shape-describe-scaling-policies-request-scalable-dimension
                         :shape "ScalableDimension" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-describe-scaling-policies-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         struct-shape-describe-scaling-policies-request-next-token
                         :shape "XmlString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-scaling-policies-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-scaling-policies-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-scaling-policies-request
                    'make-describe-scaling-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-scaling-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-scaling-policies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-names))
      (common-lisp:list
       (common-lisp:cons "PolicyNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-namespace))
      (common-lisp:list
       (common-lisp:cons "ServiceNamespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scalable-dimension))
      (common-lisp:list
       (common-lisp:cons "ScalableDimension"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-scaling-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-scaling-policies-response common-lisp:nil
                       ((scaling-policies :initarg :scaling-policies :initform
                         common-lisp:nil :type
                         (common-lisp:or scaling-policies common-lisp:null)
                         :accessor
                         struct-shape-describe-scaling-policies-response-scaling-policies
                         :shape "ScalingPolicies" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         struct-shape-describe-scaling-policies-response-next-token
                         :shape "XmlString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-scaling-policies-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-scaling-policies-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-scaling-policies-response
                    'make-describe-scaling-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-scaling-policies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-scaling-policies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-policies))
      (common-lisp:list
       (common-lisp:cons "ScalingPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-scaling-policies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-scheduled-actions-request common-lisp:nil
                       ((scheduled-action-names :initarg
                         :scheduled-action-names :initform common-lisp:nil
                         :type
                         (common-lisp:or resource-ids-max-len1600
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-scheduled-actions-request-scheduled-action-names
                         :shape "ResourceIdsMaxLen1600" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (service-namespace :initarg :service-namespace
                         :initform
                         (common-lisp:error ":service-namespace is required")
                         :type
                         (common-lisp:or service-namespace common-lisp:null)
                         :accessor
                         struct-shape-describe-scheduled-actions-request-service-namespace
                         :shape "ServiceNamespace" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-id :initarg :resource-id :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-id-max-len1600
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-scheduled-actions-request-resource-id
                         :shape "ResourceIdMaxLen1600" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (scalable-dimension :initarg :scalable-dimension
                         :initform common-lisp:nil :type
                         (common-lisp:or scalable-dimension common-lisp:null)
                         :accessor
                         struct-shape-describe-scheduled-actions-request-scalable-dimension
                         :shape "ScalableDimension" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-describe-scheduled-actions-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         struct-shape-describe-scheduled-actions-request-next-token
                         :shape "XmlString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-scheduled-actions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-scheduled-actions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-scheduled-actions-request
                    'make-describe-scheduled-actions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-scheduled-actions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-scheduled-actions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-action-names))
      (common-lisp:list
       (common-lisp:cons "ScheduledActionNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-namespace))
      (common-lisp:list
       (common-lisp:cons "ServiceNamespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scalable-dimension))
      (common-lisp:list
       (common-lisp:cons "ScalableDimension"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-scheduled-actions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-scheduled-actions-response common-lisp:nil
                       ((scheduled-actions :initarg :scheduled-actions
                         :initform common-lisp:nil :type
                         (common-lisp:or scheduled-actions common-lisp:null)
                         :accessor
                         struct-shape-describe-scheduled-actions-response-scheduled-actions
                         :shape "ScheduledActions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         struct-shape-describe-scheduled-actions-response-next-token
                         :shape "XmlString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-scheduled-actions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-scheduled-actions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-scheduled-actions-response
                    'make-describe-scheduled-actions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-scheduled-actions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-scheduled-actions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduled-actions))
      (common-lisp:list
       (common-lisp:cons "ScheduledActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-scheduled-actions-response))
   common-lisp:nil))
(common-lisp:deftype disable-scale-in () 'common-lisp:boolean)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype exception-message () 'common-lisp:string)
(common-lisp:deftype expression () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition failed-resource-access-exception
     (application-autoscaling-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       failed-resource-access-exception-message)))
 (common-lisp:export
  (common-lisp:list 'failed-resource-access-exception
                    'failed-resource-access-exception-message)))
(common-lisp:deftype id () 'common-lisp:string)
(common-lisp:deftype include-not-scaled-activities () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:define-condition internal-service-exception
     (application-autoscaling-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-service-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-service-exception
                    'internal-service-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-next-token-exception
     (application-autoscaling-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-next-token-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-next-token-exception
                    'invalid-next-token-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (application-autoscaling-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-list-tags-for-resource-request-resource-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype metric-aggregation-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass metric-dimension common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or metric-dimension-name
                                         common-lisp:null)
                         :accessor struct-shape-metric-dimension-name :shape
                         "MetricDimensionName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or metric-dimension-value
                                         common-lisp:null)
                         :accessor struct-shape-metric-dimension-value :shape
                         "MetricDimensionValue" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-metric-dimension
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'metric-dimension
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'metric-dimension 'make-metric-dimension))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metric-dimension))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metric-dimension))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metric-dimension))
   common-lisp:nil))
(common-lisp:deftype metric-dimension-name () 'common-lisp:string)
(common-lisp:deftype metric-dimension-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype metric-dimensions ()
   '(trivial-types:proper-list metric-dimension))
 (common-lisp:defun make-metric-dimensions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metric-dimension))
   aws-sdk/generator/shape::members))
(common-lisp:deftype metric-name () 'common-lisp:string)
(common-lisp:deftype metric-namespace () 'common-lisp:string)
(common-lisp:deftype metric-scale () 'common-lisp:double-float)
(common-lisp:deftype metric-statistic () 'common-lisp:string)
(common-lisp:deftype metric-type () 'common-lisp:string)
(common-lisp:deftype metric-unit () 'common-lisp:string)
(common-lisp:deftype min-adjustment-magnitude () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass not-scaled-reason common-lisp:nil
                       ((code :initarg :code :initform
                         (common-lisp:error ":code is required") :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         struct-shape-not-scaled-reason-code :shape "XmlString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-capacity :initarg :max-capacity :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-capacity common-lisp:null)
                         :accessor struct-shape-not-scaled-reason-max-capacity
                         :shape "ResourceCapacity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (min-capacity :initarg :min-capacity :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-capacity common-lisp:null)
                         :accessor struct-shape-not-scaled-reason-min-capacity
                         :shape "ResourceCapacity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (current-capacity :initarg :current-capacity :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-capacity common-lisp:null)
                         :accessor
                         struct-shape-not-scaled-reason-current-capacity :shape
                         "ResourceCapacity" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-not-scaled-reason
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'not-scaled-reason
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'not-scaled-reason 'make-not-scaled-reason))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input not-scaled-reason))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input not-scaled-reason))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-capacity))
      (common-lisp:list
       (common-lisp:cons "MaxCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-capacity))
      (common-lisp:list
       (common-lisp:cons "MinCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-capacity))
      (common-lisp:list
       (common-lisp:cons "CurrentCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input not-scaled-reason))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype not-scaled-reasons ()
   '(trivial-types:proper-list not-scaled-reason))
 (common-lisp:defun make-not-scaled-reasons
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list not-scaled-reason))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition object-not-found-exception
     (application-autoscaling-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       object-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'object-not-found-exception
                    'object-not-found-exception-message)))
(common-lisp:deftype policy-name () 'common-lisp:string)
(common-lisp:deftype policy-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass predefined-metric-specification common-lisp:nil
                       ((predefined-metric-type :initarg
                         :predefined-metric-type :initform
                         (common-lisp:error
                          ":predefined-metric-type is required")
                         :type (common-lisp:or metric-type common-lisp:null)
                         :accessor
                         struct-shape-predefined-metric-specification-predefined-metric-type
                         :shape "MetricType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-label :initarg :resource-label :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-label common-lisp:null)
                         :accessor
                         struct-shape-predefined-metric-specification-resource-label
                         :shape "ResourceLabel" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-predefined-metric-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'predefined-metric-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'predefined-metric-specification
                    'make-predefined-metric-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          predefined-metric-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          predefined-metric-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'predefined-metric-type))
      (common-lisp:list
       (common-lisp:cons "PredefinedMetricType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-label))
      (common-lisp:list
       (common-lisp:cons "ResourceLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          predefined-metric-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-scaling-policy-request common-lisp:nil
                       ((policy-name :initarg :policy-name :initform
                         (common-lisp:error ":policy-name is required") :type
                         (common-lisp:or policy-name common-lisp:null)
                         :accessor
                         struct-shape-put-scaling-policy-request-policy-name
                         :shape "PolicyName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-namespace :initarg :service-namespace
                         :initform
                         (common-lisp:error ":service-namespace is required")
                         :type
                         (common-lisp:or service-namespace common-lisp:null)
                         :accessor
                         struct-shape-put-scaling-policy-request-service-namespace
                         :shape "ServiceNamespace" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-id :initarg :resource-id :initform
                         (common-lisp:error ":resource-id is required") :type
                         (common-lisp:or resource-id-max-len1600
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-scaling-policy-request-resource-id
                         :shape "ResourceIdMaxLen1600" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (scalable-dimension :initarg :scalable-dimension
                         :initform
                         (common-lisp:error ":scalable-dimension is required")
                         :type
                         (common-lisp:or scalable-dimension common-lisp:null)
                         :accessor
                         struct-shape-put-scaling-policy-request-scalable-dimension
                         :shape "ScalableDimension" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-type :initarg :policy-type :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-type common-lisp:null)
                         :accessor
                         struct-shape-put-scaling-policy-request-policy-type
                         :shape "PolicyType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (step-scaling-policy-configuration :initarg
                         :step-scaling-policy-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or step-scaling-policy-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-scaling-policy-request-step-scaling-policy-configuration
                         :shape "StepScalingPolicyConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (target-tracking-scaling-policy-configuration :initarg
                         :target-tracking-scaling-policy-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          target-tracking-scaling-policy-configuration
                          common-lisp:null)
                         :accessor
                         struct-shape-put-scaling-policy-request-target-tracking-scaling-policy-configuration
                         :shape "TargetTrackingScalingPolicyConfiguration"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-scaling-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-scaling-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-scaling-policy-request
                    'make-put-scaling-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-scaling-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-scaling-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-namespace))
      (common-lisp:list
       (common-lisp:cons "ServiceNamespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scalable-dimension))
      (common-lisp:list
       (common-lisp:cons "ScalableDimension"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-type))
      (common-lisp:list
       (common-lisp:cons "PolicyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'step-scaling-policy-configuration))
      (common-lisp:list
       (common-lisp:cons "StepScalingPolicyConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-tracking-scaling-policy-configuration))
      (common-lisp:list
       (common-lisp:cons "TargetTrackingScalingPolicyConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-scaling-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-scaling-policy-response common-lisp:nil
                       ((policy-arn :initarg :policy-arn :initform
                         (common-lisp:error ":policy-arn is required") :type
                         (common-lisp:or resource-id-max-len1600
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-scaling-policy-response-policy-arn
                         :shape "ResourceIdMaxLen1600" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (alarms :initarg :alarms :initform common-lisp:nil
                         :type (common-lisp:or alarms common-lisp:null)
                         :accessor
                         struct-shape-put-scaling-policy-response-alarms :shape
                         "Alarms" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-scaling-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-scaling-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-scaling-policy-response
                    'make-put-scaling-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-scaling-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-scaling-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarms))
      (common-lisp:list
       (common-lisp:cons "Alarms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-scaling-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-scheduled-action-request common-lisp:nil
                       ((service-namespace :initarg :service-namespace
                         :initform
                         (common-lisp:error ":service-namespace is required")
                         :type
                         (common-lisp:or service-namespace common-lisp:null)
                         :accessor
                         struct-shape-put-scheduled-action-request-service-namespace
                         :shape "ServiceNamespace" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schedule :initarg :schedule :initform common-lisp:nil
                         :type
                         (common-lisp:or resource-id-max-len1600
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-scheduled-action-request-schedule
                         :shape "ResourceIdMaxLen1600" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (timezone :initarg :timezone :initform common-lisp:nil
                         :type
                         (common-lisp:or resource-id-max-len1600
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-scheduled-action-request-timezone
                         :shape "ResourceIdMaxLen1600" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (scheduled-action-name :initarg :scheduled-action-name
                         :initform
                         (common-lisp:error
                          ":scheduled-action-name is required")
                         :type
                         (common-lisp:or scheduled-action-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-scheduled-action-request-scheduled-action-name
                         :shape "ScheduledActionName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-id :initarg :resource-id :initform
                         (common-lisp:error ":resource-id is required") :type
                         (common-lisp:or resource-id-max-len1600
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-scheduled-action-request-resource-id
                         :shape "ResourceIdMaxLen1600" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (scalable-dimension :initarg :scalable-dimension
                         :initform
                         (common-lisp:error ":scalable-dimension is required")
                         :type
                         (common-lisp:or scalable-dimension common-lisp:null)
                         :accessor
                         struct-shape-put-scheduled-action-request-scalable-dimension
                         :shape "ScalableDimension" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp-type common-lisp:null)
                         :accessor
                         struct-shape-put-scheduled-action-request-start-time
                         :shape "TimestampType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp-type common-lisp:null)
                         :accessor
                         struct-shape-put-scheduled-action-request-end-time
                         :shape "TimestampType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scalable-target-action :initarg
                         :scalable-target-action :initform common-lisp:nil
                         :type
                         (common-lisp:or scalable-target-action
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-scheduled-action-request-scalable-target-action
                         :shape "ScalableTargetAction" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-scheduled-action-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-scheduled-action-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-scheduled-action-request
                    'make-put-scheduled-action-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-scheduled-action-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-scheduled-action-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-namespace))
      (common-lisp:list
       (common-lisp:cons "ServiceNamespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "Schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timezone))
      (common-lisp:list
       (common-lisp:cons "Timezone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-action-name))
      (common-lisp:list
       (common-lisp:cons "ScheduledActionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scalable-dimension))
      (common-lisp:list
       (common-lisp:cons "ScalableDimension"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scalable-target-action))
      (common-lisp:list
       (common-lisp:cons "ScalableTargetAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-scheduled-action-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-scheduled-action-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-scheduled-action-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-scheduled-action-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-scheduled-action-response
                    'make-put-scheduled-action-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-scheduled-action-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-scheduled-action-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-scheduled-action-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-scalable-target-request common-lisp:nil
                       ((service-namespace :initarg :service-namespace
                         :initform
                         (common-lisp:error ":service-namespace is required")
                         :type
                         (common-lisp:or service-namespace common-lisp:null)
                         :accessor
                         struct-shape-register-scalable-target-request-service-namespace
                         :shape "ServiceNamespace" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-id :initarg :resource-id :initform
                         (common-lisp:error ":resource-id is required") :type
                         (common-lisp:or resource-id-max-len1600
                                         common-lisp:null)
                         :accessor
                         struct-shape-register-scalable-target-request-resource-id
                         :shape "ResourceIdMaxLen1600" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (scalable-dimension :initarg :scalable-dimension
                         :initform
                         (common-lisp:error ":scalable-dimension is required")
                         :type
                         (common-lisp:or scalable-dimension common-lisp:null)
                         :accessor
                         struct-shape-register-scalable-target-request-scalable-dimension
                         :shape "ScalableDimension" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (min-capacity :initarg :min-capacity :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-capacity common-lisp:null)
                         :accessor
                         struct-shape-register-scalable-target-request-min-capacity
                         :shape "ResourceCapacity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-capacity :initarg :max-capacity :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-capacity common-lisp:null)
                         :accessor
                         struct-shape-register-scalable-target-request-max-capacity
                         :shape "ResourceCapacity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type
                         (common-lisp:or resource-id-max-len1600
                                         common-lisp:null)
                         :accessor
                         struct-shape-register-scalable-target-request-role-arn
                         :shape "ResourceIdMaxLen1600" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (suspended-state :initarg :suspended-state :initform
                         common-lisp:nil :type
                         (common-lisp:or suspended-state common-lisp:null)
                         :accessor
                         struct-shape-register-scalable-target-request-suspended-state
                         :shape "SuspendedState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-register-scalable-target-request-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-register-scalable-target-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'register-scalable-target-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'register-scalable-target-request
                    'make-register-scalable-target-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-scalable-target-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-scalable-target-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-namespace))
      (common-lisp:list
       (common-lisp:cons "ServiceNamespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scalable-dimension))
      (common-lisp:list
       (common-lisp:cons "ScalableDimension"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-capacity))
      (common-lisp:list
       (common-lisp:cons "MinCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-capacity))
      (common-lisp:list
       (common-lisp:cons "MaxCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suspended-state))
      (common-lisp:list
       (common-lisp:cons "SuspendedState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-scalable-target-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-scalable-target-response common-lisp:nil
                       ((scalable-target-arn :initarg :scalable-target-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         struct-shape-register-scalable-target-response-scalable-target-arn
                         :shape "XmlString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-register-scalable-target-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'register-scalable-target-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'register-scalable-target-response
                    'make-register-scalable-target-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-scalable-target-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-scalable-target-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scalable-target-arn))
      (common-lisp:list
       (common-lisp:cons "ScalableTargetARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-scalable-target-response))
   common-lisp:nil))
(common-lisp:deftype resource-capacity () 'common-lisp:integer)
(common-lisp:deftype resource-id () 'common-lisp:string)
(common-lisp:deftype resource-id-max-len1600 () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-ids-max-len1600 ()
   '(trivial-types:proper-list resource-id-max-len1600))
 (common-lisp:defun make-resource-ids-max-len1600
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-id-max-len1600))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-label () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (application-autoscaling-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-name :initarg :resource-name :initform common-lisp:nil :reader
       resource-not-found-exception-resource-name)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-name)))
(common-lisp:deftype return-data () 'common-lisp:boolean)
(common-lisp:deftype scalable-dimension () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass scalable-target common-lisp:nil
                       ((service-namespace :initarg :service-namespace
                         :initform
                         (common-lisp:error ":service-namespace is required")
                         :type
                         (common-lisp:or service-namespace common-lisp:null)
                         :accessor
                         struct-shape-scalable-target-service-namespace :shape
                         "ServiceNamespace" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-id :initarg :resource-id :initform
                         (common-lisp:error ":resource-id is required") :type
                         (common-lisp:or resource-id-max-len1600
                                         common-lisp:null)
                         :accessor struct-shape-scalable-target-resource-id
                         :shape "ResourceIdMaxLen1600" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (scalable-dimension :initarg :scalable-dimension
                         :initform
                         (common-lisp:error ":scalable-dimension is required")
                         :type
                         (common-lisp:or scalable-dimension common-lisp:null)
                         :accessor
                         struct-shape-scalable-target-scalable-dimension :shape
                         "ScalableDimension" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (min-capacity :initarg :min-capacity :initform
                         (common-lisp:error ":min-capacity is required") :type
                         (common-lisp:or resource-capacity common-lisp:null)
                         :accessor struct-shape-scalable-target-min-capacity
                         :shape "ResourceCapacity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-capacity :initarg :max-capacity :initform
                         (common-lisp:error ":max-capacity is required") :type
                         (common-lisp:or resource-capacity common-lisp:null)
                         :accessor struct-shape-scalable-target-max-capacity
                         :shape "ResourceCapacity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":role-arn is required") :type
                         (common-lisp:or resource-id-max-len1600
                                         common-lisp:null)
                         :accessor struct-shape-scalable-target-role-arn :shape
                         "ResourceIdMaxLen1600" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         (common-lisp:error ":creation-time is required") :type
                         (common-lisp:or timestamp-type common-lisp:null)
                         :accessor struct-shape-scalable-target-creation-time
                         :shape "TimestampType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (suspended-state :initarg :suspended-state :initform
                         common-lisp:nil :type
                         (common-lisp:or suspended-state common-lisp:null)
                         :accessor struct-shape-scalable-target-suspended-state
                         :shape "SuspendedState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scalable-target-arn :initarg :scalable-target-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         struct-shape-scalable-target-scalable-target-arn
                         :shape "XmlString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scalable-target
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'scalable-target
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'scalable-target 'make-scalable-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scalable-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scalable-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-namespace))
      (common-lisp:list
       (common-lisp:cons "ServiceNamespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scalable-dimension))
      (common-lisp:list
       (common-lisp:cons "ScalableDimension"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-capacity))
      (common-lisp:list
       (common-lisp:cons "MinCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-capacity))
      (common-lisp:list
       (common-lisp:cons "MaxCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suspended-state))
      (common-lisp:list
       (common-lisp:cons "SuspendedState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scalable-target-arn))
      (common-lisp:list
       (common-lisp:cons "ScalableTargetARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scalable-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass scalable-target-action common-lisp:nil
                       ((min-capacity :initarg :min-capacity :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-capacity common-lisp:null)
                         :accessor
                         struct-shape-scalable-target-action-min-capacity
                         :shape "ResourceCapacity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-capacity :initarg :max-capacity :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-capacity common-lisp:null)
                         :accessor
                         struct-shape-scalable-target-action-max-capacity
                         :shape "ResourceCapacity" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scalable-target-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'scalable-target-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'scalable-target-action 'make-scalable-target-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scalable-target-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scalable-target-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-capacity))
      (common-lisp:list
       (common-lisp:cons "MinCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-capacity))
      (common-lisp:list
       (common-lisp:cons "MaxCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scalable-target-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype scalable-targets ()
   '(trivial-types:proper-list scalable-target))
 (common-lisp:defun make-scalable-targets
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list scalable-target))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype scaling-activities ()
   '(trivial-types:proper-list scaling-activity))
 (common-lisp:defun make-scaling-activities
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list scaling-activity))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass scaling-activity common-lisp:nil
                       ((activity-id :initarg :activity-id :initform
                         (common-lisp:error ":activity-id is required") :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor struct-shape-scaling-activity-activity-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-namespace :initarg :service-namespace
                         :initform
                         (common-lisp:error ":service-namespace is required")
                         :type
                         (common-lisp:or service-namespace common-lisp:null)
                         :accessor
                         struct-shape-scaling-activity-service-namespace :shape
                         "ServiceNamespace" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-id :initarg :resource-id :initform
                         (common-lisp:error ":resource-id is required") :type
                         (common-lisp:or resource-id-max-len1600
                                         common-lisp:null)
                         :accessor struct-shape-scaling-activity-resource-id
                         :shape "ResourceIdMaxLen1600" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (scalable-dimension :initarg :scalable-dimension
                         :initform
                         (common-lisp:error ":scalable-dimension is required")
                         :type
                         (common-lisp:or scalable-dimension common-lisp:null)
                         :accessor
                         struct-shape-scaling-activity-scalable-dimension
                         :shape "ScalableDimension" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         (common-lisp:error ":description is required") :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         struct-shape-scaling-activity-description :shape
                         "XmlString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cause :initarg :cause :initform
                         (common-lisp:error ":cause is required") :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         struct-shape-scaling-activity-cause :shape "XmlString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         (common-lisp:error ":start-time is required") :type
                         (common-lisp:or timestamp-type common-lisp:null)
                         :accessor struct-shape-scaling-activity-start-time
                         :shape "TimestampType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp-type common-lisp:null)
                         :accessor struct-shape-scaling-activity-end-time
                         :shape "TimestampType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-code :initarg :status-code :initform
                         (common-lisp:error ":status-code is required") :type
                         (common-lisp:or scaling-activity-status-code
                                         common-lisp:null)
                         :accessor struct-shape-scaling-activity-status-code
                         :shape "ScalingActivityStatusCode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         struct-shape-scaling-activity-status-message :shape
                         "XmlString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (details :initarg :details :initform common-lisp:nil
                         :type (common-lisp:or xml-string common-lisp:null)
                         :accessor struct-shape-scaling-activity-details :shape
                         "XmlString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (not-scaled-reasons :initarg :not-scaled-reasons
                         :initform common-lisp:nil :type
                         (common-lisp:or not-scaled-reasons common-lisp:null)
                         :accessor
                         struct-shape-scaling-activity-not-scaled-reasons
                         :shape "NotScaledReasons" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scaling-activity
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'scaling-activity
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'scaling-activity 'make-scaling-activity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scaling-activity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scaling-activity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activity-id))
      (common-lisp:list
       (common-lisp:cons "ActivityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-namespace))
      (common-lisp:list
       (common-lisp:cons "ServiceNamespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scalable-dimension))
      (common-lisp:list
       (common-lisp:cons "ScalableDimension"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cause))
      (common-lisp:list
       (common-lisp:cons "Cause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:list
       (common-lisp:cons "StatusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "Details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-scaled-reasons))
      (common-lisp:list
       (common-lisp:cons "NotScaledReasons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scaling-activity))
   common-lisp:nil))
(common-lisp:deftype scaling-activity-status-code () 'common-lisp:string)
(common-lisp:deftype scaling-adjustment () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype scaling-policies ()
   '(trivial-types:proper-list scaling-policy))
 (common-lisp:defun make-scaling-policies
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list scaling-policy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass scaling-policy common-lisp:nil
                       ((policy-arn :initarg :policy-arn :initform
                         (common-lisp:error ":policy-arn is required") :type
                         (common-lisp:or resource-id-max-len1600
                                         common-lisp:null)
                         :accessor struct-shape-scaling-policy-policy-arn
                         :shape "ResourceIdMaxLen1600" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (policy-name :initarg :policy-name :initform
                         (common-lisp:error ":policy-name is required") :type
                         (common-lisp:or policy-name common-lisp:null)
                         :accessor struct-shape-scaling-policy-policy-name
                         :shape "PolicyName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-namespace :initarg :service-namespace
                         :initform
                         (common-lisp:error ":service-namespace is required")
                         :type
                         (common-lisp:or service-namespace common-lisp:null)
                         :accessor
                         struct-shape-scaling-policy-service-namespace :shape
                         "ServiceNamespace" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-id :initarg :resource-id :initform
                         (common-lisp:error ":resource-id is required") :type
                         (common-lisp:or resource-id-max-len1600
                                         common-lisp:null)
                         :accessor struct-shape-scaling-policy-resource-id
                         :shape "ResourceIdMaxLen1600" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (scalable-dimension :initarg :scalable-dimension
                         :initform
                         (common-lisp:error ":scalable-dimension is required")
                         :type
                         (common-lisp:or scalable-dimension common-lisp:null)
                         :accessor
                         struct-shape-scaling-policy-scalable-dimension :shape
                         "ScalableDimension" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-type :initarg :policy-type :initform
                         (common-lisp:error ":policy-type is required") :type
                         (common-lisp:or policy-type common-lisp:null)
                         :accessor struct-shape-scaling-policy-policy-type
                         :shape "PolicyType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (step-scaling-policy-configuration :initarg
                         :step-scaling-policy-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or step-scaling-policy-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-scaling-policy-step-scaling-policy-configuration
                         :shape "StepScalingPolicyConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (target-tracking-scaling-policy-configuration :initarg
                         :target-tracking-scaling-policy-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          target-tracking-scaling-policy-configuration
                          common-lisp:null)
                         :accessor
                         struct-shape-scaling-policy-target-tracking-scaling-policy-configuration
                         :shape "TargetTrackingScalingPolicyConfiguration"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (alarms :initarg :alarms :initform common-lisp:nil
                         :type (common-lisp:or alarms common-lisp:null)
                         :accessor struct-shape-scaling-policy-alarms :shape
                         "Alarms" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         (common-lisp:error ":creation-time is required") :type
                         (common-lisp:or timestamp-type common-lisp:null)
                         :accessor struct-shape-scaling-policy-creation-time
                         :shape "TimestampType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scaling-policy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'scaling-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'scaling-policy 'make-scaling-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scaling-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scaling-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-namespace))
      (common-lisp:list
       (common-lisp:cons "ServiceNamespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scalable-dimension))
      (common-lisp:list
       (common-lisp:cons "ScalableDimension"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-type))
      (common-lisp:list
       (common-lisp:cons "PolicyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'step-scaling-policy-configuration))
      (common-lisp:list
       (common-lisp:cons "StepScalingPolicyConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-tracking-scaling-policy-configuration))
      (common-lisp:list
       (common-lisp:cons "TargetTrackingScalingPolicyConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarms))
      (common-lisp:list
       (common-lisp:cons "Alarms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scaling-policy))
   common-lisp:nil))
(common-lisp:deftype scaling-suspended () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass scheduled-action common-lisp:nil
                       ((scheduled-action-name :initarg :scheduled-action-name
                         :initform
                         (common-lisp:error
                          ":scheduled-action-name is required")
                         :type
                         (common-lisp:or scheduled-action-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-scheduled-action-scheduled-action-name
                         :shape "ScheduledActionName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scheduled-action-arn :initarg :scheduled-action-arn
                         :initform
                         (common-lisp:error
                          ":scheduled-action-arn is required")
                         :type
                         (common-lisp:or resource-id-max-len1600
                                         common-lisp:null)
                         :accessor
                         struct-shape-scheduled-action-scheduled-action-arn
                         :shape "ResourceIdMaxLen1600" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (service-namespace :initarg :service-namespace
                         :initform
                         (common-lisp:error ":service-namespace is required")
                         :type
                         (common-lisp:or service-namespace common-lisp:null)
                         :accessor
                         struct-shape-scheduled-action-service-namespace :shape
                         "ServiceNamespace" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schedule :initarg :schedule :initform
                         (common-lisp:error ":schedule is required") :type
                         (common-lisp:or resource-id-max-len1600
                                         common-lisp:null)
                         :accessor struct-shape-scheduled-action-schedule
                         :shape "ResourceIdMaxLen1600" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (timezone :initarg :timezone :initform common-lisp:nil
                         :type
                         (common-lisp:or resource-id-max-len1600
                                         common-lisp:null)
                         :accessor struct-shape-scheduled-action-timezone
                         :shape "ResourceIdMaxLen1600" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (resource-id :initarg :resource-id :initform
                         (common-lisp:error ":resource-id is required") :type
                         (common-lisp:or resource-id-max-len1600
                                         common-lisp:null)
                         :accessor struct-shape-scheduled-action-resource-id
                         :shape "ResourceIdMaxLen1600" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (scalable-dimension :initarg :scalable-dimension
                         :initform common-lisp:nil :type
                         (common-lisp:or scalable-dimension common-lisp:null)
                         :accessor
                         struct-shape-scheduled-action-scalable-dimension
                         :shape "ScalableDimension" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp-type common-lisp:null)
                         :accessor struct-shape-scheduled-action-start-time
                         :shape "TimestampType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp-type common-lisp:null)
                         :accessor struct-shape-scheduled-action-end-time
                         :shape "TimestampType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scalable-target-action :initarg
                         :scalable-target-action :initform common-lisp:nil
                         :type
                         (common-lisp:or scalable-target-action
                                         common-lisp:null)
                         :accessor
                         struct-shape-scheduled-action-scalable-target-action
                         :shape "ScalableTargetAction" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         (common-lisp:error ":creation-time is required") :type
                         (common-lisp:or timestamp-type common-lisp:null)
                         :accessor struct-shape-scheduled-action-creation-time
                         :shape "TimestampType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scheduled-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'scheduled-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'scheduled-action 'make-scheduled-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scheduled-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scheduled-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-action-name))
      (common-lisp:list
       (common-lisp:cons "ScheduledActionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-action-arn))
      (common-lisp:list
       (common-lisp:cons "ScheduledActionARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-namespace))
      (common-lisp:list
       (common-lisp:cons "ServiceNamespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "Schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timezone))
      (common-lisp:list
       (common-lisp:cons "Timezone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scalable-dimension))
      (common-lisp:list
       (common-lisp:cons "ScalableDimension"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scalable-target-action))
      (common-lisp:list
       (common-lisp:cons "ScalableTargetAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scheduled-action))
   common-lisp:nil))
(common-lisp:deftype scheduled-action-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype scheduled-actions ()
   '(trivial-types:proper-list scheduled-action))
 (common-lisp:defun make-scheduled-actions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list scheduled-action))
   aws-sdk/generator/shape::members))
(common-lisp:deftype service-namespace () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass step-adjustment common-lisp:nil
                       ((metric-interval-lower-bound :initarg
                         :metric-interval-lower-bound :initform common-lisp:nil
                         :type (common-lisp:or metric-scale common-lisp:null)
                         :accessor
                         struct-shape-step-adjustment-metric-interval-lower-bound
                         :shape "MetricScale" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metric-interval-upper-bound :initarg
                         :metric-interval-upper-bound :initform common-lisp:nil
                         :type (common-lisp:or metric-scale common-lisp:null)
                         :accessor
                         struct-shape-step-adjustment-metric-interval-upper-bound
                         :shape "MetricScale" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scaling-adjustment :initarg :scaling-adjustment
                         :initform
                         (common-lisp:error ":scaling-adjustment is required")
                         :type
                         (common-lisp:or scaling-adjustment common-lisp:null)
                         :accessor
                         struct-shape-step-adjustment-scaling-adjustment :shape
                         "ScalingAdjustment" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-step-adjustment
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'step-adjustment
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'step-adjustment 'make-step-adjustment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input step-adjustment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input step-adjustment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metric-interval-lower-bound))
      (common-lisp:list
       (common-lisp:cons "MetricIntervalLowerBound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metric-interval-upper-bound))
      (common-lisp:list
       (common-lisp:cons "MetricIntervalUpperBound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-adjustment))
      (common-lisp:list
       (common-lisp:cons "ScalingAdjustment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input step-adjustment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype step-adjustments ()
   '(trivial-types:proper-list step-adjustment))
 (common-lisp:defun make-step-adjustments
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list step-adjustment))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass step-scaling-policy-configuration common-lisp:nil
                       ((adjustment-type :initarg :adjustment-type :initform
                         common-lisp:nil :type
                         (common-lisp:or adjustment-type common-lisp:null)
                         :accessor
                         struct-shape-step-scaling-policy-configuration-adjustment-type
                         :shape "AdjustmentType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (step-adjustments :initarg :step-adjustments :initform
                         common-lisp:nil :type
                         (common-lisp:or step-adjustments common-lisp:null)
                         :accessor
                         struct-shape-step-scaling-policy-configuration-step-adjustments
                         :shape "StepAdjustments" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (min-adjustment-magnitude :initarg
                         :min-adjustment-magnitude :initform common-lisp:nil
                         :type
                         (common-lisp:or min-adjustment-magnitude
                                         common-lisp:null)
                         :accessor
                         struct-shape-step-scaling-policy-configuration-min-adjustment-magnitude
                         :shape "MinAdjustmentMagnitude" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cooldown :initarg :cooldown :initform common-lisp:nil
                         :type (common-lisp:or cooldown common-lisp:null)
                         :accessor
                         struct-shape-step-scaling-policy-configuration-cooldown
                         :shape "Cooldown" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metric-aggregation-type :initarg
                         :metric-aggregation-type :initform common-lisp:nil
                         :type
                         (common-lisp:or metric-aggregation-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-step-scaling-policy-configuration-metric-aggregation-type
                         :shape "MetricAggregationType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-step-scaling-policy-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'step-scaling-policy-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'step-scaling-policy-configuration
                    'make-step-scaling-policy-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          step-scaling-policy-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          step-scaling-policy-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'adjustment-type))
      (common-lisp:list
       (common-lisp:cons "AdjustmentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-adjustments))
      (common-lisp:list
       (common-lisp:cons "StepAdjustments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'min-adjustment-magnitude))
      (common-lisp:list
       (common-lisp:cons "MinAdjustmentMagnitude"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cooldown))
      (common-lisp:list
       (common-lisp:cons "Cooldown"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metric-aggregation-type))
      (common-lisp:list
       (common-lisp:cons "MetricAggregationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          step-scaling-policy-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass suspended-state common-lisp:nil
                       ((dynamic-scaling-in-suspended :initarg
                         :dynamic-scaling-in-suspended :initform
                         common-lisp:nil :type
                         (common-lisp:or scaling-suspended common-lisp:null)
                         :accessor
                         struct-shape-suspended-state-dynamic-scaling-in-suspended
                         :shape "ScalingSuspended" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dynamic-scaling-out-suspended :initarg
                         :dynamic-scaling-out-suspended :initform
                         common-lisp:nil :type
                         (common-lisp:or scaling-suspended common-lisp:null)
                         :accessor
                         struct-shape-suspended-state-dynamic-scaling-out-suspended
                         :shape "ScalingSuspended" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scheduled-scaling-suspended :initarg
                         :scheduled-scaling-suspended :initform common-lisp:nil
                         :type
                         (common-lisp:or scaling-suspended common-lisp:null)
                         :accessor
                         struct-shape-suspended-state-scheduled-scaling-suspended
                         :shape "ScalingSuspended" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-suspended-state
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'suspended-state
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'suspended-state 'make-suspended-state))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input suspended-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input suspended-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dynamic-scaling-in-suspended))
      (common-lisp:list
       (common-lisp:cons "DynamicScalingInSuspended"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dynamic-scaling-out-suspended))
      (common-lisp:list
       (common-lisp:cons "DynamicScalingOutSuspended"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-scaling-suspended))
      (common-lisp:list
       (common-lisp:cons "ScheduledScalingSuspended"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input suspended-state))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun make-tag-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape "TagMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass target-tracking-metric common-lisp:nil
                       ((dimensions :initarg :dimensions :initform
                         common-lisp:nil :type
                         (common-lisp:or target-tracking-metric-dimensions
                                         common-lisp:null)
                         :accessor
                         struct-shape-target-tracking-metric-dimensions :shape
                         "TargetTrackingMetricDimensions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (metric-name :initarg :metric-name :initform
                         common-lisp:nil :type
                         (common-lisp:or target-tracking-metric-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-target-tracking-metric-metric-name :shape
                         "TargetTrackingMetricName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (namespace :initarg :namespace :initform
                         common-lisp:nil :type
                         (common-lisp:or target-tracking-metric-namespace
                                         common-lisp:null)
                         :accessor
                         struct-shape-target-tracking-metric-namespace :shape
                         "TargetTrackingMetricNamespace" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-target-tracking-metric
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'target-tracking-metric
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'target-tracking-metric 'make-target-tracking-metric))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          target-tracking-metric))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          target-tracking-metric))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimensions))
      (common-lisp:list
       (common-lisp:cons "Dimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "Namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          target-tracking-metric))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype target-tracking-metric-data-queries ()
   '(trivial-types:proper-list target-tracking-metric-data-query))
 (common-lisp:defun make-target-tracking-metric-data-queries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            target-tracking-metric-data-query))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass target-tracking-metric-data-query common-lisp:nil
                       ((expression :initarg :expression :initform
                         common-lisp:nil :type
                         (common-lisp:or expression common-lisp:null) :accessor
                         struct-shape-target-tracking-metric-data-query-expression
                         :shape "Expression" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-target-tracking-metric-data-query-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (label :initarg :label :initform common-lisp:nil :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         struct-shape-target-tracking-metric-data-query-label
                         :shape "XmlString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metric-stat :initarg :metric-stat :initform
                         common-lisp:nil :type
                         (common-lisp:or target-tracking-metric-stat
                                         common-lisp:null)
                         :accessor
                         struct-shape-target-tracking-metric-data-query-metric-stat
                         :shape "TargetTrackingMetricStat" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (return-data :initarg :return-data :initform
                         common-lisp:nil :type
                         (common-lisp:or return-data common-lisp:null)
                         :accessor
                         struct-shape-target-tracking-metric-data-query-return-data
                         :shape "ReturnData" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-target-tracking-metric-data-query
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'target-tracking-metric-data-query
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'target-tracking-metric-data-query
                    'make-target-tracking-metric-data-query))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          target-tracking-metric-data-query))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          target-tracking-metric-data-query))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label))
      (common-lisp:list
       (common-lisp:cons "Label"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-stat))
      (common-lisp:list
       (common-lisp:cons "MetricStat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'return-data))
      (common-lisp:list
       (common-lisp:cons "ReturnData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          target-tracking-metric-data-query))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass target-tracking-metric-dimension common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or target-tracking-metric-dimension-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-target-tracking-metric-dimension-name
                         :shape "TargetTrackingMetricDimensionName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or target-tracking-metric-dimension-value
                                         common-lisp:null)
                         :accessor
                         struct-shape-target-tracking-metric-dimension-value
                         :shape "TargetTrackingMetricDimensionValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-target-tracking-metric-dimension
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'target-tracking-metric-dimension
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'target-tracking-metric-dimension
                    'make-target-tracking-metric-dimension))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          target-tracking-metric-dimension))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          target-tracking-metric-dimension))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          target-tracking-metric-dimension))
   common-lisp:nil))
(common-lisp:deftype target-tracking-metric-dimension-name ()
  'common-lisp:string)
(common-lisp:deftype target-tracking-metric-dimension-value ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype target-tracking-metric-dimensions ()
   '(trivial-types:proper-list target-tracking-metric-dimension))
 (common-lisp:defun make-target-tracking-metric-dimensions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            target-tracking-metric-dimension))
   aws-sdk/generator/shape::members))
(common-lisp:deftype target-tracking-metric-name () 'common-lisp:string)
(common-lisp:deftype target-tracking-metric-namespace () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass target-tracking-metric-stat common-lisp:nil
                       ((metric :initarg :metric :initform
                         (common-lisp:error ":metric is required") :type
                         (common-lisp:or target-tracking-metric
                                         common-lisp:null)
                         :accessor
                         struct-shape-target-tracking-metric-stat-metric :shape
                         "TargetTrackingMetric" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stat :initarg :stat :initform
                         (common-lisp:error ":stat is required") :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         struct-shape-target-tracking-metric-stat-stat :shape
                         "XmlString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (unit :initarg :unit :initform common-lisp:nil :type
                         (common-lisp:or target-tracking-metric-unit
                                         common-lisp:null)
                         :accessor
                         struct-shape-target-tracking-metric-stat-unit :shape
                         "TargetTrackingMetricUnit" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-target-tracking-metric-stat
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'target-tracking-metric-stat
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'target-tracking-metric-stat
                    'make-target-tracking-metric-stat))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          target-tracking-metric-stat))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          target-tracking-metric-stat))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric))
      (common-lisp:list
       (common-lisp:cons "Metric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stat))
      (common-lisp:list
       (common-lisp:cons "Stat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "Unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          target-tracking-metric-stat))
   common-lisp:nil))
(common-lisp:deftype target-tracking-metric-unit () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass target-tracking-scaling-policy-configuration
                       common-lisp:nil
                       ((target-value :initarg :target-value :initform
                         (common-lisp:error ":target-value is required") :type
                         (common-lisp:or metric-scale common-lisp:null)
                         :accessor
                         struct-shape-target-tracking-scaling-policy-configuration-target-value
                         :shape "MetricScale" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (predefined-metric-specification :initarg
                         :predefined-metric-specification :initform
                         common-lisp:nil :type
                         (common-lisp:or predefined-metric-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-target-tracking-scaling-policy-configuration-predefined-metric-specification
                         :shape "PredefinedMetricSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (customized-metric-specification :initarg
                         :customized-metric-specification :initform
                         common-lisp:nil :type
                         (common-lisp:or customized-metric-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-target-tracking-scaling-policy-configuration-customized-metric-specification
                         :shape "CustomizedMetricSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (scale-out-cooldown :initarg :scale-out-cooldown
                         :initform common-lisp:nil :type
                         (common-lisp:or cooldown common-lisp:null) :accessor
                         struct-shape-target-tracking-scaling-policy-configuration-scale-out-cooldown
                         :shape "Cooldown" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scale-in-cooldown :initarg :scale-in-cooldown
                         :initform common-lisp:nil :type
                         (common-lisp:or cooldown common-lisp:null) :accessor
                         struct-shape-target-tracking-scaling-policy-configuration-scale-in-cooldown
                         :shape "Cooldown" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (disable-scale-in :initarg :disable-scale-in :initform
                         common-lisp:nil :type
                         (common-lisp:or disable-scale-in common-lisp:null)
                         :accessor
                         struct-shape-target-tracking-scaling-policy-configuration-disable-scale-in
                         :shape "DisableScaleIn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-target-tracking-scaling-policy-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'target-tracking-scaling-policy-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'target-tracking-scaling-policy-configuration
                    'make-target-tracking-scaling-policy-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          target-tracking-scaling-policy-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          target-tracking-scaling-policy-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-value))
      (common-lisp:list
       (common-lisp:cons "TargetValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'predefined-metric-specification))
      (common-lisp:list
       (common-lisp:cons "PredefinedMetricSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customized-metric-specification))
      (common-lisp:list
       (common-lisp:cons "CustomizedMetricSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scale-out-cooldown))
      (common-lisp:list
       (common-lisp:cons "ScaleOutCooldown"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scale-in-cooldown))
      (common-lisp:list
       (common-lisp:cons "ScaleInCooldown"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disable-scale-in))
      (common-lisp:list
       (common-lisp:cons "DisableScaleIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          target-tracking-scaling-policy-configuration))
   common-lisp:nil))
(common-lisp:deftype timestamp-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition too-many-tags-exception
     (application-autoscaling-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-tags-exception-message)
      (resource-name :initarg :resource-name :initform common-lisp:nil :reader
       too-many-tags-exception-resource-name)))
 (common-lisp:export
  (common-lisp:list 'too-many-tags-exception 'too-many-tags-exception-message
                    'too-many-tags-exception-resource-name)))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tag-keys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-untag-resource-request-tag-keys
                         :shape "TagKeyList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (application-autoscaling-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:deftype xml-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun delete-scaling-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name service-namespace resource-id
                     scalable-dimension)
   (common-lisp:declare
    (common-lisp:ignorable policy-name service-namespace resource-id
     scalable-dimension))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-scaling-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-autoscaling-request aws-sdk/generator/operation::input
        "POST" "/" "DeleteScalingPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-scaling-policy))
(common-lisp:progn
 (common-lisp:defun delete-scheduled-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-namespace scheduled-action-name
                     resource-id scalable-dimension)
   (common-lisp:declare
    (common-lisp:ignorable service-namespace scheduled-action-name resource-id
     scalable-dimension))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-scheduled-action-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-autoscaling-request aws-sdk/generator/operation::input
        "POST" "/" "DeleteScheduledAction"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-scheduled-action))
(common-lisp:progn
 (common-lisp:defun deregister-scalable-target
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-namespace resource-id
                     scalable-dimension)
   (common-lisp:declare
    (common-lisp:ignorable service-namespace resource-id scalable-dimension))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-deregister-scalable-target-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-autoscaling-request aws-sdk/generator/operation::input
        "POST" "/" "DeregisterScalableTarget"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'deregister-scalable-target))
(common-lisp:progn
 (common-lisp:defun describe-scalable-targets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-namespace resource-ids
                     scalable-dimension max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable service-namespace resource-ids scalable-dimension
     max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-scalable-targets-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-autoscaling-request aws-sdk/generator/operation::input
        "POST" "/" "DescribeScalableTargets"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-scalable-targets))
(common-lisp:progn
 (common-lisp:defun describe-scaling-activities
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-namespace resource-id
                     scalable-dimension max-results next-token
                     include-not-scaled-activities)
   (common-lisp:declare
    (common-lisp:ignorable service-namespace resource-id scalable-dimension
     max-results next-token include-not-scaled-activities))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-scaling-activities-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-autoscaling-request aws-sdk/generator/operation::input
        "POST" "/" "DescribeScalingActivities"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-scaling-activities))
(common-lisp:progn
 (common-lisp:defun describe-scaling-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-names service-namespace
                     resource-id scalable-dimension max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable policy-names service-namespace resource-id
     scalable-dimension max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-scaling-policies-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-autoscaling-request aws-sdk/generator/operation::input
        "POST" "/" "DescribeScalingPolicies"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-scaling-policies))
(common-lisp:progn
 (common-lisp:defun describe-scheduled-actions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key scheduled-action-names service-namespace
                     resource-id scalable-dimension max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable scheduled-action-names service-namespace resource-id
     scalable-dimension max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-scheduled-actions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-autoscaling-request aws-sdk/generator/operation::input
        "POST" "/" "DescribeScheduledActions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-scheduled-actions))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-autoscaling-request aws-sdk/generator/operation::input
        "POST" "/" "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun put-scaling-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name service-namespace resource-id
                     scalable-dimension policy-type
                     step-scaling-policy-configuration
                     target-tracking-scaling-policy-configuration)
   (common-lisp:declare
    (common-lisp:ignorable policy-name service-namespace resource-id
     scalable-dimension policy-type step-scaling-policy-configuration
     target-tracking-scaling-policy-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-scaling-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-autoscaling-request aws-sdk/generator/operation::input
        "POST" "/" "PutScalingPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-scaling-policy))
(common-lisp:progn
 (common-lisp:defun put-scheduled-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-namespace schedule timezone
                     scheduled-action-name resource-id scalable-dimension
                     start-time end-time scalable-target-action)
   (common-lisp:declare
    (common-lisp:ignorable service-namespace schedule timezone
     scheduled-action-name resource-id scalable-dimension start-time end-time
     scalable-target-action))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-scheduled-action-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-autoscaling-request aws-sdk/generator/operation::input
        "POST" "/" "PutScheduledAction"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-scheduled-action))
(common-lisp:progn
 (common-lisp:defun register-scalable-target
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-namespace resource-id
                     scalable-dimension min-capacity max-capacity role-arn
                     suspended-state tags)
   (common-lisp:declare
    (common-lisp:ignorable service-namespace resource-id scalable-dimension
     min-capacity max-capacity role-arn suspended-state tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-scalable-target-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-autoscaling-request aws-sdk/generator/operation::input
        "POST" "/" "RegisterScalableTarget"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'register-scalable-target))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-autoscaling-request aws-sdk/generator/operation::input
        "POST" "/" "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-autoscaling-request aws-sdk/generator/operation::input
        "POST" "/" "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
