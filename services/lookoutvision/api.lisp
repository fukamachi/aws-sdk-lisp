;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(uiop/package:define-package #:aws-sdk/services/lookoutvision/api (:use)
                             (:nicknames #:aws/lookoutvision)
                             (:import-from #:aws-sdk/generator/shape)
                             (:import-from #:aws-sdk/generator/operation)
                             (:import-from #:aws-sdk/api)
                             (:import-from #:aws-sdk/request)
                             (:import-from #:aws-sdk/json-request)
                             (:import-from #:aws-sdk/rest-json-request)
                             (:import-from #:aws-sdk/rest-xml-request)
                             (:import-from #:aws-sdk/query-request)
                             (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/lookoutvision/api)
(common-lisp:progn
 (common-lisp:define-condition lookoutvision-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'lookoutvision-error))
(common-lisp:progn
 (common-lisp:defclass lookoutvision-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "lookoutvision" :api-version
                        "2020-11-20" :host-prefix "lookoutvision" :signing-name
                        "lookoutvision" :global-host common-lisp:nil))
 (common-lisp:export 'lookoutvision-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (lookoutvision-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defclass anomaly common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or anomaly-name common-lisp:null)
                         :accessor struct-shape-anomaly-name :shape
                         "AnomalyName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (pixel-anomaly :initarg :pixel-anomaly :initform
                         common-lisp:nil :type
                         (common-lisp:or pixel-anomaly common-lisp:null)
                         :accessor struct-shape-anomaly-pixel-anomaly :shape
                         "PixelAnomaly" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-anomaly
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'anomaly
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'anomaly 'make-anomaly))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input anomaly))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input anomaly))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pixel-anomaly))
      (common-lisp:list
       (common-lisp:cons "PixelAnomaly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input anomaly))
   common-lisp:nil))
(common-lisp:deftype anomaly-class-filter () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype anomaly-list () '(trivial-types:proper-list anomaly))
 (common-lisp:defun make-anomaly-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list anomaly))
   aws-sdk/generator/shape::members))
(common-lisp:deftype anomaly-mask ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype anomaly-name () 'common-lisp:string)
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:deftype color () 'common-lisp:string)
(common-lisp:deftype compiler-options () 'common-lisp:string)
(common-lisp:deftype component-description () 'common-lisp:string)
(common-lisp:deftype component-name () 'common-lisp:string)
(common-lisp:deftype component-version () 'common-lisp:string)
(common-lisp:deftype component-version-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (lookoutvision-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       conflict-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       conflict-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message
                    'conflict-exception-resource-id
                    'conflict-exception-resource-type)))
(common-lisp:deftype content-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-dataset-request common-lisp:nil
                       ((project-name :initarg :project-name :initform
                         (common-lisp:error ":project-name is required") :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor
                         struct-shape-create-dataset-request-project-name
                         :shape "ProjectName" :location "uri" :location-name
                         "projectName")
                        (dataset-type :initarg :dataset-type :initform
                         (common-lisp:error ":dataset-type is required") :type
                         (common-lisp:or dataset-type common-lisp:null)
                         :accessor
                         struct-shape-create-dataset-request-dataset-type
                         :shape "DatasetType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dataset-source :initarg :dataset-source :initform
                         common-lisp:nil :type
                         (common-lisp:or dataset-source common-lisp:null)
                         :accessor
                         struct-shape-create-dataset-request-dataset-source
                         :shape "DatasetSource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-dataset-request-client-token
                         :shape "ClientToken" :location "header" :location-name
                         "X-Amzn-Client-Token"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-dataset-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-dataset-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-dataset-request 'make-create-dataset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amzn-Client-Token"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-type))
      (common-lisp:list
       (common-lisp:cons "DatasetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-source))
      (common-lisp:list
       (common-lisp:cons "DatasetSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dataset-response common-lisp:nil
                       ((dataset-metadata :initarg :dataset-metadata :initform
                         common-lisp:nil :type
                         (common-lisp:or dataset-metadata common-lisp:null)
                         :accessor
                         struct-shape-create-dataset-response-dataset-metadata
                         :shape "DatasetMetadata" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-dataset-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-dataset-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-dataset-response 'make-create-dataset-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-metadata))
      (common-lisp:list
       (common-lisp:cons "DatasetMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-model-request common-lisp:nil
                       ((project-name :initarg :project-name :initform
                         (common-lisp:error ":project-name is required") :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor
                         struct-shape-create-model-request-project-name :shape
                         "ProjectName" :location "uri" :location-name
                         "projectName")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or model-description-message
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-model-request-description :shape
                         "ModelDescriptionMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-model-request-client-token :shape
                         "ClientToken" :location "header" :location-name
                         "X-Amzn-Client-Token")
                        (output-config :initarg :output-config :initform
                         (common-lisp:error ":output-config is required") :type
                         (common-lisp:or output-config common-lisp:null)
                         :accessor
                         struct-shape-create-model-request-output-config :shape
                         "OutputConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-key-id common-lisp:null) :accessor
                         struct-shape-create-model-request-kms-key-id :shape
                         "KmsKeyId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-model-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-model-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-model-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-model-request 'make-create-model-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-model-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amzn-Client-Token"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-model-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-config))
      (common-lisp:list
       (common-lisp:cons "OutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-model-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-model-response common-lisp:nil
                       ((model-metadata :initarg :model-metadata :initform
                         common-lisp:nil :type
                         (common-lisp:or model-metadata common-lisp:null)
                         :accessor
                         struct-shape-create-model-response-model-metadata
                         :shape "ModelMetadata" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-model-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-model-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-model-response 'make-create-model-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-model-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-model-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-metadata))
      (common-lisp:list
       (common-lisp:cons "ModelMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-model-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-project-request common-lisp:nil
                       ((project-name :initarg :project-name :initform
                         (common-lisp:error ":project-name is required") :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor
                         struct-shape-create-project-request-project-name
                         :shape "ProjectName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-project-request-client-token
                         :shape "ClientToken" :location "header" :location-name
                         "X-Amzn-Client-Token"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-project-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-project-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-project-request 'make-create-project-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-project-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amzn-Client-Token"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-project-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-name))
      (common-lisp:list
       (common-lisp:cons "ProjectName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-project-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-project-response common-lisp:nil
                       ((project-metadata :initarg :project-metadata :initform
                         common-lisp:nil :type
                         (common-lisp:or project-metadata common-lisp:null)
                         :accessor
                         struct-shape-create-project-response-project-metadata
                         :shape "ProjectMetadata" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-project-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-project-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-project-response 'make-create-project-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-project-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-project-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-metadata))
      (common-lisp:list
       (common-lisp:cons "ProjectMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-project-response))
   common-lisp:nil))
(common-lisp:deftype dataset-changes ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:defclass dataset-description common-lisp:nil
                       ((project-name :initarg :project-name :initform
                         common-lisp:nil :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor
                         struct-shape-dataset-description-project-name :shape
                         "ProjectName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dataset-type :initarg :dataset-type :initform
                         common-lisp:nil :type
                         (common-lisp:or dataset-type common-lisp:null)
                         :accessor
                         struct-shape-dataset-description-dataset-type :shape
                         "DatasetType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-timestamp :initarg :creation-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-dataset-description-creation-timestamp
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-timestamp :initarg
                         :last-updated-timestamp :initform common-lisp:nil
                         :type (common-lisp:or date-time common-lisp:null)
                         :accessor
                         struct-shape-dataset-description-last-updated-timestamp
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or dataset-status common-lisp:null)
                         :accessor struct-shape-dataset-description-status
                         :shape "DatasetStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or dataset-status-message
                                         common-lisp:null)
                         :accessor
                         struct-shape-dataset-description-status-message :shape
                         "DatasetStatusMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-stats :initarg :image-stats :initform
                         common-lisp:nil :type
                         (common-lisp:or dataset-image-stats common-lisp:null)
                         :accessor struct-shape-dataset-description-image-stats
                         :shape "DatasetImageStats" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dataset-description
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dataset-description
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dataset-description 'make-dataset-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dataset-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dataset-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-name))
      (common-lisp:list
       (common-lisp:cons "ProjectName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-type))
      (common-lisp:list
       (common-lisp:cons "DatasetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-timestamp))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-stats))
      (common-lisp:list
       (common-lisp:cons "ImageStats"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dataset-description))
   common-lisp:nil))
(common-lisp:deftype dataset-entry () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype dataset-entry-list ()
   '(trivial-types:proper-list dataset-entry))
 (common-lisp:defun make-dataset-entry-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dataset-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dataset-ground-truth-manifest common-lisp:nil
                       ((s3object :initarg :s3object :initform common-lisp:nil
                         :type (common-lisp:or input-s3object common-lisp:null)
                         :accessor
                         struct-shape-dataset-ground-truth-manifest-s3object
                         :shape "InputS3Object" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dataset-ground-truth-manifest
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'dataset-ground-truth-manifest
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dataset-ground-truth-manifest
                    'make-dataset-ground-truth-manifest))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dataset-ground-truth-manifest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dataset-ground-truth-manifest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3object))
      (common-lisp:list
       (common-lisp:cons "S3Object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dataset-ground-truth-manifest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dataset-image-stats common-lisp:nil
                       ((total :initarg :total :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-dataset-image-stats-total :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (labeled :initarg :labeled :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor struct-shape-dataset-image-stats-labeled
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (normal :initarg :normal :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor struct-shape-dataset-image-stats-normal
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (anomaly :initarg :anomaly :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor struct-shape-dataset-image-stats-anomaly
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dataset-image-stats
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dataset-image-stats
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dataset-image-stats 'make-dataset-image-stats))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dataset-image-stats))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dataset-image-stats))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total))
      (common-lisp:list
       (common-lisp:cons "Total"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labeled))
      (common-lisp:list
       (common-lisp:cons "Labeled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'normal))
      (common-lisp:list
       (common-lisp:cons "Normal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anomaly))
      (common-lisp:list
       (common-lisp:cons "Anomaly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dataset-image-stats))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dataset-metadata common-lisp:nil
                       ((dataset-type :initarg :dataset-type :initform
                         common-lisp:nil :type
                         (common-lisp:or dataset-type common-lisp:null)
                         :accessor struct-shape-dataset-metadata-dataset-type
                         :shape "DatasetType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-timestamp :initarg :creation-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-dataset-metadata-creation-timestamp
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or dataset-status common-lisp:null)
                         :accessor struct-shape-dataset-metadata-status :shape
                         "DatasetStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or dataset-status-message
                                         common-lisp:null)
                         :accessor struct-shape-dataset-metadata-status-message
                         :shape "DatasetStatusMessage" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dataset-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dataset-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dataset-metadata 'make-dataset-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dataset-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dataset-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-type))
      (common-lisp:list
       (common-lisp:cons "DatasetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dataset-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dataset-metadata-list ()
   '(trivial-types:proper-list dataset-metadata))
 (common-lisp:defun make-dataset-metadata-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dataset-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dataset-source common-lisp:nil
                       ((ground-truth-manifest :initarg :ground-truth-manifest
                         :initform common-lisp:nil :type
                         (common-lisp:or dataset-ground-truth-manifest
                                         common-lisp:null)
                         :accessor
                         struct-shape-dataset-source-ground-truth-manifest
                         :shape "DatasetGroundTruthManifest" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dataset-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dataset-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'dataset-source 'make-dataset-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dataset-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dataset-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ground-truth-manifest))
      (common-lisp:list
       (common-lisp:cons "GroundTruthManifest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dataset-source))
   common-lisp:nil))
(common-lisp:deftype dataset-status () 'common-lisp:string)
(common-lisp:deftype dataset-status-message () 'common-lisp:string)
(common-lisp:deftype dataset-type () 'common-lisp:string)
(common-lisp:deftype date-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-dataset-request common-lisp:nil
                       ((project-name :initarg :project-name :initform
                         (common-lisp:error ":project-name is required") :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor
                         struct-shape-delete-dataset-request-project-name
                         :shape "ProjectName" :location "uri" :location-name
                         "projectName")
                        (dataset-type :initarg :dataset-type :initform
                         (common-lisp:error ":dataset-type is required") :type
                         (common-lisp:or dataset-type common-lisp:null)
                         :accessor
                         struct-shape-delete-dataset-request-dataset-type
                         :shape "DatasetType" :location "uri" :location-name
                         "datasetType")
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-delete-dataset-request-client-token
                         :shape "ClientToken" :location "header" :location-name
                         "X-Amzn-Client-Token"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-dataset-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-dataset-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-dataset-request 'make-delete-dataset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataset-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amzn-Client-Token"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-dataset-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-dataset-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-dataset-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-dataset-response 'make-delete-dataset-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-model-request common-lisp:nil
                       ((project-name :initarg :project-name :initform
                         (common-lisp:error ":project-name is required") :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor
                         struct-shape-delete-model-request-project-name :shape
                         "ProjectName" :location "uri" :location-name
                         "projectName")
                        (model-version :initarg :model-version :initform
                         (common-lisp:error ":model-version is required") :type
                         (common-lisp:or model-version-no-latest
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-model-request-model-version :shape
                         "ModelVersionNoLatest" :location "uri" :location-name
                         "modelVersion")
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-delete-model-request-client-token :shape
                         "ClientToken" :location "header" :location-name
                         "X-Amzn-Client-Token"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-model-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-model-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-model-request 'make-delete-model-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-model-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amzn-Client-Token"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-model-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-model-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-model-response common-lisp:nil
                       ((model-arn :initarg :model-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or model-arn common-lisp:null) :accessor
                         struct-shape-delete-model-response-model-arn :shape
                         "ModelArn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-model-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-model-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-model-response 'make-delete-model-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-model-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-model-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-arn))
      (common-lisp:list
       (common-lisp:cons "ModelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-model-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-project-request common-lisp:nil
                       ((project-name :initarg :project-name :initform
                         (common-lisp:error ":project-name is required") :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor
                         struct-shape-delete-project-request-project-name
                         :shape "ProjectName" :location "uri" :location-name
                         "projectName")
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-delete-project-request-client-token
                         :shape "ClientToken" :location "header" :location-name
                         "X-Amzn-Client-Token"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-project-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-project-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-project-request 'make-delete-project-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amzn-Client-Token"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-project-response common-lisp:nil
                       ((project-arn :initarg :project-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or project-arn common-lisp:null)
                         :accessor
                         struct-shape-delete-project-response-project-arn
                         :shape "ProjectArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-project-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-project-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-project-response 'make-delete-project-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-arn))
      (common-lisp:list
       (common-lisp:cons "ProjectArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dataset-request common-lisp:nil
                       ((project-name :initarg :project-name :initform
                         (common-lisp:error ":project-name is required") :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor
                         struct-shape-describe-dataset-request-project-name
                         :shape "ProjectName" :location "uri" :location-name
                         "projectName")
                        (dataset-type :initarg :dataset-type :initform
                         (common-lisp:error ":dataset-type is required") :type
                         (common-lisp:or dataset-type common-lisp:null)
                         :accessor
                         struct-shape-describe-dataset-request-dataset-type
                         :shape "DatasetType" :location "uri" :location-name
                         "datasetType"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-dataset-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-dataset-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-dataset-request 'make-describe-dataset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dataset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dataset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dataset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dataset-response common-lisp:nil
                       ((dataset-description :initarg :dataset-description
                         :initform common-lisp:nil :type
                         (common-lisp:or dataset-description common-lisp:null)
                         :accessor
                         struct-shape-describe-dataset-response-dataset-description
                         :shape "DatasetDescription" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-dataset-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-dataset-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-dataset-response
                    'make-describe-dataset-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dataset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dataset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-description))
      (common-lisp:list
       (common-lisp:cons "DatasetDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dataset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-model-packaging-job-request common-lisp:nil
                       ((project-name :initarg :project-name :initform
                         (common-lisp:error ":project-name is required") :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor
                         struct-shape-describe-model-packaging-job-request-project-name
                         :shape "ProjectName" :location "uri" :location-name
                         "projectName")
                        (job-name :initarg :job-name :initform
                         (common-lisp:error ":job-name is required") :type
                         (common-lisp:or model-packaging-job-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-model-packaging-job-request-job-name
                         :shape "ModelPackagingJobName" :location "uri"
                         :location-name "jobName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-model-packaging-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-model-packaging-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-model-packaging-job-request
                    'make-describe-model-packaging-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-packaging-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-packaging-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-packaging-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-model-packaging-job-response common-lisp:nil
                       ((model-packaging-description :initarg
                         :model-packaging-description :initform common-lisp:nil
                         :type
                         (common-lisp:or model-packaging-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-model-packaging-job-response-model-packaging-description
                         :shape "ModelPackagingDescription" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-model-packaging-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-model-packaging-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-model-packaging-job-response
                    'make-describe-model-packaging-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-packaging-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-packaging-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-packaging-description))
      (common-lisp:list
       (common-lisp:cons "ModelPackagingDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-packaging-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-model-request common-lisp:nil
                       ((project-name :initarg :project-name :initform
                         (common-lisp:error ":project-name is required") :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor
                         struct-shape-describe-model-request-project-name
                         :shape "ProjectName" :location "uri" :location-name
                         "projectName")
                        (model-version :initarg :model-version :initform
                         (common-lisp:error ":model-version is required") :type
                         (common-lisp:or model-version common-lisp:null)
                         :accessor
                         struct-shape-describe-model-request-model-version
                         :shape "ModelVersion" :location "uri" :location-name
                         "modelVersion"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-model-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-model-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-model-request 'make-describe-model-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-model-response common-lisp:nil
                       ((model-description :initarg :model-description
                         :initform common-lisp:nil :type
                         (common-lisp:or model-description common-lisp:null)
                         :accessor
                         struct-shape-describe-model-response-model-description
                         :shape "ModelDescription" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-model-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-model-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-model-response 'make-describe-model-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-description))
      (common-lisp:list
       (common-lisp:cons "ModelDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-project-request common-lisp:nil
                       ((project-name :initarg :project-name :initform
                         (common-lisp:error ":project-name is required") :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor
                         struct-shape-describe-project-request-project-name
                         :shape "ProjectName" :location "uri" :location-name
                         "projectName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-project-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-project-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-project-request 'make-describe-project-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-project-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-project-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-project-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-project-response common-lisp:nil
                       ((project-description :initarg :project-description
                         :initform common-lisp:nil :type
                         (common-lisp:or project-description common-lisp:null)
                         :accessor
                         struct-shape-describe-project-response-project-description
                         :shape "ProjectDescription" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-project-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-project-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-project-response
                    'make-describe-project-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-project-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-project-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-description))
      (common-lisp:list
       (common-lisp:cons "ProjectDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-project-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detect-anomalies-request common-lisp:nil
                       ((project-name :initarg :project-name :initform
                         (common-lisp:error ":project-name is required") :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor
                         struct-shape-detect-anomalies-request-project-name
                         :shape "ProjectName" :location "uri" :location-name
                         "projectName")
                        (model-version :initarg :model-version :initform
                         (common-lisp:error ":model-version is required") :type
                         (common-lisp:or model-version common-lisp:null)
                         :accessor
                         struct-shape-detect-anomalies-request-model-version
                         :shape "ModelVersion" :location "uri" :location-name
                         "modelVersion")
                        (body :initarg :body :initform
                         (common-lisp:error ":body is required") :type
                         (common-lisp:or stream common-lisp:null) :accessor
                         struct-shape-detect-anomalies-request-body :shape
                         "Stream" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (content-type :initarg :content-type :initform
                         (common-lisp:error ":content-type is required") :type
                         (common-lisp:or content-type common-lisp:null)
                         :accessor
                         struct-shape-detect-anomalies-request-content-type
                         :shape "ContentType" :location "header" :location-name
                         "Content-Type"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detect-anomalies-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'detect-anomalies-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'detect-anomalies-request 'make-detect-anomalies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detect-anomalies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detect-anomalies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'body))
      (common-lisp:list
       (common-lisp:cons "Body"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detect-anomalies-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'body))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          detect-anomalies-request))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass detect-anomalies-response common-lisp:nil
                       ((detect-anomaly-result :initarg :detect-anomaly-result
                         :initform common-lisp:nil :type
                         (common-lisp:or detect-anomaly-result
                                         common-lisp:null)
                         :accessor
                         struct-shape-detect-anomalies-response-detect-anomaly-result
                         :shape "DetectAnomalyResult" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detect-anomalies-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'detect-anomalies-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'detect-anomalies-response
                    'make-detect-anomalies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detect-anomalies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detect-anomalies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'detect-anomaly-result))
      (common-lisp:list
       (common-lisp:cons "DetectAnomalyResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detect-anomalies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detect-anomaly-result common-lisp:nil
                       ((source :initarg :source :initform common-lisp:nil
                         :type (common-lisp:or image-source common-lisp:null)
                         :accessor struct-shape-detect-anomaly-result-source
                         :shape "ImageSource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-anomalous :initarg :is-anomalous :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-detect-anomaly-result-is-anomalous :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (confidence :initarg :confidence :initform
                         common-lisp:nil :type
                         (common-lisp:or float common-lisp:null) :accessor
                         struct-shape-detect-anomaly-result-confidence :shape
                         "Float" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (anomalies :initarg :anomalies :initform
                         common-lisp:nil :type
                         (common-lisp:or anomaly-list common-lisp:null)
                         :accessor struct-shape-detect-anomaly-result-anomalies
                         :shape "AnomalyList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (anomaly-mask :initarg :anomaly-mask :initform
                         common-lisp:nil :type
                         (common-lisp:or anomaly-mask common-lisp:null)
                         :accessor
                         struct-shape-detect-anomaly-result-anomaly-mask :shape
                         "AnomalyMask" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detect-anomaly-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'detect-anomaly-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'detect-anomaly-result 'make-detect-anomaly-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detect-anomaly-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detect-anomaly-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-anomalous))
      (common-lisp:list
       (common-lisp:cons "IsAnomalous"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anomalies))
      (common-lisp:list
       (common-lisp:cons "Anomalies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anomaly-mask))
      (common-lisp:list
       (common-lisp:cons "AnomalyMask"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detect-anomaly-result))
   common-lisp:nil))
(common-lisp:deftype exception-string () 'common-lisp:string)
(common-lisp:deftype float () 'common-lisp:single-float)
(common-lisp:progn
 (common-lisp:defclass greengrass-configuration common-lisp:nil
                       ((compiler-options :initarg :compiler-options :initform
                         common-lisp:nil :type
                         (common-lisp:or compiler-options common-lisp:null)
                         :accessor
                         struct-shape-greengrass-configuration-compiler-options
                         :shape "CompilerOptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-device :initarg :target-device :initform
                         common-lisp:nil :type
                         (common-lisp:or target-device common-lisp:null)
                         :accessor
                         struct-shape-greengrass-configuration-target-device
                         :shape "TargetDevice" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-platform :initarg :target-platform :initform
                         common-lisp:nil :type
                         (common-lisp:or target-platform common-lisp:null)
                         :accessor
                         struct-shape-greengrass-configuration-target-platform
                         :shape "TargetPlatform" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3output-location :initarg :s3output-location
                         :initform
                         (common-lisp:error ":s3output-location is required")
                         :type (common-lisp:or s3location common-lisp:null)
                         :accessor
                         struct-shape-greengrass-configuration-s3output-location
                         :shape "S3Location" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (component-name :initarg :component-name :initform
                         (common-lisp:error ":component-name is required")
                         :type (common-lisp:or component-name common-lisp:null)
                         :accessor
                         struct-shape-greengrass-configuration-component-name
                         :shape "ComponentName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (component-version :initarg :component-version
                         :initform common-lisp:nil :type
                         (common-lisp:or component-version common-lisp:null)
                         :accessor
                         struct-shape-greengrass-configuration-component-version
                         :shape "ComponentVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (component-description :initarg :component-description
                         :initform common-lisp:nil :type
                         (common-lisp:or component-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-greengrass-configuration-component-description
                         :shape "ComponentDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-greengrass-configuration-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-greengrass-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'greengrass-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'greengrass-configuration 'make-greengrass-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          greengrass-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          greengrass-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compiler-options))
      (common-lisp:list
       (common-lisp:cons "CompilerOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-device))
      (common-lisp:list
       (common-lisp:cons "TargetDevice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-platform))
      (common-lisp:list
       (common-lisp:cons "TargetPlatform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3output-location))
      (common-lisp:list
       (common-lisp:cons "S3OutputLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-name))
      (common-lisp:list
       (common-lisp:cons "ComponentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-version))
      (common-lisp:list
       (common-lisp:cons "ComponentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'component-description))
      (common-lisp:list
       (common-lisp:cons "ComponentDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          greengrass-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass greengrass-output-details common-lisp:nil
                       ((component-version-arn :initarg :component-version-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or component-version-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-greengrass-output-details-component-version-arn
                         :shape "ComponentVersionArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (component-name :initarg :component-name :initform
                         common-lisp:nil :type
                         (common-lisp:or component-name common-lisp:null)
                         :accessor
                         struct-shape-greengrass-output-details-component-name
                         :shape "ComponentName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (component-version :initarg :component-version
                         :initform common-lisp:nil :type
                         (common-lisp:or component-version common-lisp:null)
                         :accessor
                         struct-shape-greengrass-output-details-component-version
                         :shape "ComponentVersion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-greengrass-output-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'greengrass-output-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'greengrass-output-details
                    'make-greengrass-output-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          greengrass-output-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          greengrass-output-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'component-version-arn))
      (common-lisp:list
       (common-lisp:cons "ComponentVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-name))
      (common-lisp:list
       (common-lisp:cons "ComponentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-version))
      (common-lisp:list
       (common-lisp:cons "ComponentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          greengrass-output-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass image-source common-lisp:nil
                       ((type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or image-source-type common-lisp:null)
                         :accessor struct-shape-image-source-type :shape
                         "ImageSourceType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-image-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'image-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'image-source 'make-image-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image-source))
   common-lisp:nil))
(common-lisp:deftype image-source-type () 'common-lisp:string)
(common-lisp:deftype inference-units () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass input-s3object common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or s3bucket-name common-lisp:null)
                         :accessor struct-shape-input-s3object-bucket :shape
                         "S3BucketName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or s3object-key common-lisp:null)
                         :accessor struct-shape-input-s3object-key :shape
                         "S3ObjectKey" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (version-id :initarg :version-id :initform
                         common-lisp:nil :type
                         (common-lisp:or s3object-version common-lisp:null)
                         :accessor struct-shape-input-s3object-version-id
                         :shape "S3ObjectVersion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-input-s3object
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'input-s3object
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'input-s3object 'make-input-s3object))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-s3object))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-s3object))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-s3object))
   common-lisp:nil))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (lookoutvision-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)
      (retry-after-seconds :initarg :retry-after-seconds :initform
       common-lisp:nil :reader internal-server-exception-retry-after-seconds)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message
                    'internal-server-exception-retry-after-seconds)))
(common-lisp:deftype is-labeled () 'common-lisp:boolean)
(common-lisp:deftype kms-key-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-dataset-entries-request common-lisp:nil
                       ((project-name :initarg :project-name :initform
                         (common-lisp:error ":project-name is required") :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor
                         struct-shape-list-dataset-entries-request-project-name
                         :shape "ProjectName" :location "uri" :location-name
                         "projectName")
                        (dataset-type :initarg :dataset-type :initform
                         (common-lisp:error ":dataset-type is required") :type
                         (common-lisp:or dataset-type common-lisp:null)
                         :accessor
                         struct-shape-list-dataset-entries-request-dataset-type
                         :shape "DatasetType" :location "uri" :location-name
                         "datasetType")
                        (labeled :initarg :labeled :initform common-lisp:nil
                         :type (common-lisp:or is-labeled common-lisp:null)
                         :accessor
                         struct-shape-list-dataset-entries-request-labeled
                         :shape "IsLabeled" :location "querystring"
                         :location-name "labeled")
                        (anomaly-class :initarg :anomaly-class :initform
                         common-lisp:nil :type
                         (common-lisp:or anomaly-class-filter common-lisp:null)
                         :accessor
                         struct-shape-list-dataset-entries-request-anomaly-class
                         :shape "AnomalyClassFilter" :location "querystring"
                         :location-name "anomalyClass")
                        (before-creation-date :initarg :before-creation-date
                         :initform common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-list-dataset-entries-request-before-creation-date
                         :shape "DateTime" :location "querystring"
                         :location-name "createdBefore")
                        (after-creation-date :initarg :after-creation-date
                         :initform common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-list-dataset-entries-request-after-creation-date
                         :shape "DateTime" :location "querystring"
                         :location-name "createdAfter")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-dataset-entries-request-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-list-dataset-entries-request-max-results
                         :shape "PageSize" :location "querystring"
                         :location-name "maxResults")
                        (source-ref-contains :initarg :source-ref-contains
                         :initform common-lisp:nil :type
                         (common-lisp:or query-string common-lisp:null)
                         :accessor
                         struct-shape-list-dataset-entries-request-source-ref-contains
                         :shape "QueryString" :location "querystring"
                         :location-name "sourceRefContains"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-dataset-entries-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-dataset-entries-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-dataset-entries-request
                    'make-list-dataset-entries-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-dataset-entries-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-dataset-entries-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-dataset-entries-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-dataset-entries-response common-lisp:nil
                       ((dataset-entries :initarg :dataset-entries :initform
                         common-lisp:nil :type
                         (common-lisp:or dataset-entry-list common-lisp:null)
                         :accessor
                         struct-shape-list-dataset-entries-response-dataset-entries
                         :shape "DatasetEntryList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-dataset-entries-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-dataset-entries-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-dataset-entries-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-dataset-entries-response
                    'make-list-dataset-entries-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-dataset-entries-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-dataset-entries-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-entries))
      (common-lisp:list
       (common-lisp:cons "DatasetEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-dataset-entries-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-model-packaging-jobs-request common-lisp:nil
                       ((project-name :initarg :project-name :initform
                         (common-lisp:error ":project-name is required") :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor
                         struct-shape-list-model-packaging-jobs-request-project-name
                         :shape "ProjectName" :location "uri" :location-name
                         "projectName")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-model-packaging-jobs-request-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-list-model-packaging-jobs-request-max-results
                         :shape "PageSize" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-model-packaging-jobs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-model-packaging-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-model-packaging-jobs-request
                    'make-list-model-packaging-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-model-packaging-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-model-packaging-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-model-packaging-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-model-packaging-jobs-response common-lisp:nil
                       ((model-packaging-jobs :initarg :model-packaging-jobs
                         :initform common-lisp:nil :type
                         (common-lisp:or model-packaging-jobs-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-model-packaging-jobs-response-model-packaging-jobs
                         :shape "ModelPackagingJobsList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-model-packaging-jobs-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-model-packaging-jobs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-model-packaging-jobs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-model-packaging-jobs-response
                    'make-list-model-packaging-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-model-packaging-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-model-packaging-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-packaging-jobs))
      (common-lisp:list
       (common-lisp:cons "ModelPackagingJobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-model-packaging-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-models-request common-lisp:nil
                       ((project-name :initarg :project-name :initform
                         (common-lisp:error ":project-name is required") :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor
                         struct-shape-list-models-request-project-name :shape
                         "ProjectName" :location "uri" :location-name
                         "projectName")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor struct-shape-list-models-request-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-list-models-request-max-results :shape
                         "PageSize" :location "querystring" :location-name
                         "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-models-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-models-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-models-request 'make-list-models-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-models-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-models-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-models-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-models-response common-lisp:nil
                       ((models :initarg :models :initform common-lisp:nil
                         :type
                         (common-lisp:or model-metadata-list common-lisp:null)
                         :accessor struct-shape-list-models-response-models
                         :shape "ModelMetadataList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor struct-shape-list-models-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-models-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-models-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-models-response 'make-list-models-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-models-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-models-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'models))
      (common-lisp:list
       (common-lisp:cons "Models"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-models-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-projects-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-projects-request-next-token :shape
                         "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-list-projects-request-max-results :shape
                         "PageSize" :location "querystring" :location-name
                         "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-projects-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-projects-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-projects-request 'make-list-projects-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-projects-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-projects-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-projects-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-projects-response common-lisp:nil
                       ((projects :initarg :projects :initform common-lisp:nil
                         :type
                         (common-lisp:or project-metadata-list
                                         common-lisp:null)
                         :accessor struct-shape-list-projects-response-projects
                         :shape "ProjectMetadataList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-projects-response-next-token :shape
                         "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-projects-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-projects-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-projects-response 'make-list-projects-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-projects-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-projects-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'projects))
      (common-lisp:list
       (common-lisp:cons "Projects"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-projects-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or tag-arn common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-request-resource-arn
                         :shape "TagArn" :location "uri" :location-name
                         "resourceArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype model-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass model-description common-lisp:nil
                       ((model-version :initarg :model-version :initform
                         common-lisp:nil :type
                         (common-lisp:or model-version common-lisp:null)
                         :accessor struct-shape-model-description-model-version
                         :shape "ModelVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (model-arn :initarg :model-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or model-arn common-lisp:null) :accessor
                         struct-shape-model-description-model-arn :shape
                         "ModelArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-timestamp :initarg :creation-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-model-description-creation-timestamp
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or model-description-message
                                         common-lisp:null)
                         :accessor struct-shape-model-description-description
                         :shape "ModelDescriptionMessage" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or model-status common-lisp:null)
                         :accessor struct-shape-model-description-status :shape
                         "ModelStatus" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or model-status-message common-lisp:null)
                         :accessor
                         struct-shape-model-description-status-message :shape
                         "ModelStatusMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (performance :initarg :performance :initform
                         common-lisp:nil :type
                         (common-lisp:or model-performance common-lisp:null)
                         :accessor struct-shape-model-description-performance
                         :shape "ModelPerformance" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-config :initarg :output-config :initform
                         common-lisp:nil :type
                         (common-lisp:or output-config common-lisp:null)
                         :accessor struct-shape-model-description-output-config
                         :shape "OutputConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (evaluation-manifest :initarg :evaluation-manifest
                         :initform common-lisp:nil :type
                         (common-lisp:or output-s3object common-lisp:null)
                         :accessor
                         struct-shape-model-description-evaluation-manifest
                         :shape "OutputS3Object" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (evaluation-result :initarg :evaluation-result
                         :initform common-lisp:nil :type
                         (common-lisp:or output-s3object common-lisp:null)
                         :accessor
                         struct-shape-model-description-evaluation-result
                         :shape "OutputS3Object" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (evaluation-end-timestamp :initarg
                         :evaluation-end-timestamp :initform common-lisp:nil
                         :type (common-lisp:or date-time common-lisp:null)
                         :accessor
                         struct-shape-model-description-evaluation-end-timestamp
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-key-id common-lisp:null) :accessor
                         struct-shape-model-description-kms-key-id :shape
                         "KmsKeyId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (min-inference-units :initarg :min-inference-units
                         :initform common-lisp:nil :type
                         (common-lisp:or inference-units common-lisp:null)
                         :accessor
                         struct-shape-model-description-min-inference-units
                         :shape "InferenceUnits" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-inference-units :initarg :max-inference-units
                         :initform common-lisp:nil :type
                         (common-lisp:or inference-units common-lisp:null)
                         :accessor
                         struct-shape-model-description-max-inference-units
                         :shape "InferenceUnits" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-model-description
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'model-description
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'model-description 'make-model-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input model-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input model-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-version))
      (common-lisp:list
       (common-lisp:cons "ModelVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-arn))
      (common-lisp:list
       (common-lisp:cons "ModelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'performance))
      (common-lisp:list
       (common-lisp:cons "Performance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-config))
      (common-lisp:list
       (common-lisp:cons "OutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-manifest))
      (common-lisp:list
       (common-lisp:cons "EvaluationManifest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-result))
      (common-lisp:list
       (common-lisp:cons "EvaluationResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evaluation-end-timestamp))
      (common-lisp:list
       (common-lisp:cons "EvaluationEndTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-inference-units))
      (common-lisp:list
       (common-lisp:cons "MinInferenceUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-inference-units))
      (common-lisp:list
       (common-lisp:cons "MaxInferenceUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input model-description))
   common-lisp:nil))
(common-lisp:deftype model-description-message () 'common-lisp:string)
(common-lisp:deftype model-hosting-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass model-metadata common-lisp:nil
                       ((creation-timestamp :initarg :creation-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-model-metadata-creation-timestamp :shape
                         "DateTime" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (model-version :initarg :model-version :initform
                         common-lisp:nil :type
                         (common-lisp:or model-version common-lisp:null)
                         :accessor struct-shape-model-metadata-model-version
                         :shape "ModelVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (model-arn :initarg :model-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or model-arn common-lisp:null) :accessor
                         struct-shape-model-metadata-model-arn :shape
                         "ModelArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or model-description-message
                                         common-lisp:null)
                         :accessor struct-shape-model-metadata-description
                         :shape "ModelDescriptionMessage" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or model-status common-lisp:null)
                         :accessor struct-shape-model-metadata-status :shape
                         "ModelStatus" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or model-status-message common-lisp:null)
                         :accessor struct-shape-model-metadata-status-message
                         :shape "ModelStatusMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (performance :initarg :performance :initform
                         common-lisp:nil :type
                         (common-lisp:or model-performance common-lisp:null)
                         :accessor struct-shape-model-metadata-performance
                         :shape "ModelPerformance" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-model-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'model-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'model-metadata 'make-model-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input model-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input model-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-version))
      (common-lisp:list
       (common-lisp:cons "ModelVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-arn))
      (common-lisp:list
       (common-lisp:cons "ModelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'performance))
      (common-lisp:list
       (common-lisp:cons "Performance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input model-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype model-metadata-list ()
   '(trivial-types:proper-list model-metadata))
 (common-lisp:defun make-model-metadata-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list model-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass model-packaging-configuration common-lisp:nil
                       ((greengrass :initarg :greengrass :initform
                         (common-lisp:error ":greengrass is required") :type
                         (common-lisp:or greengrass-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-model-packaging-configuration-greengrass
                         :shape "GreengrassConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-model-packaging-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'model-packaging-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'model-packaging-configuration
                    'make-model-packaging-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          model-packaging-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          model-packaging-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'greengrass))
      (common-lisp:list
       (common-lisp:cons "Greengrass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          model-packaging-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass model-packaging-description common-lisp:nil
                       ((job-name :initarg :job-name :initform common-lisp:nil
                         :type
                         (common-lisp:or model-packaging-job-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-model-packaging-description-job-name
                         :shape "ModelPackagingJobName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (project-name :initarg :project-name :initform
                         common-lisp:nil :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor
                         struct-shape-model-packaging-description-project-name
                         :shape "ProjectName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (model-version :initarg :model-version :initform
                         common-lisp:nil :type
                         (common-lisp:or model-version common-lisp:null)
                         :accessor
                         struct-shape-model-packaging-description-model-version
                         :shape "ModelVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (model-packaging-configuration :initarg
                         :model-packaging-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or model-packaging-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-model-packaging-description-model-packaging-configuration
                         :shape "ModelPackagingConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (model-packaging-job-description :initarg
                         :model-packaging-job-description :initform
                         common-lisp:nil :type
                         (common-lisp:or model-packaging-job-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-model-packaging-description-model-packaging-job-description
                         :shape "ModelPackagingJobDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (model-packaging-method :initarg
                         :model-packaging-method :initform common-lisp:nil
                         :type
                         (common-lisp:or model-packaging-method
                                         common-lisp:null)
                         :accessor
                         struct-shape-model-packaging-description-model-packaging-method
                         :shape "ModelPackagingMethod" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (model-packaging-output-details :initarg
                         :model-packaging-output-details :initform
                         common-lisp:nil :type
                         (common-lisp:or model-packaging-output-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-model-packaging-description-model-packaging-output-details
                         :shape "ModelPackagingOutputDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or model-packaging-job-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-model-packaging-description-status :shape
                         "ModelPackagingJobStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or model-packaging-status-message
                                         common-lisp:null)
                         :accessor
                         struct-shape-model-packaging-description-status-message
                         :shape "ModelPackagingStatusMessage" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (creation-timestamp :initarg :creation-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-model-packaging-description-creation-timestamp
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-timestamp :initarg
                         :last-updated-timestamp :initform common-lisp:nil
                         :type (common-lisp:or date-time common-lisp:null)
                         :accessor
                         struct-shape-model-packaging-description-last-updated-timestamp
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-model-packaging-description
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'model-packaging-description
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'model-packaging-description
                    'make-model-packaging-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          model-packaging-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          model-packaging-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-name))
      (common-lisp:list
       (common-lisp:cons "ProjectName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-version))
      (common-lisp:list
       (common-lisp:cons "ModelVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-packaging-configuration))
      (common-lisp:list
       (common-lisp:cons "ModelPackagingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-packaging-job-description))
      (common-lisp:list
       (common-lisp:cons "ModelPackagingJobDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-packaging-method))
      (common-lisp:list
       (common-lisp:cons "ModelPackagingMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-packaging-output-details))
      (common-lisp:list
       (common-lisp:cons "ModelPackagingOutputDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-timestamp))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          model-packaging-description))
   common-lisp:nil))
(common-lisp:deftype model-packaging-job-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass model-packaging-job-metadata common-lisp:nil
                       ((job-name :initarg :job-name :initform common-lisp:nil
                         :type
                         (common-lisp:or model-packaging-job-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-model-packaging-job-metadata-job-name
                         :shape "ModelPackagingJobName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (project-name :initarg :project-name :initform
                         common-lisp:nil :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor
                         struct-shape-model-packaging-job-metadata-project-name
                         :shape "ProjectName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (model-version :initarg :model-version :initform
                         common-lisp:nil :type
                         (common-lisp:or model-version common-lisp:null)
                         :accessor
                         struct-shape-model-packaging-job-metadata-model-version
                         :shape "ModelVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (model-packaging-job-description :initarg
                         :model-packaging-job-description :initform
                         common-lisp:nil :type
                         (common-lisp:or model-packaging-job-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-model-packaging-job-metadata-model-packaging-job-description
                         :shape "ModelPackagingJobDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (model-packaging-method :initarg
                         :model-packaging-method :initform common-lisp:nil
                         :type
                         (common-lisp:or model-packaging-method
                                         common-lisp:null)
                         :accessor
                         struct-shape-model-packaging-job-metadata-model-packaging-method
                         :shape "ModelPackagingMethod" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or model-packaging-job-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-model-packaging-job-metadata-status
                         :shape "ModelPackagingJobStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or model-packaging-status-message
                                         common-lisp:null)
                         :accessor
                         struct-shape-model-packaging-job-metadata-status-message
                         :shape "ModelPackagingStatusMessage" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (creation-timestamp :initarg :creation-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-model-packaging-job-metadata-creation-timestamp
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-timestamp :initarg
                         :last-updated-timestamp :initform common-lisp:nil
                         :type (common-lisp:or date-time common-lisp:null)
                         :accessor
                         struct-shape-model-packaging-job-metadata-last-updated-timestamp
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-model-packaging-job-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'model-packaging-job-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'model-packaging-job-metadata
                    'make-model-packaging-job-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          model-packaging-job-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          model-packaging-job-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-name))
      (common-lisp:list
       (common-lisp:cons "ProjectName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-version))
      (common-lisp:list
       (common-lisp:cons "ModelVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-packaging-job-description))
      (common-lisp:list
       (common-lisp:cons "ModelPackagingJobDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-packaging-method))
      (common-lisp:list
       (common-lisp:cons "ModelPackagingMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-timestamp))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          model-packaging-job-metadata))
   common-lisp:nil))
(common-lisp:deftype model-packaging-job-name () 'common-lisp:string)
(common-lisp:deftype model-packaging-job-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype model-packaging-jobs-list ()
   '(trivial-types:proper-list model-packaging-job-metadata))
 (common-lisp:defun make-model-packaging-jobs-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            model-packaging-job-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:deftype model-packaging-method () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass model-packaging-output-details common-lisp:nil
                       ((greengrass :initarg :greengrass :initform
                         common-lisp:nil :type
                         (common-lisp:or greengrass-output-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-model-packaging-output-details-greengrass
                         :shape "GreengrassOutputDetails" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-model-packaging-output-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'model-packaging-output-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'model-packaging-output-details
                    'make-model-packaging-output-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          model-packaging-output-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          model-packaging-output-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'greengrass))
      (common-lisp:list
       (common-lisp:cons "Greengrass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          model-packaging-output-details))
   common-lisp:nil))
(common-lisp:deftype model-packaging-status-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass model-performance common-lisp:nil
                       ((f1score :initarg :f1score :initform common-lisp:nil
                         :type (common-lisp:or float common-lisp:null)
                         :accessor struct-shape-model-performance-f1score
                         :shape "Float" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (recall :initarg :recall :initform common-lisp:nil
                         :type (common-lisp:or float common-lisp:null)
                         :accessor struct-shape-model-performance-recall :shape
                         "Float" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (precision :initarg :precision :initform
                         common-lisp:nil :type
                         (common-lisp:or float common-lisp:null) :accessor
                         struct-shape-model-performance-precision :shape
                         "Float" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-model-performance
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'model-performance
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'model-performance 'make-model-performance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input model-performance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input model-performance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'f1score))
      (common-lisp:list
       (common-lisp:cons "F1Score"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recall))
      (common-lisp:list
       (common-lisp:cons "Recall"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'precision))
      (common-lisp:list
       (common-lisp:cons "Precision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input model-performance))
   common-lisp:nil))
(common-lisp:deftype model-status () 'common-lisp:string)
(common-lisp:deftype model-status-message () 'common-lisp:string)
(common-lisp:deftype model-version () 'common-lisp:string)
(common-lisp:deftype model-version-no-latest () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass output-config common-lisp:nil
                       ((s3location :initarg :s3location :initform
                         (common-lisp:error ":s3location is required") :type
                         (common-lisp:or s3location common-lisp:null) :accessor
                         struct-shape-output-config-s3location :shape
                         "S3Location" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-output-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'output-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'output-config 'make-output-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3location))
      (common-lisp:list
       (common-lisp:cons "S3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass output-s3object common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or s3bucket-name common-lisp:null)
                         :accessor struct-shape-output-s3object-bucket :shape
                         "S3BucketName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or s3object-key common-lisp:null)
                         :accessor struct-shape-output-s3object-key :shape
                         "S3ObjectKey" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-output-s3object
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'output-s3object
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'output-s3object 'make-output-s3object))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-s3object))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-s3object))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-s3object))
   common-lisp:nil))
(common-lisp:deftype page-size () 'common-lisp:integer)
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass pixel-anomaly common-lisp:nil
                       ((total-percentage-area :initarg :total-percentage-area
                         :initform common-lisp:nil :type
                         (common-lisp:or float common-lisp:null) :accessor
                         struct-shape-pixel-anomaly-total-percentage-area
                         :shape "Float" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (color :initarg :color :initform common-lisp:nil :type
                         (common-lisp:or color common-lisp:null) :accessor
                         struct-shape-pixel-anomaly-color :shape "Color"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-pixel-anomaly
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'pixel-anomaly
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'pixel-anomaly 'make-pixel-anomaly))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pixel-anomaly))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pixel-anomaly))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-percentage-area))
      (common-lisp:list
       (common-lisp:cons "TotalPercentageArea"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color))
      (common-lisp:list
       (common-lisp:cons "Color"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pixel-anomaly))
   common-lisp:nil))
(common-lisp:deftype project-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass project-description common-lisp:nil
                       ((project-arn :initarg :project-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or project-arn common-lisp:null)
                         :accessor struct-shape-project-description-project-arn
                         :shape "ProjectArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (project-name :initarg :project-name :initform
                         common-lisp:nil :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor
                         struct-shape-project-description-project-name :shape
                         "ProjectName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-timestamp :initarg :creation-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-project-description-creation-timestamp
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (datasets :initarg :datasets :initform common-lisp:nil
                         :type
                         (common-lisp:or dataset-metadata-list
                                         common-lisp:null)
                         :accessor struct-shape-project-description-datasets
                         :shape "DatasetMetadataList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-project-description
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'project-description
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'project-description 'make-project-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input project-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input project-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-arn))
      (common-lisp:list
       (common-lisp:cons "ProjectArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-name))
      (common-lisp:list
       (common-lisp:cons "ProjectName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datasets))
      (common-lisp:list
       (common-lisp:cons "Datasets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input project-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass project-metadata common-lisp:nil
                       ((project-arn :initarg :project-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or project-arn common-lisp:null)
                         :accessor struct-shape-project-metadata-project-arn
                         :shape "ProjectArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (project-name :initarg :project-name :initform
                         common-lisp:nil :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor struct-shape-project-metadata-project-name
                         :shape "ProjectName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-timestamp :initarg :creation-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-project-metadata-creation-timestamp
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-project-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'project-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'project-metadata 'make-project-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input project-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input project-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-arn))
      (common-lisp:list
       (common-lisp:cons "ProjectArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-name))
      (common-lisp:list
       (common-lisp:cons "ProjectName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input project-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype project-metadata-list ()
   '(trivial-types:proper-list project-metadata))
 (common-lisp:defun make-project-metadata-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list project-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:deftype project-name () 'common-lisp:string)
(common-lisp:deftype query-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (lookoutvision-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       resource-not-found-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-id
                    'resource-not-found-exception-resource-type)))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:deftype retry-after-seconds () 'common-lisp:integer)
(common-lisp:deftype s3bucket-name () 'common-lisp:string)
(common-lisp:deftype s3key-prefix () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3location common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or s3bucket-name common-lisp:null)
                         :accessor struct-shape-s3location-bucket :shape
                         "S3BucketName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (prefix :initarg :prefix :initform common-lisp:nil
                         :type (common-lisp:or s3key-prefix common-lisp:null)
                         :accessor struct-shape-s3location-prefix :shape
                         "S3KeyPrefix" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3location
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 's3location
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 's3location 'make-s3location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3location))
   common-lisp:nil))
(common-lisp:deftype s3object-key () 'common-lisp:string)
(common-lisp:deftype s3object-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (lookoutvision-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-type)
      (quota-code :initarg :quota-code :initform common-lisp:nil :reader
       service-quota-exceeded-exception-quota-code)
      (service-code :initarg :service-code :initform common-lisp:nil :reader
       service-quota-exceeded-exception-service-code)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message
                    'service-quota-exceeded-exception-resource-id
                    'service-quota-exceeded-exception-resource-type
                    'service-quota-exceeded-exception-quota-code
                    'service-quota-exceeded-exception-service-code)))
(common-lisp:progn
 (common-lisp:defclass start-model-packaging-job-request common-lisp:nil
                       ((project-name :initarg :project-name :initform
                         (common-lisp:error ":project-name is required") :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor
                         struct-shape-start-model-packaging-job-request-project-name
                         :shape "ProjectName" :location "uri" :location-name
                         "projectName")
                        (model-version :initarg :model-version :initform
                         (common-lisp:error ":model-version is required") :type
                         (common-lisp:or model-version common-lisp:null)
                         :accessor
                         struct-shape-start-model-packaging-job-request-model-version
                         :shape "ModelVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-name :initarg :job-name :initform common-lisp:nil
                         :type
                         (common-lisp:or model-packaging-job-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-model-packaging-job-request-job-name
                         :shape "ModelPackagingJobName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (configuration :initarg :configuration :initform
                         (common-lisp:error ":configuration is required") :type
                         (common-lisp:or model-packaging-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-model-packaging-job-request-configuration
                         :shape "ModelPackagingConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or model-packaging-job-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-model-packaging-job-request-description
                         :shape "ModelPackagingJobDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-start-model-packaging-job-request-client-token
                         :shape "ClientToken" :location "header" :location-name
                         "X-Amzn-Client-Token"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-model-packaging-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-model-packaging-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-model-packaging-job-request
                    'make-start-model-packaging-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-model-packaging-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amzn-Client-Token"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-model-packaging-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-version))
      (common-lisp:list
       (common-lisp:cons "ModelVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-model-packaging-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-model-packaging-job-response common-lisp:nil
                       ((job-name :initarg :job-name :initform common-lisp:nil
                         :type
                         (common-lisp:or model-packaging-job-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-model-packaging-job-response-job-name
                         :shape "ModelPackagingJobName" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-model-packaging-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-model-packaging-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-model-packaging-job-response
                    'make-start-model-packaging-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-model-packaging-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-model-packaging-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-model-packaging-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-model-request common-lisp:nil
                       ((project-name :initarg :project-name :initform
                         (common-lisp:error ":project-name is required") :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor
                         struct-shape-start-model-request-project-name :shape
                         "ProjectName" :location "uri" :location-name
                         "projectName")
                        (model-version :initarg :model-version :initform
                         (common-lisp:error ":model-version is required") :type
                         (common-lisp:or model-version common-lisp:null)
                         :accessor
                         struct-shape-start-model-request-model-version :shape
                         "ModelVersion" :location "uri" :location-name
                         "modelVersion")
                        (min-inference-units :initarg :min-inference-units
                         :initform
                         (common-lisp:error ":min-inference-units is required")
                         :type
                         (common-lisp:or inference-units common-lisp:null)
                         :accessor
                         struct-shape-start-model-request-min-inference-units
                         :shape "InferenceUnits" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-start-model-request-client-token :shape
                         "ClientToken" :location "header" :location-name
                         "X-Amzn-Client-Token")
                        (max-inference-units :initarg :max-inference-units
                         :initform common-lisp:nil :type
                         (common-lisp:or inference-units common-lisp:null)
                         :accessor
                         struct-shape-start-model-request-max-inference-units
                         :shape "InferenceUnits" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-model-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-model-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-model-request 'make-start-model-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-model-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amzn-Client-Token"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-model-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-inference-units))
      (common-lisp:list
       (common-lisp:cons "MinInferenceUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-inference-units))
      (common-lisp:list
       (common-lisp:cons "MaxInferenceUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-model-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-model-response common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or model-hosting-status common-lisp:null)
                         :accessor struct-shape-start-model-response-status
                         :shape "ModelHostingStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-model-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-model-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-model-response 'make-start-model-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-model-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-model-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-model-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-model-request common-lisp:nil
                       ((project-name :initarg :project-name :initform
                         (common-lisp:error ":project-name is required") :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor struct-shape-stop-model-request-project-name
                         :shape "ProjectName" :location "uri" :location-name
                         "projectName")
                        (model-version :initarg :model-version :initform
                         (common-lisp:error ":model-version is required") :type
                         (common-lisp:or model-version common-lisp:null)
                         :accessor
                         struct-shape-stop-model-request-model-version :shape
                         "ModelVersion" :location "uri" :location-name
                         "modelVersion")
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor struct-shape-stop-model-request-client-token
                         :shape "ClientToken" :location "header" :location-name
                         "X-Amzn-Client-Token"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-model-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stop-model-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-model-request 'make-stop-model-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-model-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amzn-Client-Token"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-model-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-model-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-model-response common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or model-hosting-status common-lisp:null)
                         :accessor struct-shape-stop-model-response-status
                         :shape "ModelHostingStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-model-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stop-model-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-model-response 'make-stop-model-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-model-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-model-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-model-response))
   common-lisp:nil))
(common-lisp:deftype stream ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         struct-shape-tag-key :shape "TagKey" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         struct-shape-tag-value :shape "TagValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-arn () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or tag-arn common-lisp:null) :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "TagArn" :location "uri" :location-name "resourceArn")
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype target-device () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass target-platform common-lisp:nil
                       ((os :initarg :os :initform
                         (common-lisp:error ":os is required") :type
                         (common-lisp:or target-platform-os common-lisp:null)
                         :accessor struct-shape-target-platform-os :shape
                         "TargetPlatformOs" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arch :initarg :arch :initform
                         (common-lisp:error ":arch is required") :type
                         (common-lisp:or target-platform-arch common-lisp:null)
                         :accessor struct-shape-target-platform-arch :shape
                         "TargetPlatformArch" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (accelerator :initarg :accelerator :initform
                         common-lisp:nil :type
                         (common-lisp:or target-platform-accelerator
                                         common-lisp:null)
                         :accessor struct-shape-target-platform-accelerator
                         :shape "TargetPlatformAccelerator" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-target-platform
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'target-platform
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'target-platform 'make-target-platform))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input target-platform))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input target-platform))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'os))
      (common-lisp:list
       (common-lisp:cons "Os"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arch))
      (common-lisp:list
       (common-lisp:cons "Arch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator))
      (common-lisp:list
       (common-lisp:cons "Accelerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input target-platform))
   common-lisp:nil))
(common-lisp:deftype target-platform-accelerator () 'common-lisp:string)
(common-lisp:deftype target-platform-arch () 'common-lisp:string)
(common-lisp:deftype target-platform-os () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (lookoutvision-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)
      (quota-code :initarg :quota-code :initform common-lisp:nil :reader
       throttling-exception-quota-code)
      (service-code :initarg :service-code :initform common-lisp:nil :reader
       throttling-exception-service-code)
      (retry-after-seconds :initarg :retry-after-seconds :initform
       common-lisp:nil :reader throttling-exception-retry-after-seconds)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message
                    'throttling-exception-quota-code
                    'throttling-exception-service-code
                    'throttling-exception-retry-after-seconds)))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or tag-arn common-lisp:null) :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "TagArn" :location "uri" :location-name
                         "resourceArn")
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tag-keys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-untag-resource-request-tag-keys
                         :shape "TagKeyList" :location "querystring"
                         :location-name "tagKeys"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-dataset-entries-request common-lisp:nil
                       ((project-name :initarg :project-name :initform
                         (common-lisp:error ":project-name is required") :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor
                         struct-shape-update-dataset-entries-request-project-name
                         :shape "ProjectName" :location "uri" :location-name
                         "projectName")
                        (dataset-type :initarg :dataset-type :initform
                         (common-lisp:error ":dataset-type is required") :type
                         (common-lisp:or dataset-type common-lisp:null)
                         :accessor
                         struct-shape-update-dataset-entries-request-dataset-type
                         :shape "DatasetType" :location "uri" :location-name
                         "datasetType")
                        (changes :initarg :changes :initform
                         (common-lisp:error ":changes is required") :type
                         (common-lisp:or dataset-changes common-lisp:null)
                         :accessor
                         struct-shape-update-dataset-entries-request-changes
                         :shape "DatasetChanges" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-update-dataset-entries-request-client-token
                         :shape "ClientToken" :location "header" :location-name
                         "X-Amzn-Client-Token"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-dataset-entries-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-dataset-entries-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-dataset-entries-request
                    'make-update-dataset-entries-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-dataset-entries-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amzn-Client-Token"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-dataset-entries-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'changes))
      (common-lisp:list
       (common-lisp:cons "Changes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-dataset-entries-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-dataset-entries-response common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or dataset-status common-lisp:null)
                         :accessor
                         struct-shape-update-dataset-entries-response-status
                         :shape "DatasetStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-dataset-entries-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-dataset-entries-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-dataset-entries-response
                    'make-update-dataset-entries-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-dataset-entries-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-dataset-entries-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-dataset-entries-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (lookoutvision-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:progn
 (common-lisp:defun create-dataset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-name dataset-type dataset-source
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable project-name dataset-type dataset-source
     client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-dataset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutvision-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-11-20/projects/~A/datasets"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-name))))
                                                        "CreateDataset"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-dataset))
(common-lisp:progn
 (common-lisp:defun create-model
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-name description client-token
                     output-config kms-key-id tags)
   (common-lisp:declare
    (common-lisp:ignorable project-name description client-token output-config
     kms-key-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-model-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutvision-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-11-20/projects/~A/models"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-name))))
                                                        "CreateModel"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-model))
(common-lisp:progn
 (common-lisp:defun create-project
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-name client-token)
   (common-lisp:declare (common-lisp:ignorable project-name client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-project-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutvision-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/2020-11-20/projects"
                                                        "CreateProject"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-project))
(common-lisp:progn
 (common-lisp:defun delete-dataset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-name dataset-type client-token)
   (common-lisp:declare
    (common-lisp:ignorable project-name dataset-type client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-dataset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutvision-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-11-20/projects/~A/datasets/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dataset-type))))
                                                        "DeleteDataset"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-dataset))
(common-lisp:progn
 (common-lisp:defun delete-model
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-name model-version client-token)
   (common-lisp:declare
    (common-lisp:ignorable project-name model-version client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-model-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutvision-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-11-20/projects/~A/models/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'model-version))))
                                                        "DeleteModel"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-model))
(common-lisp:progn
 (common-lisp:defun delete-project
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-name client-token)
   (common-lisp:declare (common-lisp:ignorable project-name client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-project-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutvision-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-11-20/projects/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-name))))
                                                        "DeleteProject"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-project))
(common-lisp:progn
 (common-lisp:defun describe-dataset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-name dataset-type)
   (common-lisp:declare (common-lisp:ignorable project-name dataset-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-dataset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutvision-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-11-20/projects/~A/datasets/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dataset-type))))
                                                        "DescribeDataset"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-dataset))
(common-lisp:progn
 (common-lisp:defun describe-model
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-name model-version)
   (common-lisp:declare (common-lisp:ignorable project-name model-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-model-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutvision-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-11-20/projects/~A/models/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'model-version))))
                                                        "DescribeModel"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-model))
(common-lisp:progn
 (common-lisp:defun describe-model-packaging-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-name job-name)
   (common-lisp:declare (common-lisp:ignorable project-name job-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-model-packaging-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutvision-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-11-20/projects/~A/modelpackagingjobs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-name))))
                                                        "DescribeModelPackagingJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-model-packaging-job))
(common-lisp:progn
 (common-lisp:defun describe-project
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-name)
   (common-lisp:declare (common-lisp:ignorable project-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-project-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutvision-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-11-20/projects/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-name))))
                                                        "DescribeProject"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-project))
(common-lisp:progn
 (common-lisp:defun detect-anomalies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-name model-version body
                     content-type)
   (common-lisp:declare
    (common-lisp:ignorable project-name model-version body content-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-detect-anomalies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutvision-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-11-20/projects/~A/models/~A/detect"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'model-version))))
                                                        "DetectAnomalies"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'detect-anomalies))
(common-lisp:progn
 (common-lisp:defun list-dataset-entries
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-name dataset-type labeled
                     anomaly-class before-creation-date after-creation-date
                     next-token max-results source-ref-contains)
   (common-lisp:declare
    (common-lisp:ignorable project-name dataset-type labeled anomaly-class
     before-creation-date after-creation-date next-token max-results
     source-ref-contains))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-dataset-entries-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutvision-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-11-20/projects/~A/datasets/~A/entries"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dataset-type))))
                                                        "ListDatasetEntries"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-dataset-entries))
(common-lisp:progn
 (common-lisp:defun list-model-packaging-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-name next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable project-name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-model-packaging-jobs-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutvision-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-11-20/projects/~A/modelpackagingjobs"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-name))))
                                                        "ListModelPackagingJobs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-model-packaging-jobs))
(common-lisp:progn
 (common-lisp:defun list-models
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-name next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable project-name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-models-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutvision-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-11-20/projects/~A/models"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-name))))
                                                        "ListModels"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-models))
(common-lisp:progn
 (common-lisp:defun list-projects
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-projects-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutvision-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/2020-11-20/projects"
                                                        "ListProjects"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-projects))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutvision-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-11-20/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun start-model
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-name model-version
                     min-inference-units client-token max-inference-units)
   (common-lisp:declare
    (common-lisp:ignorable project-name model-version min-inference-units
     client-token max-inference-units))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-model-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutvision-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-11-20/projects/~A/models/~A/start"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'model-version))))
                                                        "StartModel"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-model))
(common-lisp:progn
 (common-lisp:defun start-model-packaging-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-name model-version job-name
                     configuration description client-token)
   (common-lisp:declare
    (common-lisp:ignorable project-name model-version job-name configuration
     description client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-model-packaging-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutvision-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-11-20/projects/~A/modelpackagingjobs"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-name))))
                                                        "StartModelPackagingJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-model-packaging-job))
(common-lisp:progn
 (common-lisp:defun stop-model
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-name model-version client-token)
   (common-lisp:declare
    (common-lisp:ignorable project-name model-version client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-model-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutvision-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-11-20/projects/~A/models/~A/stop"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'model-version))))
                                                        "StopModel"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'stop-model))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutvision-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-11-20/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutvision-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-11-20/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-dataset-entries
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-name dataset-type changes
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable project-name dataset-type changes client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-dataset-entries-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutvision-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-11-20/projects/~A/datasets/~A/entries"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dataset-type))))
                                                        "UpdateDatasetEntries"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-dataset-entries))
