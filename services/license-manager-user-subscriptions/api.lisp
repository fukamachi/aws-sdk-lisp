;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage
    #:aws-sdk/services/license-manager-user-subscriptions/api
  (:use)
  (:nicknames #:aws/license-manager-user-subscriptions)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package
 #:aws-sdk/services/license-manager-user-subscriptions/api)
(common-lisp:progn
 (common-lisp:define-condition license-manager-user-subscriptions-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'license-manager-user-subscriptions-error))
(common-lisp:progn
 (common-lisp:defclass license-manager-user-subscriptions-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service
                        "license-manager-user-subscriptions" :api-version
                        "2018-05-10" :host-prefix
                        "license-manager-user-subscriptions" :signing-name
                        "license-manager-user-subscriptions" :global-host
                        common-lisp:nil))
 (common-lisp:export 'license-manager-user-subscriptions-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (license-manager-user-subscriptions-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defclass active-directory-identity-provider common-lisp:nil
                       ((directory-id :initarg :directory-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-active-directory-identity-provider-directory-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-active-directory-identity-provider
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'active-directory-identity-provider
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'active-directory-identity-provider
                    'make-active-directory-identity-provider))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          active-directory-identity-provider))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          active-directory-identity-provider))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          active-directory-identity-provider))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-user-request common-lisp:nil
                       ((domain :initarg :domain :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-associate-user-request-domain
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identity-provider :initarg :identity-provider
                         :initform
                         (common-lisp:error ":identity-provider is required")
                         :type
                         (common-lisp:or identity-provider common-lisp:null)
                         :accessor
                         struct-shape-associate-user-request-identity-provider
                         :shape "IdentityProvider" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-id :initarg :instance-id :initform
                         (common-lisp:error ":instance-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-associate-user-request-instance-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (username :initarg :username :initform
                         (common-lisp:error ":username is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-associate-user-request-username :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-user-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'associate-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-user-request 'make-associate-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-provider))
      (common-lisp:list
       (common-lisp:cons "IdentityProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-user-response common-lisp:nil
                       ((instance-user-summary :initarg :instance-user-summary
                         :initform
                         (common-lisp:error
                          ":instance-user-summary is required")
                         :type
                         (common-lisp:or instance-user-summary
                                         common-lisp:null)
                         :accessor
                         struct-shape-associate-user-response-instance-user-summary
                         :shape "InstanceUserSummary" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-user-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'associate-user-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-user-response 'make-associate-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-user-summary))
      (common-lisp:list
       (common-lisp:cons "InstanceUserSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-user-response))
   common-lisp:nil))
(common-lisp:deftype box-integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (license-manager-user-subscriptions-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defclass deregister-identity-provider-request common-lisp:nil
                       ((identity-provider :initarg :identity-provider
                         :initform
                         (common-lisp:error ":identity-provider is required")
                         :type
                         (common-lisp:or identity-provider common-lisp:null)
                         :accessor
                         struct-shape-deregister-identity-provider-request-identity-provider
                         :shape "IdentityProvider" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (product :initarg :product :initform
                         (common-lisp:error ":product is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-deregister-identity-provider-request-product
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deregister-identity-provider-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'deregister-identity-provider-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deregister-identity-provider-request
                    'make-deregister-identity-provider-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-identity-provider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-identity-provider-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-provider))
      (common-lisp:list
       (common-lisp:cons "IdentityProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product))
      (common-lisp:list
       (common-lisp:cons "Product"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-identity-provider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-identity-provider-response common-lisp:nil
                       ((identity-provider-summary :initarg
                         :identity-provider-summary :initform
                         (common-lisp:error
                          ":identity-provider-summary is required")
                         :type
                         (common-lisp:or identity-provider-summary
                                         common-lisp:null)
                         :accessor
                         struct-shape-deregister-identity-provider-response-identity-provider-summary
                         :shape "IdentityProviderSummary" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deregister-identity-provider-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'deregister-identity-provider-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deregister-identity-provider-response
                    'make-deregister-identity-provider-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-identity-provider-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-identity-provider-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-summary))
      (common-lisp:list
       (common-lisp:cons "IdentityProviderSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-identity-provider-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-user-request common-lisp:nil
                       ((domain :initarg :domain :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-disassociate-user-request-domain :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (identity-provider :initarg :identity-provider
                         :initform
                         (common-lisp:error ":identity-provider is required")
                         :type
                         (common-lisp:or identity-provider common-lisp:null)
                         :accessor
                         struct-shape-disassociate-user-request-identity-provider
                         :shape "IdentityProvider" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-id :initarg :instance-id :initform
                         (common-lisp:error ":instance-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-disassociate-user-request-instance-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (username :initarg :username :initform
                         (common-lisp:error ":username is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-disassociate-user-request-username :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-user-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'disassociate-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-user-request
                    'make-disassociate-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-provider))
      (common-lisp:list
       (common-lisp:cons "IdentityProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-user-response common-lisp:nil
                       ((instance-user-summary :initarg :instance-user-summary
                         :initform
                         (common-lisp:error
                          ":instance-user-summary is required")
                         :type
                         (common-lisp:or instance-user-summary
                                         common-lisp:null)
                         :accessor
                         struct-shape-disassociate-user-response-instance-user-summary
                         :shape "InstanceUserSummary" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-user-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'disassociate-user-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-user-response
                    'make-disassociate-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-user-summary))
      (common-lisp:list
       (common-lisp:cons "InstanceUserSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass filter common-lisp:nil
                       ((attribute :initarg :attribute :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-filter-attribute :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (operation :initarg :operation :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-filter-operation :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-filter-value :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'filter 'make-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "Attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype filter-list () '(trivial-types:proper-list filter))
 (common-lisp:defun make-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass identity-provider common-lisp:nil
                       ((active-directory-identity-provider :initarg
                         :active-directory-identity-provider :initform
                         common-lisp:nil :type
                         (common-lisp:or active-directory-identity-provider
                                         common-lisp:null)
                         :accessor
                         struct-shape-identity-provider-active-directory-identity-provider
                         :shape "ActiveDirectoryIdentityProvider" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-identity-provider
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'identity-provider
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'identity-provider 'make-identity-provider))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input identity-provider))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input identity-provider))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-directory-identity-provider))
      (common-lisp:list
       (common-lisp:cons "ActiveDirectoryIdentityProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input identity-provider))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass identity-provider-summary common-lisp:nil
                       ((failure-message :initarg :failure-message :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-identity-provider-summary-failure-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identity-provider :initarg :identity-provider
                         :initform
                         (common-lisp:error ":identity-provider is required")
                         :type
                         (common-lisp:or identity-provider common-lisp:null)
                         :accessor
                         struct-shape-identity-provider-summary-identity-provider
                         :shape "IdentityProvider" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (product :initarg :product :initform
                         (common-lisp:error ":product is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-identity-provider-summary-product :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (settings :initarg :settings :initform
                         (common-lisp:error ":settings is required") :type
                         (common-lisp:or settings common-lisp:null) :accessor
                         struct-shape-identity-provider-summary-settings :shape
                         "Settings" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-identity-provider-summary-status :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-identity-provider-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'identity-provider-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'identity-provider-summary
                    'make-identity-provider-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          identity-provider-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          identity-provider-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-message))
      (common-lisp:list
       (common-lisp:cons "FailureMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-provider))
      (common-lisp:list
       (common-lisp:cons "IdentityProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product))
      (common-lisp:list
       (common-lisp:cons "Product"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          identity-provider-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype identity-provider-summary-list ()
   '(trivial-types:proper-list identity-provider-summary))
 (common-lisp:defun make-identity-provider-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            identity-provider-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass instance-summary common-lisp:nil
                       ((instance-id :initarg :instance-id :initform
                         (common-lisp:error ":instance-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-instance-summary-instance-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-status-check-date :initarg
                         :last-status-check-date :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-instance-summary-last-status-check-date
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (products :initarg :products :initform
                         (common-lisp:error ":products is required") :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-instance-summary-products
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-instance-summary-status :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-instance-summary-status-message :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-instance-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'instance-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'instance-summary 'make-instance-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-status-check-date))
      (common-lisp:list
       (common-lisp:cons "LastStatusCheckDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'products))
      (common-lisp:list
       (common-lisp:cons "Products"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instance-summary-list ()
   '(trivial-types:proper-list instance-summary))
 (common-lisp:defun make-instance-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass instance-user-summary common-lisp:nil
                       ((association-date :initarg :association-date :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-instance-user-summary-association-date
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (disassociation-date :initarg :disassociation-date
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-instance-user-summary-disassociation-date
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain :initarg :domain :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-instance-user-summary-domain
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identity-provider :initarg :identity-provider
                         :initform
                         (common-lisp:error ":identity-provider is required")
                         :type
                         (common-lisp:or identity-provider common-lisp:null)
                         :accessor
                         struct-shape-instance-user-summary-identity-provider
                         :shape "IdentityProvider" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-id :initarg :instance-id :initform
                         (common-lisp:error ":instance-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-instance-user-summary-instance-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-instance-user-summary-status :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-instance-user-summary-status-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (username :initarg :username :initform
                         (common-lisp:error ":username is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-instance-user-summary-username :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-instance-user-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'instance-user-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'instance-user-summary 'make-instance-user-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-user-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-user-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-date))
      (common-lisp:list
       (common-lisp:cons "AssociationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disassociation-date))
      (common-lisp:list
       (common-lisp:cons "DisassociationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-provider))
      (common-lisp:list
       (common-lisp:cons "IdentityProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-user-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instance-user-summary-list ()
   '(trivial-types:proper-list instance-user-summary))
 (common-lisp:defun make-instance-user-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-user-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (license-manager-user-subscriptions-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:defclass list-identity-providers-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or box-integer common-lisp:null)
                         :accessor
                         struct-shape-list-identity-providers-request-max-results
                         :shape "BoxInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-identity-providers-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-identity-providers-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-identity-providers-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-identity-providers-request
                    'make-list-identity-providers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-providers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-providers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-providers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-identity-providers-response common-lisp:nil
                       ((identity-provider-summaries :initarg
                         :identity-provider-summaries :initform
                         (common-lisp:error
                          ":identity-provider-summaries is required")
                         :type
                         (common-lisp:or identity-provider-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-identity-providers-response-identity-provider-summaries
                         :shape "IdentityProviderSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-identity-providers-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-identity-providers-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-identity-providers-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-identity-providers-response
                    'make-list-identity-providers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-providers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-providers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-summaries))
      (common-lisp:list
       (common-lisp:cons "IdentityProviderSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-providers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-instances-request common-lisp:nil
                       ((filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor struct-shape-list-instances-request-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or box-integer common-lisp:null)
                         :accessor
                         struct-shape-list-instances-request-max-results :shape
                         "BoxInteger" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-instances-request-next-token :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-instances-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-instances-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-instances-request 'make-list-instances-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-instances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-instances-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-instances-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-instances-response common-lisp:nil
                       ((instance-summaries :initarg :instance-summaries
                         :initform common-lisp:nil :type
                         (common-lisp:or instance-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-instances-response-instance-summaries
                         :shape "InstanceSummaryList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-instances-response-next-token :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-instances-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-instances-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-instances-response 'make-list-instances-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-instances-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-instances-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-summaries))
      (common-lisp:list
       (common-lisp:cons "InstanceSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-instances-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-product-subscriptions-request common-lisp:nil
                       ((filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-list-product-subscriptions-request-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identity-provider :initarg :identity-provider
                         :initform
                         (common-lisp:error ":identity-provider is required")
                         :type
                         (common-lisp:or identity-provider common-lisp:null)
                         :accessor
                         struct-shape-list-product-subscriptions-request-identity-provider
                         :shape "IdentityProvider" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or box-integer common-lisp:null)
                         :accessor
                         struct-shape-list-product-subscriptions-request-max-results
                         :shape "BoxInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-product-subscriptions-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (product :initarg :product :initform
                         (common-lisp:error ":product is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-product-subscriptions-request-product
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-product-subscriptions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-product-subscriptions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-product-subscriptions-request
                    'make-list-product-subscriptions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-product-subscriptions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-product-subscriptions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-provider))
      (common-lisp:list
       (common-lisp:cons "IdentityProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product))
      (common-lisp:list
       (common-lisp:cons "Product"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-product-subscriptions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-product-subscriptions-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-product-subscriptions-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (product-user-summaries :initarg
                         :product-user-summaries :initform common-lisp:nil
                         :type
                         (common-lisp:or product-user-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-product-subscriptions-response-product-user-summaries
                         :shape "ProductUserSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-product-subscriptions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-product-subscriptions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-product-subscriptions-response
                    'make-list-product-subscriptions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-product-subscriptions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-product-subscriptions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'product-user-summaries))
      (common-lisp:list
       (common-lisp:cons "ProductUserSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-product-subscriptions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-user-associations-request common-lisp:nil
                       ((filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-list-user-associations-request-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identity-provider :initarg :identity-provider
                         :initform
                         (common-lisp:error ":identity-provider is required")
                         :type
                         (common-lisp:or identity-provider common-lisp:null)
                         :accessor
                         struct-shape-list-user-associations-request-identity-provider
                         :shape "IdentityProvider" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-id :initarg :instance-id :initform
                         (common-lisp:error ":instance-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-user-associations-request-instance-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or box-integer common-lisp:null)
                         :accessor
                         struct-shape-list-user-associations-request-max-results
                         :shape "BoxInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-user-associations-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-user-associations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-user-associations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-user-associations-request
                    'make-list-user-associations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-user-associations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-user-associations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-provider))
      (common-lisp:list
       (common-lisp:cons "IdentityProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-user-associations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-user-associations-response common-lisp:nil
                       ((instance-user-summaries :initarg
                         :instance-user-summaries :initform common-lisp:nil
                         :type
                         (common-lisp:or instance-user-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-user-associations-response-instance-user-summaries
                         :shape "InstanceUserSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-user-associations-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-user-associations-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-user-associations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-user-associations-response
                    'make-list-user-associations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-user-associations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-user-associations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-user-summaries))
      (common-lisp:list
       (common-lisp:cons "InstanceUserSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-user-associations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass product-user-summary common-lisp:nil
                       ((domain :initarg :domain :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-product-user-summary-domain
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identity-provider :initarg :identity-provider
                         :initform
                         (common-lisp:error ":identity-provider is required")
                         :type
                         (common-lisp:or identity-provider common-lisp:null)
                         :accessor
                         struct-shape-product-user-summary-identity-provider
                         :shape "IdentityProvider" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (product :initarg :product :initform
                         (common-lisp:error ":product is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-product-user-summary-product :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-product-user-summary-status :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-product-user-summary-status-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subscription-end-date :initarg :subscription-end-date
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-product-user-summary-subscription-end-date
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subscription-start-date :initarg
                         :subscription-start-date :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-product-user-summary-subscription-start-date
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (username :initarg :username :initform
                         (common-lisp:error ":username is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-product-user-summary-username :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-product-user-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'product-user-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'product-user-summary 'make-product-user-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input product-user-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input product-user-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-provider))
      (common-lisp:list
       (common-lisp:cons "IdentityProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product))
      (common-lisp:list
       (common-lisp:cons "Product"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-end-date))
      (common-lisp:list
       (common-lisp:cons "SubscriptionEndDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-start-date))
      (common-lisp:list
       (common-lisp:cons "SubscriptionStartDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input product-user-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype product-user-summary-list ()
   '(trivial-types:proper-list product-user-summary))
 (common-lisp:defun make-product-user-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list product-user-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass register-identity-provider-request common-lisp:nil
                       ((identity-provider :initarg :identity-provider
                         :initform
                         (common-lisp:error ":identity-provider is required")
                         :type
                         (common-lisp:or identity-provider common-lisp:null)
                         :accessor
                         struct-shape-register-identity-provider-request-identity-provider
                         :shape "IdentityProvider" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (product :initarg :product :initform
                         (common-lisp:error ":product is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-register-identity-provider-request-product
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (settings :initarg :settings :initform common-lisp:nil
                         :type (common-lisp:or settings common-lisp:null)
                         :accessor
                         struct-shape-register-identity-provider-request-settings
                         :shape "Settings" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-register-identity-provider-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'register-identity-provider-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'register-identity-provider-request
                    'make-register-identity-provider-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-identity-provider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-identity-provider-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-provider))
      (common-lisp:list
       (common-lisp:cons "IdentityProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product))
      (common-lisp:list
       (common-lisp:cons "Product"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-identity-provider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-identity-provider-response common-lisp:nil
                       ((identity-provider-summary :initarg
                         :identity-provider-summary :initform
                         (common-lisp:error
                          ":identity-provider-summary is required")
                         :type
                         (common-lisp:or identity-provider-summary
                                         common-lisp:null)
                         :accessor
                         struct-shape-register-identity-provider-response-identity-provider-summary
                         :shape "IdentityProviderSummary" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-register-identity-provider-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'register-identity-provider-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'register-identity-provider-response
                    'make-register-identity-provider-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-identity-provider-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-identity-provider-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-summary))
      (common-lisp:list
       (common-lisp:cons "IdentityProviderSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-identity-provider-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (license-manager-user-subscriptions-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype security-group () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (license-manager-user-subscriptions-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass settings common-lisp:nil
                       ((security-group-id :initarg :security-group-id
                         :initform
                         (common-lisp:error ":security-group-id is required")
                         :type (common-lisp:or security-group common-lisp:null)
                         :accessor struct-shape-settings-security-group-id
                         :shape "SecurityGroup" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subnets :initarg :subnets :initform
                         (common-lisp:error ":subnets is required") :type
                         (common-lisp:or settings-subnets-list
                                         common-lisp:null)
                         :accessor struct-shape-settings-subnets :shape
                         "SettingsSubnetsList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'settings 'make-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-id))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "Subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype settings-subnets-list ()
   '(trivial-types:proper-list subnet))
 (common-lisp:defun make-settings-subnets-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subnet))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass start-product-subscription-request common-lisp:nil
                       ((domain :initarg :domain :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-start-product-subscription-request-domain
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identity-provider :initarg :identity-provider
                         :initform
                         (common-lisp:error ":identity-provider is required")
                         :type
                         (common-lisp:or identity-provider common-lisp:null)
                         :accessor
                         struct-shape-start-product-subscription-request-identity-provider
                         :shape "IdentityProvider" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (product :initarg :product :initform
                         (common-lisp:error ":product is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-product-subscription-request-product
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (username :initarg :username :initform
                         (common-lisp:error ":username is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-product-subscription-request-username
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-product-subscription-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-product-subscription-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-product-subscription-request
                    'make-start-product-subscription-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-product-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-product-subscription-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-provider))
      (common-lisp:list
       (common-lisp:cons "IdentityProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product))
      (common-lisp:list
       (common-lisp:cons "Product"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-product-subscription-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-product-subscription-response common-lisp:nil
                       ((product-user-summary :initarg :product-user-summary
                         :initform
                         (common-lisp:error
                          ":product-user-summary is required")
                         :type
                         (common-lisp:or product-user-summary common-lisp:null)
                         :accessor
                         struct-shape-start-product-subscription-response-product-user-summary
                         :shape "ProductUserSummary" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-product-subscription-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-product-subscription-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-product-subscription-response
                    'make-start-product-subscription-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-product-subscription-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-product-subscription-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'product-user-summary))
      (common-lisp:list
       (common-lisp:cons "ProductUserSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-product-subscription-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-product-subscription-request common-lisp:nil
                       ((domain :initarg :domain :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-stop-product-subscription-request-domain
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identity-provider :initarg :identity-provider
                         :initform
                         (common-lisp:error ":identity-provider is required")
                         :type
                         (common-lisp:or identity-provider common-lisp:null)
                         :accessor
                         struct-shape-stop-product-subscription-request-identity-provider
                         :shape "IdentityProvider" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (product :initarg :product :initform
                         (common-lisp:error ":product is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-stop-product-subscription-request-product
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (username :initarg :username :initform
                         (common-lisp:error ":username is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-stop-product-subscription-request-username
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-product-subscription-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-product-subscription-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-product-subscription-request
                    'make-stop-product-subscription-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-product-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-product-subscription-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-provider))
      (common-lisp:list
       (common-lisp:cons "IdentityProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product))
      (common-lisp:list
       (common-lisp:cons "Product"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-product-subscription-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-product-subscription-response common-lisp:nil
                       ((product-user-summary :initarg :product-user-summary
                         :initform
                         (common-lisp:error
                          ":product-user-summary is required")
                         :type
                         (common-lisp:or product-user-summary common-lisp:null)
                         :accessor
                         struct-shape-stop-product-subscription-response-product-user-summary
                         :shape "ProductUserSummary" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-product-subscription-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-product-subscription-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-product-subscription-response
                    'make-stop-product-subscription-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-product-subscription-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-product-subscription-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'product-user-summary))
      (common-lisp:list
       (common-lisp:cons "ProductUserSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-product-subscription-response))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-string-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype subnet () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype subnets () '(trivial-types:proper-list subnet))
 (common-lisp:defun make-subnets
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subnet))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (license-manager-user-subscriptions-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:progn
 (common-lisp:defclass update-identity-provider-settings-request
                       common-lisp:nil
                       ((identity-provider :initarg :identity-provider
                         :initform
                         (common-lisp:error ":identity-provider is required")
                         :type
                         (common-lisp:or identity-provider common-lisp:null)
                         :accessor
                         struct-shape-update-identity-provider-settings-request-identity-provider
                         :shape "IdentityProvider" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (product :initarg :product :initform
                         (common-lisp:error ":product is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-identity-provider-settings-request-product
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (update-settings :initarg :update-settings :initform
                         (common-lisp:error ":update-settings is required")
                         :type
                         (common-lisp:or update-settings common-lisp:null)
                         :accessor
                         struct-shape-update-identity-provider-settings-request-update-settings
                         :shape "UpdateSettings" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-identity-provider-settings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-identity-provider-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-identity-provider-settings-request
                    'make-update-identity-provider-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-identity-provider-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-identity-provider-settings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-provider))
      (common-lisp:list
       (common-lisp:cons "IdentityProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product))
      (common-lisp:list
       (common-lisp:cons "Product"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-settings))
      (common-lisp:list
       (common-lisp:cons "UpdateSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-identity-provider-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-identity-provider-settings-response
                       common-lisp:nil
                       ((identity-provider-summary :initarg
                         :identity-provider-summary :initform
                         (common-lisp:error
                          ":identity-provider-summary is required")
                         :type
                         (common-lisp:or identity-provider-summary
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-identity-provider-settings-response-identity-provider-summary
                         :shape "IdentityProviderSummary" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-identity-provider-settings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-identity-provider-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-identity-provider-settings-response
                    'make-update-identity-provider-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-identity-provider-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-identity-provider-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-summary))
      (common-lisp:list
       (common-lisp:cons "IdentityProviderSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-identity-provider-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-settings common-lisp:nil
                       ((add-subnets :initarg :add-subnets :initform
                         (common-lisp:error ":add-subnets is required") :type
                         (common-lisp:or subnets common-lisp:null) :accessor
                         struct-shape-update-settings-add-subnets :shape
                         "Subnets" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (remove-subnets :initarg :remove-subnets :initform
                         (common-lisp:error ":remove-subnets is required")
                         :type (common-lisp:or subnets common-lisp:null)
                         :accessor struct-shape-update-settings-remove-subnets
                         :shape "Subnets" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (security-group-id :initarg :security-group-id
                         :initform common-lisp:nil :type
                         (common-lisp:or security-group common-lisp:null)
                         :accessor
                         struct-shape-update-settings-security-group-id :shape
                         "SecurityGroup" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'update-settings 'make-update-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'add-subnets))
      (common-lisp:list
       (common-lisp:cons "AddSubnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remove-subnets))
      (common-lisp:list
       (common-lisp:cons "RemoveSubnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-id))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (license-manager-user-subscriptions-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:progn
 (common-lisp:defun associate-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain identity-provider instance-id
                     username)
   (common-lisp:declare
    (common-lisp:ignorable domain identity-provider instance-id username))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-associate-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-user-subscriptions-request
        aws-sdk/generator/operation::input "POST" "/user/AssociateUser"
        "AssociateUser"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'associate-user))
(common-lisp:progn
 (common-lisp:defun deregister-identity-provider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-provider product)
   (common-lisp:declare (common-lisp:ignorable identity-provider product))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-deregister-identity-provider-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-user-subscriptions-request
        aws-sdk/generator/operation::input "POST"
        "/identity-provider/DeregisterIdentityProvider"
        "DeregisterIdentityProvider"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'deregister-identity-provider))
(common-lisp:progn
 (common-lisp:defun disassociate-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain identity-provider instance-id
                     username)
   (common-lisp:declare
    (common-lisp:ignorable domain identity-provider instance-id username))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disassociate-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-user-subscriptions-request
        aws-sdk/generator/operation::input "POST" "/user/DisassociateUser"
        "DisassociateUser"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disassociate-user))
(common-lisp:progn
 (common-lisp:defun list-identity-providers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-identity-providers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-user-subscriptions-request
        aws-sdk/generator/operation::input "POST"
        "/identity-provider/ListIdentityProviders" "ListIdentityProviders"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-identity-providers))
(common-lisp:progn
 (common-lisp:defun list-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results next-token)
   (common-lisp:declare (common-lisp:ignorable filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-instances-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-user-subscriptions-request
        aws-sdk/generator/operation::input "POST" "/instance/ListInstances"
        "ListInstances"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-instances))
(common-lisp:progn
 (common-lisp:defun list-product-subscriptions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters identity-provider max-results
                     next-token product)
   (common-lisp:declare
    (common-lisp:ignorable filters identity-provider max-results next-token
     product))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-product-subscriptions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-user-subscriptions-request
        aws-sdk/generator/operation::input "POST"
        "/user/ListProductSubscriptions" "ListProductSubscriptions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-product-subscriptions))
(common-lisp:progn
 (common-lisp:defun list-user-associations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters identity-provider instance-id
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable filters identity-provider instance-id max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-user-associations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-user-subscriptions-request
        aws-sdk/generator/operation::input "POST" "/user/ListUserAssociations"
        "ListUserAssociations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-user-associations))
(common-lisp:progn
 (common-lisp:defun register-identity-provider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-provider product settings)
   (common-lisp:declare
    (common-lisp:ignorable identity-provider product settings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-register-identity-provider-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-user-subscriptions-request
        aws-sdk/generator/operation::input "POST"
        "/identity-provider/RegisterIdentityProvider"
        "RegisterIdentityProvider"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'register-identity-provider))
(common-lisp:progn
 (common-lisp:defun start-product-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain identity-provider product
                     username)
   (common-lisp:declare
    (common-lisp:ignorable domain identity-provider product username))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-product-subscription-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-user-subscriptions-request
        aws-sdk/generator/operation::input "POST"
        "/user/StartProductSubscription" "StartProductSubscription"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-product-subscription))
(common-lisp:progn
 (common-lisp:defun stop-product-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain identity-provider product
                     username)
   (common-lisp:declare
    (common-lisp:ignorable domain identity-provider product username))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-stop-product-subscription-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-user-subscriptions-request
        aws-sdk/generator/operation::input "POST"
        "/user/StopProductSubscription" "StopProductSubscription"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'stop-product-subscription))
(common-lisp:progn
 (common-lisp:defun update-identity-provider-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-provider product
                     update-settings)
   (common-lisp:declare
    (common-lisp:ignorable identity-provider product update-settings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-identity-provider-settings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-user-subscriptions-request
        aws-sdk/generator/operation::input "POST"
        "/identity-provider/UpdateIdentityProviderSettings"
        "UpdateIdentityProviderSettings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-identity-provider-settings))
