;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(uiop/package:define-package #:aws-sdk/services/appsync/api (:use)
                             (:nicknames #:aws/appsync)
                             (:import-from #:aws-sdk/generator/shape)
                             (:import-from #:aws-sdk/generator/operation)
                             (:import-from #:aws-sdk/api)
                             (:import-from #:aws-sdk/request)
                             (:import-from #:aws-sdk/json-request)
                             (:import-from #:aws-sdk/rest-json-request)
                             (:import-from #:aws-sdk/rest-xml-request)
                             (:import-from #:aws-sdk/query-request)
                             (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/appsync/api)
(common-lisp:progn
 (common-lisp:define-condition appsync-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'appsync-error))
(common-lisp:progn
 (common-lisp:defclass appsync-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "appsync" :api-version
                        "2017-07-25" :host-prefix "appsync" :signing-name
                        "appsync" :global-host common-lisp:nil))
 (common-lisp:export 'appsync-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ApiKeyLimitExceededException" . api-key-limit-exceeded-exception)
    ("ApiKeyValidityOutOfBoundsException"
     . api-key-validity-out-of-bounds-exception)
    ("ApiLimitExceededException" . api-limit-exceeded-exception)
    ("BadRequestException" . bad-request-exception)
    ("ConcurrentModificationException" . concurrent-modification-exception)
    ("GraphQLSchemaException" . graph-qlschema-exception)
    ("InternalFailureException" . internal-failure-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("NotFoundException" . not-found-exception)
    ("UnauthorizedException" . unauthorized-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (appsync-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defclass additional-authentication-provider common-lisp:nil
                       ((authentication-type :initarg :authentication-type
                         :initform common-lisp:nil :type
                         (common-lisp:or authentication-type common-lisp:null)
                         :accessor
                         struct-shape-additional-authentication-provider-authentication-type
                         :shape "AuthenticationType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (open-idconnect-config :initarg :open-idconnect-config
                         :initform common-lisp:nil :type
                         (common-lisp:or open-idconnect-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-additional-authentication-provider-open-idconnect-config
                         :shape "OpenIDConnectConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-pool-config :initarg :user-pool-config :initform
                         common-lisp:nil :type
                         (common-lisp:or cognito-user-pool-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-additional-authentication-provider-user-pool-config
                         :shape "CognitoUserPoolConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (lambda-authorizer-config :initarg
                         :lambda-authorizer-config :initform common-lisp:nil
                         :type
                         (common-lisp:or lambda-authorizer-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-additional-authentication-provider-lambda-authorizer-config
                         :shape "LambdaAuthorizerConfig" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-additional-authentication-provider
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'additional-authentication-provider
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'additional-authentication-provider
                    'make-additional-authentication-provider))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          additional-authentication-provider))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          additional-authentication-provider))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication-type))
      (common-lisp:list
       (common-lisp:cons "authenticationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-idconnect-config))
      (common-lisp:list
       (common-lisp:cons "openIDConnectConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-config))
      (common-lisp:list
       (common-lisp:cons "userPoolConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-authorizer-config))
      (common-lisp:list
       (common-lisp:cons "lambdaAuthorizerConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          additional-authentication-provider))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype additional-authentication-providers ()
   '(trivial-types:proper-list additional-authentication-provider))
 (common-lisp:defun make-additional-authentication-providers
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            additional-authentication-provider))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass api-association common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         common-lisp:nil :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor struct-shape-api-association-domain-name
                         :shape "DomainName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (api-id :initarg :api-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-api-association-api-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (association-status :initarg :association-status
                         :initform common-lisp:nil :type
                         (common-lisp:or association-status common-lisp:null)
                         :accessor
                         struct-shape-api-association-association-status :shape
                         "AssociationStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deployment-detail :initarg :deployment-detail
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-api-association-deployment-detail :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-api-association
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'api-association
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'api-association 'make-api-association))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input api-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input api-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "domainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-id))
      (common-lisp:list
       (common-lisp:cons "apiId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-status))
      (common-lisp:list
       (common-lisp:cons "associationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-detail))
      (common-lisp:list
       (common-lisp:cons "deploymentDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input api-association))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass api-cache common-lisp:nil
                       ((ttl :initarg :ttl :initform common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-api-cache-ttl :shape "Long" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (api-caching-behavior :initarg :api-caching-behavior
                         :initform common-lisp:nil :type
                         (common-lisp:or api-caching-behavior common-lisp:null)
                         :accessor struct-shape-api-cache-api-caching-behavior
                         :shape "ApiCachingBehavior" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transit-encryption-enabled :initarg
                         :transit-encryption-enabled :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-api-cache-transit-encryption-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (at-rest-encryption-enabled :initarg
                         :at-rest-encryption-enabled :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-api-cache-at-rest-encryption-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or api-cache-type common-lisp:null)
                         :accessor struct-shape-api-cache-type :shape
                         "ApiCacheType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or api-cache-status common-lisp:null)
                         :accessor struct-shape-api-cache-status :shape
                         "ApiCacheStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (health-metrics-config :initarg :health-metrics-config
                         :initform common-lisp:nil :type
                         (common-lisp:or cache-health-metrics-config
                                         common-lisp:null)
                         :accessor struct-shape-api-cache-health-metrics-config
                         :shape "CacheHealthMetricsConfig" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-api-cache
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'api-cache
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'api-cache 'make-api-cache))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input api-cache))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input api-cache))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ttl))
      (common-lisp:list
       (common-lisp:cons "ttl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'api-caching-behavior))
      (common-lisp:list
       (common-lisp:cons "apiCachingBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-encryption-enabled))
      (common-lisp:list
       (common-lisp:cons "transitEncryptionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'at-rest-encryption-enabled))
      (common-lisp:list
       (common-lisp:cons "atRestEncryptionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-metrics-config))
      (common-lisp:list
       (common-lisp:cons "healthMetricsConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input api-cache))
   common-lisp:nil))
(common-lisp:deftype api-cache-status () 'common-lisp:string)
(common-lisp:deftype api-cache-type () 'common-lisp:string)
(common-lisp:deftype api-caching-behavior () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass api-key common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-api-key-id :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-api-key-description :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (expires :initarg :expires :initform common-lisp:nil
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-api-key-expires :shape "Long" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (deletes :initarg :deletes :initform common-lisp:nil
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-api-key-deletes :shape "Long" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-api-key
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'api-key
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'api-key 'make-api-key))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input api-key))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input api-key))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires))
      (common-lisp:list
       (common-lisp:cons "expires"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletes))
      (common-lisp:list
       (common-lisp:cons "deletes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input api-key))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition api-key-limit-exceeded-exception
     (appsync-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       api-key-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'api-key-limit-exceeded-exception
                    'api-key-limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition api-key-validity-out-of-bounds-exception
     (appsync-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       api-key-validity-out-of-bounds-exception-message)))
 (common-lisp:export
  (common-lisp:list 'api-key-validity-out-of-bounds-exception
                    'api-key-validity-out-of-bounds-exception-message)))
(common-lisp:progn
 (common-lisp:deftype api-keys () '(trivial-types:proper-list api-key))
 (common-lisp:defun make-api-keys
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list api-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition api-limit-exceeded-exception
     (appsync-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       api-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'api-limit-exceeded-exception
                    'api-limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass app-sync-runtime common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or runtime-name common-lisp:null)
                         :accessor struct-shape-app-sync-runtime-name :shape
                         "RuntimeName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (runtime-version :initarg :runtime-version :initform
                         (common-lisp:error ":runtimeversion is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-app-sync-runtime-runtime-version :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-app-sync-runtime
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'app-sync-runtime
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'app-sync-runtime 'make-app-sync-runtime))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input app-sync-runtime))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input app-sync-runtime))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime-version))
      (common-lisp:list
       (common-lisp:cons "runtimeVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input app-sync-runtime))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-api-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domainname is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-associate-api-request-domain-name :shape
                         "DomainName" :location "uri" :location-name
                         "domainName")
                        (api-id :initarg :api-id :initform
                         (common-lisp:error ":apiid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-associate-api-request-api-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-api-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'associate-api-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-api-request 'make-associate-api-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-api-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-api-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-id))
      (common-lisp:list
       (common-lisp:cons "apiId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-api-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-api-response common-lisp:nil
                       ((api-association :initarg :api-association :initform
                         common-lisp:nil :type
                         (common-lisp:or api-association common-lisp:null)
                         :accessor
                         struct-shape-associate-api-response-api-association
                         :shape "ApiAssociation" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-api-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'associate-api-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-api-response 'make-associate-api-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-api-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-api-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-association))
      (common-lisp:list
       (common-lisp:cons "apiAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-api-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-merged-graphql-api-request common-lisp:nil
                       ((source-api-identifier :initarg :source-api-identifier
                         :initform
                         (common-lisp:error ":sourceapiidentifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-associate-merged-graphql-api-request-source-api-identifier
                         :shape "String" :location "uri" :location-name
                         "sourceApiIdentifier")
                        (merged-api-identifier :initarg :merged-api-identifier
                         :initform
                         (common-lisp:error ":mergedapiidentifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-associate-merged-graphql-api-request-merged-api-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-associate-merged-graphql-api-request-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-api-association-config :initarg
                         :source-api-association-config :initform
                         common-lisp:nil :type
                         (common-lisp:or source-api-association-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-associate-merged-graphql-api-request-source-api-association-config
                         :shape "SourceApiAssociationConfig" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-merged-graphql-api-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-merged-graphql-api-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-merged-graphql-api-request
                    'make-associate-merged-graphql-api-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-merged-graphql-api-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-merged-graphql-api-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'merged-api-identifier))
      (common-lisp:list
       (common-lisp:cons "mergedApiIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-api-association-config))
      (common-lisp:list
       (common-lisp:cons "sourceApiAssociationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-merged-graphql-api-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-merged-graphql-api-response common-lisp:nil
                       ((source-api-association :initarg
                         :source-api-association :initform common-lisp:nil
                         :type
                         (common-lisp:or source-api-association
                                         common-lisp:null)
                         :accessor
                         struct-shape-associate-merged-graphql-api-response-source-api-association
                         :shape "SourceApiAssociation" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-merged-graphql-api-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-merged-graphql-api-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-merged-graphql-api-response
                    'make-associate-merged-graphql-api-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-merged-graphql-api-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-merged-graphql-api-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-api-association))
      (common-lisp:list
       (common-lisp:cons "sourceApiAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-merged-graphql-api-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-source-graphql-api-request common-lisp:nil
                       ((merged-api-identifier :initarg :merged-api-identifier
                         :initform
                         (common-lisp:error ":mergedapiidentifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-associate-source-graphql-api-request-merged-api-identifier
                         :shape "String" :location "uri" :location-name
                         "mergedApiIdentifier")
                        (source-api-identifier :initarg :source-api-identifier
                         :initform
                         (common-lisp:error ":sourceapiidentifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-associate-source-graphql-api-request-source-api-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-associate-source-graphql-api-request-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-api-association-config :initarg
                         :source-api-association-config :initform
                         common-lisp:nil :type
                         (common-lisp:or source-api-association-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-associate-source-graphql-api-request-source-api-association-config
                         :shape "SourceApiAssociationConfig" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-source-graphql-api-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-source-graphql-api-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-source-graphql-api-request
                    'make-associate-source-graphql-api-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-source-graphql-api-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-source-graphql-api-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-api-identifier))
      (common-lisp:list
       (common-lisp:cons "sourceApiIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-api-association-config))
      (common-lisp:list
       (common-lisp:cons "sourceApiAssociationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-source-graphql-api-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-source-graphql-api-response common-lisp:nil
                       ((source-api-association :initarg
                         :source-api-association :initform common-lisp:nil
                         :type
                         (common-lisp:or source-api-association
                                         common-lisp:null)
                         :accessor
                         struct-shape-associate-source-graphql-api-response-source-api-association
                         :shape "SourceApiAssociation" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-source-graphql-api-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-source-graphql-api-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-source-graphql-api-response
                    'make-associate-source-graphql-api-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-source-graphql-api-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-source-graphql-api-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-api-association))
      (common-lisp:list
       (common-lisp:cons "sourceApiAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-source-graphql-api-response))
   common-lisp:nil))
(common-lisp:deftype association-status () 'common-lisp:string)
(common-lisp:deftype authentication-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass authorization-config common-lisp:nil
                       ((authorization-type :initarg :authorization-type
                         :initform
                         (common-lisp:error ":authorizationtype is required")
                         :type
                         (common-lisp:or authorization-type common-lisp:null)
                         :accessor
                         struct-shape-authorization-config-authorization-type
                         :shape "AuthorizationType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aws-iam-config :initarg :aws-iam-config :initform
                         common-lisp:nil :type
                         (common-lisp:or aws-iam-config common-lisp:null)
                         :accessor
                         struct-shape-authorization-config-aws-iam-config
                         :shape "AwsIamConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-authorization-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'authorization-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'authorization-config 'make-authorization-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input authorization-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input authorization-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authorization-type))
      (common-lisp:list
       (common-lisp:cons "authorizationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-iam-config))
      (common-lisp:list
       (common-lisp:cons "awsIamConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input authorization-config))
   common-lisp:nil))
(common-lisp:deftype authorization-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass aws-iam-config common-lisp:nil
                       ((signing-region :initarg :signing-region :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-aws-iam-config-signing-region :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (signing-service-name :initarg :signing-service-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-aws-iam-config-signing-service-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-aws-iam-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'aws-iam-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'aws-iam-config 'make-aws-iam-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aws-iam-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aws-iam-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signing-region))
      (common-lisp:list
       (common-lisp:cons "signingRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'signing-service-name))
      (common-lisp:list
       (common-lisp:cons "signingServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aws-iam-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass bad-request-detail common-lisp:nil
                       ((code-errors :initarg :code-errors :initform
                         common-lisp:nil :type
                         (common-lisp:or code-errors common-lisp:null)
                         :accessor struct-shape-bad-request-detail-code-errors
                         :shape "CodeErrors" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bad-request-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'bad-request-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'bad-request-detail 'make-bad-request-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bad-request-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bad-request-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-errors))
      (common-lisp:list
       (common-lisp:cons "codeErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bad-request-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition bad-request-exception
     (appsync-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       bad-request-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       bad-request-exception-reason)
      (detail :initarg :detail :initform common-lisp:nil :reader
       bad-request-exception-detail)))
 (common-lisp:export
  (common-lisp:list 'bad-request-exception 'bad-request-exception-message
                    'bad-request-exception-reason
                    'bad-request-exception-detail)))
(common-lisp:deftype bad-request-reason () 'common-lisp:string)
(common-lisp:deftype blob ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype boolean-value () 'common-lisp:boolean)
(common-lisp:deftype cache-health-metrics-config () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass caching-config common-lisp:nil
                       ((ttl :initarg :ttl :initform
                         (common-lisp:error ":ttl is required") :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-caching-config-ttl :shape "Long"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (caching-keys :initarg :caching-keys :initform
                         common-lisp:nil :type
                         (common-lisp:or caching-keys common-lisp:null)
                         :accessor struct-shape-caching-config-caching-keys
                         :shape "CachingKeys" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-caching-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'caching-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'caching-config 'make-caching-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input caching-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input caching-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ttl))
      (common-lisp:list
       (common-lisp:cons "ttl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'caching-keys))
      (common-lisp:list
       (common-lisp:cons "cachingKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input caching-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype caching-keys () '(trivial-types:proper-list string))
 (common-lisp:defun make-caching-keys
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype certificate-arn () 'common-lisp:string)
(common-lisp:deftype code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass code-error common-lisp:nil
                       ((error-type :initarg :error-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-code-error-error-type :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-code-error-value :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (location :initarg :location :initform common-lisp:nil
                         :type
                         (common-lisp:or code-error-location common-lisp:null)
                         :accessor struct-shape-code-error-location :shape
                         "CodeErrorLocation" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-code-error
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'code-error
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'code-error 'make-code-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input code-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input code-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-type))
      (common-lisp:list
       (common-lisp:cons "errorType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input code-error))
   common-lisp:nil))
(common-lisp:deftype code-error-column () 'common-lisp:integer)
(common-lisp:deftype code-error-line () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass code-error-location common-lisp:nil
                       ((line :initarg :line :initform common-lisp:nil :type
                         (common-lisp:or code-error-line common-lisp:null)
                         :accessor struct-shape-code-error-location-line :shape
                         "CodeErrorLine" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (column :initarg :column :initform common-lisp:nil
                         :type
                         (common-lisp:or code-error-column common-lisp:null)
                         :accessor struct-shape-code-error-location-column
                         :shape "CodeErrorColumn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (span :initarg :span :initform common-lisp:nil :type
                         (common-lisp:or code-error-span common-lisp:null)
                         :accessor struct-shape-code-error-location-span :shape
                         "CodeErrorSpan" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-code-error-location
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'code-error-location
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'code-error-location 'make-code-error-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input code-error-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input code-error-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'line))
      (common-lisp:list
       (common-lisp:cons "line"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'span))
      (common-lisp:list
       (common-lisp:cons "span"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input code-error-location))
   common-lisp:nil))
(common-lisp:deftype code-error-span () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype code-errors () '(trivial-types:proper-list code-error))
 (common-lisp:defun make-code-errors
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list code-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass cognito-user-pool-config common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":userpoolid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cognito-user-pool-config-user-pool-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aws-region :initarg :aws-region :initform
                         (common-lisp:error ":awsregion is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cognito-user-pool-config-aws-region
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (app-id-client-regex :initarg :app-id-client-regex
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cognito-user-pool-config-app-id-client-regex
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cognito-user-pool-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cognito-user-pool-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cognito-user-pool-config 'make-cognito-user-pool-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cognito-user-pool-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cognito-user-pool-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "userPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-region))
      (common-lisp:list
       (common-lisp:cons "awsRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id-client-regex))
      (common-lisp:list
       (common-lisp:cons "appIdClientRegex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cognito-user-pool-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition concurrent-modification-exception
     (appsync-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       concurrent-modification-exception-message)))
 (common-lisp:export
  (common-lisp:list 'concurrent-modification-exception
                    'concurrent-modification-exception-message)))
(common-lisp:deftype conflict-detection-type () 'common-lisp:string)
(common-lisp:deftype conflict-handler-type () 'common-lisp:string)
(common-lisp:deftype context () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-api-cache-request common-lisp:nil
                       ((api-id :initarg :api-id :initform
                         (common-lisp:error ":apiid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-api-cache-request-api-id :shape
                         "String" :location "uri" :location-name "apiId")
                        (ttl :initarg :ttl :initform
                         (common-lisp:error ":ttl is required") :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-create-api-cache-request-ttl :shape
                         "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (transit-encryption-enabled :initarg
                         :transit-encryption-enabled :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-create-api-cache-request-transit-encryption-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (at-rest-encryption-enabled :initarg
                         :at-rest-encryption-enabled :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-create-api-cache-request-at-rest-encryption-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (api-caching-behavior :initarg :api-caching-behavior
                         :initform
                         (common-lisp:error ":apicachingbehavior is required")
                         :type
                         (common-lisp:or api-caching-behavior common-lisp:null)
                         :accessor
                         struct-shape-create-api-cache-request-api-caching-behavior
                         :shape "ApiCachingBehavior" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or api-cache-type common-lisp:null)
                         :accessor struct-shape-create-api-cache-request-type
                         :shape "ApiCacheType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (health-metrics-config :initarg :health-metrics-config
                         :initform common-lisp:nil :type
                         (common-lisp:or cache-health-metrics-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-api-cache-request-health-metrics-config
                         :shape "CacheHealthMetricsConfig" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-api-cache-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-api-cache-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-api-cache-request 'make-create-api-cache-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-api-cache-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-api-cache-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ttl))
      (common-lisp:list
       (common-lisp:cons "ttl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-encryption-enabled))
      (common-lisp:list
       (common-lisp:cons "transitEncryptionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'at-rest-encryption-enabled))
      (common-lisp:list
       (common-lisp:cons "atRestEncryptionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'api-caching-behavior))
      (common-lisp:list
       (common-lisp:cons "apiCachingBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-metrics-config))
      (common-lisp:list
       (common-lisp:cons "healthMetricsConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-api-cache-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-api-cache-response common-lisp:nil
                       ((api-cache :initarg :api-cache :initform
                         common-lisp:nil :type
                         (common-lisp:or api-cache common-lisp:null) :accessor
                         struct-shape-create-api-cache-response-api-cache
                         :shape "ApiCache" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-api-cache-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-api-cache-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-api-cache-response
                    'make-create-api-cache-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-api-cache-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-api-cache-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-cache))
      (common-lisp:list
       (common-lisp:cons "apiCache"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-api-cache-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-api-key-request common-lisp:nil
                       ((api-id :initarg :api-id :initform
                         (common-lisp:error ":apiid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-api-key-request-api-id :shape
                         "String" :location "uri" :location-name "apiId")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-api-key-request-description :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (expires :initarg :expires :initform common-lisp:nil
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-create-api-key-request-expires :shape
                         "Long" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-api-key-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-api-key-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-api-key-request 'make-create-api-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-api-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-api-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires))
      (common-lisp:list
       (common-lisp:cons "expires"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-api-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-api-key-response common-lisp:nil
                       ((api-key :initarg :api-key :initform common-lisp:nil
                         :type (common-lisp:or api-key common-lisp:null)
                         :accessor struct-shape-create-api-key-response-api-key
                         :shape "ApiKey" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-api-key-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-api-key-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-api-key-response 'make-create-api-key-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-api-key-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-api-key-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-key))
      (common-lisp:list
       (common-lisp:cons "apiKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-api-key-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-data-source-request common-lisp:nil
                       ((api-id :initarg :api-id :initform
                         (common-lisp:error ":apiid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-data-source-request-api-id :shape
                         "String" :location "uri" :location-name "apiId")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-create-data-source-request-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-data-source-request-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or data-source-type common-lisp:null)
                         :accessor struct-shape-create-data-source-request-type
                         :shape "DataSourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-role-arn :initarg :service-role-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-data-source-request-service-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dynamodb-config :initarg :dynamodb-config :initform
                         common-lisp:nil :type
                         (common-lisp:or dynamodb-data-source-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-data-source-request-dynamodb-config
                         :shape "DynamodbDataSourceConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (lambda-config :initarg :lambda-config :initform
                         common-lisp:nil :type
                         (common-lisp:or lambda-data-source-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-data-source-request-lambda-config
                         :shape "LambdaDataSourceConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (elasticsearch-config :initarg :elasticsearch-config
                         :initform common-lisp:nil :type
                         (common-lisp:or elasticsearch-data-source-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-data-source-request-elasticsearch-config
                         :shape "ElasticsearchDataSourceConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (open-search-service-config :initarg
                         :open-search-service-config :initform common-lisp:nil
                         :type
                         (common-lisp:or open-search-service-data-source-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-data-source-request-open-search-service-config
                         :shape "OpenSearchServiceDataSourceConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (http-config :initarg :http-config :initform
                         common-lisp:nil :type
                         (common-lisp:or http-data-source-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-data-source-request-http-config
                         :shape "HttpDataSourceConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (relational-database-config :initarg
                         :relational-database-config :initform common-lisp:nil
                         :type
                         (common-lisp:or relational-database-data-source-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-data-source-request-relational-database-config
                         :shape "RelationalDatabaseDataSourceConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (event-bridge-config :initarg :event-bridge-config
                         :initform common-lisp:nil :type
                         (common-lisp:or event-bridge-data-source-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-data-source-request-event-bridge-config
                         :shape "EventBridgeDataSourceConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (metrics-config :initarg :metrics-config :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source-level-metrics-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-data-source-request-metrics-config
                         :shape "DataSourceLevelMetricsConfig" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-data-source-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-data-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-data-source-request
                    'make-create-data-source-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-role-arn))
      (common-lisp:list
       (common-lisp:cons "serviceRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dynamodb-config))
      (common-lisp:list
       (common-lisp:cons "dynamodbConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-config))
      (common-lisp:list
       (common-lisp:cons "lambdaConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elasticsearch-config))
      (common-lisp:list
       (common-lisp:cons "elasticsearchConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-search-service-config))
      (common-lisp:list
       (common-lisp:cons "openSearchServiceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-config))
      (common-lisp:list
       (common-lisp:cons "httpConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-config))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-bridge-config))
      (common-lisp:list
       (common-lisp:cons "eventBridgeConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics-config))
      (common-lisp:list
       (common-lisp:cons "metricsConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-data-source-response common-lisp:nil
                       ((data-source :initarg :data-source :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source common-lisp:null)
                         :accessor
                         struct-shape-create-data-source-response-data-source
                         :shape "DataSource" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-data-source-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-data-source-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-data-source-response
                    'make-create-data-source-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "dataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-domain-name-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domainname is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-create-domain-name-request-domain-name
                         :shape "DomainName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-arn :initarg :certificate-arn :initform
                         (common-lisp:error ":certificatearn is required")
                         :type
                         (common-lisp:or certificate-arn common-lisp:null)
                         :accessor
                         struct-shape-create-domain-name-request-certificate-arn
                         :shape "CertificateArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-domain-name-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-domain-name-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-domain-name-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-domain-name-request
                    'make-create-domain-name-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-name-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-name-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "domainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "certificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-name-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-domain-name-response common-lisp:nil
                       ((domain-name-config :initarg :domain-name-config
                         :initform common-lisp:nil :type
                         (common-lisp:or domain-name-config common-lisp:null)
                         :accessor
                         struct-shape-create-domain-name-response-domain-name-config
                         :shape "DomainNameConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-domain-name-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-domain-name-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-domain-name-response
                    'make-create-domain-name-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-name-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-name-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name-config))
      (common-lisp:list
       (common-lisp:cons "domainNameConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-name-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-function-request common-lisp:nil
                       ((api-id :initarg :api-id :initform
                         (common-lisp:error ":apiid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-function-request-api-id :shape
                         "String" :location "uri" :location-name "apiId")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-create-function-request-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-function-request-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-source-name :initarg :data-source-name :initform
                         (common-lisp:error ":datasourcename is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-function-request-data-source-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (request-mapping-template :initarg
                         :request-mapping-template :initform common-lisp:nil
                         :type
                         (common-lisp:or mapping-template common-lisp:null)
                         :accessor
                         struct-shape-create-function-request-request-mapping-template
                         :shape "MappingTemplate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (response-mapping-template :initarg
                         :response-mapping-template :initform common-lisp:nil
                         :type
                         (common-lisp:or mapping-template common-lisp:null)
                         :accessor
                         struct-shape-create-function-request-response-mapping-template
                         :shape "MappingTemplate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (function-version :initarg :function-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-function-request-function-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sync-config :initarg :sync-config :initform
                         common-lisp:nil :type
                         (common-lisp:or sync-config common-lisp:null)
                         :accessor
                         struct-shape-create-function-request-sync-config
                         :shape "SyncConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-batch-size :initarg :max-batch-size :initform
                         common-lisp:nil :type
                         (common-lisp:or max-batch-size common-lisp:null)
                         :accessor
                         struct-shape-create-function-request-max-batch-size
                         :shape "MaxBatchSize" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (runtime :initarg :runtime :initform common-lisp:nil
                         :type
                         (common-lisp:or app-sync-runtime common-lisp:null)
                         :accessor struct-shape-create-function-request-runtime
                         :shape "AppSyncRuntime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (code :initarg :code :initform common-lisp:nil :type
                         (common-lisp:or code common-lisp:null) :accessor
                         struct-shape-create-function-request-code :shape
                         "Code" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-function-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-function-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-function-request 'make-create-function-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-function-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-function-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-name))
      (common-lisp:list
       (common-lisp:cons "dataSourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'request-mapping-template))
      (common-lisp:list
       (common-lisp:cons "requestMappingTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'response-mapping-template))
      (common-lisp:list
       (common-lisp:cons "responseMappingTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-version))
      (common-lisp:list
       (common-lisp:cons "functionVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-config))
      (common-lisp:list
       (common-lisp:cons "syncConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-batch-size))
      (common-lisp:list
       (common-lisp:cons "maxBatchSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime))
      (common-lisp:list
       (common-lisp:cons "runtime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-function-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-function-response common-lisp:nil
                       ((function-configuration :initarg
                         :function-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or function-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-function-response-function-configuration
                         :shape "FunctionConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-function-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-function-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-function-response 'make-create-function-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-function-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-function-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'function-configuration))
      (common-lisp:list
       (common-lisp:cons "functionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-function-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-graphql-api-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-graphql-api-request-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (log-config :initarg :log-config :initform
                         common-lisp:nil :type
                         (common-lisp:or log-config common-lisp:null) :accessor
                         struct-shape-create-graphql-api-request-log-config
                         :shape "LogConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (authentication-type :initarg :authentication-type
                         :initform
                         (common-lisp:error ":authenticationtype is required")
                         :type
                         (common-lisp:or authentication-type common-lisp:null)
                         :accessor
                         struct-shape-create-graphql-api-request-authentication-type
                         :shape "AuthenticationType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-pool-config :initarg :user-pool-config :initform
                         common-lisp:nil :type
                         (common-lisp:or user-pool-config common-lisp:null)
                         :accessor
                         struct-shape-create-graphql-api-request-user-pool-config
                         :shape "UserPoolConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (open-idconnect-config :initarg :open-idconnect-config
                         :initform common-lisp:nil :type
                         (common-lisp:or open-idconnect-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-graphql-api-request-open-idconnect-config
                         :shape "OpenIDConnectConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-graphql-api-request-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (additional-authentication-providers :initarg
                         :additional-authentication-providers :initform
                         common-lisp:nil :type
                         (common-lisp:or additional-authentication-providers
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-graphql-api-request-additional-authentication-providers
                         :shape "AdditionalAuthenticationProviders" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (xray-enabled :initarg :xray-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-create-graphql-api-request-xray-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lambda-authorizer-config :initarg
                         :lambda-authorizer-config :initform common-lisp:nil
                         :type
                         (common-lisp:or lambda-authorizer-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-graphql-api-request-lambda-authorizer-config
                         :shape "LambdaAuthorizerConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (visibility :initarg :visibility :initform
                         common-lisp:nil :type
                         (common-lisp:or graph-qlapi-visibility
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-graphql-api-request-visibility
                         :shape "GraphQLApiVisibility" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (api-type :initarg :api-type :initform common-lisp:nil
                         :type
                         (common-lisp:or graph-qlapi-type common-lisp:null)
                         :accessor
                         struct-shape-create-graphql-api-request-api-type
                         :shape "GraphQLApiType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (merged-api-execution-role-arn :initarg
                         :merged-api-execution-role-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-graphql-api-request-merged-api-execution-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owner-contact :initarg :owner-contact :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-graphql-api-request-owner-contact
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (introspection-config :initarg :introspection-config
                         :initform common-lisp:nil :type
                         (common-lisp:or graph-qlapi-introspection-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-graphql-api-request-introspection-config
                         :shape "GraphQLApiIntrospectionConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (query-depth-limit :initarg :query-depth-limit
                         :initform common-lisp:nil :type
                         (common-lisp:or query-depth-limit common-lisp:null)
                         :accessor
                         struct-shape-create-graphql-api-request-query-depth-limit
                         :shape "QueryDepthLimit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resolver-count-limit :initarg :resolver-count-limit
                         :initform common-lisp:nil :type
                         (common-lisp:or resolver-count-limit common-lisp:null)
                         :accessor
                         struct-shape-create-graphql-api-request-resolver-count-limit
                         :shape "ResolverCountLimit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enhanced-metrics-config :initarg
                         :enhanced-metrics-config :initform common-lisp:nil
                         :type
                         (common-lisp:or enhanced-metrics-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-graphql-api-request-enhanced-metrics-config
                         :shape "EnhancedMetricsConfig" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-graphql-api-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-graphql-api-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-graphql-api-request
                    'make-create-graphql-api-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-graphql-api-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-graphql-api-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-config))
      (common-lisp:list
       (common-lisp:cons "logConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication-type))
      (common-lisp:list
       (common-lisp:cons "authenticationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-config))
      (common-lisp:list
       (common-lisp:cons "userPoolConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-idconnect-config))
      (common-lisp:list
       (common-lisp:cons "openIDConnectConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-authentication-providers))
      (common-lisp:list
       (common-lisp:cons "additionalAuthenticationProviders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xray-enabled))
      (common-lisp:list
       (common-lisp:cons "xrayEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-authorizer-config))
      (common-lisp:list
       (common-lisp:cons "lambdaAuthorizerConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-type))
      (common-lisp:list
       (common-lisp:cons "apiType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'merged-api-execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "mergedApiExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-contact))
      (common-lisp:list
       (common-lisp:cons "ownerContact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'introspection-config))
      (common-lisp:list
       (common-lisp:cons "introspectionConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-depth-limit))
      (common-lisp:list
       (common-lisp:cons "queryDepthLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-count-limit))
      (common-lisp:list
       (common-lisp:cons "resolverCountLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enhanced-metrics-config))
      (common-lisp:list
       (common-lisp:cons "enhancedMetricsConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-graphql-api-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-graphql-api-response common-lisp:nil
                       ((graphql-api :initarg :graphql-api :initform
                         common-lisp:nil :type
                         (common-lisp:or graphql-api common-lisp:null)
                         :accessor
                         struct-shape-create-graphql-api-response-graphql-api
                         :shape "GraphqlApi" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-graphql-api-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-graphql-api-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-graphql-api-response
                    'make-create-graphql-api-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-graphql-api-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-graphql-api-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'graphql-api))
      (common-lisp:list
       (common-lisp:cons "graphqlApi"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-graphql-api-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-resolver-request common-lisp:nil
                       ((api-id :initarg :api-id :initform
                         (common-lisp:error ":apiid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-resolver-request-api-id :shape
                         "String" :location "uri" :location-name "apiId")
                        (type-name :initarg :type-name :initform
                         (common-lisp:error ":typename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-resolver-request-type-name :shape
                         "ResourceName" :location "uri" :location-name
                         "typeName")
                        (field-name :initarg :field-name :initform
                         (common-lisp:error ":fieldname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-resolver-request-field-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-source-name :initarg :data-source-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-resolver-request-data-source-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (request-mapping-template :initarg
                         :request-mapping-template :initform common-lisp:nil
                         :type
                         (common-lisp:or mapping-template common-lisp:null)
                         :accessor
                         struct-shape-create-resolver-request-request-mapping-template
                         :shape "MappingTemplate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (response-mapping-template :initarg
                         :response-mapping-template :initform common-lisp:nil
                         :type
                         (common-lisp:or mapping-template common-lisp:null)
                         :accessor
                         struct-shape-create-resolver-request-response-mapping-template
                         :shape "MappingTemplate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kind :initarg :kind :initform common-lisp:nil :type
                         (common-lisp:or resolver-kind common-lisp:null)
                         :accessor struct-shape-create-resolver-request-kind
                         :shape "ResolverKind" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pipeline-config :initarg :pipeline-config :initform
                         common-lisp:nil :type
                         (common-lisp:or pipeline-config common-lisp:null)
                         :accessor
                         struct-shape-create-resolver-request-pipeline-config
                         :shape "PipelineConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sync-config :initarg :sync-config :initform
                         common-lisp:nil :type
                         (common-lisp:or sync-config common-lisp:null)
                         :accessor
                         struct-shape-create-resolver-request-sync-config
                         :shape "SyncConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (caching-config :initarg :caching-config :initform
                         common-lisp:nil :type
                         (common-lisp:or caching-config common-lisp:null)
                         :accessor
                         struct-shape-create-resolver-request-caching-config
                         :shape "CachingConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-batch-size :initarg :max-batch-size :initform
                         common-lisp:nil :type
                         (common-lisp:or max-batch-size common-lisp:null)
                         :accessor
                         struct-shape-create-resolver-request-max-batch-size
                         :shape "MaxBatchSize" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (runtime :initarg :runtime :initform common-lisp:nil
                         :type
                         (common-lisp:or app-sync-runtime common-lisp:null)
                         :accessor struct-shape-create-resolver-request-runtime
                         :shape "AppSyncRuntime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (code :initarg :code :initform common-lisp:nil :type
                         (common-lisp:or code common-lisp:null) :accessor
                         struct-shape-create-resolver-request-code :shape
                         "Code" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (metrics-config :initarg :metrics-config :initform
                         common-lisp:nil :type
                         (common-lisp:or resolver-level-metrics-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-resolver-request-metrics-config
                         :shape "ResolverLevelMetricsConfig" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-resolver-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-resolver-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-resolver-request 'make-create-resolver-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-resolver-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-resolver-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-name))
      (common-lisp:list
       (common-lisp:cons "fieldName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-name))
      (common-lisp:list
       (common-lisp:cons "dataSourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'request-mapping-template))
      (common-lisp:list
       (common-lisp:cons "requestMappingTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'response-mapping-template))
      (common-lisp:list
       (common-lisp:cons "responseMappingTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kind))
      (common-lisp:list
       (common-lisp:cons "kind"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-config))
      (common-lisp:list
       (common-lisp:cons "pipelineConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-config))
      (common-lisp:list
       (common-lisp:cons "syncConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'caching-config))
      (common-lisp:list
       (common-lisp:cons "cachingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-batch-size))
      (common-lisp:list
       (common-lisp:cons "maxBatchSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime))
      (common-lisp:list
       (common-lisp:cons "runtime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics-config))
      (common-lisp:list
       (common-lisp:cons "metricsConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-resolver-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-resolver-response common-lisp:nil
                       ((resolver :initarg :resolver :initform common-lisp:nil
                         :type (common-lisp:or resolver common-lisp:null)
                         :accessor
                         struct-shape-create-resolver-response-resolver :shape
                         "Resolver" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-resolver-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-resolver-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-resolver-response 'make-create-resolver-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-resolver-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-resolver-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolver))
      (common-lisp:list
       (common-lisp:cons "resolver"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-resolver-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-type-request common-lisp:nil
                       ((api-id :initarg :api-id :initform
                         (common-lisp:error ":apiid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-type-request-api-id :shape
                         "String" :location "uri" :location-name "apiId")
                        (definition :initarg :definition :initform
                         (common-lisp:error ":definition is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-type-request-definition :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (format :initarg :format :initform
                         (common-lisp:error ":format is required") :type
                         (common-lisp:or type-definition-format
                                         common-lisp:null)
                         :accessor struct-shape-create-type-request-format
                         :shape "TypeDefinitionFormat" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-type-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-type-request 'make-create-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-type-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-type-response common-lisp:nil
                       ((type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or type common-lisp:null) :accessor
                         struct-shape-create-type-response-type :shape "Type"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-type-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-type-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-type-response 'make-create-type-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-type-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-type-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-source common-lisp:nil
                       ((data-source-arn :initarg :data-source-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-data-source-data-source-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-data-source-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-data-source-description :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or data-source-type common-lisp:null)
                         :accessor struct-shape-data-source-type :shape
                         "DataSourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-role-arn :initarg :service-role-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-data-source-service-role-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dynamodb-config :initarg :dynamodb-config :initform
                         common-lisp:nil :type
                         (common-lisp:or dynamodb-data-source-config
                                         common-lisp:null)
                         :accessor struct-shape-data-source-dynamodb-config
                         :shape "DynamodbDataSourceConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (lambda-config :initarg :lambda-config :initform
                         common-lisp:nil :type
                         (common-lisp:or lambda-data-source-config
                                         common-lisp:null)
                         :accessor struct-shape-data-source-lambda-config
                         :shape "LambdaDataSourceConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (elasticsearch-config :initarg :elasticsearch-config
                         :initform common-lisp:nil :type
                         (common-lisp:or elasticsearch-data-source-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-source-elasticsearch-config :shape
                         "ElasticsearchDataSourceConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (open-search-service-config :initarg
                         :open-search-service-config :initform common-lisp:nil
                         :type
                         (common-lisp:or open-search-service-data-source-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-source-open-search-service-config
                         :shape "OpenSearchServiceDataSourceConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (http-config :initarg :http-config :initform
                         common-lisp:nil :type
                         (common-lisp:or http-data-source-config
                                         common-lisp:null)
                         :accessor struct-shape-data-source-http-config :shape
                         "HttpDataSourceConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (relational-database-config :initarg
                         :relational-database-config :initform common-lisp:nil
                         :type
                         (common-lisp:or relational-database-data-source-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-source-relational-database-config
                         :shape "RelationalDatabaseDataSourceConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (event-bridge-config :initarg :event-bridge-config
                         :initform common-lisp:nil :type
                         (common-lisp:or event-bridge-data-source-config
                                         common-lisp:null)
                         :accessor struct-shape-data-source-event-bridge-config
                         :shape "EventBridgeDataSourceConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (metrics-config :initarg :metrics-config :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source-level-metrics-config
                                         common-lisp:null)
                         :accessor struct-shape-data-source-metrics-config
                         :shape "DataSourceLevelMetricsConfig" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'data-source 'make-data-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-arn))
      (common-lisp:list
       (common-lisp:cons "dataSourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-role-arn))
      (common-lisp:list
       (common-lisp:cons "serviceRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dynamodb-config))
      (common-lisp:list
       (common-lisp:cons "dynamodbConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-config))
      (common-lisp:list
       (common-lisp:cons "lambdaConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elasticsearch-config))
      (common-lisp:list
       (common-lisp:cons "elasticsearchConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-search-service-config))
      (common-lisp:list
       (common-lisp:cons "openSearchServiceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-config))
      (common-lisp:list
       (common-lisp:cons "httpConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-config))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-bridge-config))
      (common-lisp:list
       (common-lisp:cons "eventBridgeConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics-config))
      (common-lisp:list
       (common-lisp:cons "metricsConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-source-introspection-model common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-data-source-introspection-model-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (fields :initarg :fields :initform common-lisp:nil
                         :type
                         (common-lisp:or data-source-introspection-model-fields
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-source-introspection-model-fields
                         :shape "DataSourceIntrospectionModelFields" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (primary-key :initarg :primary-key :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source-introspection-model-index
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-source-introspection-model-primary-key
                         :shape "DataSourceIntrospectionModelIndex" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (indexes :initarg :indexes :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          data-source-introspection-model-indexes
                          common-lisp:null)
                         :accessor
                         struct-shape-data-source-introspection-model-indexes
                         :shape "DataSourceIntrospectionModelIndexes" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (sdl :initarg :sdl :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-data-source-introspection-model-sdl
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-source-introspection-model
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'data-source-introspection-model
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-source-introspection-model
                    'make-data-source-introspection-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-source-introspection-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-source-introspection-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fields))
      (common-lisp:list
       (common-lisp:cons "fields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary-key))
      (common-lisp:list
       (common-lisp:cons "primaryKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'indexes))
      (common-lisp:list
       (common-lisp:cons "indexes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sdl))
      (common-lisp:list
       (common-lisp:cons "sdl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-source-introspection-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-source-introspection-model-field common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-data-source-introspection-model-field-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or
                          data-source-introspection-model-field-type
                          common-lisp:null)
                         :accessor
                         struct-shape-data-source-introspection-model-field-type
                         :shape "DataSourceIntrospectionModelFieldType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (length :initarg :length :initform common-lisp:nil
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-data-source-introspection-model-field-length
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-source-introspection-model-field
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'data-source-introspection-model-field
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-source-introspection-model-field
                    'make-data-source-introspection-model-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-source-introspection-model-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-source-introspection-model-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'length))
      (common-lisp:list
       (common-lisp:cons "length"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-source-introspection-model-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-source-introspection-model-field-type
                       common-lisp:nil
                       ((kind :initarg :kind :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-data-source-introspection-model-field-type-kind
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-data-source-introspection-model-field-type-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or
                          data-source-introspection-model-field-type
                          common-lisp:null)
                         :accessor
                         struct-shape-data-source-introspection-model-field-type-type
                         :shape "DataSourceIntrospectionModelFieldType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (values :initarg :values :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          data-source-introspection-model-field-type-values
                          common-lisp:null)
                         :accessor
                         struct-shape-data-source-introspection-model-field-type-values
                         :shape "DataSourceIntrospectionModelFieldTypeValues"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-source-introspection-model-field-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'data-source-introspection-model-field-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-source-introspection-model-field-type
                    'make-data-source-introspection-model-field-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-source-introspection-model-field-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-source-introspection-model-field-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kind))
      (common-lisp:list
       (common-lisp:cons "kind"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-source-introspection-model-field-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-source-introspection-model-field-type-values ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-data-source-introspection-model-field-type-values
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype data-source-introspection-model-fields ()
   '(trivial-types:proper-list data-source-introspection-model-field))
 (common-lisp:defun make-data-source-introspection-model-fields
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            data-source-introspection-model-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass data-source-introspection-model-index common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-data-source-introspection-model-index-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (fields :initarg :fields :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          data-source-introspection-model-index-fields
                          common-lisp:null)
                         :accessor
                         struct-shape-data-source-introspection-model-index-fields
                         :shape "DataSourceIntrospectionModelIndexFields"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-source-introspection-model-index
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'data-source-introspection-model-index
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-source-introspection-model-index
                    'make-data-source-introspection-model-index))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-source-introspection-model-index))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-source-introspection-model-index))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fields))
      (common-lisp:list
       (common-lisp:cons "fields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-source-introspection-model-index))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-source-introspection-model-index-fields ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-data-source-introspection-model-index-fields
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype data-source-introspection-model-indexes ()
   '(trivial-types:proper-list data-source-introspection-model-index))
 (common-lisp:defun make-data-source-introspection-model-indexes
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            data-source-introspection-model-index))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype data-source-introspection-models ()
   '(trivial-types:proper-list data-source-introspection-model))
 (common-lisp:defun make-data-source-introspection-models
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            data-source-introspection-model))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass data-source-introspection-result common-lisp:nil
                       ((models :initarg :models :initform common-lisp:nil
                         :type
                         (common-lisp:or data-source-introspection-models
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-source-introspection-result-models
                         :shape "DataSourceIntrospectionModels" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-data-source-introspection-result-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-source-introspection-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'data-source-introspection-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-source-introspection-result
                    'make-data-source-introspection-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-source-introspection-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-source-introspection-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'models))
      (common-lisp:list
       (common-lisp:cons "models"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-source-introspection-result))
   common-lisp:nil))
(common-lisp:deftype data-source-introspection-status () 'common-lisp:string)
(common-lisp:deftype data-source-level-metrics-behavior () 'common-lisp:string)
(common-lisp:deftype data-source-level-metrics-config () 'common-lisp:string)
(common-lisp:deftype data-source-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype data-sources () '(trivial-types:proper-list data-source))
 (common-lisp:defun make-data-sources
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-source))
   aws-sdk/generator/shape::members))
(common-lisp:deftype date () 'common-lisp:string)
(common-lisp:deftype default-action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-api-cache-request common-lisp:nil
                       ((api-id :initarg :api-id :initform
                         (common-lisp:error ":apiid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-api-cache-request-api-id :shape
                         "String" :location "uri" :location-name "apiId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-api-cache-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-api-cache-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-api-cache-request 'make-delete-api-cache-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-api-cache-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-api-cache-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-api-cache-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-api-cache-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-api-cache-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-api-cache-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-api-cache-response
                    'make-delete-api-cache-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-api-cache-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-api-cache-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-api-cache-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-api-key-request common-lisp:nil
                       ((api-id :initarg :api-id :initform
                         (common-lisp:error ":apiid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-api-key-request-api-id :shape
                         "String" :location "uri" :location-name "apiId")
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-api-key-request-id :shape "String"
                         :location "uri" :location-name "id"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-api-key-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-api-key-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-api-key-request 'make-delete-api-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-api-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-api-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-api-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-api-key-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-api-key-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-api-key-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-api-key-response 'make-delete-api-key-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-api-key-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-api-key-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-api-key-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-data-source-request common-lisp:nil
                       ((api-id :initarg :api-id :initform
                         (common-lisp:error ":apiid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-data-source-request-api-id :shape
                         "String" :location "uri" :location-name "apiId")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-delete-data-source-request-name
                         :shape "ResourceName" :location "uri" :location-name
                         "name"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-data-source-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-data-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-data-source-request
                    'make-delete-data-source-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-data-source-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-data-source-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-data-source-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-data-source-response
                    'make-delete-data-source-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-domain-name-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domainname is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-delete-domain-name-request-domain-name
                         :shape "DomainName" :location "uri" :location-name
                         "domainName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-domain-name-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-domain-name-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-domain-name-request
                    'make-delete-domain-name-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-name-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-name-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-name-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-domain-name-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-domain-name-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-domain-name-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-domain-name-response
                    'make-delete-domain-name-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-name-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-name-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-name-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-function-request common-lisp:nil
                       ((api-id :initarg :api-id :initform
                         (common-lisp:error ":apiid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-function-request-api-id :shape
                         "String" :location "uri" :location-name "apiId")
                        (function-id :initarg :function-id :initform
                         (common-lisp:error ":functionid is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-delete-function-request-function-id
                         :shape "ResourceName" :location "uri" :location-name
                         "functionId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-function-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-function-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-function-request 'make-delete-function-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-function-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-function-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-function-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-function-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-function-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-function-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-function-response 'make-delete-function-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-function-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-function-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-function-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-graphql-api-request common-lisp:nil
                       ((api-id :initarg :api-id :initform
                         (common-lisp:error ":apiid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-graphql-api-request-api-id :shape
                         "String" :location "uri" :location-name "apiId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-graphql-api-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-graphql-api-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-graphql-api-request
                    'make-delete-graphql-api-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-graphql-api-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-graphql-api-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-graphql-api-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-graphql-api-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-graphql-api-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-graphql-api-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-graphql-api-response
                    'make-delete-graphql-api-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-graphql-api-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-graphql-api-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-graphql-api-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-resolver-request common-lisp:nil
                       ((api-id :initarg :api-id :initform
                         (common-lisp:error ":apiid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-resolver-request-api-id :shape
                         "String" :location "uri" :location-name "apiId")
                        (type-name :initarg :type-name :initform
                         (common-lisp:error ":typename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-delete-resolver-request-type-name :shape
                         "ResourceName" :location "uri" :location-name
                         "typeName")
                        (field-name :initarg :field-name :initform
                         (common-lisp:error ":fieldname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-delete-resolver-request-field-name :shape
                         "ResourceName" :location "uri" :location-name
                         "fieldName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-resolver-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-resolver-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-resolver-request 'make-delete-resolver-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resolver-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resolver-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resolver-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-resolver-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-resolver-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-resolver-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-resolver-response 'make-delete-resolver-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resolver-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resolver-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resolver-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-type-request common-lisp:nil
                       ((api-id :initarg :api-id :initform
                         (common-lisp:error ":apiid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-type-request-api-id :shape
                         "String" :location "uri" :location-name "apiId")
                        (type-name :initarg :type-name :initform
                         (common-lisp:error ":typename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-delete-type-request-type-name
                         :shape "ResourceName" :location "uri" :location-name
                         "typeName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-type-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-type-request 'make-delete-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-type-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-type-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-type-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-type-response 'make-delete-type-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-type-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delta-sync-config common-lisp:nil
                       ((base-table-ttl :initarg :base-table-ttl :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-delta-sync-config-base-table-ttl :shape
                         "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (delta-sync-table-name :initarg :delta-sync-table-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delta-sync-config-delta-sync-table-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (delta-sync-table-ttl :initarg :delta-sync-table-ttl
                         :initform common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-delta-sync-config-delta-sync-table-ttl
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delta-sync-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delta-sync-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delta-sync-config 'make-delta-sync-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delta-sync-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delta-sync-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-table-ttl))
      (common-lisp:list
       (common-lisp:cons "baseTableTTL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delta-sync-table-name))
      (common-lisp:list
       (common-lisp:cons "deltaSyncTableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delta-sync-table-ttl))
      (common-lisp:list
       (common-lisp:cons "deltaSyncTableTTL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delta-sync-config))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass disassociate-api-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domainname is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-disassociate-api-request-domain-name
                         :shape "DomainName" :location "uri" :location-name
                         "domainName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-api-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'disassociate-api-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-api-request 'make-disassociate-api-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-api-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-api-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-api-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-api-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-api-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'disassociate-api-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-api-response
                    'make-disassociate-api-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-api-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-api-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-api-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-merged-graphql-api-request common-lisp:nil
                       ((source-api-identifier :initarg :source-api-identifier
                         :initform
                         (common-lisp:error ":sourceapiidentifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-disassociate-merged-graphql-api-request-source-api-identifier
                         :shape "String" :location "uri" :location-name
                         "sourceApiIdentifier")
                        (association-id :initarg :association-id :initform
                         (common-lisp:error ":associationid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-disassociate-merged-graphql-api-request-association-id
                         :shape "String" :location "uri" :location-name
                         "associationId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-merged-graphql-api-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-merged-graphql-api-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-merged-graphql-api-request
                    'make-disassociate-merged-graphql-api-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-merged-graphql-api-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-merged-graphql-api-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-merged-graphql-api-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-merged-graphql-api-response common-lisp:nil
                       ((source-api-association-status :initarg
                         :source-api-association-status :initform
                         common-lisp:nil :type
                         (common-lisp:or source-api-association-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-disassociate-merged-graphql-api-response-source-api-association-status
                         :shape "SourceApiAssociationStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-merged-graphql-api-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-merged-graphql-api-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-merged-graphql-api-response
                    'make-disassociate-merged-graphql-api-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-merged-graphql-api-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-merged-graphql-api-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-api-association-status))
      (common-lisp:list
       (common-lisp:cons "sourceApiAssociationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-merged-graphql-api-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-source-graphql-api-request common-lisp:nil
                       ((merged-api-identifier :initarg :merged-api-identifier
                         :initform
                         (common-lisp:error ":mergedapiidentifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-disassociate-source-graphql-api-request-merged-api-identifier
                         :shape "String" :location "uri" :location-name
                         "mergedApiIdentifier")
                        (association-id :initarg :association-id :initform
                         (common-lisp:error ":associationid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-disassociate-source-graphql-api-request-association-id
                         :shape "String" :location "uri" :location-name
                         "associationId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-source-graphql-api-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-source-graphql-api-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-source-graphql-api-request
                    'make-disassociate-source-graphql-api-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-source-graphql-api-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-source-graphql-api-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-source-graphql-api-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-source-graphql-api-response common-lisp:nil
                       ((source-api-association-status :initarg
                         :source-api-association-status :initform
                         common-lisp:nil :type
                         (common-lisp:or source-api-association-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-disassociate-source-graphql-api-response-source-api-association-status
                         :shape "SourceApiAssociationStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-source-graphql-api-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-source-graphql-api-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-source-graphql-api-response
                    'make-disassociate-source-graphql-api-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-source-graphql-api-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-source-graphql-api-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-api-association-status))
      (common-lisp:list
       (common-lisp:cons "sourceApiAssociationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-source-graphql-api-response))
   common-lisp:nil))
(common-lisp:deftype domain-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass domain-name-config common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         common-lisp:nil :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor struct-shape-domain-name-config-domain-name
                         :shape "DomainName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-domain-name-config-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-arn :initarg :certificate-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or certificate-arn common-lisp:null)
                         :accessor
                         struct-shape-domain-name-config-certificate-arn :shape
                         "CertificateArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (appsync-domain-name :initarg :appsync-domain-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-domain-name-config-appsync-domain-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hosted-zone-id :initarg :hosted-zone-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-domain-name-config-hosted-zone-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-domain-name-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'domain-name-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'domain-name-config 'make-domain-name-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input domain-name-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input domain-name-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "domainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "certificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'appsync-domain-name))
      (common-lisp:list
       (common-lisp:cons "appsyncDomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hosted-zone-id))
      (common-lisp:list
       (common-lisp:cons "hostedZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input domain-name-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype domain-name-configs ()
   '(trivial-types:proper-list domain-name-config))
 (common-lisp:defun make-domain-name-configs
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list domain-name-config))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dynamodb-data-source-config common-lisp:nil
                       ((table-name :initarg :table-name :initform
                         (common-lisp:error ":tablename is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dynamodb-data-source-config-table-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aws-region :initarg :aws-region :initform
                         (common-lisp:error ":awsregion is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dynamodb-data-source-config-aws-region
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (use-caller-credentials :initarg
                         :use-caller-credentials :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-dynamodb-data-source-config-use-caller-credentials
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (delta-sync-config :initarg :delta-sync-config
                         :initform common-lisp:nil :type
                         (common-lisp:or delta-sync-config common-lisp:null)
                         :accessor
                         struct-shape-dynamodb-data-source-config-delta-sync-config
                         :shape "DeltaSyncConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (versioned :initarg :versioned :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-dynamodb-data-source-config-versioned
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dynamodb-data-source-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dynamodb-data-source-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dynamodb-data-source-config
                    'make-dynamodb-data-source-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dynamodb-data-source-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dynamodb-data-source-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "tableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-region))
      (common-lisp:list
       (common-lisp:cons "awsRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-caller-credentials))
      (common-lisp:list
       (common-lisp:cons "useCallerCredentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delta-sync-config))
      (common-lisp:list
       (common-lisp:cons "deltaSyncConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'versioned))
      (common-lisp:list
       (common-lisp:cons "versioned"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dynamodb-data-source-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass elasticsearch-data-source-config common-lisp:nil
                       ((endpoint :initarg :endpoint :initform
                         (common-lisp:error ":endpoint is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-elasticsearch-data-source-config-endpoint
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aws-region :initarg :aws-region :initform
                         (common-lisp:error ":awsregion is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-elasticsearch-data-source-config-aws-region
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-elasticsearch-data-source-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'elasticsearch-data-source-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'elasticsearch-data-source-config
                    'make-elasticsearch-data-source-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          elasticsearch-data-source-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          elasticsearch-data-source-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-region))
      (common-lisp:list
       (common-lisp:cons "awsRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          elasticsearch-data-source-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass enhanced-metrics-config common-lisp:nil
                       ((resolver-level-metrics-behavior :initarg
                         :resolver-level-metrics-behavior :initform
                         (common-lisp:error
                          ":resolverlevelmetricsbehavior is required")
                         :type
                         (common-lisp:or resolver-level-metrics-behavior
                                         common-lisp:null)
                         :accessor
                         struct-shape-enhanced-metrics-config-resolver-level-metrics-behavior
                         :shape "ResolverLevelMetricsBehavior" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (data-source-level-metrics-behavior :initarg
                         :data-source-level-metrics-behavior :initform
                         (common-lisp:error
                          ":datasourcelevelmetricsbehavior is required")
                         :type
                         (common-lisp:or data-source-level-metrics-behavior
                                         common-lisp:null)
                         :accessor
                         struct-shape-enhanced-metrics-config-data-source-level-metrics-behavior
                         :shape "DataSourceLevelMetricsBehavior" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (operation-level-metrics-config :initarg
                         :operation-level-metrics-config :initform
                         (common-lisp:error
                          ":operationlevelmetricsconfig is required")
                         :type
                         (common-lisp:or operation-level-metrics-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-enhanced-metrics-config-operation-level-metrics-config
                         :shape "OperationLevelMetricsConfig" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-enhanced-metrics-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'enhanced-metrics-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'enhanced-metrics-config 'make-enhanced-metrics-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enhanced-metrics-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enhanced-metrics-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-level-metrics-behavior))
      (common-lisp:list
       (common-lisp:cons "resolverLevelMetricsBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-source-level-metrics-behavior))
      (common-lisp:list
       (common-lisp:cons "dataSourceLevelMetricsBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'operation-level-metrics-config))
      (common-lisp:list
       (common-lisp:cons "operationLevelMetricsConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enhanced-metrics-config))
   common-lisp:nil))
(common-lisp:deftype environment-variable-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype environment-variable-map () 'common-lisp:hash-table)
 (common-lisp:defun make-environment-variable-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype environment-variable-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass error-detail common-lisp:nil
                       ((message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or error-message common-lisp:null)
                         :accessor struct-shape-error-detail-message :shape
                         "ErrorMessage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-error-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'error-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'error-detail 'make-error-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input error-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input error-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input error-detail))
   common-lisp:nil))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass evaluate-code-error-detail common-lisp:nil
                       ((message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or error-message common-lisp:null)
                         :accessor
                         struct-shape-evaluate-code-error-detail-message :shape
                         "ErrorMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (code-errors :initarg :code-errors :initform
                         common-lisp:nil :type
                         (common-lisp:or code-errors common-lisp:null)
                         :accessor
                         struct-shape-evaluate-code-error-detail-code-errors
                         :shape "CodeErrors" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-evaluate-code-error-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'evaluate-code-error-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'evaluate-code-error-detail
                    'make-evaluate-code-error-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          evaluate-code-error-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          evaluate-code-error-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-errors))
      (common-lisp:list
       (common-lisp:cons "codeErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          evaluate-code-error-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass evaluate-code-request common-lisp:nil
                       ((runtime :initarg :runtime :initform
                         (common-lisp:error ":runtime is required") :type
                         (common-lisp:or app-sync-runtime common-lisp:null)
                         :accessor struct-shape-evaluate-code-request-runtime
                         :shape "AppSyncRuntime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (code :initarg :code :initform
                         (common-lisp:error ":code is required") :type
                         (common-lisp:or code common-lisp:null) :accessor
                         struct-shape-evaluate-code-request-code :shape "Code"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (context :initarg :context :initform
                         (common-lisp:error ":context is required") :type
                         (common-lisp:or context common-lisp:null) :accessor
                         struct-shape-evaluate-code-request-context :shape
                         "Context" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (function :initarg :function :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-evaluate-code-request-function
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-evaluate-code-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'evaluate-code-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'evaluate-code-request 'make-evaluate-code-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          evaluate-code-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          evaluate-code-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime))
      (common-lisp:list
       (common-lisp:cons "runtime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context))
      (common-lisp:list
       (common-lisp:cons "context"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function))
      (common-lisp:list
       (common-lisp:cons "function"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          evaluate-code-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass evaluate-code-response common-lisp:nil
                       ((evaluation-result :initarg :evaluation-result
                         :initform common-lisp:nil :type
                         (common-lisp:or evaluation-result common-lisp:null)
                         :accessor
                         struct-shape-evaluate-code-response-evaluation-result
                         :shape "EvaluationResult" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or evaluate-code-error-detail
                                         common-lisp:null)
                         :accessor struct-shape-evaluate-code-response-error
                         :shape "EvaluateCodeErrorDetail" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (logs :initarg :logs :initform common-lisp:nil :type
                         (common-lisp:or logs common-lisp:null) :accessor
                         struct-shape-evaluate-code-response-logs :shape "Logs"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-evaluate-code-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'evaluate-code-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'evaluate-code-response 'make-evaluate-code-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          evaluate-code-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          evaluate-code-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-result))
      (common-lisp:list
       (common-lisp:cons "evaluationResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logs))
      (common-lisp:list
       (common-lisp:cons "logs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          evaluate-code-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass evaluate-mapping-template-request common-lisp:nil
                       ((template :initarg :template :initform
                         (common-lisp:error ":template is required") :type
                         (common-lisp:or template common-lisp:null) :accessor
                         struct-shape-evaluate-mapping-template-request-template
                         :shape "Template" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (context :initarg :context :initform
                         (common-lisp:error ":context is required") :type
                         (common-lisp:or context common-lisp:null) :accessor
                         struct-shape-evaluate-mapping-template-request-context
                         :shape "Context" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-evaluate-mapping-template-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'evaluate-mapping-template-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'evaluate-mapping-template-request
                    'make-evaluate-mapping-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          evaluate-mapping-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          evaluate-mapping-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template))
      (common-lisp:list
       (common-lisp:cons "template"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context))
      (common-lisp:list
       (common-lisp:cons "context"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          evaluate-mapping-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass evaluate-mapping-template-response common-lisp:nil
                       ((evaluation-result :initarg :evaluation-result
                         :initform common-lisp:nil :type
                         (common-lisp:or evaluation-result common-lisp:null)
                         :accessor
                         struct-shape-evaluate-mapping-template-response-evaluation-result
                         :shape "EvaluationResult" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or error-detail common-lisp:null)
                         :accessor
                         struct-shape-evaluate-mapping-template-response-error
                         :shape "ErrorDetail" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (logs :initarg :logs :initform common-lisp:nil :type
                         (common-lisp:or logs common-lisp:null) :accessor
                         struct-shape-evaluate-mapping-template-response-logs
                         :shape "Logs" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-evaluate-mapping-template-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'evaluate-mapping-template-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'evaluate-mapping-template-response
                    'make-evaluate-mapping-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          evaluate-mapping-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          evaluate-mapping-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-result))
      (common-lisp:list
       (common-lisp:cons "evaluationResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logs))
      (common-lisp:list
       (common-lisp:cons "logs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          evaluate-mapping-template-response))
   common-lisp:nil))
(common-lisp:deftype evaluation-result () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass event-bridge-data-source-config common-lisp:nil
                       ((event-bus-arn :initarg :event-bus-arn :initform
                         (common-lisp:error ":eventbusarn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-event-bridge-data-source-config-event-bus-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-event-bridge-data-source-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'event-bridge-data-source-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'event-bridge-data-source-config
                    'make-event-bridge-data-source-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          event-bridge-data-source-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          event-bridge-data-source-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-bus-arn))
      (common-lisp:list
       (common-lisp:cons "eventBusArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          event-bridge-data-source-config))
   common-lisp:nil))
(common-lisp:deftype field-log-level () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass flush-api-cache-request common-lisp:nil
                       ((api-id :initarg :api-id :initform
                         (common-lisp:error ":apiid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-flush-api-cache-request-api-id :shape
                         "String" :location "uri" :location-name "apiId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-flush-api-cache-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'flush-api-cache-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'flush-api-cache-request 'make-flush-api-cache-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          flush-api-cache-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          flush-api-cache-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          flush-api-cache-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass flush-api-cache-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-flush-api-cache-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'flush-api-cache-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'flush-api-cache-response 'make-flush-api-cache-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          flush-api-cache-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          flush-api-cache-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          flush-api-cache-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass function-configuration common-lisp:nil
                       ((function-id :initarg :function-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-function-configuration-function-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (function-arn :initarg :function-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-function-configuration-function-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-function-configuration-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-function-configuration-description :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (data-source-name :initarg :data-source-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-function-configuration-data-source-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (request-mapping-template :initarg
                         :request-mapping-template :initform common-lisp:nil
                         :type
                         (common-lisp:or mapping-template common-lisp:null)
                         :accessor
                         struct-shape-function-configuration-request-mapping-template
                         :shape "MappingTemplate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (response-mapping-template :initarg
                         :response-mapping-template :initform common-lisp:nil
                         :type
                         (common-lisp:or mapping-template common-lisp:null)
                         :accessor
                         struct-shape-function-configuration-response-mapping-template
                         :shape "MappingTemplate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (function-version :initarg :function-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-function-configuration-function-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sync-config :initarg :sync-config :initform
                         common-lisp:nil :type
                         (common-lisp:or sync-config common-lisp:null)
                         :accessor
                         struct-shape-function-configuration-sync-config :shape
                         "SyncConfig" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-batch-size :initarg :max-batch-size :initform
                         common-lisp:nil :type
                         (common-lisp:or max-batch-size common-lisp:null)
                         :accessor
                         struct-shape-function-configuration-max-batch-size
                         :shape "MaxBatchSize" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (runtime :initarg :runtime :initform common-lisp:nil
                         :type
                         (common-lisp:or app-sync-runtime common-lisp:null)
                         :accessor struct-shape-function-configuration-runtime
                         :shape "AppSyncRuntime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (code :initarg :code :initform common-lisp:nil :type
                         (common-lisp:or code common-lisp:null) :accessor
                         struct-shape-function-configuration-code :shape "Code"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-function-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'function-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'function-configuration 'make-function-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          function-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          function-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-id))
      (common-lisp:list
       (common-lisp:cons "functionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-arn))
      (common-lisp:list
       (common-lisp:cons "functionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-name))
      (common-lisp:list
       (common-lisp:cons "dataSourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'request-mapping-template))
      (common-lisp:list
       (common-lisp:cons "requestMappingTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'response-mapping-template))
      (common-lisp:list
       (common-lisp:cons "responseMappingTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-version))
      (common-lisp:list
       (common-lisp:cons "functionVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-config))
      (common-lisp:list
       (common-lisp:cons "syncConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-batch-size))
      (common-lisp:list
       (common-lisp:cons "maxBatchSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime))
      (common-lisp:list
       (common-lisp:cons "runtime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          function-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype functions ()
   '(trivial-types:proper-list function-configuration))
 (common-lisp:defun make-functions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list function-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype functions-ids () '(trivial-types:proper-list string))
 (common-lisp:defun make-functions-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass get-api-association-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domainname is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-get-api-association-request-domain-name
                         :shape "DomainName" :location "uri" :location-name
                         "domainName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-api-association-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-api-association-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-api-association-request
                    'make-get-api-association-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-api-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-api-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-api-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-api-association-response common-lisp:nil
                       ((api-association :initarg :api-association :initform
                         common-lisp:nil :type
                         (common-lisp:or api-association common-lisp:null)
                         :accessor
                         struct-shape-get-api-association-response-api-association
                         :shape "ApiAssociation" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-api-association-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-api-association-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-api-association-response
                    'make-get-api-association-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-api-association-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-api-association-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-association))
      (common-lisp:list
       (common-lisp:cons "apiAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-api-association-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-api-cache-request common-lisp:nil
                       ((api-id :initarg :api-id :initform
                         (common-lisp:error ":apiid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-api-cache-request-api-id :shape
                         "String" :location "uri" :location-name "apiId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-api-cache-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-api-cache-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-api-cache-request 'make-get-api-cache-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-api-cache-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-api-cache-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-api-cache-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-api-cache-response common-lisp:nil
                       ((api-cache :initarg :api-cache :initform
                         common-lisp:nil :type
                         (common-lisp:or api-cache common-lisp:null) :accessor
                         struct-shape-get-api-cache-response-api-cache :shape
                         "ApiCache" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-api-cache-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-api-cache-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-api-cache-response 'make-get-api-cache-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-api-cache-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-api-cache-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-cache))
      (common-lisp:list
       (common-lisp:cons "apiCache"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-api-cache-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-data-source-introspection-request common-lisp:nil
                       ((introspection-id :initarg :introspection-id :initform
                         (common-lisp:error ":introspectionid is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-get-data-source-introspection-request-introspection-id
                         :shape "String" :location "uri" :location-name
                         "introspectionId")
                        (include-models-sdl :initarg :include-models-sdl
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-get-data-source-introspection-request-include-models-sdl
                         :shape "Boolean" :location "querystring"
                         :location-name "includeModelsSDL")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-get-data-source-introspection-request-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-get-data-source-introspection-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-data-source-introspection-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-data-source-introspection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-data-source-introspection-request
                    'make-get-data-source-introspection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-introspection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-introspection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-introspection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-data-source-introspection-response common-lisp:nil
                       ((introspection-id :initarg :introspection-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-data-source-introspection-response-introspection-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (introspection-status :initarg :introspection-status
                         :initform common-lisp:nil :type
                         (common-lisp:or data-source-introspection-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-data-source-introspection-response-introspection-status
                         :shape "DataSourceIntrospectionStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (introspection-status-detail :initarg
                         :introspection-status-detail :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-get-data-source-introspection-response-introspection-status-detail
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (introspection-result :initarg :introspection-result
                         :initform common-lisp:nil :type
                         (common-lisp:or data-source-introspection-result
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-data-source-introspection-response-introspection-result
                         :shape "DataSourceIntrospectionResult" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-data-source-introspection-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-data-source-introspection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-data-source-introspection-response
                    'make-get-data-source-introspection-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-introspection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-introspection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'introspection-id))
      (common-lisp:list
       (common-lisp:cons "introspectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'introspection-status))
      (common-lisp:list
       (common-lisp:cons "introspectionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'introspection-status-detail))
      (common-lisp:list
       (common-lisp:cons "introspectionStatusDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'introspection-result))
      (common-lisp:list
       (common-lisp:cons "introspectionResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-introspection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-data-source-request common-lisp:nil
                       ((api-id :initarg :api-id :initform
                         (common-lisp:error ":apiid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-data-source-request-api-id :shape
                         "String" :location "uri" :location-name "apiId")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-get-data-source-request-name
                         :shape "ResourceName" :location "uri" :location-name
                         "name"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-data-source-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-data-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-data-source-request 'make-get-data-source-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-data-source-response common-lisp:nil
                       ((data-source :initarg :data-source :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source common-lisp:null)
                         :accessor
                         struct-shape-get-data-source-response-data-source
                         :shape "DataSource" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-data-source-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-data-source-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-data-source-response 'make-get-data-source-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "dataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-domain-name-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domainname is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-get-domain-name-request-domain-name
                         :shape "DomainName" :location "uri" :location-name
                         "domainName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-domain-name-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-domain-name-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-domain-name-request 'make-get-domain-name-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-domain-name-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-domain-name-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-domain-name-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-domain-name-response common-lisp:nil
                       ((domain-name-config :initarg :domain-name-config
                         :initform common-lisp:nil :type
                         (common-lisp:or domain-name-config common-lisp:null)
                         :accessor
                         struct-shape-get-domain-name-response-domain-name-config
                         :shape "DomainNameConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-domain-name-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-domain-name-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-domain-name-response 'make-get-domain-name-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-domain-name-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-domain-name-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name-config))
      (common-lisp:list
       (common-lisp:cons "domainNameConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-domain-name-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-function-request common-lisp:nil
                       ((api-id :initarg :api-id :initform
                         (common-lisp:error ":apiid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-function-request-api-id :shape
                         "String" :location "uri" :location-name "apiId")
                        (function-id :initarg :function-id :initform
                         (common-lisp:error ":functionid is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-get-function-request-function-id :shape
                         "ResourceName" :location "uri" :location-name
                         "functionId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-function-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-function-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-function-request 'make-get-function-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-function-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-function-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-function-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-function-response common-lisp:nil
                       ((function-configuration :initarg
                         :function-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or function-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-function-response-function-configuration
                         :shape "FunctionConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-function-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-function-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-function-response 'make-get-function-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-function-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-function-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'function-configuration))
      (common-lisp:list
       (common-lisp:cons "functionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-function-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-graphql-api-environment-variables-request
                       common-lisp:nil
                       ((api-id :initarg :api-id :initform
                         (common-lisp:error ":apiid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-graphql-api-environment-variables-request-api-id
                         :shape "String" :location "uri" :location-name
                         "apiId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-graphql-api-environment-variables-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-graphql-api-environment-variables-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-graphql-api-environment-variables-request
                    'make-get-graphql-api-environment-variables-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-graphql-api-environment-variables-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-graphql-api-environment-variables-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-graphql-api-environment-variables-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-graphql-api-environment-variables-response
                       common-lisp:nil
                       ((environment-variables :initarg :environment-variables
                         :initform common-lisp:nil :type
                         (common-lisp:or environment-variable-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-graphql-api-environment-variables-response-environment-variables
                         :shape "EnvironmentVariableMap" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-graphql-api-environment-variables-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-graphql-api-environment-variables-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-graphql-api-environment-variables-response
                    'make-get-graphql-api-environment-variables-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-graphql-api-environment-variables-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-graphql-api-environment-variables-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-variables))
      (common-lisp:list
       (common-lisp:cons "environmentVariables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-graphql-api-environment-variables-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-graphql-api-request common-lisp:nil
                       ((api-id :initarg :api-id :initform
                         (common-lisp:error ":apiid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-graphql-api-request-api-id :shape
                         "String" :location "uri" :location-name "apiId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-graphql-api-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-graphql-api-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-graphql-api-request 'make-get-graphql-api-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-graphql-api-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-graphql-api-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-graphql-api-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-graphql-api-response common-lisp:nil
                       ((graphql-api :initarg :graphql-api :initform
                         common-lisp:nil :type
                         (common-lisp:or graphql-api common-lisp:null)
                         :accessor
                         struct-shape-get-graphql-api-response-graphql-api
                         :shape "GraphqlApi" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-graphql-api-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-graphql-api-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-graphql-api-response 'make-get-graphql-api-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-graphql-api-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-graphql-api-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'graphql-api))
      (common-lisp:list
       (common-lisp:cons "graphqlApi"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-graphql-api-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-introspection-schema-request common-lisp:nil
                       ((api-id :initarg :api-id :initform
                         (common-lisp:error ":apiid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-introspection-schema-request-api-id
                         :shape "String" :location "uri" :location-name
                         "apiId")
                        (format :initarg :format :initform
                         (common-lisp:error ":format is required") :type
                         (common-lisp:or output-type common-lisp:null)
                         :accessor
                         struct-shape-get-introspection-schema-request-format
                         :shape "OutputType" :location "querystring"
                         :location-name "format")
                        (include-directives :initarg :include-directives
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-value common-lisp:null)
                         :accessor
                         struct-shape-get-introspection-schema-request-include-directives
                         :shape "BooleanValue" :location "querystring"
                         :location-name "includeDirectives"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-introspection-schema-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-introspection-schema-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-introspection-schema-request
                    'make-get-introspection-schema-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-introspection-schema-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-introspection-schema-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-introspection-schema-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-introspection-schema-response common-lisp:nil
                       ((schema :initarg :schema :initform common-lisp:nil
                         :type (common-lisp:or blob common-lisp:null) :accessor
                         struct-shape-get-introspection-schema-response-schema
                         :shape "Blob" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-introspection-schema-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-introspection-schema-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-introspection-schema-response
                    'make-get-introspection-schema-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-introspection-schema-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-introspection-schema-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema))
      (common-lisp:list
       (common-lisp:cons "schema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-introspection-schema-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'schema))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          get-introspection-schema-response))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass get-resolver-request common-lisp:nil
                       ((api-id :initarg :api-id :initform
                         (common-lisp:error ":apiid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-resolver-request-api-id :shape
                         "String" :location "uri" :location-name "apiId")
                        (type-name :initarg :type-name :initform
                         (common-lisp:error ":typename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-get-resolver-request-type-name
                         :shape "ResourceName" :location "uri" :location-name
                         "typeName")
                        (field-name :initarg :field-name :initform
                         (common-lisp:error ":fieldname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-get-resolver-request-field-name
                         :shape "ResourceName" :location "uri" :location-name
                         "fieldName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-resolver-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-resolver-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-resolver-request 'make-get-resolver-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-resolver-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-resolver-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-resolver-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resolver-response common-lisp:nil
                       ((resolver :initarg :resolver :initform common-lisp:nil
                         :type (common-lisp:or resolver common-lisp:null)
                         :accessor struct-shape-get-resolver-response-resolver
                         :shape "Resolver" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-resolver-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-resolver-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-resolver-response 'make-get-resolver-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolver))
      (common-lisp:list
       (common-lisp:cons "resolver"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-schema-creation-status-request common-lisp:nil
                       ((api-id :initarg :api-id :initform
                         (common-lisp:error ":apiid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-schema-creation-status-request-api-id
                         :shape "String" :location "uri" :location-name
                         "apiId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-schema-creation-status-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-schema-creation-status-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-schema-creation-status-request
                    'make-get-schema-creation-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-creation-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-creation-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-creation-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-schema-creation-status-response common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or schema-status common-lisp:null)
                         :accessor
                         struct-shape-get-schema-creation-status-response-status
                         :shape "SchemaStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (details :initarg :details :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-get-schema-creation-status-response-details
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-schema-creation-status-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-schema-creation-status-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-schema-creation-status-response
                    'make-get-schema-creation-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-creation-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-creation-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-creation-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-source-api-association-request common-lisp:nil
                       ((merged-api-identifier :initarg :merged-api-identifier
                         :initform
                         (common-lisp:error ":mergedapiidentifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-get-source-api-association-request-merged-api-identifier
                         :shape "String" :location "uri" :location-name
                         "mergedApiIdentifier")
                        (association-id :initarg :association-id :initform
                         (common-lisp:error ":associationid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-source-api-association-request-association-id
                         :shape "String" :location "uri" :location-name
                         "associationId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-source-api-association-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-source-api-association-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-source-api-association-request
                    'make-get-source-api-association-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-source-api-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-source-api-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-source-api-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-source-api-association-response common-lisp:nil
                       ((source-api-association :initarg
                         :source-api-association :initform common-lisp:nil
                         :type
                         (common-lisp:or source-api-association
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-source-api-association-response-source-api-association
                         :shape "SourceApiAssociation" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-source-api-association-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-source-api-association-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-source-api-association-response
                    'make-get-source-api-association-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-source-api-association-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-source-api-association-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-api-association))
      (common-lisp:list
       (common-lisp:cons "sourceApiAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-source-api-association-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-type-request common-lisp:nil
                       ((api-id :initarg :api-id :initform
                         (common-lisp:error ":apiid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-type-request-api-id :shape "String"
                         :location "uri" :location-name "apiId")
                        (type-name :initarg :type-name :initform
                         (common-lisp:error ":typename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-get-type-request-type-name
                         :shape "ResourceName" :location "uri" :location-name
                         "typeName")
                        (format :initarg :format :initform
                         (common-lisp:error ":format is required") :type
                         (common-lisp:or type-definition-format
                                         common-lisp:null)
                         :accessor struct-shape-get-type-request-format :shape
                         "TypeDefinitionFormat" :location "querystring"
                         :location-name "format"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-type-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-type-request 'make-get-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-type-response common-lisp:nil
                       ((type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or type common-lisp:null) :accessor
                         struct-shape-get-type-response-type :shape "Type"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-type-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-type-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-type-response 'make-get-type-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-type-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-type-response))
   common-lisp:nil))
(common-lisp:deftype graph-qlapi-introspection-config () 'common-lisp:string)
(common-lisp:deftype graph-qlapi-type () 'common-lisp:string)
(common-lisp:deftype graph-qlapi-visibility () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition graph-qlschema-exception
     (appsync-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       graph-qlschema-exception-message)))
 (common-lisp:export
  (common-lisp:list 'graph-qlschema-exception
                    'graph-qlschema-exception-message)))
(common-lisp:progn
 (common-lisp:defclass graphql-api common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-graphql-api-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (api-id :initarg :api-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-graphql-api-api-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (authentication-type :initarg :authentication-type
                         :initform common-lisp:nil :type
                         (common-lisp:or authentication-type common-lisp:null)
                         :accessor struct-shape-graphql-api-authentication-type
                         :shape "AuthenticationType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-config :initarg :log-config :initform
                         common-lisp:nil :type
                         (common-lisp:or log-config common-lisp:null) :accessor
                         struct-shape-graphql-api-log-config :shape "LogConfig"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (user-pool-config :initarg :user-pool-config :initform
                         common-lisp:nil :type
                         (common-lisp:or user-pool-config common-lisp:null)
                         :accessor struct-shape-graphql-api-user-pool-config
                         :shape "UserPoolConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (open-idconnect-config :initarg :open-idconnect-config
                         :initform common-lisp:nil :type
                         (common-lisp:or open-idconnect-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-graphql-api-open-idconnect-config :shape
                         "OpenIDConnectConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-graphql-api-arn :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (uris :initarg :uris :initform common-lisp:nil :type
                         (common-lisp:or map-of-string-to-string
                                         common-lisp:null)
                         :accessor struct-shape-graphql-api-uris :shape
                         "MapOfStringToString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-graphql-api-tags :shape "TagMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (additional-authentication-providers :initarg
                         :additional-authentication-providers :initform
                         common-lisp:nil :type
                         (common-lisp:or additional-authentication-providers
                                         common-lisp:null)
                         :accessor
                         struct-shape-graphql-api-additional-authentication-providers
                         :shape "AdditionalAuthenticationProviders" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (xray-enabled :initarg :xray-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-graphql-api-xray-enabled :shape "Boolean"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (waf-web-acl-arn :initarg :waf-web-acl-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-graphql-api-waf-web-acl-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (lambda-authorizer-config :initarg
                         :lambda-authorizer-config :initform common-lisp:nil
                         :type
                         (common-lisp:or lambda-authorizer-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-graphql-api-lambda-authorizer-config
                         :shape "LambdaAuthorizerConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (dns :initarg :dns :initform common-lisp:nil :type
                         (common-lisp:or map-of-string-to-string
                                         common-lisp:null)
                         :accessor struct-shape-graphql-api-dns :shape
                         "MapOfStringToString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (visibility :initarg :visibility :initform
                         common-lisp:nil :type
                         (common-lisp:or graph-qlapi-visibility
                                         common-lisp:null)
                         :accessor struct-shape-graphql-api-visibility :shape
                         "GraphQLApiVisibility" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (api-type :initarg :api-type :initform common-lisp:nil
                         :type
                         (common-lisp:or graph-qlapi-type common-lisp:null)
                         :accessor struct-shape-graphql-api-api-type :shape
                         "GraphQLApiType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (merged-api-execution-role-arn :initarg
                         :merged-api-execution-role-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-graphql-api-merged-api-execution-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owner :initarg :owner :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-graphql-api-owner :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (owner-contact :initarg :owner-contact :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-graphql-api-owner-contact :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (introspection-config :initarg :introspection-config
                         :initform common-lisp:nil :type
                         (common-lisp:or graph-qlapi-introspection-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-graphql-api-introspection-config :shape
                         "GraphQLApiIntrospectionConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (query-depth-limit :initarg :query-depth-limit
                         :initform common-lisp:nil :type
                         (common-lisp:or query-depth-limit common-lisp:null)
                         :accessor struct-shape-graphql-api-query-depth-limit
                         :shape "QueryDepthLimit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resolver-count-limit :initarg :resolver-count-limit
                         :initform common-lisp:nil :type
                         (common-lisp:or resolver-count-limit common-lisp:null)
                         :accessor
                         struct-shape-graphql-api-resolver-count-limit :shape
                         "ResolverCountLimit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enhanced-metrics-config :initarg
                         :enhanced-metrics-config :initform common-lisp:nil
                         :type
                         (common-lisp:or enhanced-metrics-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-graphql-api-enhanced-metrics-config
                         :shape "EnhancedMetricsConfig" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-graphql-api
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'graphql-api
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'graphql-api 'make-graphql-api))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input graphql-api))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input graphql-api))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-id))
      (common-lisp:list
       (common-lisp:cons "apiId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication-type))
      (common-lisp:list
       (common-lisp:cons "authenticationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-config))
      (common-lisp:list
       (common-lisp:cons "logConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-config))
      (common-lisp:list
       (common-lisp:cons "userPoolConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-idconnect-config))
      (common-lisp:list
       (common-lisp:cons "openIDConnectConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uris))
      (common-lisp:list
       (common-lisp:cons "uris"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-authentication-providers))
      (common-lisp:list
       (common-lisp:cons "additionalAuthenticationProviders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xray-enabled))
      (common-lisp:list
       (common-lisp:cons "xrayEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'waf-web-acl-arn))
      (common-lisp:list
       (common-lisp:cons "wafWebAclArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-authorizer-config))
      (common-lisp:list
       (common-lisp:cons "lambdaAuthorizerConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns))
      (common-lisp:list
       (common-lisp:cons "dns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-type))
      (common-lisp:list
       (common-lisp:cons "apiType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'merged-api-execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "mergedApiExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-contact))
      (common-lisp:list
       (common-lisp:cons "ownerContact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'introspection-config))
      (common-lisp:list
       (common-lisp:cons "introspectionConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-depth-limit))
      (common-lisp:list
       (common-lisp:cons "queryDepthLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-count-limit))
      (common-lisp:list
       (common-lisp:cons "resolverCountLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enhanced-metrics-config))
      (common-lisp:list
       (common-lisp:cons "enhancedMetricsConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input graphql-api))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype graphql-apis () '(trivial-types:proper-list graphql-api))
 (common-lisp:defun make-graphql-apis
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list graphql-api))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass http-data-source-config common-lisp:nil
                       ((endpoint :initarg :endpoint :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-http-data-source-config-endpoint :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (authorization-config :initarg :authorization-config
                         :initform common-lisp:nil :type
                         (common-lisp:or authorization-config common-lisp:null)
                         :accessor
                         struct-shape-http-data-source-config-authorization-config
                         :shape "AuthorizationConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-http-data-source-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'http-data-source-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'http-data-source-config 'make-http-data-source-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          http-data-source-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          http-data-source-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorization-config))
      (common-lisp:list
       (common-lisp:cons "authorizationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          http-data-source-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition internal-failure-exception
     (appsync-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-failure-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-failure-exception
                    'internal-failure-exception-message)))
(common-lisp:progn
 (common-lisp:defclass lambda-authorizer-config common-lisp:nil
                       ((authorizer-result-ttl-in-seconds :initarg
                         :authorizer-result-ttl-in-seconds :initform
                         common-lisp:nil :type
                         (common-lisp:or ttl common-lisp:null) :accessor
                         struct-shape-lambda-authorizer-config-authorizer-result-ttl-in-seconds
                         :shape "TTL" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (authorizer-uri :initarg :authorizer-uri :initform
                         (common-lisp:error ":authorizeruri is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-lambda-authorizer-config-authorizer-uri
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identity-validation-expression :initarg
                         :identity-validation-expression :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-lambda-authorizer-config-identity-validation-expression
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-lambda-authorizer-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'lambda-authorizer-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'lambda-authorizer-config 'make-lambda-authorizer-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lambda-authorizer-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lambda-authorizer-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorizer-result-ttl-in-seconds))
      (common-lisp:list
       (common-lisp:cons "authorizerResultTtlInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authorizer-uri))
      (common-lisp:list
       (common-lisp:cons "authorizerUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-validation-expression))
      (common-lisp:list
       (common-lisp:cons "identityValidationExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lambda-authorizer-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lambda-conflict-handler-config common-lisp:nil
                       ((lambda-conflict-handler-arn :initarg
                         :lambda-conflict-handler-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-lambda-conflict-handler-config-lambda-conflict-handler-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-lambda-conflict-handler-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'lambda-conflict-handler-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'lambda-conflict-handler-config
                    'make-lambda-conflict-handler-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lambda-conflict-handler-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lambda-conflict-handler-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-conflict-handler-arn))
      (common-lisp:list
       (common-lisp:cons "lambdaConflictHandlerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lambda-conflict-handler-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lambda-data-source-config common-lisp:nil
                       ((lambda-function-arn :initarg :lambda-function-arn
                         :initform
                         (common-lisp:error ":lambdafunctionarn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-lambda-data-source-config-lambda-function-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-lambda-data-source-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'lambda-data-source-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'lambda-data-source-config
                    'make-lambda-data-source-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lambda-data-source-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lambda-data-source-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-function-arn))
      (common-lisp:list
       (common-lisp:cons "lambdaFunctionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lambda-data-source-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (appsync-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass list-api-keys-request common-lisp:nil
                       ((api-id :initarg :api-id :initform
                         (common-lisp:error ":apiid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-api-keys-request-api-id :shape
                         "String" :location "uri" :location-name "apiId")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-api-keys-request-next-token :shape
                         "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-api-keys-request-max-results :shape
                         "MaxResults" :location "querystring" :location-name
                         "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-api-keys-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-api-keys-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-api-keys-request 'make-list-api-keys-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-api-keys-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-api-keys-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-api-keys-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-api-keys-response common-lisp:nil
                       ((api-keys :initarg :api-keys :initform common-lisp:nil
                         :type (common-lisp:or api-keys common-lisp:null)
                         :accessor struct-shape-list-api-keys-response-api-keys
                         :shape "ApiKeys" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-api-keys-response-next-token :shape
                         "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-api-keys-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-api-keys-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-api-keys-response 'make-list-api-keys-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-api-keys-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-api-keys-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-keys))
      (common-lisp:list
       (common-lisp:cons "apiKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-api-keys-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-data-sources-request common-lisp:nil
                       ((api-id :initarg :api-id :initform
                         (common-lisp:error ":apiid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-data-sources-request-api-id :shape
                         "String" :location "uri" :location-name "apiId")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-data-sources-request-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-data-sources-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-data-sources-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-data-sources-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-data-sources-request
                    'make-list-data-sources-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-data-sources-response common-lisp:nil
                       ((data-sources :initarg :data-sources :initform
                         common-lisp:nil :type
                         (common-lisp:or data-sources common-lisp:null)
                         :accessor
                         struct-shape-list-data-sources-response-data-sources
                         :shape "DataSources" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-data-sources-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-data-sources-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-data-sources-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-data-sources-response
                    'make-list-data-sources-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-sources))
      (common-lisp:list
       (common-lisp:cons "dataSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-domain-names-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-domain-names-request-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-domain-names-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-domain-names-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-domain-names-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-domain-names-request
                    'make-list-domain-names-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-domain-names-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-domain-names-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-domain-names-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-domain-names-response common-lisp:nil
                       ((domain-name-configs :initarg :domain-name-configs
                         :initform common-lisp:nil :type
                         (common-lisp:or domain-name-configs common-lisp:null)
                         :accessor
                         struct-shape-list-domain-names-response-domain-name-configs
                         :shape "DomainNameConfigs" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-domain-names-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-domain-names-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-domain-names-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-domain-names-response
                    'make-list-domain-names-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-domain-names-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-domain-names-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name-configs))
      (common-lisp:list
       (common-lisp:cons "domainNameConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-domain-names-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-functions-request common-lisp:nil
                       ((api-id :initarg :api-id :initform
                         (common-lisp:error ":apiid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-functions-request-api-id :shape
                         "String" :location "uri" :location-name "apiId")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-functions-request-next-token :shape
                         "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-functions-request-max-results :shape
                         "MaxResults" :location "querystring" :location-name
                         "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-functions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-functions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-functions-request 'make-list-functions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-functions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-functions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-functions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-functions-response common-lisp:nil
                       ((functions :initarg :functions :initform
                         common-lisp:nil :type
                         (common-lisp:or functions common-lisp:null) :accessor
                         struct-shape-list-functions-response-functions :shape
                         "Functions" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-functions-response-next-token :shape
                         "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-functions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-functions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-functions-response 'make-list-functions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-functions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-functions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'functions))
      (common-lisp:list
       (common-lisp:cons "functions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-functions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-graphql-apis-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-graphql-apis-request-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-graphql-apis-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (api-type :initarg :api-type :initform common-lisp:nil
                         :type
                         (common-lisp:or graph-qlapi-type common-lisp:null)
                         :accessor
                         struct-shape-list-graphql-apis-request-api-type :shape
                         "GraphQLApiType" :location "querystring"
                         :location-name "apiType")
                        (owner :initarg :owner :initform common-lisp:nil :type
                         (common-lisp:or ownership common-lisp:null) :accessor
                         struct-shape-list-graphql-apis-request-owner :shape
                         "Ownership" :location "querystring" :location-name
                         "owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-graphql-apis-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-graphql-apis-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-graphql-apis-request
                    'make-list-graphql-apis-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-graphql-apis-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-graphql-apis-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-graphql-apis-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-graphql-apis-response common-lisp:nil
                       ((graphql-apis :initarg :graphql-apis :initform
                         common-lisp:nil :type
                         (common-lisp:or graphql-apis common-lisp:null)
                         :accessor
                         struct-shape-list-graphql-apis-response-graphql-apis
                         :shape "GraphqlApis" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-graphql-apis-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-graphql-apis-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-graphql-apis-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-graphql-apis-response
                    'make-list-graphql-apis-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-graphql-apis-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-graphql-apis-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'graphql-apis))
      (common-lisp:list
       (common-lisp:cons "graphqlApis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-graphql-apis-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-resolvers-by-function-request common-lisp:nil
                       ((api-id :initarg :api-id :initform
                         (common-lisp:error ":apiid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-resolvers-by-function-request-api-id
                         :shape "String" :location "uri" :location-name
                         "apiId")
                        (function-id :initarg :function-id :initform
                         (common-lisp:error ":functionid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-resolvers-by-function-request-function-id
                         :shape "String" :location "uri" :location-name
                         "functionId")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-resolvers-by-function-request-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-resolvers-by-function-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-resolvers-by-function-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-resolvers-by-function-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-resolvers-by-function-request
                    'make-list-resolvers-by-function-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resolvers-by-function-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resolvers-by-function-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resolvers-by-function-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-resolvers-by-function-response common-lisp:nil
                       ((resolvers :initarg :resolvers :initform
                         common-lisp:nil :type
                         (common-lisp:or resolvers common-lisp:null) :accessor
                         struct-shape-list-resolvers-by-function-response-resolvers
                         :shape "Resolvers" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-resolvers-by-function-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-resolvers-by-function-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-resolvers-by-function-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-resolvers-by-function-response
                    'make-list-resolvers-by-function-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resolvers-by-function-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resolvers-by-function-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolvers))
      (common-lisp:list
       (common-lisp:cons "resolvers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resolvers-by-function-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-resolvers-request common-lisp:nil
                       ((api-id :initarg :api-id :initform
                         (common-lisp:error ":apiid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-resolvers-request-api-id :shape
                         "String" :location "uri" :location-name "apiId")
                        (type-name :initarg :type-name :initform
                         (common-lisp:error ":typename is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-resolvers-request-type-name :shape
                         "String" :location "uri" :location-name "typeName")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-resolvers-request-next-token :shape
                         "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-resolvers-request-max-results :shape
                         "MaxResults" :location "querystring" :location-name
                         "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-resolvers-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-resolvers-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-resolvers-request 'make-list-resolvers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resolvers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resolvers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resolvers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-resolvers-response common-lisp:nil
                       ((resolvers :initarg :resolvers :initform
                         common-lisp:nil :type
                         (common-lisp:or resolvers common-lisp:null) :accessor
                         struct-shape-list-resolvers-response-resolvers :shape
                         "Resolvers" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-resolvers-response-next-token :shape
                         "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-resolvers-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-resolvers-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-resolvers-response 'make-list-resolvers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resolvers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resolvers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolvers))
      (common-lisp:list
       (common-lisp:cons "resolvers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resolvers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-source-api-associations-request common-lisp:nil
                       ((api-id :initarg :api-id :initform
                         (common-lisp:error ":apiid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-source-api-associations-request-api-id
                         :shape "String" :location "uri" :location-name
                         "apiId")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-source-api-associations-request-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-source-api-associations-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-source-api-associations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-source-api-associations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-source-api-associations-request
                    'make-list-source-api-associations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-source-api-associations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-source-api-associations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-source-api-associations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-source-api-associations-response common-lisp:nil
                       ((source-api-association-summaries :initarg
                         :source-api-association-summaries :initform
                         common-lisp:nil :type
                         (common-lisp:or source-api-association-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-source-api-associations-response-source-api-association-summaries
                         :shape "SourceApiAssociationSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-source-api-associations-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-source-api-associations-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-source-api-associations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-source-api-associations-response
                    'make-list-source-api-associations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-source-api-associations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-source-api-associations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-api-association-summaries))
      (common-lisp:list
       (common-lisp:cons "sourceApiAssociationSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-source-api-associations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-list-tags-for-resource-request-resource-arn
                         :shape "ResourceArn" :location "uri" :location-name
                         "resourceArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-types-by-association-request common-lisp:nil
                       ((merged-api-identifier :initarg :merged-api-identifier
                         :initform
                         (common-lisp:error ":mergedapiidentifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-list-types-by-association-request-merged-api-identifier
                         :shape "String" :location "uri" :location-name
                         "mergedApiIdentifier")
                        (association-id :initarg :association-id :initform
                         (common-lisp:error ":associationid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-types-by-association-request-association-id
                         :shape "String" :location "uri" :location-name
                         "associationId")
                        (format :initarg :format :initform
                         (common-lisp:error ":format is required") :type
                         (common-lisp:or type-definition-format
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-types-by-association-request-format
                         :shape "TypeDefinitionFormat" :location "querystring"
                         :location-name "format")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-types-by-association-request-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-types-by-association-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-types-by-association-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-types-by-association-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-types-by-association-request
                    'make-list-types-by-association-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-types-by-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-types-by-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-types-by-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-types-by-association-response common-lisp:nil
                       ((types :initarg :types :initform common-lisp:nil :type
                         (common-lisp:or type-list common-lisp:null) :accessor
                         struct-shape-list-types-by-association-response-types
                         :shape "TypeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-types-by-association-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-types-by-association-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-types-by-association-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-types-by-association-response
                    'make-list-types-by-association-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-types-by-association-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-types-by-association-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'types))
      (common-lisp:list
       (common-lisp:cons "types"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-types-by-association-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-types-request common-lisp:nil
                       ((api-id :initarg :api-id :initform
                         (common-lisp:error ":apiid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-types-request-api-id :shape "String"
                         :location "uri" :location-name "apiId")
                        (format :initarg :format :initform
                         (common-lisp:error ":format is required") :type
                         (common-lisp:or type-definition-format
                                         common-lisp:null)
                         :accessor struct-shape-list-types-request-format
                         :shape "TypeDefinitionFormat" :location "querystring"
                         :location-name "format")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor struct-shape-list-types-request-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor struct-shape-list-types-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-types-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-types-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-types-request 'make-list-types-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-types-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-types-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-types-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-types-response common-lisp:nil
                       ((types :initarg :types :initform common-lisp:nil :type
                         (common-lisp:or type-list common-lisp:null) :accessor
                         struct-shape-list-types-response-types :shape
                         "TypeList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor struct-shape-list-types-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-types-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-types-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-types-response 'make-list-types-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-types-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-types-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'types))
      (common-lisp:list
       (common-lisp:cons "types"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-types-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass log-config common-lisp:nil
                       ((field-log-level :initarg :field-log-level :initform
                         (common-lisp:error ":fieldloglevel is required") :type
                         (common-lisp:or field-log-level common-lisp:null)
                         :accessor struct-shape-log-config-field-log-level
                         :shape "FieldLogLevel" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cloud-watch-logs-role-arn :initarg
                         :cloud-watch-logs-role-arn :initform
                         (common-lisp:error
                          ":cloudwatchlogsrolearn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-log-config-cloud-watch-logs-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (exclude-verbose-content :initarg
                         :exclude-verbose-content :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-log-config-exclude-verbose-content :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-log-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'log-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'log-config 'make-log-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input log-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input log-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-log-level))
      (common-lisp:list
       (common-lisp:cons "fieldLogLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logs-role-arn))
      (common-lisp:list
       (common-lisp:cons "cloudWatchLogsRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'exclude-verbose-content))
      (common-lisp:list
       (common-lisp:cons "excludeVerboseContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input log-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype logs () '(trivial-types:proper-list string))
 (common-lisp:defun make-logs
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype map-of-string-to-string () 'common-lisp:hash-table)
 (common-lisp:defun make-map-of-string-to-string
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype mapping-template () 'common-lisp:string)
(common-lisp:deftype max-batch-size () 'common-lisp:integer)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype merge-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition not-found-exception
     (appsync-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'not-found-exception 'not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defclass open-idconnect-config common-lisp:nil
                       ((issuer :initarg :issuer :initform
                         (common-lisp:error ":issuer is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-open-idconnect-config-issuer :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (client-id :initarg :client-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-open-idconnect-config-client-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (iat-ttl :initarg :iat-ttl :initform common-lisp:nil
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-open-idconnect-config-iat-ttl :shape
                         "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (auth-ttl :initarg :auth-ttl :initform common-lisp:nil
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-open-idconnect-config-auth-ttl :shape
                         "Long" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-open-idconnect-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'open-idconnect-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'open-idconnect-config 'make-open-idconnect-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          open-idconnect-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          open-idconnect-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issuer))
      (common-lisp:list
       (common-lisp:cons "issuer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "clientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iat-ttl))
      (common-lisp:list
       (common-lisp:cons "iatTTL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-ttl))
      (common-lisp:list
       (common-lisp:cons "authTTL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          open-idconnect-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass open-search-service-data-source-config common-lisp:nil
                       ((endpoint :initarg :endpoint :initform
                         (common-lisp:error ":endpoint is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-open-search-service-data-source-config-endpoint
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aws-region :initarg :aws-region :initform
                         (common-lisp:error ":awsregion is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-open-search-service-data-source-config-aws-region
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-open-search-service-data-source-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'open-search-service-data-source-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'open-search-service-data-source-config
                    'make-open-search-service-data-source-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          open-search-service-data-source-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          open-search-service-data-source-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-region))
      (common-lisp:list
       (common-lisp:cons "awsRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          open-search-service-data-source-config))
   common-lisp:nil))
(common-lisp:deftype operation-level-metrics-config () 'common-lisp:string)
(common-lisp:deftype output-type () 'common-lisp:string)
(common-lisp:deftype ownership () 'common-lisp:string)
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass pipeline-config common-lisp:nil
                       ((functions :initarg :functions :initform
                         common-lisp:nil :type
                         (common-lisp:or functions-ids common-lisp:null)
                         :accessor struct-shape-pipeline-config-functions
                         :shape "FunctionsIds" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-pipeline-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'pipeline-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'pipeline-config 'make-pipeline-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pipeline-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pipeline-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'functions))
      (common-lisp:list
       (common-lisp:cons "functions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pipeline-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-graphql-api-environment-variables-request
                       common-lisp:nil
                       ((api-id :initarg :api-id :initform
                         (common-lisp:error ":apiid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-put-graphql-api-environment-variables-request-api-id
                         :shape "String" :location "uri" :location-name
                         "apiId")
                        (environment-variables :initarg :environment-variables
                         :initform
                         (common-lisp:error
                          ":environmentvariables is required")
                         :type
                         (common-lisp:or environment-variable-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-graphql-api-environment-variables-request-environment-variables
                         :shape "EnvironmentVariableMap" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-graphql-api-environment-variables-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-graphql-api-environment-variables-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-graphql-api-environment-variables-request
                    'make-put-graphql-api-environment-variables-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-graphql-api-environment-variables-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-graphql-api-environment-variables-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-variables))
      (common-lisp:list
       (common-lisp:cons "environmentVariables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-graphql-api-environment-variables-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-graphql-api-environment-variables-response
                       common-lisp:nil
                       ((environment-variables :initarg :environment-variables
                         :initform common-lisp:nil :type
                         (common-lisp:or environment-variable-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-graphql-api-environment-variables-response-environment-variables
                         :shape "EnvironmentVariableMap" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-graphql-api-environment-variables-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-graphql-api-environment-variables-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-graphql-api-environment-variables-response
                    'make-put-graphql-api-environment-variables-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-graphql-api-environment-variables-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-graphql-api-environment-variables-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-variables))
      (common-lisp:list
       (common-lisp:cons "environmentVariables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-graphql-api-environment-variables-response))
   common-lisp:nil))
(common-lisp:deftype query-depth-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass rds-data-api-config common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or rds-data-api-config-resource-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-rds-data-api-config-resource-arn :shape
                         "RdsDataApiConfigResourceArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (secret-arn :initarg :secret-arn :initform
                         (common-lisp:error ":secretarn is required") :type
                         (common-lisp:or rds-data-api-config-secret-arn
                                         common-lisp:null)
                         :accessor struct-shape-rds-data-api-config-secret-arn
                         :shape "RdsDataApiConfigSecretArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":databasename is required") :type
                         (common-lisp:or rds-data-api-config-database-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-rds-data-api-config-database-name :shape
                         "RdsDataApiConfigDatabaseName" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rds-data-api-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'rds-data-api-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'rds-data-api-config 'make-rds-data-api-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rds-data-api-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rds-data-api-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "secretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "databaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rds-data-api-config))
   common-lisp:nil))
(common-lisp:deftype rds-data-api-config-database-name () 'common-lisp:string)
(common-lisp:deftype rds-data-api-config-resource-arn () 'common-lisp:string)
(common-lisp:deftype rds-data-api-config-secret-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass rds-http-endpoint-config common-lisp:nil
                       ((aws-region :initarg :aws-region :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-rds-http-endpoint-config-aws-region
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (db-cluster-identifier :initarg :db-cluster-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-rds-http-endpoint-config-db-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-rds-http-endpoint-config-database-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema :initarg :schema :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-rds-http-endpoint-config-schema
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aws-secret-store-arn :initarg :aws-secret-store-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-rds-http-endpoint-config-aws-secret-store-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rds-http-endpoint-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'rds-http-endpoint-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'rds-http-endpoint-config 'make-rds-http-endpoint-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rds-http-endpoint-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rds-http-endpoint-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-region))
      (common-lisp:list
       (common-lisp:cons "awsRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'db-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "dbClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "databaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema))
      (common-lisp:list
       (common-lisp:cons "schema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-secret-store-arn))
      (common-lisp:list
       (common-lisp:cons "awsSecretStoreArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rds-http-endpoint-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass relational-database-data-source-config common-lisp:nil
                       ((relational-database-source-type :initarg
                         :relational-database-source-type :initform
                         common-lisp:nil :type
                         (common-lisp:or relational-database-source-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-relational-database-data-source-config-relational-database-source-type
                         :shape "RelationalDatabaseSourceType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (rds-http-endpoint-config :initarg
                         :rds-http-endpoint-config :initform common-lisp:nil
                         :type
                         (common-lisp:or rds-http-endpoint-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-relational-database-data-source-config-rds-http-endpoint-config
                         :shape "RdsHttpEndpointConfig" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-relational-database-data-source-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'relational-database-data-source-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'relational-database-data-source-config
                    'make-relational-database-data-source-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          relational-database-data-source-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          relational-database-data-source-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-source-type))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseSourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rds-http-endpoint-config))
      (common-lisp:list
       (common-lisp:cons "rdsHttpEndpointConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          relational-database-data-source-config))
   common-lisp:nil))
(common-lisp:deftype relational-database-source-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass resolver common-lisp:nil
                       ((type-name :initarg :type-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-resolver-type-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (field-name :initarg :field-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-resolver-field-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-source-name :initarg :data-source-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-resolver-data-source-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resolver-arn :initarg :resolver-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-resolver-resolver-arn :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (request-mapping-template :initarg
                         :request-mapping-template :initform common-lisp:nil
                         :type
                         (common-lisp:or mapping-template common-lisp:null)
                         :accessor
                         struct-shape-resolver-request-mapping-template :shape
                         "MappingTemplate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (response-mapping-template :initarg
                         :response-mapping-template :initform common-lisp:nil
                         :type
                         (common-lisp:or mapping-template common-lisp:null)
                         :accessor
                         struct-shape-resolver-response-mapping-template :shape
                         "MappingTemplate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kind :initarg :kind :initform common-lisp:nil :type
                         (common-lisp:or resolver-kind common-lisp:null)
                         :accessor struct-shape-resolver-kind :shape
                         "ResolverKind" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pipeline-config :initarg :pipeline-config :initform
                         common-lisp:nil :type
                         (common-lisp:or pipeline-config common-lisp:null)
                         :accessor struct-shape-resolver-pipeline-config :shape
                         "PipelineConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sync-config :initarg :sync-config :initform
                         common-lisp:nil :type
                         (common-lisp:or sync-config common-lisp:null)
                         :accessor struct-shape-resolver-sync-config :shape
                         "SyncConfig" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (caching-config :initarg :caching-config :initform
                         common-lisp:nil :type
                         (common-lisp:or caching-config common-lisp:null)
                         :accessor struct-shape-resolver-caching-config :shape
                         "CachingConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-batch-size :initarg :max-batch-size :initform
                         common-lisp:nil :type
                         (common-lisp:or max-batch-size common-lisp:null)
                         :accessor struct-shape-resolver-max-batch-size :shape
                         "MaxBatchSize" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (runtime :initarg :runtime :initform common-lisp:nil
                         :type
                         (common-lisp:or app-sync-runtime common-lisp:null)
                         :accessor struct-shape-resolver-runtime :shape
                         "AppSyncRuntime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (code :initarg :code :initform common-lisp:nil :type
                         (common-lisp:or code common-lisp:null) :accessor
                         struct-shape-resolver-code :shape "Code" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (metrics-config :initarg :metrics-config :initform
                         common-lisp:nil :type
                         (common-lisp:or resolver-level-metrics-config
                                         common-lisp:null)
                         :accessor struct-shape-resolver-metrics-config :shape
                         "ResolverLevelMetricsConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resolver
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resolver
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'resolver 'make-resolver))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resolver))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resolver))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-name))
      (common-lisp:list
       (common-lisp:cons "typeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-name))
      (common-lisp:list
       (common-lisp:cons "fieldName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-name))
      (common-lisp:list
       (common-lisp:cons "dataSourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolver-arn))
      (common-lisp:list
       (common-lisp:cons "resolverArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'request-mapping-template))
      (common-lisp:list
       (common-lisp:cons "requestMappingTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'response-mapping-template))
      (common-lisp:list
       (common-lisp:cons "responseMappingTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kind))
      (common-lisp:list
       (common-lisp:cons "kind"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-config))
      (common-lisp:list
       (common-lisp:cons "pipelineConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-config))
      (common-lisp:list
       (common-lisp:cons "syncConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'caching-config))
      (common-lisp:list
       (common-lisp:cons "cachingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-batch-size))
      (common-lisp:list
       (common-lisp:cons "maxBatchSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime))
      (common-lisp:list
       (common-lisp:cons "runtime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics-config))
      (common-lisp:list
       (common-lisp:cons "metricsConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resolver))
   common-lisp:nil))
(common-lisp:deftype resolver-count-limit () 'common-lisp:integer)
(common-lisp:deftype resolver-kind () 'common-lisp:string)
(common-lisp:deftype resolver-level-metrics-behavior () 'common-lisp:string)
(common-lisp:deftype resolver-level-metrics-config () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resolvers () '(trivial-types:proper-list resolver))
 (common-lisp:defun make-resolvers
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resolver))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:deftype resource-name () 'common-lisp:string)
(common-lisp:deftype runtime-name () 'common-lisp:string)
(common-lisp:deftype schema-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass source-api-association common-lisp:nil
                       ((association-id :initarg :association-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-source-api-association-association-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (association-arn :initarg :association-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-source-api-association-association-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-api-id :initarg :source-api-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-source-api-association-source-api-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-api-arn :initarg :source-api-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-source-api-association-source-api-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (merged-api-arn :initarg :merged-api-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-source-api-association-merged-api-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (merged-api-id :initarg :merged-api-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-source-api-association-merged-api-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-source-api-association-description :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source-api-association-config :initarg
                         :source-api-association-config :initform
                         common-lisp:nil :type
                         (common-lisp:or source-api-association-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-source-api-association-source-api-association-config
                         :shape "SourceApiAssociationConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (source-api-association-status :initarg
                         :source-api-association-status :initform
                         common-lisp:nil :type
                         (common-lisp:or source-api-association-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-source-api-association-source-api-association-status
                         :shape "SourceApiAssociationStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (source-api-association-status-detail :initarg
                         :source-api-association-status-detail :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-source-api-association-source-api-association-status-detail
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-successful-merge-date :initarg
                         :last-successful-merge-date :initform common-lisp:nil
                         :type (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-source-api-association-last-successful-merge-date
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-source-api-association
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'source-api-association
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'source-api-association 'make-source-api-association))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          source-api-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          source-api-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "associationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-arn))
      (common-lisp:list
       (common-lisp:cons "associationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-api-id))
      (common-lisp:list
       (common-lisp:cons "sourceApiId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-api-arn))
      (common-lisp:list
       (common-lisp:cons "sourceApiArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'merged-api-arn))
      (common-lisp:list
       (common-lisp:cons "mergedApiArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'merged-api-id))
      (common-lisp:list
       (common-lisp:cons "mergedApiId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-api-association-config))
      (common-lisp:list
       (common-lisp:cons "sourceApiAssociationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-api-association-status))
      (common-lisp:list
       (common-lisp:cons "sourceApiAssociationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-api-association-status-detail))
      (common-lisp:list
       (common-lisp:cons "sourceApiAssociationStatusDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-successful-merge-date))
      (common-lisp:list
       (common-lisp:cons "lastSuccessfulMergeDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          source-api-association))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass source-api-association-config common-lisp:nil
                       ((merge-type :initarg :merge-type :initform
                         common-lisp:nil :type
                         (common-lisp:or merge-type common-lisp:null) :accessor
                         struct-shape-source-api-association-config-merge-type
                         :shape "MergeType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-source-api-association-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'source-api-association-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'source-api-association-config
                    'make-source-api-association-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          source-api-association-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          source-api-association-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'merge-type))
      (common-lisp:list
       (common-lisp:cons "mergeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          source-api-association-config))
   common-lisp:nil))
(common-lisp:deftype source-api-association-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass source-api-association-summary common-lisp:nil
                       ((association-id :initarg :association-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-source-api-association-summary-association-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (association-arn :initarg :association-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-source-api-association-summary-association-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-api-id :initarg :source-api-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-source-api-association-summary-source-api-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-api-arn :initarg :source-api-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-source-api-association-summary-source-api-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (merged-api-id :initarg :merged-api-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-source-api-association-summary-merged-api-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (merged-api-arn :initarg :merged-api-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-source-api-association-summary-merged-api-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-source-api-association-summary-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-source-api-association-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'source-api-association-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'source-api-association-summary
                    'make-source-api-association-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          source-api-association-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          source-api-association-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "associationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-arn))
      (common-lisp:list
       (common-lisp:cons "associationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-api-id))
      (common-lisp:list
       (common-lisp:cons "sourceApiId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-api-arn))
      (common-lisp:list
       (common-lisp:cons "sourceApiArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'merged-api-id))
      (common-lisp:list
       (common-lisp:cons "mergedApiId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'merged-api-arn))
      (common-lisp:list
       (common-lisp:cons "mergedApiArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          source-api-association-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype source-api-association-summary-list ()
   '(trivial-types:proper-list source-api-association-summary))
 (common-lisp:defun make-source-api-association-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            source-api-association-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass start-data-source-introspection-request common-lisp:nil
                       ((rds-data-api-config :initarg :rds-data-api-config
                         :initform common-lisp:nil :type
                         (common-lisp:or rds-data-api-config common-lisp:null)
                         :accessor
                         struct-shape-start-data-source-introspection-request-rds-data-api-config
                         :shape "RdsDataApiConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-data-source-introspection-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-data-source-introspection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-data-source-introspection-request
                    'make-start-data-source-introspection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-data-source-introspection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-data-source-introspection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rds-data-api-config))
      (common-lisp:list
       (common-lisp:cons "rdsDataApiConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-data-source-introspection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-data-source-introspection-response common-lisp:nil
                       ((introspection-id :initarg :introspection-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-data-source-introspection-response-introspection-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (introspection-status :initarg :introspection-status
                         :initform common-lisp:nil :type
                         (common-lisp:or data-source-introspection-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-data-source-introspection-response-introspection-status
                         :shape "DataSourceIntrospectionStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (introspection-status-detail :initarg
                         :introspection-status-detail :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-start-data-source-introspection-response-introspection-status-detail
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-data-source-introspection-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-data-source-introspection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-data-source-introspection-response
                    'make-start-data-source-introspection-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-data-source-introspection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-data-source-introspection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'introspection-id))
      (common-lisp:list
       (common-lisp:cons "introspectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'introspection-status))
      (common-lisp:list
       (common-lisp:cons "introspectionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'introspection-status-detail))
      (common-lisp:list
       (common-lisp:cons "introspectionStatusDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-data-source-introspection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-schema-creation-request common-lisp:nil
                       ((api-id :initarg :api-id :initform
                         (common-lisp:error ":apiid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-schema-creation-request-api-id
                         :shape "String" :location "uri" :location-name
                         "apiId")
                        (definition :initarg :definition :initform
                         (common-lisp:error ":definition is required") :type
                         (common-lisp:or blob common-lisp:null) :accessor
                         struct-shape-start-schema-creation-request-definition
                         :shape "Blob" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-schema-creation-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-schema-creation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-schema-creation-request
                    'make-start-schema-creation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-schema-creation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-schema-creation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-schema-creation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-schema-creation-response common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or schema-status common-lisp:null)
                         :accessor
                         struct-shape-start-schema-creation-response-status
                         :shape "SchemaStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-schema-creation-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-schema-creation-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-schema-creation-response
                    'make-start-schema-creation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-schema-creation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-schema-creation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-schema-creation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-schema-merge-request common-lisp:nil
                       ((association-id :initarg :association-id :initform
                         (common-lisp:error ":associationid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-schema-merge-request-association-id
                         :shape "String" :location "uri" :location-name
                         "associationId")
                        (merged-api-identifier :initarg :merged-api-identifier
                         :initform
                         (common-lisp:error ":mergedapiidentifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-start-schema-merge-request-merged-api-identifier
                         :shape "String" :location "uri" :location-name
                         "mergedApiIdentifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-schema-merge-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-schema-merge-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-schema-merge-request
                    'make-start-schema-merge-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-schema-merge-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-schema-merge-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-schema-merge-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-schema-merge-response common-lisp:nil
                       ((source-api-association-status :initarg
                         :source-api-association-status :initform
                         common-lisp:nil :type
                         (common-lisp:or source-api-association-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-schema-merge-response-source-api-association-status
                         :shape "SourceApiAssociationStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-schema-merge-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-schema-merge-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-schema-merge-response
                    'make-start-schema-merge-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-schema-merge-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-schema-merge-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-api-association-status))
      (common-lisp:list
       (common-lisp:cons "sourceApiAssociationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-schema-merge-response))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass sync-config common-lisp:nil
                       ((conflict-handler :initarg :conflict-handler :initform
                         common-lisp:nil :type
                         (common-lisp:or conflict-handler-type
                                         common-lisp:null)
                         :accessor struct-shape-sync-config-conflict-handler
                         :shape "ConflictHandlerType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (conflict-detection :initarg :conflict-detection
                         :initform common-lisp:nil :type
                         (common-lisp:or conflict-detection-type
                                         common-lisp:null)
                         :accessor struct-shape-sync-config-conflict-detection
                         :shape "ConflictDetectionType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (lambda-conflict-handler-config :initarg
                         :lambda-conflict-handler-config :initform
                         common-lisp:nil :type
                         (common-lisp:or lambda-conflict-handler-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-sync-config-lambda-conflict-handler-config
                         :shape "LambdaConflictHandlerConfig" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sync-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sync-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'sync-config 'make-sync-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sync-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sync-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conflict-handler))
      (common-lisp:list
       (common-lisp:cons "conflictHandler"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conflict-detection))
      (common-lisp:list
       (common-lisp:cons "conflictDetection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-conflict-handler-config))
      (common-lisp:list
       (common-lisp:cons "lambdaConflictHandlerConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sync-config))
   common-lisp:nil))
(common-lisp:deftype ttl () 'common-lisp:integer)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun make-tag-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "ResourceArn" :location "uri" :location-name
                         "resourceArn")
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape "TagMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype template () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass type common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-type-name :shape "ResourceName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-type-description :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-type-arn :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (definition :initarg :definition :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-type-definition :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (format :initarg :format :initform common-lisp:nil
                         :type
                         (common-lisp:or type-definition-format
                                         common-lisp:null)
                         :accessor struct-shape-type-format :shape
                         "TypeDefinitionFormat" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-type (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'type
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'type 'make-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input type))
   common-lisp:nil))
(common-lisp:deftype type-definition-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype type-list () '(trivial-types:proper-list type))
 (common-lisp:defun make-type-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition unauthorized-exception
     (appsync-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unauthorized-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unauthorized-exception 'unauthorized-exception-message)))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "ResourceArn" :location "uri" :location-name
                         "resourceArn")
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tagkeys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-untag-resource-request-tag-keys
                         :shape "TagKeyList" :location "querystring"
                         :location-name "tagKeys"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-api-cache-request common-lisp:nil
                       ((api-id :initarg :api-id :initform
                         (common-lisp:error ":apiid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-api-cache-request-api-id :shape
                         "String" :location "uri" :location-name "apiId")
                        (ttl :initarg :ttl :initform
                         (common-lisp:error ":ttl is required") :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-update-api-cache-request-ttl :shape
                         "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (api-caching-behavior :initarg :api-caching-behavior
                         :initform
                         (common-lisp:error ":apicachingbehavior is required")
                         :type
                         (common-lisp:or api-caching-behavior common-lisp:null)
                         :accessor
                         struct-shape-update-api-cache-request-api-caching-behavior
                         :shape "ApiCachingBehavior" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or api-cache-type common-lisp:null)
                         :accessor struct-shape-update-api-cache-request-type
                         :shape "ApiCacheType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (health-metrics-config :initarg :health-metrics-config
                         :initform common-lisp:nil :type
                         (common-lisp:or cache-health-metrics-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-api-cache-request-health-metrics-config
                         :shape "CacheHealthMetricsConfig" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-api-cache-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-api-cache-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-api-cache-request 'make-update-api-cache-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-api-cache-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-api-cache-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ttl))
      (common-lisp:list
       (common-lisp:cons "ttl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'api-caching-behavior))
      (common-lisp:list
       (common-lisp:cons "apiCachingBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-metrics-config))
      (common-lisp:list
       (common-lisp:cons "healthMetricsConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-api-cache-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-api-cache-response common-lisp:nil
                       ((api-cache :initarg :api-cache :initform
                         common-lisp:nil :type
                         (common-lisp:or api-cache common-lisp:null) :accessor
                         struct-shape-update-api-cache-response-api-cache
                         :shape "ApiCache" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-api-cache-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-api-cache-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-api-cache-response
                    'make-update-api-cache-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-api-cache-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-api-cache-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-cache))
      (common-lisp:list
       (common-lisp:cons "apiCache"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-api-cache-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-api-key-request common-lisp:nil
                       ((api-id :initarg :api-id :initform
                         (common-lisp:error ":apiid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-api-key-request-api-id :shape
                         "String" :location "uri" :location-name "apiId")
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-api-key-request-id :shape "String"
                         :location "uri" :location-name "id")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-api-key-request-description :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (expires :initarg :expires :initform common-lisp:nil
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-update-api-key-request-expires :shape
                         "Long" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-api-key-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-api-key-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-api-key-request 'make-update-api-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-api-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-api-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires))
      (common-lisp:list
       (common-lisp:cons "expires"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-api-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-api-key-response common-lisp:nil
                       ((api-key :initarg :api-key :initform common-lisp:nil
                         :type (common-lisp:or api-key common-lisp:null)
                         :accessor struct-shape-update-api-key-response-api-key
                         :shape "ApiKey" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-api-key-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-api-key-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-api-key-response 'make-update-api-key-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-api-key-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-api-key-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-key))
      (common-lisp:list
       (common-lisp:cons "apiKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-api-key-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-data-source-request common-lisp:nil
                       ((api-id :initarg :api-id :initform
                         (common-lisp:error ":apiid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-data-source-request-api-id :shape
                         "String" :location "uri" :location-name "apiId")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-update-data-source-request-name
                         :shape "ResourceName" :location "uri" :location-name
                         "name")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-data-source-request-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or data-source-type common-lisp:null)
                         :accessor struct-shape-update-data-source-request-type
                         :shape "DataSourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-role-arn :initarg :service-role-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-data-source-request-service-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dynamodb-config :initarg :dynamodb-config :initform
                         common-lisp:nil :type
                         (common-lisp:or dynamodb-data-source-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-data-source-request-dynamodb-config
                         :shape "DynamodbDataSourceConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (lambda-config :initarg :lambda-config :initform
                         common-lisp:nil :type
                         (common-lisp:or lambda-data-source-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-data-source-request-lambda-config
                         :shape "LambdaDataSourceConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (elasticsearch-config :initarg :elasticsearch-config
                         :initform common-lisp:nil :type
                         (common-lisp:or elasticsearch-data-source-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-data-source-request-elasticsearch-config
                         :shape "ElasticsearchDataSourceConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (open-search-service-config :initarg
                         :open-search-service-config :initform common-lisp:nil
                         :type
                         (common-lisp:or open-search-service-data-source-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-data-source-request-open-search-service-config
                         :shape "OpenSearchServiceDataSourceConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (http-config :initarg :http-config :initform
                         common-lisp:nil :type
                         (common-lisp:or http-data-source-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-data-source-request-http-config
                         :shape "HttpDataSourceConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (relational-database-config :initarg
                         :relational-database-config :initform common-lisp:nil
                         :type
                         (common-lisp:or relational-database-data-source-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-data-source-request-relational-database-config
                         :shape "RelationalDatabaseDataSourceConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (event-bridge-config :initarg :event-bridge-config
                         :initform common-lisp:nil :type
                         (common-lisp:or event-bridge-data-source-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-data-source-request-event-bridge-config
                         :shape "EventBridgeDataSourceConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (metrics-config :initarg :metrics-config :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source-level-metrics-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-data-source-request-metrics-config
                         :shape "DataSourceLevelMetricsConfig" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-data-source-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-data-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-data-source-request
                    'make-update-data-source-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-role-arn))
      (common-lisp:list
       (common-lisp:cons "serviceRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dynamodb-config))
      (common-lisp:list
       (common-lisp:cons "dynamodbConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-config))
      (common-lisp:list
       (common-lisp:cons "lambdaConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elasticsearch-config))
      (common-lisp:list
       (common-lisp:cons "elasticsearchConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-search-service-config))
      (common-lisp:list
       (common-lisp:cons "openSearchServiceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-config))
      (common-lisp:list
       (common-lisp:cons "httpConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-config))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-bridge-config))
      (common-lisp:list
       (common-lisp:cons "eventBridgeConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics-config))
      (common-lisp:list
       (common-lisp:cons "metricsConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-data-source-response common-lisp:nil
                       ((data-source :initarg :data-source :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source common-lisp:null)
                         :accessor
                         struct-shape-update-data-source-response-data-source
                         :shape "DataSource" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-data-source-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-data-source-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-data-source-response
                    'make-update-data-source-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "dataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-domain-name-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domainname is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-update-domain-name-request-domain-name
                         :shape "DomainName" :location "uri" :location-name
                         "domainName")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-update-domain-name-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-domain-name-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-domain-name-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-domain-name-request
                    'make-update-domain-name-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-name-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-name-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-name-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-domain-name-response common-lisp:nil
                       ((domain-name-config :initarg :domain-name-config
                         :initform common-lisp:nil :type
                         (common-lisp:or domain-name-config common-lisp:null)
                         :accessor
                         struct-shape-update-domain-name-response-domain-name-config
                         :shape "DomainNameConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-domain-name-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-domain-name-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-domain-name-response
                    'make-update-domain-name-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-name-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-name-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name-config))
      (common-lisp:list
       (common-lisp:cons "domainNameConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-name-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-function-request common-lisp:nil
                       ((api-id :initarg :api-id :initform
                         (common-lisp:error ":apiid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-function-request-api-id :shape
                         "String" :location "uri" :location-name "apiId")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-update-function-request-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-function-request-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (function-id :initarg :function-id :initform
                         (common-lisp:error ":functionid is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-update-function-request-function-id
                         :shape "ResourceName" :location "uri" :location-name
                         "functionId")
                        (data-source-name :initarg :data-source-name :initform
                         (common-lisp:error ":datasourcename is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-update-function-request-data-source-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (request-mapping-template :initarg
                         :request-mapping-template :initform common-lisp:nil
                         :type
                         (common-lisp:or mapping-template common-lisp:null)
                         :accessor
                         struct-shape-update-function-request-request-mapping-template
                         :shape "MappingTemplate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (response-mapping-template :initarg
                         :response-mapping-template :initform common-lisp:nil
                         :type
                         (common-lisp:or mapping-template common-lisp:null)
                         :accessor
                         struct-shape-update-function-request-response-mapping-template
                         :shape "MappingTemplate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (function-version :initarg :function-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-function-request-function-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sync-config :initarg :sync-config :initform
                         common-lisp:nil :type
                         (common-lisp:or sync-config common-lisp:null)
                         :accessor
                         struct-shape-update-function-request-sync-config
                         :shape "SyncConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-batch-size :initarg :max-batch-size :initform
                         common-lisp:nil :type
                         (common-lisp:or max-batch-size common-lisp:null)
                         :accessor
                         struct-shape-update-function-request-max-batch-size
                         :shape "MaxBatchSize" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (runtime :initarg :runtime :initform common-lisp:nil
                         :type
                         (common-lisp:or app-sync-runtime common-lisp:null)
                         :accessor struct-shape-update-function-request-runtime
                         :shape "AppSyncRuntime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (code :initarg :code :initform common-lisp:nil :type
                         (common-lisp:or code common-lisp:null) :accessor
                         struct-shape-update-function-request-code :shape
                         "Code" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-function-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-function-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-function-request 'make-update-function-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-function-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-function-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-name))
      (common-lisp:list
       (common-lisp:cons "dataSourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'request-mapping-template))
      (common-lisp:list
       (common-lisp:cons "requestMappingTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'response-mapping-template))
      (common-lisp:list
       (common-lisp:cons "responseMappingTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-version))
      (common-lisp:list
       (common-lisp:cons "functionVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-config))
      (common-lisp:list
       (common-lisp:cons "syncConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-batch-size))
      (common-lisp:list
       (common-lisp:cons "maxBatchSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime))
      (common-lisp:list
       (common-lisp:cons "runtime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-function-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-function-response common-lisp:nil
                       ((function-configuration :initarg
                         :function-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or function-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-function-response-function-configuration
                         :shape "FunctionConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-function-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-function-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-function-response 'make-update-function-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-function-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-function-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'function-configuration))
      (common-lisp:list
       (common-lisp:cons "functionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-function-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-graphql-api-request common-lisp:nil
                       ((api-id :initarg :api-id :initform
                         (common-lisp:error ":apiid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-graphql-api-request-api-id :shape
                         "String" :location "uri" :location-name "apiId")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-graphql-api-request-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (log-config :initarg :log-config :initform
                         common-lisp:nil :type
                         (common-lisp:or log-config common-lisp:null) :accessor
                         struct-shape-update-graphql-api-request-log-config
                         :shape "LogConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (authentication-type :initarg :authentication-type
                         :initform common-lisp:nil :type
                         (common-lisp:or authentication-type common-lisp:null)
                         :accessor
                         struct-shape-update-graphql-api-request-authentication-type
                         :shape "AuthenticationType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-pool-config :initarg :user-pool-config :initform
                         common-lisp:nil :type
                         (common-lisp:or user-pool-config common-lisp:null)
                         :accessor
                         struct-shape-update-graphql-api-request-user-pool-config
                         :shape "UserPoolConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (open-idconnect-config :initarg :open-idconnect-config
                         :initform common-lisp:nil :type
                         (common-lisp:or open-idconnect-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-graphql-api-request-open-idconnect-config
                         :shape "OpenIDConnectConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (additional-authentication-providers :initarg
                         :additional-authentication-providers :initform
                         common-lisp:nil :type
                         (common-lisp:or additional-authentication-providers
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-graphql-api-request-additional-authentication-providers
                         :shape "AdditionalAuthenticationProviders" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (xray-enabled :initarg :xray-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-update-graphql-api-request-xray-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lambda-authorizer-config :initarg
                         :lambda-authorizer-config :initform common-lisp:nil
                         :type
                         (common-lisp:or lambda-authorizer-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-graphql-api-request-lambda-authorizer-config
                         :shape "LambdaAuthorizerConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (merged-api-execution-role-arn :initarg
                         :merged-api-execution-role-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-graphql-api-request-merged-api-execution-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owner-contact :initarg :owner-contact :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-graphql-api-request-owner-contact
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (introspection-config :initarg :introspection-config
                         :initform common-lisp:nil :type
                         (common-lisp:or graph-qlapi-introspection-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-graphql-api-request-introspection-config
                         :shape "GraphQLApiIntrospectionConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (query-depth-limit :initarg :query-depth-limit
                         :initform common-lisp:nil :type
                         (common-lisp:or query-depth-limit common-lisp:null)
                         :accessor
                         struct-shape-update-graphql-api-request-query-depth-limit
                         :shape "QueryDepthLimit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resolver-count-limit :initarg :resolver-count-limit
                         :initform common-lisp:nil :type
                         (common-lisp:or resolver-count-limit common-lisp:null)
                         :accessor
                         struct-shape-update-graphql-api-request-resolver-count-limit
                         :shape "ResolverCountLimit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enhanced-metrics-config :initarg
                         :enhanced-metrics-config :initform common-lisp:nil
                         :type
                         (common-lisp:or enhanced-metrics-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-graphql-api-request-enhanced-metrics-config
                         :shape "EnhancedMetricsConfig" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-graphql-api-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-graphql-api-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-graphql-api-request
                    'make-update-graphql-api-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-graphql-api-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-graphql-api-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-config))
      (common-lisp:list
       (common-lisp:cons "logConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication-type))
      (common-lisp:list
       (common-lisp:cons "authenticationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-config))
      (common-lisp:list
       (common-lisp:cons "userPoolConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-idconnect-config))
      (common-lisp:list
       (common-lisp:cons "openIDConnectConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-authentication-providers))
      (common-lisp:list
       (common-lisp:cons "additionalAuthenticationProviders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xray-enabled))
      (common-lisp:list
       (common-lisp:cons "xrayEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-authorizer-config))
      (common-lisp:list
       (common-lisp:cons "lambdaAuthorizerConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'merged-api-execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "mergedApiExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-contact))
      (common-lisp:list
       (common-lisp:cons "ownerContact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'introspection-config))
      (common-lisp:list
       (common-lisp:cons "introspectionConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-depth-limit))
      (common-lisp:list
       (common-lisp:cons "queryDepthLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-count-limit))
      (common-lisp:list
       (common-lisp:cons "resolverCountLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enhanced-metrics-config))
      (common-lisp:list
       (common-lisp:cons "enhancedMetricsConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-graphql-api-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-graphql-api-response common-lisp:nil
                       ((graphql-api :initarg :graphql-api :initform
                         common-lisp:nil :type
                         (common-lisp:or graphql-api common-lisp:null)
                         :accessor
                         struct-shape-update-graphql-api-response-graphql-api
                         :shape "GraphqlApi" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-graphql-api-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-graphql-api-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-graphql-api-response
                    'make-update-graphql-api-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-graphql-api-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-graphql-api-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'graphql-api))
      (common-lisp:list
       (common-lisp:cons "graphqlApi"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-graphql-api-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-resolver-request common-lisp:nil
                       ((api-id :initarg :api-id :initform
                         (common-lisp:error ":apiid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-resolver-request-api-id :shape
                         "String" :location "uri" :location-name "apiId")
                        (type-name :initarg :type-name :initform
                         (common-lisp:error ":typename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-update-resolver-request-type-name :shape
                         "ResourceName" :location "uri" :location-name
                         "typeName")
                        (field-name :initarg :field-name :initform
                         (common-lisp:error ":fieldname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-update-resolver-request-field-name :shape
                         "ResourceName" :location "uri" :location-name
                         "fieldName")
                        (data-source-name :initarg :data-source-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-update-resolver-request-data-source-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (request-mapping-template :initarg
                         :request-mapping-template :initform common-lisp:nil
                         :type
                         (common-lisp:or mapping-template common-lisp:null)
                         :accessor
                         struct-shape-update-resolver-request-request-mapping-template
                         :shape "MappingTemplate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (response-mapping-template :initarg
                         :response-mapping-template :initform common-lisp:nil
                         :type
                         (common-lisp:or mapping-template common-lisp:null)
                         :accessor
                         struct-shape-update-resolver-request-response-mapping-template
                         :shape "MappingTemplate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kind :initarg :kind :initform common-lisp:nil :type
                         (common-lisp:or resolver-kind common-lisp:null)
                         :accessor struct-shape-update-resolver-request-kind
                         :shape "ResolverKind" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pipeline-config :initarg :pipeline-config :initform
                         common-lisp:nil :type
                         (common-lisp:or pipeline-config common-lisp:null)
                         :accessor
                         struct-shape-update-resolver-request-pipeline-config
                         :shape "PipelineConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sync-config :initarg :sync-config :initform
                         common-lisp:nil :type
                         (common-lisp:or sync-config common-lisp:null)
                         :accessor
                         struct-shape-update-resolver-request-sync-config
                         :shape "SyncConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (caching-config :initarg :caching-config :initform
                         common-lisp:nil :type
                         (common-lisp:or caching-config common-lisp:null)
                         :accessor
                         struct-shape-update-resolver-request-caching-config
                         :shape "CachingConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-batch-size :initarg :max-batch-size :initform
                         common-lisp:nil :type
                         (common-lisp:or max-batch-size common-lisp:null)
                         :accessor
                         struct-shape-update-resolver-request-max-batch-size
                         :shape "MaxBatchSize" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (runtime :initarg :runtime :initform common-lisp:nil
                         :type
                         (common-lisp:or app-sync-runtime common-lisp:null)
                         :accessor struct-shape-update-resolver-request-runtime
                         :shape "AppSyncRuntime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (code :initarg :code :initform common-lisp:nil :type
                         (common-lisp:or code common-lisp:null) :accessor
                         struct-shape-update-resolver-request-code :shape
                         "Code" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (metrics-config :initarg :metrics-config :initform
                         common-lisp:nil :type
                         (common-lisp:or resolver-level-metrics-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-resolver-request-metrics-config
                         :shape "ResolverLevelMetricsConfig" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-resolver-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-resolver-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-resolver-request 'make-update-resolver-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-name))
      (common-lisp:list
       (common-lisp:cons "dataSourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'request-mapping-template))
      (common-lisp:list
       (common-lisp:cons "requestMappingTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'response-mapping-template))
      (common-lisp:list
       (common-lisp:cons "responseMappingTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kind))
      (common-lisp:list
       (common-lisp:cons "kind"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-config))
      (common-lisp:list
       (common-lisp:cons "pipelineConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-config))
      (common-lisp:list
       (common-lisp:cons "syncConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'caching-config))
      (common-lisp:list
       (common-lisp:cons "cachingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-batch-size))
      (common-lisp:list
       (common-lisp:cons "maxBatchSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime))
      (common-lisp:list
       (common-lisp:cons "runtime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics-config))
      (common-lisp:list
       (common-lisp:cons "metricsConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-resolver-response common-lisp:nil
                       ((resolver :initarg :resolver :initform common-lisp:nil
                         :type (common-lisp:or resolver common-lisp:null)
                         :accessor
                         struct-shape-update-resolver-response-resolver :shape
                         "Resolver" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-resolver-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-resolver-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-resolver-response 'make-update-resolver-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolver))
      (common-lisp:list
       (common-lisp:cons "resolver"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-source-api-association-request common-lisp:nil
                       ((association-id :initarg :association-id :initform
                         (common-lisp:error ":associationid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-source-api-association-request-association-id
                         :shape "String" :location "uri" :location-name
                         "associationId")
                        (merged-api-identifier :initarg :merged-api-identifier
                         :initform
                         (common-lisp:error ":mergedapiidentifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-update-source-api-association-request-merged-api-identifier
                         :shape "String" :location "uri" :location-name
                         "mergedApiIdentifier")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-source-api-association-request-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-api-association-config :initarg
                         :source-api-association-config :initform
                         common-lisp:nil :type
                         (common-lisp:or source-api-association-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-source-api-association-request-source-api-association-config
                         :shape "SourceApiAssociationConfig" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-source-api-association-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-source-api-association-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-source-api-association-request
                    'make-update-source-api-association-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-source-api-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-source-api-association-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-api-association-config))
      (common-lisp:list
       (common-lisp:cons "sourceApiAssociationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-source-api-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-source-api-association-response common-lisp:nil
                       ((source-api-association :initarg
                         :source-api-association :initform common-lisp:nil
                         :type
                         (common-lisp:or source-api-association
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-source-api-association-response-source-api-association
                         :shape "SourceApiAssociation" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-source-api-association-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-source-api-association-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-source-api-association-response
                    'make-update-source-api-association-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-source-api-association-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-source-api-association-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-api-association))
      (common-lisp:list
       (common-lisp:cons "sourceApiAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-source-api-association-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-type-request common-lisp:nil
                       ((api-id :initarg :api-id :initform
                         (common-lisp:error ":apiid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-type-request-api-id :shape
                         "String" :location "uri" :location-name "apiId")
                        (type-name :initarg :type-name :initform
                         (common-lisp:error ":typename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-update-type-request-type-name
                         :shape "ResourceName" :location "uri" :location-name
                         "typeName")
                        (definition :initarg :definition :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-type-request-definition :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (format :initarg :format :initform
                         (common-lisp:error ":format is required") :type
                         (common-lisp:or type-definition-format
                                         common-lisp:null)
                         :accessor struct-shape-update-type-request-format
                         :shape "TypeDefinitionFormat" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-type-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-type-request 'make-update-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-type-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-type-response common-lisp:nil
                       ((type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or type common-lisp:null) :accessor
                         struct-shape-update-type-response-type :shape "Type"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-type-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-type-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-type-response 'make-update-type-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-type-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-type-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass user-pool-config common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":userpoolid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-user-pool-config-user-pool-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (aws-region :initarg :aws-region :initform
                         (common-lisp:error ":awsregion is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-user-pool-config-aws-region :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (default-action :initarg :default-action :initform
                         (common-lisp:error ":defaultaction is required") :type
                         (common-lisp:or default-action common-lisp:null)
                         :accessor struct-shape-user-pool-config-default-action
                         :shape "DefaultAction" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (app-id-client-regex :initarg :app-id-client-regex
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-user-pool-config-app-id-client-regex
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-user-pool-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'user-pool-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'user-pool-config 'make-user-pool-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-pool-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-pool-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "userPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-region))
      (common-lisp:list
       (common-lisp:cons "awsRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-action))
      (common-lisp:list
       (common-lisp:cons "defaultAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id-client-regex))
      (common-lisp:list
       (common-lisp:cons "appIdClientRegex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-pool-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun associate-api
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name api-id)
   (common-lisp:declare (common-lisp:ignorable domain-name api-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-associate-api-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/domainnames/~A/apiassociation"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-name))))
                                                        "AssociateApi"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'associate-api))
(common-lisp:progn
 (common-lisp:defun associate-merged-graphql-api
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-api-identifier
                     merged-api-identifier description
                     source-api-association-config)
   (common-lisp:declare
    (common-lisp:ignorable source-api-identifier merged-api-identifier
     description source-api-association-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-merged-graphql-api-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/sourceApis/~A/mergedApiAssociations"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'source-api-identifier))))
                                                        "AssociateMergedGraphqlApi"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'associate-merged-graphql-api))
(common-lisp:progn
 (common-lisp:defun associate-source-graphql-api
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key merged-api-identifier
                     source-api-identifier description
                     source-api-association-config)
   (common-lisp:declare
    (common-lisp:ignorable merged-api-identifier source-api-identifier
     description source-api-association-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-source-graphql-api-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/mergedApis/~A/sourceApiAssociations"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'merged-api-identifier))))
                                                        "AssociateSourceGraphqlApi"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'associate-source-graphql-api))
(common-lisp:progn
 (common-lisp:defun create-api-cache
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id ttl transit-encryption-enabled
                     at-rest-encryption-enabled api-caching-behavior type
                     health-metrics-config)
   (common-lisp:declare
    (common-lisp:ignorable api-id ttl transit-encryption-enabled
     at-rest-encryption-enabled api-caching-behavior type
     health-metrics-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-api-cache-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/ApiCaches"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))))
                                                        "CreateApiCache"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-api-cache))
(common-lisp:progn
 (common-lisp:defun create-api-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id description expires)
   (common-lisp:declare (common-lisp:ignorable api-id description expires))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-api-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/apikeys"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))))
                                                        "CreateApiKey"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-api-key))
(common-lisp:progn
 (common-lisp:defun create-data-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id name description type
                     service-role-arn dynamodb-config lambda-config
                     elasticsearch-config open-search-service-config
                     http-config relational-database-config event-bridge-config
                     metrics-config)
   (common-lisp:declare
    (common-lisp:ignorable api-id name description type service-role-arn
     dynamodb-config lambda-config elasticsearch-config
     open-search-service-config http-config relational-database-config
     event-bridge-config metrics-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-data-source-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/datasources"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))))
                                                        "CreateDataSource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-data-source))
(common-lisp:progn
 (common-lisp:defun create-domain-name
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name certificate-arn description)
   (common-lisp:declare
    (common-lisp:ignorable domain-name certificate-arn description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-domain-name-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/v1/domainnames"
                                                        "CreateDomainName"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-domain-name))
(common-lisp:progn
 (common-lisp:defun create-function
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id name description data-source-name
                     request-mapping-template response-mapping-template
                     function-version sync-config max-batch-size runtime code)
   (common-lisp:declare
    (common-lisp:ignorable api-id name description data-source-name
     request-mapping-template response-mapping-template function-version
     sync-config max-batch-size runtime code))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-function-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/functions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))))
                                                        "CreateFunction"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-function))
(common-lisp:progn
 (common-lisp:defun create-graphql-api
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name log-config authentication-type
                     user-pool-config open-idconnect-config tags
                     additional-authentication-providers xray-enabled
                     lambda-authorizer-config visibility api-type
                     merged-api-execution-role-arn owner-contact
                     introspection-config query-depth-limit
                     resolver-count-limit enhanced-metrics-config)
   (common-lisp:declare
    (common-lisp:ignorable name log-config authentication-type user-pool-config
     open-idconnect-config tags additional-authentication-providers
     xray-enabled lambda-authorizer-config visibility api-type
     merged-api-execution-role-arn owner-contact introspection-config
     query-depth-limit resolver-count-limit enhanced-metrics-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-graphql-api-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/v1/apis"
                                                        "CreateGraphqlApi"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-graphql-api))
(common-lisp:progn
 (common-lisp:defun create-resolver
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id type-name field-name
                     data-source-name request-mapping-template
                     response-mapping-template kind pipeline-config sync-config
                     caching-config max-batch-size runtime code metrics-config)
   (common-lisp:declare
    (common-lisp:ignorable api-id type-name field-name data-source-name
     request-mapping-template response-mapping-template kind pipeline-config
     sync-config caching-config max-batch-size runtime code metrics-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-resolver-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/types/~A/resolvers"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'type-name))))
                                                        "CreateResolver"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-resolver))
(common-lisp:progn
 (common-lisp:defun create-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id definition format)
   (common-lisp:declare (common-lisp:ignorable api-id definition format))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/types"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))))
                                                        "CreateType"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-type))
(common-lisp:progn
 (common-lisp:defun delete-api-cache
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id)
   (common-lisp:declare (common-lisp:ignorable api-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-api-cache-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/ApiCaches"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))))
                                                        "DeleteApiCache"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-api-cache))
(common-lisp:progn
 (common-lisp:defun delete-api-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id id)
   (common-lisp:declare (common-lisp:ignorable api-id id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-api-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/apikeys/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DeleteApiKey"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-api-key))
(common-lisp:progn
 (common-lisp:defun delete-data-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id name)
   (common-lisp:declare (common-lisp:ignorable api-id name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-data-source-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/datasources/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DeleteDataSource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-data-source))
(common-lisp:progn
 (common-lisp:defun delete-domain-name
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name)
   (common-lisp:declare (common-lisp:ignorable domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-domain-name-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/domainnames/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-name))))
                                                        "DeleteDomainName"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-domain-name))
(common-lisp:progn
 (common-lisp:defun delete-function
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id function-id)
   (common-lisp:declare (common-lisp:ignorable api-id function-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-function-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/functions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-id))))
                                                        "DeleteFunction"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-function))
(common-lisp:progn
 (common-lisp:defun delete-graphql-api
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id)
   (common-lisp:declare (common-lisp:ignorable api-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-graphql-api-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))))
                                                        "DeleteGraphqlApi"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-graphql-api))
(common-lisp:progn
 (common-lisp:defun delete-resolver
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id type-name field-name)
   (common-lisp:declare (common-lisp:ignorable api-id type-name field-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-resolver-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/types/~A/resolvers/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'type-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'field-name))))
                                                        "DeleteResolver"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-resolver))
(common-lisp:progn
 (common-lisp:defun delete-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id type-name)
   (common-lisp:declare (common-lisp:ignorable api-id type-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/types/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'type-name))))
                                                        "DeleteType"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-type))
(common-lisp:progn
 (common-lisp:defun disassociate-api
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name)
   (common-lisp:declare (common-lisp:ignorable domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disassociate-api-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/domainnames/~A/apiassociation"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-name))))
                                                        "DisassociateApi"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disassociate-api))
(common-lisp:progn
 (common-lisp:defun disassociate-merged-graphql-api
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-api-identifier association-id)
   (common-lisp:declare
    (common-lisp:ignorable source-api-identifier association-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-merged-graphql-api-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/sourceApis/~A/mergedApiAssociations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'source-api-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'association-id))))
                                                        "DisassociateMergedGraphqlApi"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disassociate-merged-graphql-api))
(common-lisp:progn
 (common-lisp:defun disassociate-source-graphql-api
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key merged-api-identifier association-id)
   (common-lisp:declare
    (common-lisp:ignorable merged-api-identifier association-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-source-graphql-api-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/mergedApis/~A/sourceApiAssociations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'merged-api-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'association-id))))
                                                        "DisassociateSourceGraphqlApi"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disassociate-source-graphql-api))
(common-lisp:progn
 (common-lisp:defun evaluate-code
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key runtime code context function)
   (common-lisp:declare (common-lisp:ignorable runtime code context function))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-evaluate-code-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/v1/dataplane-evaluatecode"
                                                        "EvaluateCode"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'evaluate-code))
(common-lisp:progn
 (common-lisp:defun evaluate-mapping-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template context)
   (common-lisp:declare (common-lisp:ignorable template context))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-evaluate-mapping-template-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/v1/dataplane-evaluatetemplate"
                                                        "EvaluateMappingTemplate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'evaluate-mapping-template))
(common-lisp:progn
 (common-lisp:defun flush-api-cache
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id)
   (common-lisp:declare (common-lisp:ignorable api-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-flush-api-cache-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/FlushCache"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))))
                                                        "FlushApiCache"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'flush-api-cache))
(common-lisp:progn
 (common-lisp:defun get-api-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name)
   (common-lisp:declare (common-lisp:ignorable domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-api-association-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/domainnames/~A/apiassociation"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-name))))
                                                        "GetApiAssociation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-api-association))
(common-lisp:progn
 (common-lisp:defun get-api-cache
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id)
   (common-lisp:declare (common-lisp:ignorable api-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-api-cache-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/ApiCaches"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))))
                                                        "GetApiCache"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-api-cache))
(common-lisp:progn
 (common-lisp:defun get-data-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id name)
   (common-lisp:declare (common-lisp:ignorable api-id name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-data-source-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/datasources/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetDataSource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-data-source))
(common-lisp:progn
 (common-lisp:defun get-data-source-introspection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key introspection-id include-models-sdl
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable introspection-id include-models-sdl next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-data-source-introspection-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/datasources/introspections/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'introspection-id))))
                                                        "GetDataSourceIntrospection"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-data-source-introspection))
(common-lisp:progn
 (common-lisp:defun get-domain-name
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name)
   (common-lisp:declare (common-lisp:ignorable domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-domain-name-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/domainnames/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-name))))
                                                        "GetDomainName"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-domain-name))
(common-lisp:progn
 (common-lisp:defun get-function
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id function-id)
   (common-lisp:declare (common-lisp:ignorable api-id function-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-function-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/functions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-id))))
                                                        "GetFunction"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-function))
(common-lisp:progn
 (common-lisp:defun get-graphql-api
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id)
   (common-lisp:declare (common-lisp:ignorable api-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-graphql-api-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))))
                                                        "GetGraphqlApi"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-graphql-api))
(common-lisp:progn
 (common-lisp:defun get-graphql-api-environment-variables
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id)
   (common-lisp:declare (common-lisp:ignorable api-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-graphql-api-environment-variables-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/environmentVariables"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))))
                                                        "GetGraphqlApiEnvironmentVariables"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-graphql-api-environment-variables))
(common-lisp:progn
 (common-lisp:defun get-introspection-schema
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id format include-directives)
   (common-lisp:declare
    (common-lisp:ignorable api-id format include-directives))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-introspection-schema-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/schema"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))))
                                                        "GetIntrospectionSchema")
       :want-stream common-lisp:t)
      "blob" common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-introspection-schema))
(common-lisp:progn
 (common-lisp:defun get-resolver
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id type-name field-name)
   (common-lisp:declare (common-lisp:ignorable api-id type-name field-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-resolver-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/types/~A/resolvers/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'type-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'field-name))))
                                                        "GetResolver"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-resolver))
(common-lisp:progn
 (common-lisp:defun get-schema-creation-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id)
   (common-lisp:declare (common-lisp:ignorable api-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-schema-creation-status-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/schemacreation"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))))
                                                        "GetSchemaCreationStatus"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-schema-creation-status))
(common-lisp:progn
 (common-lisp:defun get-source-api-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key merged-api-identifier association-id)
   (common-lisp:declare
    (common-lisp:ignorable merged-api-identifier association-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-source-api-association-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/mergedApis/~A/sourceApiAssociations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'merged-api-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'association-id))))
                                                        "GetSourceApiAssociation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-source-api-association))
(common-lisp:progn
 (common-lisp:defun get-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id type-name format)
   (common-lisp:declare (common-lisp:ignorable api-id type-name format))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/types/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'type-name))))
                                                        "GetType"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-type))
(common-lisp:progn
 (common-lisp:defun list-api-keys
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id next-token max-results)
   (common-lisp:declare (common-lisp:ignorable api-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-api-keys-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/apikeys"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))))
                                                        "ListApiKeys"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-api-keys))
(common-lisp:progn
 (common-lisp:defun list-data-sources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id next-token max-results)
   (common-lisp:declare (common-lisp:ignorable api-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-data-sources-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/datasources"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))))
                                                        "ListDataSources"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-data-sources))
(common-lisp:progn
 (common-lisp:defun list-domain-names
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-domain-names-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/v1/domainnames"
                                                        "ListDomainNames"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-domain-names))
(common-lisp:progn
 (common-lisp:defun list-functions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id next-token max-results)
   (common-lisp:declare (common-lisp:ignorable api-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-functions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/functions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))))
                                                        "ListFunctions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-functions))
(common-lisp:progn
 (common-lisp:defun list-graphql-apis
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results api-type owner)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results api-type owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-graphql-apis-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/v1/apis"
                                                        "ListGraphqlApis"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-graphql-apis))
(common-lisp:progn
 (common-lisp:defun list-resolvers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id type-name next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable api-id type-name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-resolvers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/types/~A/resolvers"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'type-name))))
                                                        "ListResolvers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-resolvers))
(common-lisp:progn
 (common-lisp:defun list-resolvers-by-function
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id function-id next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable api-id function-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-resolvers-by-function-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/functions/~A/resolvers"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-id))))
                                                        "ListResolversByFunction"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-resolvers-by-function))
(common-lisp:progn
 (common-lisp:defun list-source-api-associations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id next-token max-results)
   (common-lisp:declare (common-lisp:ignorable api-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-source-api-associations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/sourceApiAssociations"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))))
                                                        "ListSourceApiAssociations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-source-api-associations))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-types
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id format next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable api-id format next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-types-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/types"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))))
                                                        "ListTypes"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-types))
(common-lisp:progn
 (common-lisp:defun list-types-by-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key merged-api-identifier association-id
                     format next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable merged-api-identifier association-id format
     next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-types-by-association-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/mergedApis/~A/sourceApiAssociations/~A/types"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'merged-api-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'association-id))))
                                                        "ListTypesByAssociation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-types-by-association))
(common-lisp:progn
 (common-lisp:defun put-graphql-api-environment-variables
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id environment-variables)
   (common-lisp:declare (common-lisp:ignorable api-id environment-variables))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-graphql-api-environment-variables-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/environmentVariables"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))))
                                                        "PutGraphqlApiEnvironmentVariables"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-graphql-api-environment-variables))
(common-lisp:progn
 (common-lisp:defun start-data-source-introspection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rds-data-api-config)
   (common-lisp:declare (common-lisp:ignorable rds-data-api-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-data-source-introspection-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/v1/datasources/introspections"
                                                        "StartDataSourceIntrospection"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-data-source-introspection))
(common-lisp:progn
 (common-lisp:defun start-schema-creation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id definition)
   (common-lisp:declare (common-lisp:ignorable api-id definition))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-schema-creation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/schemacreation"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))))
                                                        "StartSchemaCreation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-schema-creation))
(common-lisp:progn
 (common-lisp:defun start-schema-merge
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key association-id merged-api-identifier)
   (common-lisp:declare
    (common-lisp:ignorable association-id merged-api-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-schema-merge-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/mergedApis/~A/sourceApiAssociations/~A/merge"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'merged-api-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'association-id))))
                                                        "StartSchemaMerge"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-schema-merge))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-api-cache
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id ttl api-caching-behavior type
                     health-metrics-config)
   (common-lisp:declare
    (common-lisp:ignorable api-id ttl api-caching-behavior type
     health-metrics-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-api-cache-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/ApiCaches/update"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))))
                                                        "UpdateApiCache"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-api-cache))
(common-lisp:progn
 (common-lisp:defun update-api-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id id description expires)
   (common-lisp:declare (common-lisp:ignorable api-id id description expires))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-api-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/apikeys/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "UpdateApiKey"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-api-key))
(common-lisp:progn
 (common-lisp:defun update-data-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id name description type
                     service-role-arn dynamodb-config lambda-config
                     elasticsearch-config open-search-service-config
                     http-config relational-database-config event-bridge-config
                     metrics-config)
   (common-lisp:declare
    (common-lisp:ignorable api-id name description type service-role-arn
     dynamodb-config lambda-config elasticsearch-config
     open-search-service-config http-config relational-database-config
     event-bridge-config metrics-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-data-source-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/datasources/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "UpdateDataSource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-data-source))
(common-lisp:progn
 (common-lisp:defun update-domain-name
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name description)
   (common-lisp:declare (common-lisp:ignorable domain-name description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-domain-name-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/domainnames/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-name))))
                                                        "UpdateDomainName"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-domain-name))
(common-lisp:progn
 (common-lisp:defun update-function
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id name description function-id
                     data-source-name request-mapping-template
                     response-mapping-template function-version sync-config
                     max-batch-size runtime code)
   (common-lisp:declare
    (common-lisp:ignorable api-id name description function-id data-source-name
     request-mapping-template response-mapping-template function-version
     sync-config max-batch-size runtime code))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-function-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/functions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-id))))
                                                        "UpdateFunction"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-function))
(common-lisp:progn
 (common-lisp:defun update-graphql-api
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id name log-config
                     authentication-type user-pool-config open-idconnect-config
                     additional-authentication-providers xray-enabled
                     lambda-authorizer-config merged-api-execution-role-arn
                     owner-contact introspection-config query-depth-limit
                     resolver-count-limit enhanced-metrics-config)
   (common-lisp:declare
    (common-lisp:ignorable api-id name log-config authentication-type
     user-pool-config open-idconnect-config additional-authentication-providers
     xray-enabled lambda-authorizer-config merged-api-execution-role-arn
     owner-contact introspection-config query-depth-limit resolver-count-limit
     enhanced-metrics-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-graphql-api-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))))
                                                        "UpdateGraphqlApi"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-graphql-api))
(common-lisp:progn
 (common-lisp:defun update-resolver
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id type-name field-name
                     data-source-name request-mapping-template
                     response-mapping-template kind pipeline-config sync-config
                     caching-config max-batch-size runtime code metrics-config)
   (common-lisp:declare
    (common-lisp:ignorable api-id type-name field-name data-source-name
     request-mapping-template response-mapping-template kind pipeline-config
     sync-config caching-config max-batch-size runtime code metrics-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-resolver-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/types/~A/resolvers/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'type-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'field-name))))
                                                        "UpdateResolver"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-resolver))
(common-lisp:progn
 (common-lisp:defun update-source-api-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key association-id merged-api-identifier
                     description source-api-association-config)
   (common-lisp:declare
    (common-lisp:ignorable association-id merged-api-identifier description
     source-api-association-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-source-api-association-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/mergedApis/~A/sourceApiAssociations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'merged-api-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'association-id))))
                                                        "UpdateSourceApiAssociation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-source-api-association))
(common-lisp:progn
 (common-lisp:defun update-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id type-name definition format)
   (common-lisp:declare
    (common-lisp:ignorable api-id type-name definition format))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/types/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'type-name))))
                                                        "UpdateType"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-type))
