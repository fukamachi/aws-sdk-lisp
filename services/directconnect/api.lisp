;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/directconnect/api
  (:use)
  (:nicknames #:aws/directconnect)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/directconnect/api)
(common-lisp:progn
 (common-lisp:define-condition directconnect-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'directconnect-error))
(common-lisp:progn
 (common-lisp:defclass directconnect-request
                       (aws-sdk/json-request:json-request) common-lisp:nil
                       (:default-initargs :service "directconnect" :api-version
                        "2012-10-25" :host-prefix "directconnect" :signing-name
                        common-lisp:nil :global-host common-lisp:nil
                        :target-prefix "OvertureService" :json-version "1.1"))
 (common-lisp:export 'directconnect-request))
(common-lisp:defvar *error-map*
  '(("DirectConnectClientException" . direct-connect-client-exception)
    ("DirectConnectServerException" . direct-connect-server-exception)
    ("DuplicateTagKeysException" . duplicate-tag-keys-exception)
    ("TooManyTagsException" . too-many-tags-exception)))
(common-lisp:deftype asn () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass
  accept-direct-connect-gateway-association-proposal-request common-lisp:nil
  ((direct-connect-gateway-id :initarg :direct-connect-gateway-id :initform
    (common-lisp:error ":directconnectgatewayid is required") :type
    (common-lisp:or direct-connect-gateway-id common-lisp:null) :accessor
    struct-shape-accept-direct-connect-gateway-association-proposal-request-direct-connect-gateway-id
    :shape "DirectConnectGatewayId" :location common-lisp:nil :location-name
    common-lisp:nil)
   (proposal-id :initarg :proposal-id :initform
    (common-lisp:error ":proposalid is required") :type
    (common-lisp:or direct-connect-gateway-association-proposal-id
                    common-lisp:null)
    :accessor
    struct-shape-accept-direct-connect-gateway-association-proposal-request-proposal-id
    :shape "DirectConnectGatewayAssociationProposalId" :location
    common-lisp:nil :location-name common-lisp:nil)
   (associated-gateway-owner-account :initarg :associated-gateway-owner-account
    :initform (common-lisp:error ":associatedgatewayowneraccount is required")
    :type (common-lisp:or owner-account common-lisp:null) :accessor
    struct-shape-accept-direct-connect-gateway-association-proposal-request-associated-gateway-owner-account
    :shape "OwnerAccount" :location common-lisp:nil :location-name
    common-lisp:nil)
   (override-allowed-prefixes-to-direct-connect-gateway :initarg
    :override-allowed-prefixes-to-direct-connect-gateway :initform
    common-lisp:nil :type
    (common-lisp:or route-filter-prefix-list common-lisp:null) :accessor
    struct-shape-accept-direct-connect-gateway-association-proposal-request-override-allowed-prefixes-to-direct-connect-gateway
    :shape "RouteFilterPrefixList" :location common-lisp:nil :location-name
    common-lisp:nil))
  (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-accept-direct-connect-gateway-association-proposal-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'accept-direct-connect-gateway-association-proposal-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'accept-direct-connect-gateway-association-proposal-request
                    'make-accept-direct-connect-gateway-association-proposal-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-direct-connect-gateway-association-proposal-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-direct-connect-gateway-association-proposal-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'direct-connect-gateway-id))
      (common-lisp:list
       (common-lisp:cons "directConnectGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'proposal-id))
      (common-lisp:list
       (common-lisp:cons "proposalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associated-gateway-owner-account))
      (common-lisp:list
       (common-lisp:cons "associatedGatewayOwnerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'override-allowed-prefixes-to-direct-connect-gateway))
      (common-lisp:list
       (common-lisp:cons "overrideAllowedPrefixesToDirectConnectGateway"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-direct-connect-gateway-association-proposal-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  accept-direct-connect-gateway-association-proposal-result common-lisp:nil
  ((direct-connect-gateway-association :initarg
    :direct-connect-gateway-association :initform common-lisp:nil :type
    (common-lisp:or direct-connect-gateway-association common-lisp:null)
    :accessor
    struct-shape-accept-direct-connect-gateway-association-proposal-result-direct-connect-gateway-association
    :shape "DirectConnectGatewayAssociation" :location common-lisp:nil
    :location-name common-lisp:nil))
  (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-accept-direct-connect-gateway-association-proposal-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'accept-direct-connect-gateway-association-proposal-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'accept-direct-connect-gateway-association-proposal-result
                    'make-accept-direct-connect-gateway-association-proposal-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-direct-connect-gateway-association-proposal-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-direct-connect-gateway-association-proposal-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'direct-connect-gateway-association))
      (common-lisp:list
       (common-lisp:cons "directConnectGatewayAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-direct-connect-gateway-association-proposal-result))
   common-lisp:nil))
(common-lisp:deftype address-family () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype agreement-list ()
   '(trivial-types:proper-list customer-agreement))
 (common-lisp:defun make-agreement-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list customer-agreement))
   aws-sdk/generator/shape::members))
(common-lisp:deftype agreement-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass allocate-connection-on-interconnect-request
                       common-lisp:nil
                       ((bandwidth :initarg :bandwidth :initform
                         (common-lisp:error ":bandwidth is required") :type
                         (common-lisp:or bandwidth common-lisp:null) :accessor
                         struct-shape-allocate-connection-on-interconnect-request-bandwidth
                         :shape "Bandwidth" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connection-name :initarg :connection-name :initform
                         (common-lisp:error ":connectionname is required")
                         :type
                         (common-lisp:or connection-name common-lisp:null)
                         :accessor
                         struct-shape-allocate-connection-on-interconnect-request-connection-name
                         :shape "ConnectionName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owner-account :initarg :owner-account :initform
                         (common-lisp:error ":owneraccount is required") :type
                         (common-lisp:or owner-account common-lisp:null)
                         :accessor
                         struct-shape-allocate-connection-on-interconnect-request-owner-account
                         :shape "OwnerAccount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (interconnect-id :initarg :interconnect-id :initform
                         (common-lisp:error ":interconnectid is required")
                         :type
                         (common-lisp:or interconnect-id common-lisp:null)
                         :accessor
                         struct-shape-allocate-connection-on-interconnect-request-interconnect-id
                         :shape "InterconnectId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vlan :initarg :vlan :initform
                         (common-lisp:error ":vlan is required") :type
                         (common-lisp:or vlan common-lisp:null) :accessor
                         struct-shape-allocate-connection-on-interconnect-request-vlan
                         :shape "VLAN" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-allocate-connection-on-interconnect-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'allocate-connection-on-interconnect-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'allocate-connection-on-interconnect-request
                    'make-allocate-connection-on-interconnect-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          allocate-connection-on-interconnect-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          allocate-connection-on-interconnect-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bandwidth))
      (common-lisp:list
       (common-lisp:cons "bandwidth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-name))
      (common-lisp:list
       (common-lisp:cons "connectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-account))
      (common-lisp:list
       (common-lisp:cons "ownerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interconnect-id))
      (common-lisp:list
       (common-lisp:cons "interconnectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vlan))
      (common-lisp:list
       (common-lisp:cons "vlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          allocate-connection-on-interconnect-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass allocate-hosted-connection-request common-lisp:nil
                       ((connection-id :initarg :connection-id :initform
                         (common-lisp:error ":connectionid is required") :type
                         (common-lisp:or connection-id common-lisp:null)
                         :accessor
                         struct-shape-allocate-hosted-connection-request-connection-id
                         :shape "ConnectionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owner-account :initarg :owner-account :initform
                         (common-lisp:error ":owneraccount is required") :type
                         (common-lisp:or owner-account common-lisp:null)
                         :accessor
                         struct-shape-allocate-hosted-connection-request-owner-account
                         :shape "OwnerAccount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bandwidth :initarg :bandwidth :initform
                         (common-lisp:error ":bandwidth is required") :type
                         (common-lisp:or bandwidth common-lisp:null) :accessor
                         struct-shape-allocate-hosted-connection-request-bandwidth
                         :shape "Bandwidth" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connection-name :initarg :connection-name :initform
                         (common-lisp:error ":connectionname is required")
                         :type
                         (common-lisp:or connection-name common-lisp:null)
                         :accessor
                         struct-shape-allocate-hosted-connection-request-connection-name
                         :shape "ConnectionName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vlan :initarg :vlan :initform
                         (common-lisp:error ":vlan is required") :type
                         (common-lisp:or vlan common-lisp:null) :accessor
                         struct-shape-allocate-hosted-connection-request-vlan
                         :shape "VLAN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-allocate-hosted-connection-request-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-allocate-hosted-connection-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'allocate-hosted-connection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'allocate-hosted-connection-request
                    'make-allocate-hosted-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          allocate-hosted-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          allocate-hosted-connection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-id))
      (common-lisp:list
       (common-lisp:cons "connectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-account))
      (common-lisp:list
       (common-lisp:cons "ownerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bandwidth))
      (common-lisp:list
       (common-lisp:cons "bandwidth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-name))
      (common-lisp:list
       (common-lisp:cons "connectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vlan))
      (common-lisp:list
       (common-lisp:cons "vlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          allocate-hosted-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass allocate-private-virtual-interface-request
                       common-lisp:nil
                       ((connection-id :initarg :connection-id :initform
                         (common-lisp:error ":connectionid is required") :type
                         (common-lisp:or connection-id common-lisp:null)
                         :accessor
                         struct-shape-allocate-private-virtual-interface-request-connection-id
                         :shape "ConnectionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owner-account :initarg :owner-account :initform
                         (common-lisp:error ":owneraccount is required") :type
                         (common-lisp:or owner-account common-lisp:null)
                         :accessor
                         struct-shape-allocate-private-virtual-interface-request-owner-account
                         :shape "OwnerAccount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (new-private-virtual-interface-allocation :initarg
                         :new-private-virtual-interface-allocation :initform
                         (common-lisp:error
                          ":newprivatevirtualinterfaceallocation is required")
                         :type
                         (common-lisp:or
                          new-private-virtual-interface-allocation
                          common-lisp:null)
                         :accessor
                         struct-shape-allocate-private-virtual-interface-request-new-private-virtual-interface-allocation
                         :shape "NewPrivateVirtualInterfaceAllocation"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-allocate-private-virtual-interface-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'allocate-private-virtual-interface-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'allocate-private-virtual-interface-request
                    'make-allocate-private-virtual-interface-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          allocate-private-virtual-interface-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          allocate-private-virtual-interface-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-id))
      (common-lisp:list
       (common-lisp:cons "connectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-account))
      (common-lisp:list
       (common-lisp:cons "ownerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'new-private-virtual-interface-allocation))
      (common-lisp:list
       (common-lisp:cons "newPrivateVirtualInterfaceAllocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          allocate-private-virtual-interface-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass allocate-public-virtual-interface-request
                       common-lisp:nil
                       ((connection-id :initarg :connection-id :initform
                         (common-lisp:error ":connectionid is required") :type
                         (common-lisp:or connection-id common-lisp:null)
                         :accessor
                         struct-shape-allocate-public-virtual-interface-request-connection-id
                         :shape "ConnectionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owner-account :initarg :owner-account :initform
                         (common-lisp:error ":owneraccount is required") :type
                         (common-lisp:or owner-account common-lisp:null)
                         :accessor
                         struct-shape-allocate-public-virtual-interface-request-owner-account
                         :shape "OwnerAccount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (new-public-virtual-interface-allocation :initarg
                         :new-public-virtual-interface-allocation :initform
                         (common-lisp:error
                          ":newpublicvirtualinterfaceallocation is required")
                         :type
                         (common-lisp:or
                          new-public-virtual-interface-allocation
                          common-lisp:null)
                         :accessor
                         struct-shape-allocate-public-virtual-interface-request-new-public-virtual-interface-allocation
                         :shape "NewPublicVirtualInterfaceAllocation" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-allocate-public-virtual-interface-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'allocate-public-virtual-interface-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'allocate-public-virtual-interface-request
                    'make-allocate-public-virtual-interface-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          allocate-public-virtual-interface-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          allocate-public-virtual-interface-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-id))
      (common-lisp:list
       (common-lisp:cons "connectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-account))
      (common-lisp:list
       (common-lisp:cons "ownerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'new-public-virtual-interface-allocation))
      (common-lisp:list
       (common-lisp:cons "newPublicVirtualInterfaceAllocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          allocate-public-virtual-interface-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass allocate-transit-virtual-interface-request
                       common-lisp:nil
                       ((connection-id :initarg :connection-id :initform
                         (common-lisp:error ":connectionid is required") :type
                         (common-lisp:or connection-id common-lisp:null)
                         :accessor
                         struct-shape-allocate-transit-virtual-interface-request-connection-id
                         :shape "ConnectionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owner-account :initarg :owner-account :initform
                         (common-lisp:error ":owneraccount is required") :type
                         (common-lisp:or owner-account common-lisp:null)
                         :accessor
                         struct-shape-allocate-transit-virtual-interface-request-owner-account
                         :shape "OwnerAccount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (new-transit-virtual-interface-allocation :initarg
                         :new-transit-virtual-interface-allocation :initform
                         (common-lisp:error
                          ":newtransitvirtualinterfaceallocation is required")
                         :type
                         (common-lisp:or
                          new-transit-virtual-interface-allocation
                          common-lisp:null)
                         :accessor
                         struct-shape-allocate-transit-virtual-interface-request-new-transit-virtual-interface-allocation
                         :shape "NewTransitVirtualInterfaceAllocation"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-allocate-transit-virtual-interface-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'allocate-transit-virtual-interface-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'allocate-transit-virtual-interface-request
                    'make-allocate-transit-virtual-interface-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          allocate-transit-virtual-interface-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          allocate-transit-virtual-interface-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-id))
      (common-lisp:list
       (common-lisp:cons "connectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-account))
      (common-lisp:list
       (common-lisp:cons "ownerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'new-transit-virtual-interface-allocation))
      (common-lisp:list
       (common-lisp:cons "newTransitVirtualInterfaceAllocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          allocate-transit-virtual-interface-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass allocate-transit-virtual-interface-result
                       common-lisp:nil
                       ((virtual-interface :initarg :virtual-interface
                         :initform common-lisp:nil :type
                         (common-lisp:or virtual-interface common-lisp:null)
                         :accessor
                         struct-shape-allocate-transit-virtual-interface-result-virtual-interface
                         :shape "VirtualInterface" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-allocate-transit-virtual-interface-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'allocate-transit-virtual-interface-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'allocate-transit-virtual-interface-result
                    'make-allocate-transit-virtual-interface-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          allocate-transit-virtual-interface-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          allocate-transit-virtual-interface-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-interface))
      (common-lisp:list
       (common-lisp:cons "virtualInterface"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          allocate-transit-virtual-interface-result))
   common-lisp:nil))
(common-lisp:deftype amazon-address () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass associate-connection-with-lag-request common-lisp:nil
                       ((connection-id :initarg :connection-id :initform
                         (common-lisp:error ":connectionid is required") :type
                         (common-lisp:or connection-id common-lisp:null)
                         :accessor
                         struct-shape-associate-connection-with-lag-request-connection-id
                         :shape "ConnectionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lag-id :initarg :lag-id :initform
                         (common-lisp:error ":lagid is required") :type
                         (common-lisp:or lag-id common-lisp:null) :accessor
                         struct-shape-associate-connection-with-lag-request-lag-id
                         :shape "LagId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-connection-with-lag-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-connection-with-lag-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-connection-with-lag-request
                    'make-associate-connection-with-lag-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-connection-with-lag-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-connection-with-lag-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-id))
      (common-lisp:list
       (common-lisp:cons "connectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lag-id))
      (common-lisp:list
       (common-lisp:cons "lagId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-connection-with-lag-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-hosted-connection-request common-lisp:nil
                       ((connection-id :initarg :connection-id :initform
                         (common-lisp:error ":connectionid is required") :type
                         (common-lisp:or connection-id common-lisp:null)
                         :accessor
                         struct-shape-associate-hosted-connection-request-connection-id
                         :shape "ConnectionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parent-connection-id :initarg :parent-connection-id
                         :initform
                         (common-lisp:error ":parentconnectionid is required")
                         :type (common-lisp:or connection-id common-lisp:null)
                         :accessor
                         struct-shape-associate-hosted-connection-request-parent-connection-id
                         :shape "ConnectionId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-hosted-connection-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-hosted-connection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-hosted-connection-request
                    'make-associate-hosted-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-hosted-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-hosted-connection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-id))
      (common-lisp:list
       (common-lisp:cons "connectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parent-connection-id))
      (common-lisp:list
       (common-lisp:cons "parentConnectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-hosted-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-mac-sec-key-request common-lisp:nil
                       ((connection-id :initarg :connection-id :initform
                         (common-lisp:error ":connectionid is required") :type
                         (common-lisp:or connection-id common-lisp:null)
                         :accessor
                         struct-shape-associate-mac-sec-key-request-connection-id
                         :shape "ConnectionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (secret-arn :initarg :secret-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or secret-arn common-lisp:null) :accessor
                         struct-shape-associate-mac-sec-key-request-secret-arn
                         :shape "SecretARN" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ckn :initarg :ckn :initform common-lisp:nil :type
                         (common-lisp:or ckn common-lisp:null) :accessor
                         struct-shape-associate-mac-sec-key-request-ckn :shape
                         "Ckn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cak :initarg :cak :initform common-lisp:nil :type
                         (common-lisp:or cak common-lisp:null) :accessor
                         struct-shape-associate-mac-sec-key-request-cak :shape
                         "Cak" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-mac-sec-key-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-mac-sec-key-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-mac-sec-key-request
                    'make-associate-mac-sec-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-mac-sec-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-mac-sec-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-id))
      (common-lisp:list
       (common-lisp:cons "connectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "secretARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ckn))
      (common-lisp:list
       (common-lisp:cons "ckn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cak))
      (common-lisp:list
       (common-lisp:cons "cak"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-mac-sec-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-mac-sec-key-response common-lisp:nil
                       ((connection-id :initarg :connection-id :initform
                         common-lisp:nil :type
                         (common-lisp:or connection-id common-lisp:null)
                         :accessor
                         struct-shape-associate-mac-sec-key-response-connection-id
                         :shape "ConnectionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mac-sec-keys :initarg :mac-sec-keys :initform
                         common-lisp:nil :type
                         (common-lisp:or mac-sec-key-list common-lisp:null)
                         :accessor
                         struct-shape-associate-mac-sec-key-response-mac-sec-keys
                         :shape "MacSecKeyList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-mac-sec-key-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-mac-sec-key-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-mac-sec-key-response
                    'make-associate-mac-sec-key-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-mac-sec-key-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-mac-sec-key-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-id))
      (common-lisp:list
       (common-lisp:cons "connectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mac-sec-keys))
      (common-lisp:list
       (common-lisp:cons "macSecKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-mac-sec-key-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-virtual-interface-request common-lisp:nil
                       ((virtual-interface-id :initarg :virtual-interface-id
                         :initform
                         (common-lisp:error ":virtualinterfaceid is required")
                         :type
                         (common-lisp:or virtual-interface-id common-lisp:null)
                         :accessor
                         struct-shape-associate-virtual-interface-request-virtual-interface-id
                         :shape "VirtualInterfaceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connection-id :initarg :connection-id :initform
                         (common-lisp:error ":connectionid is required") :type
                         (common-lisp:or connection-id common-lisp:null)
                         :accessor
                         struct-shape-associate-virtual-interface-request-connection-id
                         :shape "ConnectionId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-virtual-interface-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-virtual-interface-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-virtual-interface-request
                    'make-associate-virtual-interface-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-virtual-interface-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-virtual-interface-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-interface-id))
      (common-lisp:list
       (common-lisp:cons "virtualInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-id))
      (common-lisp:list
       (common-lisp:cons "connectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-virtual-interface-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associated-gateway common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or gateway-identifier common-lisp:null)
                         :accessor struct-shape-associated-gateway-id :shape
                         "GatewayIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or gateway-type common-lisp:null)
                         :accessor struct-shape-associated-gateway-type :shape
                         "GatewayType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (owner-account :initarg :owner-account :initform
                         common-lisp:nil :type
                         (common-lisp:or owner-account common-lisp:null)
                         :accessor
                         struct-shape-associated-gateway-owner-account :shape
                         "OwnerAccount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (region :initarg :region :initform common-lisp:nil
                         :type (common-lisp:or region common-lisp:null)
                         :accessor struct-shape-associated-gateway-region
                         :shape "Region" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associated-gateway
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'associated-gateway
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associated-gateway 'make-associated-gateway))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input associated-gateway))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input associated-gateway))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-account))
      (common-lisp:list
       (common-lisp:cons "ownerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input associated-gateway))
   common-lisp:nil))
(common-lisp:deftype associated-gateway-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype available-mac-sec-port-speeds ()
   '(trivial-types:proper-list port-speed))
 (common-lisp:defun make-available-mac-sec-port-speeds
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list port-speed))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype available-port-speeds ()
   '(trivial-types:proper-list port-speed))
 (common-lisp:defun make-available-port-speeds
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list port-speed))
   aws-sdk/generator/shape::members))
(common-lisp:deftype aws-device () 'common-lisp:string)
(common-lisp:deftype aws-device-v2 () 'common-lisp:string)
(common-lisp:deftype aws-logical-device-id () 'common-lisp:string)
(common-lisp:deftype bgpauth-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass bgppeer common-lisp:nil
                       ((bgp-peer-id :initarg :bgp-peer-id :initform
                         common-lisp:nil :type
                         (common-lisp:or bgppeer-id common-lisp:null) :accessor
                         struct-shape-bgppeer-bgp-peer-id :shape "BGPPeerId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (asn :initarg :asn :initform common-lisp:nil :type
                         (common-lisp:or asn common-lisp:null) :accessor
                         struct-shape-bgppeer-asn :shape "ASN" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (auth-key :initarg :auth-key :initform common-lisp:nil
                         :type (common-lisp:or bgpauth-key common-lisp:null)
                         :accessor struct-shape-bgppeer-auth-key :shape
                         "BGPAuthKey" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (address-family :initarg :address-family :initform
                         common-lisp:nil :type
                         (common-lisp:or address-family common-lisp:null)
                         :accessor struct-shape-bgppeer-address-family :shape
                         "AddressFamily" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (amazon-address :initarg :amazon-address :initform
                         common-lisp:nil :type
                         (common-lisp:or amazon-address common-lisp:null)
                         :accessor struct-shape-bgppeer-amazon-address :shape
                         "AmazonAddress" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (customer-address :initarg :customer-address :initform
                         common-lisp:nil :type
                         (common-lisp:or customer-address common-lisp:null)
                         :accessor struct-shape-bgppeer-customer-address :shape
                         "CustomerAddress" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bgp-peer-state :initarg :bgp-peer-state :initform
                         common-lisp:nil :type
                         (common-lisp:or bgppeer-state common-lisp:null)
                         :accessor struct-shape-bgppeer-bgp-peer-state :shape
                         "BGPPeerState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bgp-status :initarg :bgp-status :initform
                         common-lisp:nil :type
                         (common-lisp:or bgpstatus common-lisp:null) :accessor
                         struct-shape-bgppeer-bgp-status :shape "BGPStatus"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (aws-device-v2 :initarg :aws-device-v2 :initform
                         common-lisp:nil :type
                         (common-lisp:or aws-device-v2 common-lisp:null)
                         :accessor struct-shape-bgppeer-aws-device-v2 :shape
                         "AwsDeviceV2" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (aws-logical-device-id :initarg :aws-logical-device-id
                         :initform common-lisp:nil :type
                         (common-lisp:or aws-logical-device-id
                                         common-lisp:null)
                         :accessor struct-shape-bgppeer-aws-logical-device-id
                         :shape "AwsLogicalDeviceId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bgppeer
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'bgppeer
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'bgppeer 'make-bgppeer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bgppeer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bgppeer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bgp-peer-id))
      (common-lisp:list
       (common-lisp:cons "bgpPeerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asn))
      (common-lisp:list
       (common-lisp:cons "asn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-key))
      (common-lisp:list
       (common-lisp:cons "authKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-family))
      (common-lisp:list
       (common-lisp:cons "addressFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amazon-address))
      (common-lisp:list
       (common-lisp:cons "amazonAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-address))
      (common-lisp:list
       (common-lisp:cons "customerAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bgp-peer-state))
      (common-lisp:list
       (common-lisp:cons "bgpPeerState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bgp-status))
      (common-lisp:list
       (common-lisp:cons "bgpStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-device-v2))
      (common-lisp:list
       (common-lisp:cons "awsDeviceV2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-logical-device-id))
      (common-lisp:list
       (common-lisp:cons "awsLogicalDeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bgppeer))
   common-lisp:nil))
(common-lisp:deftype bgppeer-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype bgppeer-id-list ()
   '(trivial-types:proper-list bgppeer-id))
 (common-lisp:defun make-bgppeer-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list bgppeer-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype bgppeer-list () '(trivial-types:proper-list bgppeer))
 (common-lisp:defun make-bgppeer-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list bgppeer))
   aws-sdk/generator/shape::members))
(common-lisp:deftype bgppeer-state () 'common-lisp:string)
(common-lisp:deftype bgpstatus () 'common-lisp:string)
(common-lisp:deftype bandwidth () 'common-lisp:string)
(common-lisp:deftype boolean-flag () 'common-lisp:boolean)
(common-lisp:deftype cidr () 'common-lisp:string)
(common-lisp:deftype cak () 'common-lisp:string)
(common-lisp:deftype ckn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass confirm-connection-request common-lisp:nil
                       ((connection-id :initarg :connection-id :initform
                         (common-lisp:error ":connectionid is required") :type
                         (common-lisp:or connection-id common-lisp:null)
                         :accessor
                         struct-shape-confirm-connection-request-connection-id
                         :shape "ConnectionId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-confirm-connection-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'confirm-connection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'confirm-connection-request
                    'make-confirm-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          confirm-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          confirm-connection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-id))
      (common-lisp:list
       (common-lisp:cons "connectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          confirm-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass confirm-connection-response common-lisp:nil
                       ((connection-state :initarg :connection-state :initform
                         common-lisp:nil :type
                         (common-lisp:or connection-state common-lisp:null)
                         :accessor
                         struct-shape-confirm-connection-response-connection-state
                         :shape "ConnectionState" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-confirm-connection-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'confirm-connection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'confirm-connection-response
                    'make-confirm-connection-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          confirm-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          confirm-connection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-state))
      (common-lisp:list
       (common-lisp:cons "connectionState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          confirm-connection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass confirm-customer-agreement-request common-lisp:nil
                       ((agreement-name :initarg :agreement-name :initform
                         common-lisp:nil :type
                         (common-lisp:or agreement-name common-lisp:null)
                         :accessor
                         struct-shape-confirm-customer-agreement-request-agreement-name
                         :shape "AgreementName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-confirm-customer-agreement-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'confirm-customer-agreement-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'confirm-customer-agreement-request
                    'make-confirm-customer-agreement-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          confirm-customer-agreement-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          confirm-customer-agreement-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agreement-name))
      (common-lisp:list
       (common-lisp:cons "agreementName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          confirm-customer-agreement-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass confirm-customer-agreement-response common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or status common-lisp:null)
                         :accessor
                         struct-shape-confirm-customer-agreement-response-status
                         :shape "Status" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-confirm-customer-agreement-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'confirm-customer-agreement-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'confirm-customer-agreement-response
                    'make-confirm-customer-agreement-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          confirm-customer-agreement-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          confirm-customer-agreement-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          confirm-customer-agreement-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass confirm-private-virtual-interface-request
                       common-lisp:nil
                       ((virtual-interface-id :initarg :virtual-interface-id
                         :initform
                         (common-lisp:error ":virtualinterfaceid is required")
                         :type
                         (common-lisp:or virtual-interface-id common-lisp:null)
                         :accessor
                         struct-shape-confirm-private-virtual-interface-request-virtual-interface-id
                         :shape "VirtualInterfaceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (virtual-gateway-id :initarg :virtual-gateway-id
                         :initform common-lisp:nil :type
                         (common-lisp:or virtual-gateway-id common-lisp:null)
                         :accessor
                         struct-shape-confirm-private-virtual-interface-request-virtual-gateway-id
                         :shape "VirtualGatewayId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (direct-connect-gateway-id :initarg
                         :direct-connect-gateway-id :initform common-lisp:nil
                         :type
                         (common-lisp:or direct-connect-gateway-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-confirm-private-virtual-interface-request-direct-connect-gateway-id
                         :shape "DirectConnectGatewayId" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-confirm-private-virtual-interface-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'confirm-private-virtual-interface-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'confirm-private-virtual-interface-request
                    'make-confirm-private-virtual-interface-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          confirm-private-virtual-interface-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          confirm-private-virtual-interface-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-interface-id))
      (common-lisp:list
       (common-lisp:cons "virtualInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-gateway-id))
      (common-lisp:list
       (common-lisp:cons "virtualGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'direct-connect-gateway-id))
      (common-lisp:list
       (common-lisp:cons "directConnectGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          confirm-private-virtual-interface-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass confirm-private-virtual-interface-response
                       common-lisp:nil
                       ((virtual-interface-state :initarg
                         :virtual-interface-state :initform common-lisp:nil
                         :type
                         (common-lisp:or virtual-interface-state
                                         common-lisp:null)
                         :accessor
                         struct-shape-confirm-private-virtual-interface-response-virtual-interface-state
                         :shape "VirtualInterfaceState" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-confirm-private-virtual-interface-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'confirm-private-virtual-interface-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'confirm-private-virtual-interface-response
                    'make-confirm-private-virtual-interface-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          confirm-private-virtual-interface-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          confirm-private-virtual-interface-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-interface-state))
      (common-lisp:list
       (common-lisp:cons "virtualInterfaceState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          confirm-private-virtual-interface-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass confirm-public-virtual-interface-request common-lisp:nil
                       ((virtual-interface-id :initarg :virtual-interface-id
                         :initform
                         (common-lisp:error ":virtualinterfaceid is required")
                         :type
                         (common-lisp:or virtual-interface-id common-lisp:null)
                         :accessor
                         struct-shape-confirm-public-virtual-interface-request-virtual-interface-id
                         :shape "VirtualInterfaceId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-confirm-public-virtual-interface-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'confirm-public-virtual-interface-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'confirm-public-virtual-interface-request
                    'make-confirm-public-virtual-interface-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          confirm-public-virtual-interface-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          confirm-public-virtual-interface-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-interface-id))
      (common-lisp:list
       (common-lisp:cons "virtualInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          confirm-public-virtual-interface-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass confirm-public-virtual-interface-response
                       common-lisp:nil
                       ((virtual-interface-state :initarg
                         :virtual-interface-state :initform common-lisp:nil
                         :type
                         (common-lisp:or virtual-interface-state
                                         common-lisp:null)
                         :accessor
                         struct-shape-confirm-public-virtual-interface-response-virtual-interface-state
                         :shape "VirtualInterfaceState" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-confirm-public-virtual-interface-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'confirm-public-virtual-interface-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'confirm-public-virtual-interface-response
                    'make-confirm-public-virtual-interface-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          confirm-public-virtual-interface-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          confirm-public-virtual-interface-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-interface-state))
      (common-lisp:list
       (common-lisp:cons "virtualInterfaceState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          confirm-public-virtual-interface-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass confirm-transit-virtual-interface-request
                       common-lisp:nil
                       ((virtual-interface-id :initarg :virtual-interface-id
                         :initform
                         (common-lisp:error ":virtualinterfaceid is required")
                         :type
                         (common-lisp:or virtual-interface-id common-lisp:null)
                         :accessor
                         struct-shape-confirm-transit-virtual-interface-request-virtual-interface-id
                         :shape "VirtualInterfaceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (direct-connect-gateway-id :initarg
                         :direct-connect-gateway-id :initform
                         (common-lisp:error
                          ":directconnectgatewayid is required")
                         :type
                         (common-lisp:or direct-connect-gateway-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-confirm-transit-virtual-interface-request-direct-connect-gateway-id
                         :shape "DirectConnectGatewayId" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-confirm-transit-virtual-interface-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'confirm-transit-virtual-interface-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'confirm-transit-virtual-interface-request
                    'make-confirm-transit-virtual-interface-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          confirm-transit-virtual-interface-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          confirm-transit-virtual-interface-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-interface-id))
      (common-lisp:list
       (common-lisp:cons "virtualInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'direct-connect-gateway-id))
      (common-lisp:list
       (common-lisp:cons "directConnectGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          confirm-transit-virtual-interface-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass confirm-transit-virtual-interface-response
                       common-lisp:nil
                       ((virtual-interface-state :initarg
                         :virtual-interface-state :initform common-lisp:nil
                         :type
                         (common-lisp:or virtual-interface-state
                                         common-lisp:null)
                         :accessor
                         struct-shape-confirm-transit-virtual-interface-response-virtual-interface-state
                         :shape "VirtualInterfaceState" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-confirm-transit-virtual-interface-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'confirm-transit-virtual-interface-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'confirm-transit-virtual-interface-response
                    'make-confirm-transit-virtual-interface-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          confirm-transit-virtual-interface-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          confirm-transit-virtual-interface-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-interface-state))
      (common-lisp:list
       (common-lisp:cons "virtualInterfaceState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          confirm-transit-virtual-interface-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass connection common-lisp:nil
                       ((owner-account :initarg :owner-account :initform
                         common-lisp:nil :type
                         (common-lisp:or owner-account common-lisp:null)
                         :accessor struct-shape-connection-owner-account :shape
                         "OwnerAccount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connection-id :initarg :connection-id :initform
                         common-lisp:nil :type
                         (common-lisp:or connection-id common-lisp:null)
                         :accessor struct-shape-connection-connection-id :shape
                         "ConnectionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connection-name :initarg :connection-name :initform
                         common-lisp:nil :type
                         (common-lisp:or connection-name common-lisp:null)
                         :accessor struct-shape-connection-connection-name
                         :shape "ConnectionName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connection-state :initarg :connection-state :initform
                         common-lisp:nil :type
                         (common-lisp:or connection-state common-lisp:null)
                         :accessor struct-shape-connection-connection-state
                         :shape "ConnectionState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (region :initarg :region :initform common-lisp:nil
                         :type (common-lisp:or region common-lisp:null)
                         :accessor struct-shape-connection-region :shape
                         "Region" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (location :initarg :location :initform common-lisp:nil
                         :type (common-lisp:or location-code common-lisp:null)
                         :accessor struct-shape-connection-location :shape
                         "LocationCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bandwidth :initarg :bandwidth :initform
                         common-lisp:nil :type
                         (common-lisp:or bandwidth common-lisp:null) :accessor
                         struct-shape-connection-bandwidth :shape "Bandwidth"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (vlan :initarg :vlan :initform common-lisp:nil :type
                         (common-lisp:or vlan common-lisp:null) :accessor
                         struct-shape-connection-vlan :shape "VLAN" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (partner-name :initarg :partner-name :initform
                         common-lisp:nil :type
                         (common-lisp:or partner-name common-lisp:null)
                         :accessor struct-shape-connection-partner-name :shape
                         "PartnerName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (loa-issue-time :initarg :loa-issue-time :initform
                         common-lisp:nil :type
                         (common-lisp:or loa-issue-time common-lisp:null)
                         :accessor struct-shape-connection-loa-issue-time
                         :shape "LoaIssueTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lag-id :initarg :lag-id :initform common-lisp:nil
                         :type (common-lisp:or lag-id common-lisp:null)
                         :accessor struct-shape-connection-lag-id :shape
                         "LagId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (aws-device :initarg :aws-device :initform
                         common-lisp:nil :type
                         (common-lisp:or aws-device common-lisp:null) :accessor
                         struct-shape-connection-aws-device :shape "AwsDevice"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (jumbo-frame-capable :initarg :jumbo-frame-capable
                         :initform common-lisp:nil :type
                         (common-lisp:or jumbo-frame-capable common-lisp:null)
                         :accessor struct-shape-connection-jumbo-frame-capable
                         :shape "JumboFrameCapable" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aws-device-v2 :initarg :aws-device-v2 :initform
                         common-lisp:nil :type
                         (common-lisp:or aws-device-v2 common-lisp:null)
                         :accessor struct-shape-connection-aws-device-v2 :shape
                         "AwsDeviceV2" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (aws-logical-device-id :initarg :aws-logical-device-id
                         :initform common-lisp:nil :type
                         (common-lisp:or aws-logical-device-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-connection-aws-logical-device-id :shape
                         "AwsLogicalDeviceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (has-logical-redundancy :initarg
                         :has-logical-redundancy :initform common-lisp:nil
                         :type
                         (common-lisp:or has-logical-redundancy
                                         common-lisp:null)
                         :accessor
                         struct-shape-connection-has-logical-redundancy :shape
                         "HasLogicalRedundancy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-connection-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (provider-name :initarg :provider-name :initform
                         common-lisp:nil :type
                         (common-lisp:or provider-name common-lisp:null)
                         :accessor struct-shape-connection-provider-name :shape
                         "ProviderName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mac-sec-capable :initarg :mac-sec-capable :initform
                         common-lisp:nil :type
                         (common-lisp:or mac-sec-capable common-lisp:null)
                         :accessor struct-shape-connection-mac-sec-capable
                         :shape "MacSecCapable" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port-encryption-status :initarg
                         :port-encryption-status :initform common-lisp:nil
                         :type
                         (common-lisp:or port-encryption-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-connection-port-encryption-status :shape
                         "PortEncryptionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encryption-mode :initarg :encryption-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or encryption-mode common-lisp:null)
                         :accessor struct-shape-connection-encryption-mode
                         :shape "EncryptionMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mac-sec-keys :initarg :mac-sec-keys :initform
                         common-lisp:nil :type
                         (common-lisp:or mac-sec-key-list common-lisp:null)
                         :accessor struct-shape-connection-mac-sec-keys :shape
                         "MacSecKeyList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-connection
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'connection
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'connection 'make-connection))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input connection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input connection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-account))
      (common-lisp:list
       (common-lisp:cons "ownerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-id))
      (common-lisp:list
       (common-lisp:cons "connectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-name))
      (common-lisp:list
       (common-lisp:cons "connectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-state))
      (common-lisp:list
       (common-lisp:cons "connectionState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bandwidth))
      (common-lisp:list
       (common-lisp:cons "bandwidth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vlan))
      (common-lisp:list
       (common-lisp:cons "vlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partner-name))
      (common-lisp:list
       (common-lisp:cons "partnerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'loa-issue-time))
      (common-lisp:list
       (common-lisp:cons "loaIssueTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lag-id))
      (common-lisp:list
       (common-lisp:cons "lagId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-device))
      (common-lisp:list
       (common-lisp:cons "awsDevice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'jumbo-frame-capable))
      (common-lisp:list
       (common-lisp:cons "jumboFrameCapable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-device-v2))
      (common-lisp:list
       (common-lisp:cons "awsDeviceV2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-logical-device-id))
      (common-lisp:list
       (common-lisp:cons "awsLogicalDeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'has-logical-redundancy))
      (common-lisp:list
       (common-lisp:cons "hasLogicalRedundancy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-name))
      (common-lisp:list
       (common-lisp:cons "providerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mac-sec-capable))
      (common-lisp:list
       (common-lisp:cons "macSecCapable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'port-encryption-status))
      (common-lisp:list
       (common-lisp:cons "portEncryptionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-mode))
      (common-lisp:list
       (common-lisp:cons "encryptionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mac-sec-keys))
      (common-lisp:list
       (common-lisp:cons "macSecKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input connection))
   common-lisp:nil))
(common-lisp:deftype connection-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype connection-list ()
   '(trivial-types:proper-list connection))
 (common-lisp:defun make-connection-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list connection))
   aws-sdk/generator/shape::members))
(common-lisp:deftype connection-name () 'common-lisp:string)
(common-lisp:deftype connection-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass connections common-lisp:nil
                       ((connections :initarg :connections :initform
                         common-lisp:nil :type
                         (common-lisp:or connection-list common-lisp:null)
                         :accessor struct-shape-connections-connections :shape
                         "ConnectionList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-connections
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'connections
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'connections 'make-connections))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input connections))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input connections))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connections))
      (common-lisp:list
       (common-lisp:cons "connections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input connections))
   common-lisp:nil))
(common-lisp:deftype count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass create-bgppeer-request common-lisp:nil
                       ((virtual-interface-id :initarg :virtual-interface-id
                         :initform common-lisp:nil :type
                         (common-lisp:or virtual-interface-id common-lisp:null)
                         :accessor
                         struct-shape-create-bgppeer-request-virtual-interface-id
                         :shape "VirtualInterfaceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (new-bgppeer :initarg :new-bgppeer :initform
                         common-lisp:nil :type
                         (common-lisp:or new-bgppeer common-lisp:null)
                         :accessor
                         struct-shape-create-bgppeer-request-new-bgppeer :shape
                         "NewBGPPeer" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-bgppeer-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-bgppeer-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-bgppeer-request 'make-create-bgppeer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-bgppeer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-bgppeer-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-interface-id))
      (common-lisp:list
       (common-lisp:cons "virtualInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-bgppeer))
      (common-lisp:list
       (common-lisp:cons "newBGPPeer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-bgppeer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-bgppeer-response common-lisp:nil
                       ((virtual-interface :initarg :virtual-interface
                         :initform common-lisp:nil :type
                         (common-lisp:or virtual-interface common-lisp:null)
                         :accessor
                         struct-shape-create-bgppeer-response-virtual-interface
                         :shape "VirtualInterface" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-bgppeer-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-bgppeer-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-bgppeer-response 'make-create-bgppeer-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-bgppeer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-bgppeer-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-interface))
      (common-lisp:list
       (common-lisp:cons "virtualInterface"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-bgppeer-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-connection-request common-lisp:nil
                       ((location :initarg :location :initform
                         (common-lisp:error ":location is required") :type
                         (common-lisp:or location-code common-lisp:null)
                         :accessor
                         struct-shape-create-connection-request-location :shape
                         "LocationCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bandwidth :initarg :bandwidth :initform
                         (common-lisp:error ":bandwidth is required") :type
                         (common-lisp:or bandwidth common-lisp:null) :accessor
                         struct-shape-create-connection-request-bandwidth
                         :shape "Bandwidth" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connection-name :initarg :connection-name :initform
                         (common-lisp:error ":connectionname is required")
                         :type
                         (common-lisp:or connection-name common-lisp:null)
                         :accessor
                         struct-shape-create-connection-request-connection-name
                         :shape "ConnectionName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lag-id :initarg :lag-id :initform common-lisp:nil
                         :type (common-lisp:or lag-id common-lisp:null)
                         :accessor
                         struct-shape-create-connection-request-lag-id :shape
                         "LagId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-connection-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (provider-name :initarg :provider-name :initform
                         common-lisp:nil :type
                         (common-lisp:or provider-name common-lisp:null)
                         :accessor
                         struct-shape-create-connection-request-provider-name
                         :shape "ProviderName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (request-macsec :initarg :request-macsec :initform
                         common-lisp:nil :type
                         (common-lisp:or request-macsec common-lisp:null)
                         :accessor
                         struct-shape-create-connection-request-request-macsec
                         :shape "RequestMACSec" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-connection-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-connection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-connection-request
                    'make-create-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bandwidth))
      (common-lisp:list
       (common-lisp:cons "bandwidth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-name))
      (common-lisp:list
       (common-lisp:cons "connectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lag-id))
      (common-lisp:list
       (common-lisp:cons "lagId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-name))
      (common-lisp:list
       (common-lisp:cons "providerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-macsec))
      (common-lisp:list
       (common-lisp:cons "requestMACSec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  create-direct-connect-gateway-association-proposal-request common-lisp:nil
  ((direct-connect-gateway-id :initarg :direct-connect-gateway-id :initform
    (common-lisp:error ":directconnectgatewayid is required") :type
    (common-lisp:or direct-connect-gateway-id common-lisp:null) :accessor
    struct-shape-create-direct-connect-gateway-association-proposal-request-direct-connect-gateway-id
    :shape "DirectConnectGatewayId" :location common-lisp:nil :location-name
    common-lisp:nil)
   (direct-connect-gateway-owner-account :initarg
    :direct-connect-gateway-owner-account :initform
    (common-lisp:error ":directconnectgatewayowneraccount is required") :type
    (common-lisp:or owner-account common-lisp:null) :accessor
    struct-shape-create-direct-connect-gateway-association-proposal-request-direct-connect-gateway-owner-account
    :shape "OwnerAccount" :location common-lisp:nil :location-name
    common-lisp:nil)
   (gateway-id :initarg :gateway-id :initform
    (common-lisp:error ":gatewayid is required") :type
    (common-lisp:or gateway-id-to-associate common-lisp:null) :accessor
    struct-shape-create-direct-connect-gateway-association-proposal-request-gateway-id
    :shape "GatewayIdToAssociate" :location common-lisp:nil :location-name
    common-lisp:nil)
   (add-allowed-prefixes-to-direct-connect-gateway :initarg
    :add-allowed-prefixes-to-direct-connect-gateway :initform common-lisp:nil
    :type (common-lisp:or route-filter-prefix-list common-lisp:null) :accessor
    struct-shape-create-direct-connect-gateway-association-proposal-request-add-allowed-prefixes-to-direct-connect-gateway
    :shape "RouteFilterPrefixList" :location common-lisp:nil :location-name
    common-lisp:nil)
   (remove-allowed-prefixes-to-direct-connect-gateway :initarg
    :remove-allowed-prefixes-to-direct-connect-gateway :initform
    common-lisp:nil :type
    (common-lisp:or route-filter-prefix-list common-lisp:null) :accessor
    struct-shape-create-direct-connect-gateway-association-proposal-request-remove-allowed-prefixes-to-direct-connect-gateway
    :shape "RouteFilterPrefixList" :location common-lisp:nil :location-name
    common-lisp:nil))
  (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-direct-connect-gateway-association-proposal-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-direct-connect-gateway-association-proposal-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-direct-connect-gateway-association-proposal-request
                    'make-create-direct-connect-gateway-association-proposal-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-direct-connect-gateway-association-proposal-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-direct-connect-gateway-association-proposal-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'direct-connect-gateway-id))
      (common-lisp:list
       (common-lisp:cons "directConnectGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'direct-connect-gateway-owner-account))
      (common-lisp:list
       (common-lisp:cons "directConnectGatewayOwnerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-id))
      (common-lisp:list
       (common-lisp:cons "gatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'add-allowed-prefixes-to-direct-connect-gateway))
      (common-lisp:list
       (common-lisp:cons "addAllowedPrefixesToDirectConnectGateway"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remove-allowed-prefixes-to-direct-connect-gateway))
      (common-lisp:list
       (common-lisp:cons "removeAllowedPrefixesToDirectConnectGateway"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-direct-connect-gateway-association-proposal-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  create-direct-connect-gateway-association-proposal-result common-lisp:nil
  ((direct-connect-gateway-association-proposal :initarg
    :direct-connect-gateway-association-proposal :initform common-lisp:nil
    :type
    (common-lisp:or direct-connect-gateway-association-proposal
                    common-lisp:null)
    :accessor
    struct-shape-create-direct-connect-gateway-association-proposal-result-direct-connect-gateway-association-proposal
    :shape "DirectConnectGatewayAssociationProposal" :location common-lisp:nil
    :location-name common-lisp:nil))
  (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-direct-connect-gateway-association-proposal-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-direct-connect-gateway-association-proposal-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-direct-connect-gateway-association-proposal-result
                    'make-create-direct-connect-gateway-association-proposal-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-direct-connect-gateway-association-proposal-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-direct-connect-gateway-association-proposal-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'direct-connect-gateway-association-proposal))
      (common-lisp:list
       (common-lisp:cons "directConnectGatewayAssociationProposal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-direct-connect-gateway-association-proposal-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-direct-connect-gateway-association-request
                       common-lisp:nil
                       ((direct-connect-gateway-id :initarg
                         :direct-connect-gateway-id :initform
                         (common-lisp:error
                          ":directconnectgatewayid is required")
                         :type
                         (common-lisp:or direct-connect-gateway-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-direct-connect-gateway-association-request-direct-connect-gateway-id
                         :shape "DirectConnectGatewayId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (gateway-id :initarg :gateway-id :initform
                         common-lisp:nil :type
                         (common-lisp:or gateway-id-to-associate
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-direct-connect-gateway-association-request-gateway-id
                         :shape "GatewayIdToAssociate" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (add-allowed-prefixes-to-direct-connect-gateway
                         :initarg
                         :add-allowed-prefixes-to-direct-connect-gateway
                         :initform common-lisp:nil :type
                         (common-lisp:or route-filter-prefix-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-direct-connect-gateway-association-request-add-allowed-prefixes-to-direct-connect-gateway
                         :shape "RouteFilterPrefixList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (virtual-gateway-id :initarg :virtual-gateway-id
                         :initform common-lisp:nil :type
                         (common-lisp:or virtual-gateway-id common-lisp:null)
                         :accessor
                         struct-shape-create-direct-connect-gateway-association-request-virtual-gateway-id
                         :shape "VirtualGatewayId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-direct-connect-gateway-association-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-direct-connect-gateway-association-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-direct-connect-gateway-association-request
                    'make-create-direct-connect-gateway-association-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-direct-connect-gateway-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-direct-connect-gateway-association-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'direct-connect-gateway-id))
      (common-lisp:list
       (common-lisp:cons "directConnectGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-id))
      (common-lisp:list
       (common-lisp:cons "gatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'add-allowed-prefixes-to-direct-connect-gateway))
      (common-lisp:list
       (common-lisp:cons "addAllowedPrefixesToDirectConnectGateway"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-gateway-id))
      (common-lisp:list
       (common-lisp:cons "virtualGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-direct-connect-gateway-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-direct-connect-gateway-association-result
                       common-lisp:nil
                       ((direct-connect-gateway-association :initarg
                         :direct-connect-gateway-association :initform
                         common-lisp:nil :type
                         (common-lisp:or direct-connect-gateway-association
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-direct-connect-gateway-association-result-direct-connect-gateway-association
                         :shape "DirectConnectGatewayAssociation" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-direct-connect-gateway-association-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-direct-connect-gateway-association-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-direct-connect-gateway-association-result
                    'make-create-direct-connect-gateway-association-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-direct-connect-gateway-association-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-direct-connect-gateway-association-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'direct-connect-gateway-association))
      (common-lisp:list
       (common-lisp:cons "directConnectGatewayAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-direct-connect-gateway-association-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-direct-connect-gateway-request common-lisp:nil
                       ((direct-connect-gateway-name :initarg
                         :direct-connect-gateway-name :initform
                         (common-lisp:error
                          ":directconnectgatewayname is required")
                         :type
                         (common-lisp:or direct-connect-gateway-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-direct-connect-gateway-request-direct-connect-gateway-name
                         :shape "DirectConnectGatewayName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (amazon-side-asn :initarg :amazon-side-asn :initform
                         common-lisp:nil :type
                         (common-lisp:or long-asn common-lisp:null) :accessor
                         struct-shape-create-direct-connect-gateway-request-amazon-side-asn
                         :shape "LongAsn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-direct-connect-gateway-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-direct-connect-gateway-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-direct-connect-gateway-request
                    'make-create-direct-connect-gateway-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-direct-connect-gateway-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-direct-connect-gateway-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'direct-connect-gateway-name))
      (common-lisp:list
       (common-lisp:cons "directConnectGatewayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amazon-side-asn))
      (common-lisp:list
       (common-lisp:cons "amazonSideAsn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-direct-connect-gateway-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-direct-connect-gateway-result common-lisp:nil
                       ((direct-connect-gateway :initarg
                         :direct-connect-gateway :initform common-lisp:nil
                         :type
                         (common-lisp:or direct-connect-gateway
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-direct-connect-gateway-result-direct-connect-gateway
                         :shape "DirectConnectGateway" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-direct-connect-gateway-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-direct-connect-gateway-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-direct-connect-gateway-result
                    'make-create-direct-connect-gateway-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-direct-connect-gateway-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-direct-connect-gateway-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'direct-connect-gateway))
      (common-lisp:list
       (common-lisp:cons "directConnectGateway"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-direct-connect-gateway-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-interconnect-request common-lisp:nil
                       ((interconnect-name :initarg :interconnect-name
                         :initform
                         (common-lisp:error ":interconnectname is required")
                         :type
                         (common-lisp:or interconnect-name common-lisp:null)
                         :accessor
                         struct-shape-create-interconnect-request-interconnect-name
                         :shape "InterconnectName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bandwidth :initarg :bandwidth :initform
                         (common-lisp:error ":bandwidth is required") :type
                         (common-lisp:or bandwidth common-lisp:null) :accessor
                         struct-shape-create-interconnect-request-bandwidth
                         :shape "Bandwidth" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (location :initarg :location :initform
                         (common-lisp:error ":location is required") :type
                         (common-lisp:or location-code common-lisp:null)
                         :accessor
                         struct-shape-create-interconnect-request-location
                         :shape "LocationCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lag-id :initarg :lag-id :initform common-lisp:nil
                         :type (common-lisp:or lag-id common-lisp:null)
                         :accessor
                         struct-shape-create-interconnect-request-lag-id :shape
                         "LagId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-interconnect-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (provider-name :initarg :provider-name :initform
                         common-lisp:nil :type
                         (common-lisp:or provider-name common-lisp:null)
                         :accessor
                         struct-shape-create-interconnect-request-provider-name
                         :shape "ProviderName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-interconnect-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-interconnect-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-interconnect-request
                    'make-create-interconnect-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-interconnect-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-interconnect-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interconnect-name))
      (common-lisp:list
       (common-lisp:cons "interconnectName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bandwidth))
      (common-lisp:list
       (common-lisp:cons "bandwidth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lag-id))
      (common-lisp:list
       (common-lisp:cons "lagId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-name))
      (common-lisp:list
       (common-lisp:cons "providerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-interconnect-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-lag-request common-lisp:nil
                       ((number-of-connections :initarg :number-of-connections
                         :initform
                         (common-lisp:error ":numberofconnections is required")
                         :type (common-lisp:or count common-lisp:null)
                         :accessor
                         struct-shape-create-lag-request-number-of-connections
                         :shape "Count" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (location :initarg :location :initform
                         (common-lisp:error ":location is required") :type
                         (common-lisp:or location-code common-lisp:null)
                         :accessor struct-shape-create-lag-request-location
                         :shape "LocationCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connections-bandwidth :initarg :connections-bandwidth
                         :initform
                         (common-lisp:error
                          ":connectionsbandwidth is required")
                         :type (common-lisp:or bandwidth common-lisp:null)
                         :accessor
                         struct-shape-create-lag-request-connections-bandwidth
                         :shape "Bandwidth" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lag-name :initarg :lag-name :initform
                         (common-lisp:error ":lagname is required") :type
                         (common-lisp:or lag-name common-lisp:null) :accessor
                         struct-shape-create-lag-request-lag-name :shape
                         "LagName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (connection-id :initarg :connection-id :initform
                         common-lisp:nil :type
                         (common-lisp:or connection-id common-lisp:null)
                         :accessor
                         struct-shape-create-lag-request-connection-id :shape
                         "ConnectionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-lag-request-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (child-connection-tags :initarg :child-connection-tags
                         :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-lag-request-child-connection-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provider-name :initarg :provider-name :initform
                         common-lisp:nil :type
                         (common-lisp:or provider-name common-lisp:null)
                         :accessor
                         struct-shape-create-lag-request-provider-name :shape
                         "ProviderName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (request-macsec :initarg :request-macsec :initform
                         common-lisp:nil :type
                         (common-lisp:or request-macsec common-lisp:null)
                         :accessor
                         struct-shape-create-lag-request-request-macsec :shape
                         "RequestMACSec" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-lag-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-lag-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-lag-request 'make-create-lag-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-lag-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-lag-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-connections))
      (common-lisp:list
       (common-lisp:cons "numberOfConnections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connections-bandwidth))
      (common-lisp:list
       (common-lisp:cons "connectionsBandwidth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lag-name))
      (common-lisp:list
       (common-lisp:cons "lagName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-id))
      (common-lisp:list
       (common-lisp:cons "connectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'child-connection-tags))
      (common-lisp:list
       (common-lisp:cons "childConnectionTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-name))
      (common-lisp:list
       (common-lisp:cons "providerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-macsec))
      (common-lisp:list
       (common-lisp:cons "requestMACSec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-lag-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-private-virtual-interface-request common-lisp:nil
                       ((connection-id :initarg :connection-id :initform
                         (common-lisp:error ":connectionid is required") :type
                         (common-lisp:or connection-id common-lisp:null)
                         :accessor
                         struct-shape-create-private-virtual-interface-request-connection-id
                         :shape "ConnectionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (new-private-virtual-interface :initarg
                         :new-private-virtual-interface :initform
                         (common-lisp:error
                          ":newprivatevirtualinterface is required")
                         :type
                         (common-lisp:or new-private-virtual-interface
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-private-virtual-interface-request-new-private-virtual-interface
                         :shape "NewPrivateVirtualInterface" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-private-virtual-interface-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-private-virtual-interface-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-private-virtual-interface-request
                    'make-create-private-virtual-interface-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-private-virtual-interface-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-private-virtual-interface-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-id))
      (common-lisp:list
       (common-lisp:cons "connectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'new-private-virtual-interface))
      (common-lisp:list
       (common-lisp:cons "newPrivateVirtualInterface"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-private-virtual-interface-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-public-virtual-interface-request common-lisp:nil
                       ((connection-id :initarg :connection-id :initform
                         (common-lisp:error ":connectionid is required") :type
                         (common-lisp:or connection-id common-lisp:null)
                         :accessor
                         struct-shape-create-public-virtual-interface-request-connection-id
                         :shape "ConnectionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (new-public-virtual-interface :initarg
                         :new-public-virtual-interface :initform
                         (common-lisp:error
                          ":newpublicvirtualinterface is required")
                         :type
                         (common-lisp:or new-public-virtual-interface
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-public-virtual-interface-request-new-public-virtual-interface
                         :shape "NewPublicVirtualInterface" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-public-virtual-interface-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-public-virtual-interface-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-public-virtual-interface-request
                    'make-create-public-virtual-interface-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-public-virtual-interface-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-public-virtual-interface-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-id))
      (common-lisp:list
       (common-lisp:cons "connectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'new-public-virtual-interface))
      (common-lisp:list
       (common-lisp:cons "newPublicVirtualInterface"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-public-virtual-interface-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-transit-virtual-interface-request common-lisp:nil
                       ((connection-id :initarg :connection-id :initform
                         (common-lisp:error ":connectionid is required") :type
                         (common-lisp:or connection-id common-lisp:null)
                         :accessor
                         struct-shape-create-transit-virtual-interface-request-connection-id
                         :shape "ConnectionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (new-transit-virtual-interface :initarg
                         :new-transit-virtual-interface :initform
                         (common-lisp:error
                          ":newtransitvirtualinterface is required")
                         :type
                         (common-lisp:or new-transit-virtual-interface
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-transit-virtual-interface-request-new-transit-virtual-interface
                         :shape "NewTransitVirtualInterface" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-transit-virtual-interface-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-transit-virtual-interface-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-transit-virtual-interface-request
                    'make-create-transit-virtual-interface-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-transit-virtual-interface-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-transit-virtual-interface-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-id))
      (common-lisp:list
       (common-lisp:cons "connectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'new-transit-virtual-interface))
      (common-lisp:list
       (common-lisp:cons "newTransitVirtualInterface"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-transit-virtual-interface-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-transit-virtual-interface-result common-lisp:nil
                       ((virtual-interface :initarg :virtual-interface
                         :initform common-lisp:nil :type
                         (common-lisp:or virtual-interface common-lisp:null)
                         :accessor
                         struct-shape-create-transit-virtual-interface-result-virtual-interface
                         :shape "VirtualInterface" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-transit-virtual-interface-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-transit-virtual-interface-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-transit-virtual-interface-result
                    'make-create-transit-virtual-interface-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-transit-virtual-interface-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-transit-virtual-interface-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-interface))
      (common-lisp:list
       (common-lisp:cons "virtualInterface"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-transit-virtual-interface-result))
   common-lisp:nil))
(common-lisp:deftype customer-address () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass customer-agreement common-lisp:nil
                       ((agreement-name :initarg :agreement-name :initform
                         common-lisp:nil :type
                         (common-lisp:or agreement-name common-lisp:null)
                         :accessor
                         struct-shape-customer-agreement-agreement-name :shape
                         "AgreementName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or status common-lisp:null)
                         :accessor struct-shape-customer-agreement-status
                         :shape "Status" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-customer-agreement
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'customer-agreement
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'customer-agreement 'make-customer-agreement))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input customer-agreement))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input customer-agreement))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agreement-name))
      (common-lisp:list
       (common-lisp:cons "agreementName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input customer-agreement))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bgppeer-request common-lisp:nil
                       ((virtual-interface-id :initarg :virtual-interface-id
                         :initform common-lisp:nil :type
                         (common-lisp:or virtual-interface-id common-lisp:null)
                         :accessor
                         struct-shape-delete-bgppeer-request-virtual-interface-id
                         :shape "VirtualInterfaceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (asn :initarg :asn :initform common-lisp:nil :type
                         (common-lisp:or asn common-lisp:null) :accessor
                         struct-shape-delete-bgppeer-request-asn :shape "ASN"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (customer-address :initarg :customer-address :initform
                         common-lisp:nil :type
                         (common-lisp:or customer-address common-lisp:null)
                         :accessor
                         struct-shape-delete-bgppeer-request-customer-address
                         :shape "CustomerAddress" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bgp-peer-id :initarg :bgp-peer-id :initform
                         common-lisp:nil :type
                         (common-lisp:or bgppeer-id common-lisp:null) :accessor
                         struct-shape-delete-bgppeer-request-bgp-peer-id :shape
                         "BGPPeerId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-bgppeer-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-bgppeer-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-bgppeer-request 'make-delete-bgppeer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bgppeer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bgppeer-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-interface-id))
      (common-lisp:list
       (common-lisp:cons "virtualInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asn))
      (common-lisp:list
       (common-lisp:cons "asn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-address))
      (common-lisp:list
       (common-lisp:cons "customerAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bgp-peer-id))
      (common-lisp:list
       (common-lisp:cons "bgpPeerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bgppeer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bgppeer-response common-lisp:nil
                       ((virtual-interface :initarg :virtual-interface
                         :initform common-lisp:nil :type
                         (common-lisp:or virtual-interface common-lisp:null)
                         :accessor
                         struct-shape-delete-bgppeer-response-virtual-interface
                         :shape "VirtualInterface" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-bgppeer-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-bgppeer-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-bgppeer-response 'make-delete-bgppeer-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bgppeer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bgppeer-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-interface))
      (common-lisp:list
       (common-lisp:cons "virtualInterface"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bgppeer-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-connection-request common-lisp:nil
                       ((connection-id :initarg :connection-id :initform
                         (common-lisp:error ":connectionid is required") :type
                         (common-lisp:or connection-id common-lisp:null)
                         :accessor
                         struct-shape-delete-connection-request-connection-id
                         :shape "ConnectionId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-connection-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-connection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-connection-request
                    'make-delete-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-id))
      (common-lisp:list
       (common-lisp:cons "connectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  delete-direct-connect-gateway-association-proposal-request common-lisp:nil
  ((proposal-id :initarg :proposal-id :initform
    (common-lisp:error ":proposalid is required") :type
    (common-lisp:or direct-connect-gateway-association-proposal-id
                    common-lisp:null)
    :accessor
    struct-shape-delete-direct-connect-gateway-association-proposal-request-proposal-id
    :shape "DirectConnectGatewayAssociationProposalId" :location
    common-lisp:nil :location-name common-lisp:nil))
  (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-direct-connect-gateway-association-proposal-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-direct-connect-gateway-association-proposal-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-direct-connect-gateway-association-proposal-request
                    'make-delete-direct-connect-gateway-association-proposal-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-direct-connect-gateway-association-proposal-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-direct-connect-gateway-association-proposal-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'proposal-id))
      (common-lisp:list
       (common-lisp:cons "proposalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-direct-connect-gateway-association-proposal-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  delete-direct-connect-gateway-association-proposal-result common-lisp:nil
  ((direct-connect-gateway-association-proposal :initarg
    :direct-connect-gateway-association-proposal :initform common-lisp:nil
    :type
    (common-lisp:or direct-connect-gateway-association-proposal
                    common-lisp:null)
    :accessor
    struct-shape-delete-direct-connect-gateway-association-proposal-result-direct-connect-gateway-association-proposal
    :shape "DirectConnectGatewayAssociationProposal" :location common-lisp:nil
    :location-name common-lisp:nil))
  (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-direct-connect-gateway-association-proposal-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-direct-connect-gateway-association-proposal-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-direct-connect-gateway-association-proposal-result
                    'make-delete-direct-connect-gateway-association-proposal-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-direct-connect-gateway-association-proposal-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-direct-connect-gateway-association-proposal-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'direct-connect-gateway-association-proposal))
      (common-lisp:list
       (common-lisp:cons "directConnectGatewayAssociationProposal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-direct-connect-gateway-association-proposal-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-direct-connect-gateway-association-request
                       common-lisp:nil
                       ((association-id :initarg :association-id :initform
                         common-lisp:nil :type
                         (common-lisp:or direct-connect-gateway-association-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-direct-connect-gateway-association-request-association-id
                         :shape "DirectConnectGatewayAssociationId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (direct-connect-gateway-id :initarg
                         :direct-connect-gateway-id :initform common-lisp:nil
                         :type
                         (common-lisp:or direct-connect-gateway-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-direct-connect-gateway-association-request-direct-connect-gateway-id
                         :shape "DirectConnectGatewayId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (virtual-gateway-id :initarg :virtual-gateway-id
                         :initform common-lisp:nil :type
                         (common-lisp:or virtual-gateway-id common-lisp:null)
                         :accessor
                         struct-shape-delete-direct-connect-gateway-association-request-virtual-gateway-id
                         :shape "VirtualGatewayId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-direct-connect-gateway-association-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-direct-connect-gateway-association-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-direct-connect-gateway-association-request
                    'make-delete-direct-connect-gateway-association-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-direct-connect-gateway-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-direct-connect-gateway-association-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "associationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'direct-connect-gateway-id))
      (common-lisp:list
       (common-lisp:cons "directConnectGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-gateway-id))
      (common-lisp:list
       (common-lisp:cons "virtualGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-direct-connect-gateway-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-direct-connect-gateway-association-result
                       common-lisp:nil
                       ((direct-connect-gateway-association :initarg
                         :direct-connect-gateway-association :initform
                         common-lisp:nil :type
                         (common-lisp:or direct-connect-gateway-association
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-direct-connect-gateway-association-result-direct-connect-gateway-association
                         :shape "DirectConnectGatewayAssociation" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-direct-connect-gateway-association-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-direct-connect-gateway-association-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-direct-connect-gateway-association-result
                    'make-delete-direct-connect-gateway-association-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-direct-connect-gateway-association-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-direct-connect-gateway-association-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'direct-connect-gateway-association))
      (common-lisp:list
       (common-lisp:cons "directConnectGatewayAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-direct-connect-gateway-association-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-direct-connect-gateway-request common-lisp:nil
                       ((direct-connect-gateway-id :initarg
                         :direct-connect-gateway-id :initform
                         (common-lisp:error
                          ":directconnectgatewayid is required")
                         :type
                         (common-lisp:or direct-connect-gateway-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-direct-connect-gateway-request-direct-connect-gateway-id
                         :shape "DirectConnectGatewayId" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-direct-connect-gateway-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-direct-connect-gateway-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-direct-connect-gateway-request
                    'make-delete-direct-connect-gateway-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-direct-connect-gateway-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-direct-connect-gateway-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'direct-connect-gateway-id))
      (common-lisp:list
       (common-lisp:cons "directConnectGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-direct-connect-gateway-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-direct-connect-gateway-result common-lisp:nil
                       ((direct-connect-gateway :initarg
                         :direct-connect-gateway :initform common-lisp:nil
                         :type
                         (common-lisp:or direct-connect-gateway
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-direct-connect-gateway-result-direct-connect-gateway
                         :shape "DirectConnectGateway" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-direct-connect-gateway-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-direct-connect-gateway-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-direct-connect-gateway-result
                    'make-delete-direct-connect-gateway-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-direct-connect-gateway-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-direct-connect-gateway-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'direct-connect-gateway))
      (common-lisp:list
       (common-lisp:cons "directConnectGateway"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-direct-connect-gateway-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-interconnect-request common-lisp:nil
                       ((interconnect-id :initarg :interconnect-id :initform
                         (common-lisp:error ":interconnectid is required")
                         :type
                         (common-lisp:or interconnect-id common-lisp:null)
                         :accessor
                         struct-shape-delete-interconnect-request-interconnect-id
                         :shape "InterconnectId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-interconnect-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-interconnect-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-interconnect-request
                    'make-delete-interconnect-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-interconnect-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-interconnect-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interconnect-id))
      (common-lisp:list
       (common-lisp:cons "interconnectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-interconnect-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-interconnect-response common-lisp:nil
                       ((interconnect-state :initarg :interconnect-state
                         :initform common-lisp:nil :type
                         (common-lisp:or interconnect-state common-lisp:null)
                         :accessor
                         struct-shape-delete-interconnect-response-interconnect-state
                         :shape "InterconnectState" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-interconnect-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-interconnect-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-interconnect-response
                    'make-delete-interconnect-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-interconnect-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-interconnect-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interconnect-state))
      (common-lisp:list
       (common-lisp:cons "interconnectState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-interconnect-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-lag-request common-lisp:nil
                       ((lag-id :initarg :lag-id :initform
                         (common-lisp:error ":lagid is required") :type
                         (common-lisp:or lag-id common-lisp:null) :accessor
                         struct-shape-delete-lag-request-lag-id :shape "LagId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-lag-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-lag-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-lag-request 'make-delete-lag-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-lag-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-lag-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lag-id))
      (common-lisp:list
       (common-lisp:cons "lagId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-lag-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-virtual-interface-request common-lisp:nil
                       ((virtual-interface-id :initarg :virtual-interface-id
                         :initform
                         (common-lisp:error ":virtualinterfaceid is required")
                         :type
                         (common-lisp:or virtual-interface-id common-lisp:null)
                         :accessor
                         struct-shape-delete-virtual-interface-request-virtual-interface-id
                         :shape "VirtualInterfaceId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-virtual-interface-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-virtual-interface-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-virtual-interface-request
                    'make-delete-virtual-interface-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-interface-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-interface-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-interface-id))
      (common-lisp:list
       (common-lisp:cons "virtualInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-interface-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-virtual-interface-response common-lisp:nil
                       ((virtual-interface-state :initarg
                         :virtual-interface-state :initform common-lisp:nil
                         :type
                         (common-lisp:or virtual-interface-state
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-virtual-interface-response-virtual-interface-state
                         :shape "VirtualInterfaceState" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-virtual-interface-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-virtual-interface-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-virtual-interface-response
                    'make-delete-virtual-interface-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-interface-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-interface-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-interface-state))
      (common-lisp:list
       (common-lisp:cons "virtualInterfaceState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-interface-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-connection-loa-request common-lisp:nil
                       ((connection-id :initarg :connection-id :initform
                         (common-lisp:error ":connectionid is required") :type
                         (common-lisp:or connection-id common-lisp:null)
                         :accessor
                         struct-shape-describe-connection-loa-request-connection-id
                         :shape "ConnectionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provider-name :initarg :provider-name :initform
                         common-lisp:nil :type
                         (common-lisp:or provider-name common-lisp:null)
                         :accessor
                         struct-shape-describe-connection-loa-request-provider-name
                         :shape "ProviderName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (loa-content-type :initarg :loa-content-type :initform
                         common-lisp:nil :type
                         (common-lisp:or loa-content-type common-lisp:null)
                         :accessor
                         struct-shape-describe-connection-loa-request-loa-content-type
                         :shape "LoaContentType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-connection-loa-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-connection-loa-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-connection-loa-request
                    'make-describe-connection-loa-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-connection-loa-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-connection-loa-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-id))
      (common-lisp:list
       (common-lisp:cons "connectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-name))
      (common-lisp:list
       (common-lisp:cons "providerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'loa-content-type))
      (common-lisp:list
       (common-lisp:cons "loaContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-connection-loa-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-connection-loa-response common-lisp:nil
                       ((loa :initarg :loa :initform common-lisp:nil :type
                         (common-lisp:or loa common-lisp:null) :accessor
                         struct-shape-describe-connection-loa-response-loa
                         :shape "Loa" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-connection-loa-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-connection-loa-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-connection-loa-response
                    'make-describe-connection-loa-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-connection-loa-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-connection-loa-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'loa))
      (common-lisp:list
       (common-lisp:cons "loa"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-connection-loa-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-connections-on-interconnect-request
                       common-lisp:nil
                       ((interconnect-id :initarg :interconnect-id :initform
                         (common-lisp:error ":interconnectid is required")
                         :type
                         (common-lisp:or interconnect-id common-lisp:null)
                         :accessor
                         struct-shape-describe-connections-on-interconnect-request-interconnect-id
                         :shape "InterconnectId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-connections-on-interconnect-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-connections-on-interconnect-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-connections-on-interconnect-request
                    'make-describe-connections-on-interconnect-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-connections-on-interconnect-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-connections-on-interconnect-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interconnect-id))
      (common-lisp:list
       (common-lisp:cons "interconnectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-connections-on-interconnect-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-connections-request common-lisp:nil
                       ((connection-id :initarg :connection-id :initform
                         common-lisp:nil :type
                         (common-lisp:or connection-id common-lisp:null)
                         :accessor
                         struct-shape-describe-connections-request-connection-id
                         :shape "ConnectionId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-connections-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-connections-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-connections-request
                    'make-describe-connections-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-connections-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-connections-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-id))
      (common-lisp:list
       (common-lisp:cons "connectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-connections-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-customer-metadata-response common-lisp:nil
                       ((agreements :initarg :agreements :initform
                         common-lisp:nil :type
                         (common-lisp:or agreement-list common-lisp:null)
                         :accessor
                         struct-shape-describe-customer-metadata-response-agreements
                         :shape "AgreementList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (nni-partner-type :initarg :nni-partner-type :initform
                         common-lisp:nil :type
                         (common-lisp:or nni-partner-type common-lisp:null)
                         :accessor
                         struct-shape-describe-customer-metadata-response-nni-partner-type
                         :shape "NniPartnerType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-customer-metadata-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-customer-metadata-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-customer-metadata-response
                    'make-describe-customer-metadata-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-customer-metadata-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-customer-metadata-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agreements))
      (common-lisp:list
       (common-lisp:cons "agreements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nni-partner-type))
      (common-lisp:list
       (common-lisp:cons "nniPartnerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-customer-metadata-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  describe-direct-connect-gateway-association-proposals-request common-lisp:nil
  ((direct-connect-gateway-id :initarg :direct-connect-gateway-id :initform
    common-lisp:nil :type
    (common-lisp:or direct-connect-gateway-id common-lisp:null) :accessor
    struct-shape-describe-direct-connect-gateway-association-proposals-request-direct-connect-gateway-id
    :shape "DirectConnectGatewayId" :location common-lisp:nil :location-name
    common-lisp:nil)
   (proposal-id :initarg :proposal-id :initform common-lisp:nil :type
    (common-lisp:or direct-connect-gateway-association-proposal-id
                    common-lisp:null)
    :accessor
    struct-shape-describe-direct-connect-gateway-association-proposals-request-proposal-id
    :shape "DirectConnectGatewayAssociationProposalId" :location
    common-lisp:nil :location-name common-lisp:nil)
   (associated-gateway-id :initarg :associated-gateway-id :initform
    common-lisp:nil :type
    (common-lisp:or associated-gateway-id common-lisp:null) :accessor
    struct-shape-describe-direct-connect-gateway-association-proposals-request-associated-gateway-id
    :shape "AssociatedGatewayId" :location common-lisp:nil :location-name
    common-lisp:nil)
   (max-results :initarg :max-results :initform common-lisp:nil :type
    (common-lisp:or max-result-set-size common-lisp:null) :accessor
    struct-shape-describe-direct-connect-gateway-association-proposals-request-max-results
    :shape "MaxResultSetSize" :location common-lisp:nil :location-name
    common-lisp:nil)
   (next-token :initarg :next-token :initform common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null) :accessor
    struct-shape-describe-direct-connect-gateway-association-proposals-request-next-token
    :shape "PaginationToken" :location common-lisp:nil :location-name
    common-lisp:nil))
  (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-direct-connect-gateway-association-proposals-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-direct-connect-gateway-association-proposals-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list
   'describe-direct-connect-gateway-association-proposals-request
   'make-describe-direct-connect-gateway-association-proposals-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-direct-connect-gateway-association-proposals-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-direct-connect-gateway-association-proposals-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'direct-connect-gateway-id))
      (common-lisp:list
       (common-lisp:cons "directConnectGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'proposal-id))
      (common-lisp:list
       (common-lisp:cons "proposalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associated-gateway-id))
      (common-lisp:list
       (common-lisp:cons "associatedGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-direct-connect-gateway-association-proposals-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  describe-direct-connect-gateway-association-proposals-result common-lisp:nil
  ((direct-connect-gateway-association-proposals :initarg
    :direct-connect-gateway-association-proposals :initform common-lisp:nil
    :type
    (common-lisp:or direct-connect-gateway-association-proposal-list
                    common-lisp:null)
    :accessor
    struct-shape-describe-direct-connect-gateway-association-proposals-result-direct-connect-gateway-association-proposals
    :shape "DirectConnectGatewayAssociationProposalList" :location
    common-lisp:nil :location-name common-lisp:nil)
   (next-token :initarg :next-token :initform common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null) :accessor
    struct-shape-describe-direct-connect-gateway-association-proposals-result-next-token
    :shape "PaginationToken" :location common-lisp:nil :location-name
    common-lisp:nil))
  (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-direct-connect-gateway-association-proposals-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-direct-connect-gateway-association-proposals-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list
   'describe-direct-connect-gateway-association-proposals-result
   'make-describe-direct-connect-gateway-association-proposals-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-direct-connect-gateway-association-proposals-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-direct-connect-gateway-association-proposals-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'direct-connect-gateway-association-proposals))
      (common-lisp:list
       (common-lisp:cons "directConnectGatewayAssociationProposals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-direct-connect-gateway-association-proposals-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-direct-connect-gateway-associations-request
                       common-lisp:nil
                       ((association-id :initarg :association-id :initform
                         common-lisp:nil :type
                         (common-lisp:or direct-connect-gateway-association-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-direct-connect-gateway-associations-request-association-id
                         :shape "DirectConnectGatewayAssociationId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (associated-gateway-id :initarg :associated-gateway-id
                         :initform common-lisp:nil :type
                         (common-lisp:or associated-gateway-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-direct-connect-gateway-associations-request-associated-gateway-id
                         :shape "AssociatedGatewayId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (direct-connect-gateway-id :initarg
                         :direct-connect-gateway-id :initform common-lisp:nil
                         :type
                         (common-lisp:or direct-connect-gateway-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-direct-connect-gateway-associations-request-direct-connect-gateway-id
                         :shape "DirectConnectGatewayId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-result-set-size common-lisp:null)
                         :accessor
                         struct-shape-describe-direct-connect-gateway-associations-request-max-results
                         :shape "MaxResultSetSize" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-describe-direct-connect-gateway-associations-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (virtual-gateway-id :initarg :virtual-gateway-id
                         :initform common-lisp:nil :type
                         (common-lisp:or virtual-gateway-id common-lisp:null)
                         :accessor
                         struct-shape-describe-direct-connect-gateway-associations-request-virtual-gateway-id
                         :shape "VirtualGatewayId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-direct-connect-gateway-associations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-direct-connect-gateway-associations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-direct-connect-gateway-associations-request
                    'make-describe-direct-connect-gateway-associations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-direct-connect-gateway-associations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-direct-connect-gateway-associations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "associationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associated-gateway-id))
      (common-lisp:list
       (common-lisp:cons "associatedGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'direct-connect-gateway-id))
      (common-lisp:list
       (common-lisp:cons "directConnectGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-gateway-id))
      (common-lisp:list
       (common-lisp:cons "virtualGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-direct-connect-gateway-associations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-direct-connect-gateway-associations-result
                       common-lisp:nil
                       ((direct-connect-gateway-associations :initarg
                         :direct-connect-gateway-associations :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          direct-connect-gateway-association-list
                          common-lisp:null)
                         :accessor
                         struct-shape-describe-direct-connect-gateway-associations-result-direct-connect-gateway-associations
                         :shape "DirectConnectGatewayAssociationList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-describe-direct-connect-gateway-associations-result-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-direct-connect-gateway-associations-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-direct-connect-gateway-associations-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-direct-connect-gateway-associations-result
                    'make-describe-direct-connect-gateway-associations-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-direct-connect-gateway-associations-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-direct-connect-gateway-associations-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'direct-connect-gateway-associations))
      (common-lisp:list
       (common-lisp:cons "directConnectGatewayAssociations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-direct-connect-gateway-associations-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-direct-connect-gateway-attachments-request
                       common-lisp:nil
                       ((direct-connect-gateway-id :initarg
                         :direct-connect-gateway-id :initform common-lisp:nil
                         :type
                         (common-lisp:or direct-connect-gateway-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-direct-connect-gateway-attachments-request-direct-connect-gateway-id
                         :shape "DirectConnectGatewayId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (virtual-interface-id :initarg :virtual-interface-id
                         :initform common-lisp:nil :type
                         (common-lisp:or virtual-interface-id common-lisp:null)
                         :accessor
                         struct-shape-describe-direct-connect-gateway-attachments-request-virtual-interface-id
                         :shape "VirtualInterfaceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-result-set-size common-lisp:null)
                         :accessor
                         struct-shape-describe-direct-connect-gateway-attachments-request-max-results
                         :shape "MaxResultSetSize" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-describe-direct-connect-gateway-attachments-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-direct-connect-gateway-attachments-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-direct-connect-gateway-attachments-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-direct-connect-gateway-attachments-request
                    'make-describe-direct-connect-gateway-attachments-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-direct-connect-gateway-attachments-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-direct-connect-gateway-attachments-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'direct-connect-gateway-id))
      (common-lisp:list
       (common-lisp:cons "directConnectGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-interface-id))
      (common-lisp:list
       (common-lisp:cons "virtualInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-direct-connect-gateway-attachments-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-direct-connect-gateway-attachments-result
                       common-lisp:nil
                       ((direct-connect-gateway-attachments :initarg
                         :direct-connect-gateway-attachments :initform
                         common-lisp:nil :type
                         (common-lisp:or direct-connect-gateway-attachment-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-direct-connect-gateway-attachments-result-direct-connect-gateway-attachments
                         :shape "DirectConnectGatewayAttachmentList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-describe-direct-connect-gateway-attachments-result-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-direct-connect-gateway-attachments-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-direct-connect-gateway-attachments-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-direct-connect-gateway-attachments-result
                    'make-describe-direct-connect-gateway-attachments-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-direct-connect-gateway-attachments-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-direct-connect-gateway-attachments-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'direct-connect-gateway-attachments))
      (common-lisp:list
       (common-lisp:cons "directConnectGatewayAttachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-direct-connect-gateway-attachments-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-direct-connect-gateways-request common-lisp:nil
                       ((direct-connect-gateway-id :initarg
                         :direct-connect-gateway-id :initform common-lisp:nil
                         :type
                         (common-lisp:or direct-connect-gateway-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-direct-connect-gateways-request-direct-connect-gateway-id
                         :shape "DirectConnectGatewayId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-result-set-size common-lisp:null)
                         :accessor
                         struct-shape-describe-direct-connect-gateways-request-max-results
                         :shape "MaxResultSetSize" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-describe-direct-connect-gateways-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-direct-connect-gateways-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-direct-connect-gateways-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-direct-connect-gateways-request
                    'make-describe-direct-connect-gateways-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-direct-connect-gateways-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-direct-connect-gateways-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'direct-connect-gateway-id))
      (common-lisp:list
       (common-lisp:cons "directConnectGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-direct-connect-gateways-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-direct-connect-gateways-result common-lisp:nil
                       ((direct-connect-gateways :initarg
                         :direct-connect-gateways :initform common-lisp:nil
                         :type
                         (common-lisp:or direct-connect-gateway-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-direct-connect-gateways-result-direct-connect-gateways
                         :shape "DirectConnectGatewayList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-describe-direct-connect-gateways-result-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-direct-connect-gateways-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-direct-connect-gateways-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-direct-connect-gateways-result
                    'make-describe-direct-connect-gateways-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-direct-connect-gateways-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-direct-connect-gateways-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'direct-connect-gateways))
      (common-lisp:list
       (common-lisp:cons "directConnectGateways"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-direct-connect-gateways-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-hosted-connections-request common-lisp:nil
                       ((connection-id :initarg :connection-id :initform
                         (common-lisp:error ":connectionid is required") :type
                         (common-lisp:or connection-id common-lisp:null)
                         :accessor
                         struct-shape-describe-hosted-connections-request-connection-id
                         :shape "ConnectionId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-hosted-connections-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-hosted-connections-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-hosted-connections-request
                    'make-describe-hosted-connections-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-hosted-connections-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-hosted-connections-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-id))
      (common-lisp:list
       (common-lisp:cons "connectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-hosted-connections-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-interconnect-loa-request common-lisp:nil
                       ((interconnect-id :initarg :interconnect-id :initform
                         (common-lisp:error ":interconnectid is required")
                         :type
                         (common-lisp:or interconnect-id common-lisp:null)
                         :accessor
                         struct-shape-describe-interconnect-loa-request-interconnect-id
                         :shape "InterconnectId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provider-name :initarg :provider-name :initform
                         common-lisp:nil :type
                         (common-lisp:or provider-name common-lisp:null)
                         :accessor
                         struct-shape-describe-interconnect-loa-request-provider-name
                         :shape "ProviderName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (loa-content-type :initarg :loa-content-type :initform
                         common-lisp:nil :type
                         (common-lisp:or loa-content-type common-lisp:null)
                         :accessor
                         struct-shape-describe-interconnect-loa-request-loa-content-type
                         :shape "LoaContentType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-interconnect-loa-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-interconnect-loa-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-interconnect-loa-request
                    'make-describe-interconnect-loa-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-interconnect-loa-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-interconnect-loa-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interconnect-id))
      (common-lisp:list
       (common-lisp:cons "interconnectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-name))
      (common-lisp:list
       (common-lisp:cons "providerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'loa-content-type))
      (common-lisp:list
       (common-lisp:cons "loaContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-interconnect-loa-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-interconnect-loa-response common-lisp:nil
                       ((loa :initarg :loa :initform common-lisp:nil :type
                         (common-lisp:or loa common-lisp:null) :accessor
                         struct-shape-describe-interconnect-loa-response-loa
                         :shape "Loa" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-interconnect-loa-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-interconnect-loa-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-interconnect-loa-response
                    'make-describe-interconnect-loa-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-interconnect-loa-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-interconnect-loa-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'loa))
      (common-lisp:list
       (common-lisp:cons "loa"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-interconnect-loa-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-interconnects-request common-lisp:nil
                       ((interconnect-id :initarg :interconnect-id :initform
                         common-lisp:nil :type
                         (common-lisp:or interconnect-id common-lisp:null)
                         :accessor
                         struct-shape-describe-interconnects-request-interconnect-id
                         :shape "InterconnectId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-interconnects-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-interconnects-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-interconnects-request
                    'make-describe-interconnects-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-interconnects-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-interconnects-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interconnect-id))
      (common-lisp:list
       (common-lisp:cons "interconnectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-interconnects-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-lags-request common-lisp:nil
                       ((lag-id :initarg :lag-id :initform common-lisp:nil
                         :type (common-lisp:or lag-id common-lisp:null)
                         :accessor struct-shape-describe-lags-request-lag-id
                         :shape "LagId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-lags-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-lags-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-lags-request 'make-describe-lags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-lags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-lags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lag-id))
      (common-lisp:list
       (common-lisp:cons "lagId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-lags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-loa-request common-lisp:nil
                       ((connection-id :initarg :connection-id :initform
                         (common-lisp:error ":connectionid is required") :type
                         (common-lisp:or connection-id common-lisp:null)
                         :accessor
                         struct-shape-describe-loa-request-connection-id :shape
                         "ConnectionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provider-name :initarg :provider-name :initform
                         common-lisp:nil :type
                         (common-lisp:or provider-name common-lisp:null)
                         :accessor
                         struct-shape-describe-loa-request-provider-name :shape
                         "ProviderName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (loa-content-type :initarg :loa-content-type :initform
                         common-lisp:nil :type
                         (common-lisp:or loa-content-type common-lisp:null)
                         :accessor
                         struct-shape-describe-loa-request-loa-content-type
                         :shape "LoaContentType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-loa-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-loa-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-loa-request 'make-describe-loa-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-loa-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-loa-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-id))
      (common-lisp:list
       (common-lisp:cons "connectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-name))
      (common-lisp:list
       (common-lisp:cons "providerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'loa-content-type))
      (common-lisp:list
       (common-lisp:cons "loaContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-loa-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-router-configuration-request common-lisp:nil
                       ((virtual-interface-id :initarg :virtual-interface-id
                         :initform
                         (common-lisp:error ":virtualinterfaceid is required")
                         :type
                         (common-lisp:or virtual-interface-id common-lisp:null)
                         :accessor
                         struct-shape-describe-router-configuration-request-virtual-interface-id
                         :shape "VirtualInterfaceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (router-type-identifier :initarg
                         :router-type-identifier :initform common-lisp:nil
                         :type
                         (common-lisp:or router-type-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-router-configuration-request-router-type-identifier
                         :shape "RouterTypeIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-router-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-router-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-router-configuration-request
                    'make-describe-router-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-router-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-router-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-interface-id))
      (common-lisp:list
       (common-lisp:cons "virtualInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'router-type-identifier))
      (common-lisp:list
       (common-lisp:cons "routerTypeIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-router-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-router-configuration-response common-lisp:nil
                       ((customer-router-config :initarg
                         :customer-router-config :initform common-lisp:nil
                         :type (common-lisp:or router-config common-lisp:null)
                         :accessor
                         struct-shape-describe-router-configuration-response-customer-router-config
                         :shape "RouterConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (router :initarg :router :initform common-lisp:nil
                         :type (common-lisp:or router-type common-lisp:null)
                         :accessor
                         struct-shape-describe-router-configuration-response-router
                         :shape "RouterType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (virtual-interface-id :initarg :virtual-interface-id
                         :initform common-lisp:nil :type
                         (common-lisp:or virtual-interface-id common-lisp:null)
                         :accessor
                         struct-shape-describe-router-configuration-response-virtual-interface-id
                         :shape "VirtualInterfaceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (virtual-interface-name :initarg
                         :virtual-interface-name :initform common-lisp:nil
                         :type
                         (common-lisp:or virtual-interface-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-router-configuration-response-virtual-interface-name
                         :shape "VirtualInterfaceName" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-router-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-router-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-router-configuration-response
                    'make-describe-router-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-router-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-router-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customer-router-config))
      (common-lisp:list
       (common-lisp:cons "customerRouterConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'router))
      (common-lisp:list
       (common-lisp:cons "router"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-interface-id))
      (common-lisp:list
       (common-lisp:cons "virtualInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-interface-name))
      (common-lisp:list
       (common-lisp:cons "virtualInterfaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-router-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-tags-request common-lisp:nil
                       ((resource-arns :initarg :resource-arns :initform
                         (common-lisp:error ":resourcearns is required") :type
                         (common-lisp:or resource-arn-list common-lisp:null)
                         :accessor
                         struct-shape-describe-tags-request-resource-arns
                         :shape "ResourceArnList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-tags-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-tags-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-tags-request 'make-describe-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arns))
      (common-lisp:list
       (common-lisp:cons "resourceArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-tags-response common-lisp:nil
                       ((resource-tags :initarg :resource-tags :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-tag-list common-lisp:null)
                         :accessor
                         struct-shape-describe-tags-response-resource-tags
                         :shape "ResourceTagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-tags-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-tags-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-tags-response 'make-describe-tags-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-tags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-tags-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-tags))
      (common-lisp:list
       (common-lisp:cons "resourceTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-tags-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-virtual-interfaces-request common-lisp:nil
                       ((connection-id :initarg :connection-id :initform
                         common-lisp:nil :type
                         (common-lisp:or connection-id common-lisp:null)
                         :accessor
                         struct-shape-describe-virtual-interfaces-request-connection-id
                         :shape "ConnectionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (virtual-interface-id :initarg :virtual-interface-id
                         :initform common-lisp:nil :type
                         (common-lisp:or virtual-interface-id common-lisp:null)
                         :accessor
                         struct-shape-describe-virtual-interfaces-request-virtual-interface-id
                         :shape "VirtualInterfaceId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-virtual-interfaces-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-virtual-interfaces-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-virtual-interfaces-request
                    'make-describe-virtual-interfaces-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-interfaces-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-interfaces-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-id))
      (common-lisp:list
       (common-lisp:cons "connectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-interface-id))
      (common-lisp:list
       (common-lisp:cons "virtualInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-interfaces-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition direct-connect-client-exception
     (directconnect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       direct-connect-client-exception-message)))
 (common-lisp:export
  (common-lisp:list 'direct-connect-client-exception
                    'direct-connect-client-exception-message)))
(common-lisp:progn
 (common-lisp:defclass direct-connect-gateway common-lisp:nil
                       ((direct-connect-gateway-id :initarg
                         :direct-connect-gateway-id :initform common-lisp:nil
                         :type
                         (common-lisp:or direct-connect-gateway-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-direct-connect-gateway-direct-connect-gateway-id
                         :shape "DirectConnectGatewayId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (direct-connect-gateway-name :initarg
                         :direct-connect-gateway-name :initform common-lisp:nil
                         :type
                         (common-lisp:or direct-connect-gateway-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-direct-connect-gateway-direct-connect-gateway-name
                         :shape "DirectConnectGatewayName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (amazon-side-asn :initarg :amazon-side-asn :initform
                         common-lisp:nil :type
                         (common-lisp:or long-asn common-lisp:null) :accessor
                         struct-shape-direct-connect-gateway-amazon-side-asn
                         :shape "LongAsn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owner-account :initarg :owner-account :initform
                         common-lisp:nil :type
                         (common-lisp:or owner-account common-lisp:null)
                         :accessor
                         struct-shape-direct-connect-gateway-owner-account
                         :shape "OwnerAccount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (direct-connect-gateway-state :initarg
                         :direct-connect-gateway-state :initform
                         common-lisp:nil :type
                         (common-lisp:or direct-connect-gateway-state
                                         common-lisp:null)
                         :accessor
                         struct-shape-direct-connect-gateway-direct-connect-gateway-state
                         :shape "DirectConnectGatewayState" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (state-change-error :initarg :state-change-error
                         :initform common-lisp:nil :type
                         (common-lisp:or state-change-error common-lisp:null)
                         :accessor
                         struct-shape-direct-connect-gateway-state-change-error
                         :shape "StateChangeError" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-direct-connect-gateway
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'direct-connect-gateway
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'direct-connect-gateway 'make-direct-connect-gateway))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          direct-connect-gateway))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          direct-connect-gateway))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'direct-connect-gateway-id))
      (common-lisp:list
       (common-lisp:cons "directConnectGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'direct-connect-gateway-name))
      (common-lisp:list
       (common-lisp:cons "directConnectGatewayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amazon-side-asn))
      (common-lisp:list
       (common-lisp:cons "amazonSideAsn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-account))
      (common-lisp:list
       (common-lisp:cons "ownerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'direct-connect-gateway-state))
      (common-lisp:list
       (common-lisp:cons "directConnectGatewayState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-change-error))
      (common-lisp:list
       (common-lisp:cons "stateChangeError"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          direct-connect-gateway))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass direct-connect-gateway-association common-lisp:nil
                       ((direct-connect-gateway-id :initarg
                         :direct-connect-gateway-id :initform common-lisp:nil
                         :type
                         (common-lisp:or direct-connect-gateway-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-direct-connect-gateway-association-direct-connect-gateway-id
                         :shape "DirectConnectGatewayId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (direct-connect-gateway-owner-account :initarg
                         :direct-connect-gateway-owner-account :initform
                         common-lisp:nil :type
                         (common-lisp:or owner-account common-lisp:null)
                         :accessor
                         struct-shape-direct-connect-gateway-association-direct-connect-gateway-owner-account
                         :shape "OwnerAccount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (association-state :initarg :association-state
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          direct-connect-gateway-association-state
                          common-lisp:null)
                         :accessor
                         struct-shape-direct-connect-gateway-association-association-state
                         :shape "DirectConnectGatewayAssociationState"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (state-change-error :initarg :state-change-error
                         :initform common-lisp:nil :type
                         (common-lisp:or state-change-error common-lisp:null)
                         :accessor
                         struct-shape-direct-connect-gateway-association-state-change-error
                         :shape "StateChangeError" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (associated-gateway :initarg :associated-gateway
                         :initform common-lisp:nil :type
                         (common-lisp:or associated-gateway common-lisp:null)
                         :accessor
                         struct-shape-direct-connect-gateway-association-associated-gateway
                         :shape "AssociatedGateway" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (association-id :initarg :association-id :initform
                         common-lisp:nil :type
                         (common-lisp:or direct-connect-gateway-association-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-direct-connect-gateway-association-association-id
                         :shape "DirectConnectGatewayAssociationId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (allowed-prefixes-to-direct-connect-gateway :initarg
                         :allowed-prefixes-to-direct-connect-gateway :initform
                         common-lisp:nil :type
                         (common-lisp:or route-filter-prefix-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-direct-connect-gateway-association-allowed-prefixes-to-direct-connect-gateway
                         :shape "RouteFilterPrefixList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (virtual-gateway-id :initarg :virtual-gateway-id
                         :initform common-lisp:nil :type
                         (common-lisp:or virtual-gateway-id common-lisp:null)
                         :accessor
                         struct-shape-direct-connect-gateway-association-virtual-gateway-id
                         :shape "VirtualGatewayId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (virtual-gateway-region :initarg
                         :virtual-gateway-region :initform common-lisp:nil
                         :type
                         (common-lisp:or virtual-gateway-region
                                         common-lisp:null)
                         :accessor
                         struct-shape-direct-connect-gateway-association-virtual-gateway-region
                         :shape "VirtualGatewayRegion" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (virtual-gateway-owner-account :initarg
                         :virtual-gateway-owner-account :initform
                         common-lisp:nil :type
                         (common-lisp:or owner-account common-lisp:null)
                         :accessor
                         struct-shape-direct-connect-gateway-association-virtual-gateway-owner-account
                         :shape "OwnerAccount" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-direct-connect-gateway-association
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'direct-connect-gateway-association
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'direct-connect-gateway-association
                    'make-direct-connect-gateway-association))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          direct-connect-gateway-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          direct-connect-gateway-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'direct-connect-gateway-id))
      (common-lisp:list
       (common-lisp:cons "directConnectGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'direct-connect-gateway-owner-account))
      (common-lisp:list
       (common-lisp:cons "directConnectGatewayOwnerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-state))
      (common-lisp:list
       (common-lisp:cons "associationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-change-error))
      (common-lisp:list
       (common-lisp:cons "stateChangeError"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'associated-gateway))
      (common-lisp:list
       (common-lisp:cons "associatedGateway"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "associationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allowed-prefixes-to-direct-connect-gateway))
      (common-lisp:list
       (common-lisp:cons "allowedPrefixesToDirectConnectGateway"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-gateway-id))
      (common-lisp:list
       (common-lisp:cons "virtualGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-gateway-region))
      (common-lisp:list
       (common-lisp:cons "virtualGatewayRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-gateway-owner-account))
      (common-lisp:list
       (common-lisp:cons "virtualGatewayOwnerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          direct-connect-gateway-association))
   common-lisp:nil))
(common-lisp:deftype direct-connect-gateway-association-id ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype direct-connect-gateway-association-list ()
   '(trivial-types:proper-list direct-connect-gateway-association))
 (common-lisp:defun make-direct-connect-gateway-association-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            direct-connect-gateway-association))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass direct-connect-gateway-association-proposal
                       common-lisp:nil
                       ((proposal-id :initarg :proposal-id :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          direct-connect-gateway-association-proposal-id
                          common-lisp:null)
                         :accessor
                         struct-shape-direct-connect-gateway-association-proposal-proposal-id
                         :shape "DirectConnectGatewayAssociationProposalId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (direct-connect-gateway-id :initarg
                         :direct-connect-gateway-id :initform common-lisp:nil
                         :type
                         (common-lisp:or direct-connect-gateway-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-direct-connect-gateway-association-proposal-direct-connect-gateway-id
                         :shape "DirectConnectGatewayId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (direct-connect-gateway-owner-account :initarg
                         :direct-connect-gateway-owner-account :initform
                         common-lisp:nil :type
                         (common-lisp:or owner-account common-lisp:null)
                         :accessor
                         struct-shape-direct-connect-gateway-association-proposal-direct-connect-gateway-owner-account
                         :shape "OwnerAccount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (proposal-state :initarg :proposal-state :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          direct-connect-gateway-association-proposal-state
                          common-lisp:null)
                         :accessor
                         struct-shape-direct-connect-gateway-association-proposal-proposal-state
                         :shape "DirectConnectGatewayAssociationProposalState"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (associated-gateway :initarg :associated-gateway
                         :initform common-lisp:nil :type
                         (common-lisp:or associated-gateway common-lisp:null)
                         :accessor
                         struct-shape-direct-connect-gateway-association-proposal-associated-gateway
                         :shape "AssociatedGateway" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (existing-allowed-prefixes-to-direct-connect-gateway
                         :initarg
                         :existing-allowed-prefixes-to-direct-connect-gateway
                         :initform common-lisp:nil :type
                         (common-lisp:or route-filter-prefix-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-direct-connect-gateway-association-proposal-existing-allowed-prefixes-to-direct-connect-gateway
                         :shape "RouteFilterPrefixList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (requested-allowed-prefixes-to-direct-connect-gateway
                         :initarg
                         :requested-allowed-prefixes-to-direct-connect-gateway
                         :initform common-lisp:nil :type
                         (common-lisp:or route-filter-prefix-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-direct-connect-gateway-association-proposal-requested-allowed-prefixes-to-direct-connect-gateway
                         :shape "RouteFilterPrefixList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-direct-connect-gateway-association-proposal
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'direct-connect-gateway-association-proposal
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'direct-connect-gateway-association-proposal
                    'make-direct-connect-gateway-association-proposal))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          direct-connect-gateway-association-proposal))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          direct-connect-gateway-association-proposal))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'proposal-id))
      (common-lisp:list
       (common-lisp:cons "proposalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'direct-connect-gateway-id))
      (common-lisp:list
       (common-lisp:cons "directConnectGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'direct-connect-gateway-owner-account))
      (common-lisp:list
       (common-lisp:cons "directConnectGatewayOwnerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'proposal-state))
      (common-lisp:list
       (common-lisp:cons "proposalState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'associated-gateway))
      (common-lisp:list
       (common-lisp:cons "associatedGateway"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'existing-allowed-prefixes-to-direct-connect-gateway))
      (common-lisp:list
       (common-lisp:cons "existingAllowedPrefixesToDirectConnectGateway"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'requested-allowed-prefixes-to-direct-connect-gateway))
      (common-lisp:list
       (common-lisp:cons "requestedAllowedPrefixesToDirectConnectGateway"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          direct-connect-gateway-association-proposal))
   common-lisp:nil))
(common-lisp:deftype direct-connect-gateway-association-proposal-id ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype direct-connect-gateway-association-proposal-list ()
   '(trivial-types:proper-list direct-connect-gateway-association-proposal))
 (common-lisp:defun make-direct-connect-gateway-association-proposal-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            direct-connect-gateway-association-proposal))
   aws-sdk/generator/shape::members))
(common-lisp:deftype direct-connect-gateway-association-proposal-state ()
  'common-lisp:string)
(common-lisp:deftype direct-connect-gateway-association-state ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass direct-connect-gateway-attachment common-lisp:nil
                       ((direct-connect-gateway-id :initarg
                         :direct-connect-gateway-id :initform common-lisp:nil
                         :type
                         (common-lisp:or direct-connect-gateway-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-direct-connect-gateway-attachment-direct-connect-gateway-id
                         :shape "DirectConnectGatewayId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (virtual-interface-id :initarg :virtual-interface-id
                         :initform common-lisp:nil :type
                         (common-lisp:or virtual-interface-id common-lisp:null)
                         :accessor
                         struct-shape-direct-connect-gateway-attachment-virtual-interface-id
                         :shape "VirtualInterfaceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (virtual-interface-region :initarg
                         :virtual-interface-region :initform common-lisp:nil
                         :type
                         (common-lisp:or virtual-interface-region
                                         common-lisp:null)
                         :accessor
                         struct-shape-direct-connect-gateway-attachment-virtual-interface-region
                         :shape "VirtualInterfaceRegion" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (virtual-interface-owner-account :initarg
                         :virtual-interface-owner-account :initform
                         common-lisp:nil :type
                         (common-lisp:or owner-account common-lisp:null)
                         :accessor
                         struct-shape-direct-connect-gateway-attachment-virtual-interface-owner-account
                         :shape "OwnerAccount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attachment-state :initarg :attachment-state :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          direct-connect-gateway-attachment-state
                          common-lisp:null)
                         :accessor
                         struct-shape-direct-connect-gateway-attachment-attachment-state
                         :shape "DirectConnectGatewayAttachmentState" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (attachment-type :initarg :attachment-type :initform
                         common-lisp:nil :type
                         (common-lisp:or direct-connect-gateway-attachment-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-direct-connect-gateway-attachment-attachment-type
                         :shape "DirectConnectGatewayAttachmentType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (state-change-error :initarg :state-change-error
                         :initform common-lisp:nil :type
                         (common-lisp:or state-change-error common-lisp:null)
                         :accessor
                         struct-shape-direct-connect-gateway-attachment-state-change-error
                         :shape "StateChangeError" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-direct-connect-gateway-attachment
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'direct-connect-gateway-attachment
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'direct-connect-gateway-attachment
                    'make-direct-connect-gateway-attachment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          direct-connect-gateway-attachment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          direct-connect-gateway-attachment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'direct-connect-gateway-id))
      (common-lisp:list
       (common-lisp:cons "directConnectGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-interface-id))
      (common-lisp:list
       (common-lisp:cons "virtualInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-interface-region))
      (common-lisp:list
       (common-lisp:cons "virtualInterfaceRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-interface-owner-account))
      (common-lisp:list
       (common-lisp:cons "virtualInterfaceOwnerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment-state))
      (common-lisp:list
       (common-lisp:cons "attachmentState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment-type))
      (common-lisp:list
       (common-lisp:cons "attachmentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-change-error))
      (common-lisp:list
       (common-lisp:cons "stateChangeError"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          direct-connect-gateway-attachment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype direct-connect-gateway-attachment-list ()
   '(trivial-types:proper-list direct-connect-gateway-attachment))
 (common-lisp:defun make-direct-connect-gateway-attachment-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            direct-connect-gateway-attachment))
   aws-sdk/generator/shape::members))
(common-lisp:deftype direct-connect-gateway-attachment-state ()
  'common-lisp:string)
(common-lisp:deftype direct-connect-gateway-attachment-type ()
  'common-lisp:string)
(common-lisp:deftype direct-connect-gateway-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype direct-connect-gateway-list ()
   '(trivial-types:proper-list direct-connect-gateway))
 (common-lisp:defun make-direct-connect-gateway-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list direct-connect-gateway))
   aws-sdk/generator/shape::members))
(common-lisp:deftype direct-connect-gateway-name () 'common-lisp:string)
(common-lisp:deftype direct-connect-gateway-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition direct-connect-server-exception
     (directconnect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       direct-connect-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'direct-connect-server-exception
                    'direct-connect-server-exception-message)))
(common-lisp:progn
 (common-lisp:defclass disassociate-connection-from-lag-request common-lisp:nil
                       ((connection-id :initarg :connection-id :initform
                         (common-lisp:error ":connectionid is required") :type
                         (common-lisp:or connection-id common-lisp:null)
                         :accessor
                         struct-shape-disassociate-connection-from-lag-request-connection-id
                         :shape "ConnectionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lag-id :initarg :lag-id :initform
                         (common-lisp:error ":lagid is required") :type
                         (common-lisp:or lag-id common-lisp:null) :accessor
                         struct-shape-disassociate-connection-from-lag-request-lag-id
                         :shape "LagId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-connection-from-lag-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-connection-from-lag-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-connection-from-lag-request
                    'make-disassociate-connection-from-lag-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-connection-from-lag-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-connection-from-lag-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-id))
      (common-lisp:list
       (common-lisp:cons "connectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lag-id))
      (common-lisp:list
       (common-lisp:cons "lagId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-connection-from-lag-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-mac-sec-key-request common-lisp:nil
                       ((connection-id :initarg :connection-id :initform
                         (common-lisp:error ":connectionid is required") :type
                         (common-lisp:or connection-id common-lisp:null)
                         :accessor
                         struct-shape-disassociate-mac-sec-key-request-connection-id
                         :shape "ConnectionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (secret-arn :initarg :secret-arn :initform
                         (common-lisp:error ":secretarn is required") :type
                         (common-lisp:or secret-arn common-lisp:null) :accessor
                         struct-shape-disassociate-mac-sec-key-request-secret-arn
                         :shape "SecretARN" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-mac-sec-key-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-mac-sec-key-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-mac-sec-key-request
                    'make-disassociate-mac-sec-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-mac-sec-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-mac-sec-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-id))
      (common-lisp:list
       (common-lisp:cons "connectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "secretARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-mac-sec-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-mac-sec-key-response common-lisp:nil
                       ((connection-id :initarg :connection-id :initform
                         common-lisp:nil :type
                         (common-lisp:or connection-id common-lisp:null)
                         :accessor
                         struct-shape-disassociate-mac-sec-key-response-connection-id
                         :shape "ConnectionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mac-sec-keys :initarg :mac-sec-keys :initform
                         common-lisp:nil :type
                         (common-lisp:or mac-sec-key-list common-lisp:null)
                         :accessor
                         struct-shape-disassociate-mac-sec-key-response-mac-sec-keys
                         :shape "MacSecKeyList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-mac-sec-key-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-mac-sec-key-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-mac-sec-key-response
                    'make-disassociate-mac-sec-key-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-mac-sec-key-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-mac-sec-key-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-id))
      (common-lisp:list
       (common-lisp:cons "connectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mac-sec-keys))
      (common-lisp:list
       (common-lisp:cons "macSecKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-mac-sec-key-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition duplicate-tag-keys-exception
     (directconnect-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'duplicate-tag-keys-exception)))
(common-lisp:deftype enable-site-link () 'common-lisp:boolean)
(common-lisp:deftype encryption-mode () 'common-lisp:string)
(common-lisp:deftype end-time () 'common-lisp:string)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype failure-test-history-status () 'common-lisp:string)
(common-lisp:deftype gateway-id-to-associate () 'common-lisp:string)
(common-lisp:deftype gateway-identifier () 'common-lisp:string)
(common-lisp:deftype gateway-type () 'common-lisp:string)
(common-lisp:deftype has-logical-redundancy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass interconnect common-lisp:nil
                       ((interconnect-id :initarg :interconnect-id :initform
                         common-lisp:nil :type
                         (common-lisp:or interconnect-id common-lisp:null)
                         :accessor struct-shape-interconnect-interconnect-id
                         :shape "InterconnectId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (interconnect-name :initarg :interconnect-name
                         :initform common-lisp:nil :type
                         (common-lisp:or interconnect-name common-lisp:null)
                         :accessor struct-shape-interconnect-interconnect-name
                         :shape "InterconnectName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (interconnect-state :initarg :interconnect-state
                         :initform common-lisp:nil :type
                         (common-lisp:or interconnect-state common-lisp:null)
                         :accessor struct-shape-interconnect-interconnect-state
                         :shape "InterconnectState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (region :initarg :region :initform common-lisp:nil
                         :type (common-lisp:or region common-lisp:null)
                         :accessor struct-shape-interconnect-region :shape
                         "Region" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (location :initarg :location :initform common-lisp:nil
                         :type (common-lisp:or location-code common-lisp:null)
                         :accessor struct-shape-interconnect-location :shape
                         "LocationCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bandwidth :initarg :bandwidth :initform
                         common-lisp:nil :type
                         (common-lisp:or bandwidth common-lisp:null) :accessor
                         struct-shape-interconnect-bandwidth :shape "Bandwidth"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (loa-issue-time :initarg :loa-issue-time :initform
                         common-lisp:nil :type
                         (common-lisp:or loa-issue-time common-lisp:null)
                         :accessor struct-shape-interconnect-loa-issue-time
                         :shape "LoaIssueTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lag-id :initarg :lag-id :initform common-lisp:nil
                         :type (common-lisp:or lag-id common-lisp:null)
                         :accessor struct-shape-interconnect-lag-id :shape
                         "LagId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (aws-device :initarg :aws-device :initform
                         common-lisp:nil :type
                         (common-lisp:or aws-device common-lisp:null) :accessor
                         struct-shape-interconnect-aws-device :shape
                         "AwsDevice" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (jumbo-frame-capable :initarg :jumbo-frame-capable
                         :initform common-lisp:nil :type
                         (common-lisp:or jumbo-frame-capable common-lisp:null)
                         :accessor
                         struct-shape-interconnect-jumbo-frame-capable :shape
                         "JumboFrameCapable" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aws-device-v2 :initarg :aws-device-v2 :initform
                         common-lisp:nil :type
                         (common-lisp:or aws-device-v2 common-lisp:null)
                         :accessor struct-shape-interconnect-aws-device-v2
                         :shape "AwsDeviceV2" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aws-logical-device-id :initarg :aws-logical-device-id
                         :initform common-lisp:nil :type
                         (common-lisp:or aws-logical-device-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-interconnect-aws-logical-device-id :shape
                         "AwsLogicalDeviceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (has-logical-redundancy :initarg
                         :has-logical-redundancy :initform common-lisp:nil
                         :type
                         (common-lisp:or has-logical-redundancy
                                         common-lisp:null)
                         :accessor
                         struct-shape-interconnect-has-logical-redundancy
                         :shape "HasLogicalRedundancy" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-interconnect-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (provider-name :initarg :provider-name :initform
                         common-lisp:nil :type
                         (common-lisp:or provider-name common-lisp:null)
                         :accessor struct-shape-interconnect-provider-name
                         :shape "ProviderName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-interconnect
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'interconnect
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'interconnect 'make-interconnect))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input interconnect))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input interconnect))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interconnect-id))
      (common-lisp:list
       (common-lisp:cons "interconnectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interconnect-name))
      (common-lisp:list
       (common-lisp:cons "interconnectName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interconnect-state))
      (common-lisp:list
       (common-lisp:cons "interconnectState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bandwidth))
      (common-lisp:list
       (common-lisp:cons "bandwidth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'loa-issue-time))
      (common-lisp:list
       (common-lisp:cons "loaIssueTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lag-id))
      (common-lisp:list
       (common-lisp:cons "lagId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-device))
      (common-lisp:list
       (common-lisp:cons "awsDevice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'jumbo-frame-capable))
      (common-lisp:list
       (common-lisp:cons "jumboFrameCapable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-device-v2))
      (common-lisp:list
       (common-lisp:cons "awsDeviceV2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-logical-device-id))
      (common-lisp:list
       (common-lisp:cons "awsLogicalDeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'has-logical-redundancy))
      (common-lisp:list
       (common-lisp:cons "hasLogicalRedundancy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-name))
      (common-lisp:list
       (common-lisp:cons "providerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input interconnect))
   common-lisp:nil))
(common-lisp:deftype interconnect-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype interconnect-list ()
   '(trivial-types:proper-list interconnect))
 (common-lisp:defun make-interconnect-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list interconnect))
   aws-sdk/generator/shape::members))
(common-lisp:deftype interconnect-name () 'common-lisp:string)
(common-lisp:deftype interconnect-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass interconnects common-lisp:nil
                       ((interconnects :initarg :interconnects :initform
                         common-lisp:nil :type
                         (common-lisp:or interconnect-list common-lisp:null)
                         :accessor struct-shape-interconnects-interconnects
                         :shape "InterconnectList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-interconnects
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'interconnects
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'interconnects 'make-interconnects))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input interconnects))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input interconnects))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interconnects))
      (common-lisp:list
       (common-lisp:cons "interconnects"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input interconnects))
   common-lisp:nil))
(common-lisp:deftype jumbo-frame-capable () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass lag common-lisp:nil
                       ((connections-bandwidth :initarg :connections-bandwidth
                         :initform common-lisp:nil :type
                         (common-lisp:or bandwidth common-lisp:null) :accessor
                         struct-shape-lag-connections-bandwidth :shape
                         "Bandwidth" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (number-of-connections :initarg :number-of-connections
                         :initform common-lisp:nil :type
                         (common-lisp:or count common-lisp:null) :accessor
                         struct-shape-lag-number-of-connections :shape "Count"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (lag-id :initarg :lag-id :initform common-lisp:nil
                         :type (common-lisp:or lag-id common-lisp:null)
                         :accessor struct-shape-lag-lag-id :shape "LagId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (owner-account :initarg :owner-account :initform
                         common-lisp:nil :type
                         (common-lisp:or owner-account common-lisp:null)
                         :accessor struct-shape-lag-owner-account :shape
                         "OwnerAccount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lag-name :initarg :lag-name :initform common-lisp:nil
                         :type (common-lisp:or lag-name common-lisp:null)
                         :accessor struct-shape-lag-lag-name :shape "LagName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (lag-state :initarg :lag-state :initform
                         common-lisp:nil :type
                         (common-lisp:or lag-state common-lisp:null) :accessor
                         struct-shape-lag-lag-state :shape "LagState" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (location :initarg :location :initform common-lisp:nil
                         :type (common-lisp:or location-code common-lisp:null)
                         :accessor struct-shape-lag-location :shape
                         "LocationCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (region :initarg :region :initform common-lisp:nil
                         :type (common-lisp:or region common-lisp:null)
                         :accessor struct-shape-lag-region :shape "Region"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (minimum-links :initarg :minimum-links :initform
                         common-lisp:nil :type
                         (common-lisp:or count common-lisp:null) :accessor
                         struct-shape-lag-minimum-links :shape "Count"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (aws-device :initarg :aws-device :initform
                         common-lisp:nil :type
                         (common-lisp:or aws-device common-lisp:null) :accessor
                         struct-shape-lag-aws-device :shape "AwsDevice"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (aws-device-v2 :initarg :aws-device-v2 :initform
                         common-lisp:nil :type
                         (common-lisp:or aws-device-v2 common-lisp:null)
                         :accessor struct-shape-lag-aws-device-v2 :shape
                         "AwsDeviceV2" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (aws-logical-device-id :initarg :aws-logical-device-id
                         :initform common-lisp:nil :type
                         (common-lisp:or aws-logical-device-id
                                         common-lisp:null)
                         :accessor struct-shape-lag-aws-logical-device-id
                         :shape "AwsLogicalDeviceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connections :initarg :connections :initform
                         common-lisp:nil :type
                         (common-lisp:or connection-list common-lisp:null)
                         :accessor struct-shape-lag-connections :shape
                         "ConnectionList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allows-hosted-connections :initarg
                         :allows-hosted-connections :initform common-lisp:nil
                         :type (common-lisp:or boolean-flag common-lisp:null)
                         :accessor struct-shape-lag-allows-hosted-connections
                         :shape "BooleanFlag" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (jumbo-frame-capable :initarg :jumbo-frame-capable
                         :initform common-lisp:nil :type
                         (common-lisp:or jumbo-frame-capable common-lisp:null)
                         :accessor struct-shape-lag-jumbo-frame-capable :shape
                         "JumboFrameCapable" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (has-logical-redundancy :initarg
                         :has-logical-redundancy :initform common-lisp:nil
                         :type
                         (common-lisp:or has-logical-redundancy
                                         common-lisp:null)
                         :accessor struct-shape-lag-has-logical-redundancy
                         :shape "HasLogicalRedundancy" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-lag-tags :shape "TagList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (provider-name :initarg :provider-name :initform
                         common-lisp:nil :type
                         (common-lisp:or provider-name common-lisp:null)
                         :accessor struct-shape-lag-provider-name :shape
                         "ProviderName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mac-sec-capable :initarg :mac-sec-capable :initform
                         common-lisp:nil :type
                         (common-lisp:or mac-sec-capable common-lisp:null)
                         :accessor struct-shape-lag-mac-sec-capable :shape
                         "MacSecCapable" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encryption-mode :initarg :encryption-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or encryption-mode common-lisp:null)
                         :accessor struct-shape-lag-encryption-mode :shape
                         "EncryptionMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mac-sec-keys :initarg :mac-sec-keys :initform
                         common-lisp:nil :type
                         (common-lisp:or mac-sec-key-list common-lisp:null)
                         :accessor struct-shape-lag-mac-sec-keys :shape
                         "MacSecKeyList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-lag (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'lag
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'lag 'make-lag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connections-bandwidth))
      (common-lisp:list
       (common-lisp:cons "connectionsBandwidth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-connections))
      (common-lisp:list
       (common-lisp:cons "numberOfConnections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lag-id))
      (common-lisp:list
       (common-lisp:cons "lagId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-account))
      (common-lisp:list
       (common-lisp:cons "ownerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lag-name))
      (common-lisp:list
       (common-lisp:cons "lagName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lag-state))
      (common-lisp:list
       (common-lisp:cons "lagState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimum-links))
      (common-lisp:list
       (common-lisp:cons "minimumLinks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-device))
      (common-lisp:list
       (common-lisp:cons "awsDevice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-device-v2))
      (common-lisp:list
       (common-lisp:cons "awsDeviceV2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-logical-device-id))
      (common-lisp:list
       (common-lisp:cons "awsLogicalDeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connections))
      (common-lisp:list
       (common-lisp:cons "connections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allows-hosted-connections))
      (common-lisp:list
       (common-lisp:cons "allowsHostedConnections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'jumbo-frame-capable))
      (common-lisp:list
       (common-lisp:cons "jumboFrameCapable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'has-logical-redundancy))
      (common-lisp:list
       (common-lisp:cons "hasLogicalRedundancy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-name))
      (common-lisp:list
       (common-lisp:cons "providerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mac-sec-capable))
      (common-lisp:list
       (common-lisp:cons "macSecCapable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-mode))
      (common-lisp:list
       (common-lisp:cons "encryptionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mac-sec-keys))
      (common-lisp:list
       (common-lisp:cons "macSecKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lag))
   common-lisp:nil))
(common-lisp:deftype lag-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype lag-list () '(trivial-types:proper-list lag))
 (common-lisp:defun make-lag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype lag-name () 'common-lisp:string)
(common-lisp:deftype lag-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass lags common-lisp:nil
                       ((lags :initarg :lags :initform common-lisp:nil :type
                         (common-lisp:or lag-list common-lisp:null) :accessor
                         struct-shape-lags-lags :shape "LagList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-lags (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'lags
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'lags 'make-lags))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lags))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lags))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lags))
      (common-lisp:list
       (common-lisp:cons "lags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lags))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-virtual-interface-test-history-request
                       common-lisp:nil
                       ((test-id :initarg :test-id :initform common-lisp:nil
                         :type (common-lisp:or test-id common-lisp:null)
                         :accessor
                         struct-shape-list-virtual-interface-test-history-request-test-id
                         :shape "TestId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (virtual-interface-id :initarg :virtual-interface-id
                         :initform common-lisp:nil :type
                         (common-lisp:or virtual-interface-id common-lisp:null)
                         :accessor
                         struct-shape-list-virtual-interface-test-history-request-virtual-interface-id
                         :shape "VirtualInterfaceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bgp-peers :initarg :bgp-peers :initform
                         common-lisp:nil :type
                         (common-lisp:or bgppeer-id-list common-lisp:null)
                         :accessor
                         struct-shape-list-virtual-interface-test-history-request-bgp-peers
                         :shape "BGPPeerIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or failure-test-history-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-virtual-interface-test-history-request-status
                         :shape "FailureTestHistoryStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-result-set-size common-lisp:null)
                         :accessor
                         struct-shape-list-virtual-interface-test-history-request-max-results
                         :shape "MaxResultSetSize" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-virtual-interface-test-history-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-virtual-interface-test-history-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-virtual-interface-test-history-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-virtual-interface-test-history-request
                    'make-list-virtual-interface-test-history-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-interface-test-history-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-interface-test-history-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-id))
      (common-lisp:list
       (common-lisp:cons "testId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-interface-id))
      (common-lisp:list
       (common-lisp:cons "virtualInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bgp-peers))
      (common-lisp:list
       (common-lisp:cons "bgpPeers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-interface-test-history-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-virtual-interface-test-history-response
                       common-lisp:nil
                       ((virtual-interface-test-history :initarg
                         :virtual-interface-test-history :initform
                         common-lisp:nil :type
                         (common-lisp:or virtual-interface-test-history-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-virtual-interface-test-history-response-virtual-interface-test-history
                         :shape "VirtualInterfaceTestHistoryList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-virtual-interface-test-history-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-virtual-interface-test-history-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-virtual-interface-test-history-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-virtual-interface-test-history-response
                    'make-list-virtual-interface-test-history-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-interface-test-history-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-interface-test-history-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-interface-test-history))
      (common-lisp:list
       (common-lisp:cons "virtualInterfaceTestHistory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-interface-test-history-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass loa common-lisp:nil
                       ((loa-content :initarg :loa-content :initform
                         common-lisp:nil :type
                         (common-lisp:or loa-content common-lisp:null)
                         :accessor struct-shape-loa-loa-content :shape
                         "LoaContent" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (loa-content-type :initarg :loa-content-type :initform
                         common-lisp:nil :type
                         (common-lisp:or loa-content-type common-lisp:null)
                         :accessor struct-shape-loa-loa-content-type :shape
                         "LoaContentType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-loa (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'loa
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'loa 'make-loa))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input loa))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input loa))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'loa-content))
      (common-lisp:list
       (common-lisp:cons "loaContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'loa-content-type))
      (common-lisp:list
       (common-lisp:cons "loaContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input loa))
   common-lisp:nil))
(common-lisp:deftype loa-content ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype loa-content-type () 'common-lisp:string)
(common-lisp:deftype loa-issue-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass location common-lisp:nil
                       ((location-code :initarg :location-code :initform
                         common-lisp:nil :type
                         (common-lisp:or location-code common-lisp:null)
                         :accessor struct-shape-location-location-code :shape
                         "LocationCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (location-name :initarg :location-name :initform
                         common-lisp:nil :type
                         (common-lisp:or location-name common-lisp:null)
                         :accessor struct-shape-location-location-name :shape
                         "LocationName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (region :initarg :region :initform common-lisp:nil
                         :type (common-lisp:or region common-lisp:null)
                         :accessor struct-shape-location-region :shape "Region"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (available-port-speeds :initarg :available-port-speeds
                         :initform common-lisp:nil :type
                         (common-lisp:or available-port-speeds
                                         common-lisp:null)
                         :accessor struct-shape-location-available-port-speeds
                         :shape "AvailablePortSpeeds" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (available-providers :initarg :available-providers
                         :initform common-lisp:nil :type
                         (common-lisp:or provider-list common-lisp:null)
                         :accessor struct-shape-location-available-providers
                         :shape "ProviderList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (available-mac-sec-port-speeds :initarg
                         :available-mac-sec-port-speeds :initform
                         common-lisp:nil :type
                         (common-lisp:or available-mac-sec-port-speeds
                                         common-lisp:null)
                         :accessor
                         struct-shape-location-available-mac-sec-port-speeds
                         :shape "AvailableMacSecPortSpeeds" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-location
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'location
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'location 'make-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location-code))
      (common-lisp:list
       (common-lisp:cons "locationCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location-name))
      (common-lisp:list
       (common-lisp:cons "locationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'available-port-speeds))
      (common-lisp:list
       (common-lisp:cons "availablePortSpeeds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'available-providers))
      (common-lisp:list
       (common-lisp:cons "availableProviders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'available-mac-sec-port-speeds))
      (common-lisp:list
       (common-lisp:cons "availableMacSecPortSpeeds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input location))
   common-lisp:nil))
(common-lisp:deftype location-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype location-list () '(trivial-types:proper-list location))
 (common-lisp:defun make-location-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list location))
   aws-sdk/generator/shape::members))
(common-lisp:deftype location-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass locations common-lisp:nil
                       ((locations :initarg :locations :initform
                         common-lisp:nil :type
                         (common-lisp:or location-list common-lisp:null)
                         :accessor struct-shape-locations-locations :shape
                         "LocationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-locations
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'locations
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'locations 'make-locations))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input locations))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input locations))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locations))
      (common-lisp:list
       (common-lisp:cons "locations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input locations))
   common-lisp:nil))
(common-lisp:deftype long-asn () 'common-lisp:integer)
(common-lisp:deftype mtu () 'common-lisp:integer)
(common-lisp:deftype mac-sec-capable () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass mac-sec-key common-lisp:nil
                       ((secret-arn :initarg :secret-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or secret-arn common-lisp:null) :accessor
                         struct-shape-mac-sec-key-secret-arn :shape "SecretARN"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ckn :initarg :ckn :initform common-lisp:nil :type
                         (common-lisp:or ckn common-lisp:null) :accessor
                         struct-shape-mac-sec-key-ckn :shape "Ckn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or state common-lisp:null) :accessor
                         struct-shape-mac-sec-key-state :shape "State"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (start-on :initarg :start-on :initform common-lisp:nil
                         :type (common-lisp:or start-on-date common-lisp:null)
                         :accessor struct-shape-mac-sec-key-start-on :shape
                         "StartOnDate" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-mac-sec-key
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'mac-sec-key
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'mac-sec-key 'make-mac-sec-key))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mac-sec-key))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mac-sec-key))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "secretARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ckn))
      (common-lisp:list
       (common-lisp:cons "ckn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-on))
      (common-lisp:list
       (common-lisp:cons "startOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mac-sec-key))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype mac-sec-key-list ()
   '(trivial-types:proper-list mac-sec-key))
 (common-lisp:defun make-mac-sec-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list mac-sec-key))
   aws-sdk/generator/shape::members))
(common-lisp:deftype max-result-set-size () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass new-bgppeer common-lisp:nil
                       ((asn :initarg :asn :initform common-lisp:nil :type
                         (common-lisp:or asn common-lisp:null) :accessor
                         struct-shape-new-bgppeer-asn :shape "ASN" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (auth-key :initarg :auth-key :initform common-lisp:nil
                         :type (common-lisp:or bgpauth-key common-lisp:null)
                         :accessor struct-shape-new-bgppeer-auth-key :shape
                         "BGPAuthKey" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (address-family :initarg :address-family :initform
                         common-lisp:nil :type
                         (common-lisp:or address-family common-lisp:null)
                         :accessor struct-shape-new-bgppeer-address-family
                         :shape "AddressFamily" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (amazon-address :initarg :amazon-address :initform
                         common-lisp:nil :type
                         (common-lisp:or amazon-address common-lisp:null)
                         :accessor struct-shape-new-bgppeer-amazon-address
                         :shape "AmazonAddress" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (customer-address :initarg :customer-address :initform
                         common-lisp:nil :type
                         (common-lisp:or customer-address common-lisp:null)
                         :accessor struct-shape-new-bgppeer-customer-address
                         :shape "CustomerAddress" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-new-bgppeer
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'new-bgppeer
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'new-bgppeer 'make-new-bgppeer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input new-bgppeer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input new-bgppeer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asn))
      (common-lisp:list
       (common-lisp:cons "asn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-key))
      (common-lisp:list
       (common-lisp:cons "authKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-family))
      (common-lisp:list
       (common-lisp:cons "addressFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amazon-address))
      (common-lisp:list
       (common-lisp:cons "amazonAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-address))
      (common-lisp:list
       (common-lisp:cons "customerAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input new-bgppeer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass new-private-virtual-interface common-lisp:nil
                       ((virtual-interface-name :initarg
                         :virtual-interface-name :initform
                         (common-lisp:error
                          ":virtualinterfacename is required")
                         :type
                         (common-lisp:or virtual-interface-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-new-private-virtual-interface-virtual-interface-name
                         :shape "VirtualInterfaceName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (vlan :initarg :vlan :initform
                         (common-lisp:error ":vlan is required") :type
                         (common-lisp:or vlan common-lisp:null) :accessor
                         struct-shape-new-private-virtual-interface-vlan :shape
                         "VLAN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (asn :initarg :asn :initform
                         (common-lisp:error ":asn is required") :type
                         (common-lisp:or asn common-lisp:null) :accessor
                         struct-shape-new-private-virtual-interface-asn :shape
                         "ASN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (mtu :initarg :mtu :initform common-lisp:nil :type
                         (common-lisp:or mtu common-lisp:null) :accessor
                         struct-shape-new-private-virtual-interface-mtu :shape
                         "MTU" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (auth-key :initarg :auth-key :initform common-lisp:nil
                         :type (common-lisp:or bgpauth-key common-lisp:null)
                         :accessor
                         struct-shape-new-private-virtual-interface-auth-key
                         :shape "BGPAuthKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (amazon-address :initarg :amazon-address :initform
                         common-lisp:nil :type
                         (common-lisp:or amazon-address common-lisp:null)
                         :accessor
                         struct-shape-new-private-virtual-interface-amazon-address
                         :shape "AmazonAddress" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (customer-address :initarg :customer-address :initform
                         common-lisp:nil :type
                         (common-lisp:or customer-address common-lisp:null)
                         :accessor
                         struct-shape-new-private-virtual-interface-customer-address
                         :shape "CustomerAddress" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (address-family :initarg :address-family :initform
                         common-lisp:nil :type
                         (common-lisp:or address-family common-lisp:null)
                         :accessor
                         struct-shape-new-private-virtual-interface-address-family
                         :shape "AddressFamily" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (virtual-gateway-id :initarg :virtual-gateway-id
                         :initform common-lisp:nil :type
                         (common-lisp:or virtual-gateway-id common-lisp:null)
                         :accessor
                         struct-shape-new-private-virtual-interface-virtual-gateway-id
                         :shape "VirtualGatewayId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (direct-connect-gateway-id :initarg
                         :direct-connect-gateway-id :initform common-lisp:nil
                         :type
                         (common-lisp:or direct-connect-gateway-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-new-private-virtual-interface-direct-connect-gateway-id
                         :shape "DirectConnectGatewayId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-new-private-virtual-interface-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (enable-site-link :initarg :enable-site-link :initform
                         common-lisp:nil :type
                         (common-lisp:or enable-site-link common-lisp:null)
                         :accessor
                         struct-shape-new-private-virtual-interface-enable-site-link
                         :shape "EnableSiteLink" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-new-private-virtual-interface
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'new-private-virtual-interface
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'new-private-virtual-interface
                    'make-new-private-virtual-interface))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          new-private-virtual-interface))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          new-private-virtual-interface))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-interface-name))
      (common-lisp:list
       (common-lisp:cons "virtualInterfaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vlan))
      (common-lisp:list
       (common-lisp:cons "vlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asn))
      (common-lisp:list
       (common-lisp:cons "asn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mtu))
      (common-lisp:list
       (common-lisp:cons "mtu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-key))
      (common-lisp:list
       (common-lisp:cons "authKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amazon-address))
      (common-lisp:list
       (common-lisp:cons "amazonAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-address))
      (common-lisp:list
       (common-lisp:cons "customerAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-family))
      (common-lisp:list
       (common-lisp:cons "addressFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-gateway-id))
      (common-lisp:list
       (common-lisp:cons "virtualGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'direct-connect-gateway-id))
      (common-lisp:list
       (common-lisp:cons "directConnectGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-site-link))
      (common-lisp:list
       (common-lisp:cons "enableSiteLink"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          new-private-virtual-interface))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass new-private-virtual-interface-allocation common-lisp:nil
                       ((virtual-interface-name :initarg
                         :virtual-interface-name :initform
                         (common-lisp:error
                          ":virtualinterfacename is required")
                         :type
                         (common-lisp:or virtual-interface-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-new-private-virtual-interface-allocation-virtual-interface-name
                         :shape "VirtualInterfaceName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (vlan :initarg :vlan :initform
                         (common-lisp:error ":vlan is required") :type
                         (common-lisp:or vlan common-lisp:null) :accessor
                         struct-shape-new-private-virtual-interface-allocation-vlan
                         :shape "VLAN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (asn :initarg :asn :initform
                         (common-lisp:error ":asn is required") :type
                         (common-lisp:or asn common-lisp:null) :accessor
                         struct-shape-new-private-virtual-interface-allocation-asn
                         :shape "ASN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (mtu :initarg :mtu :initform common-lisp:nil :type
                         (common-lisp:or mtu common-lisp:null) :accessor
                         struct-shape-new-private-virtual-interface-allocation-mtu
                         :shape "MTU" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (auth-key :initarg :auth-key :initform common-lisp:nil
                         :type (common-lisp:or bgpauth-key common-lisp:null)
                         :accessor
                         struct-shape-new-private-virtual-interface-allocation-auth-key
                         :shape "BGPAuthKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (amazon-address :initarg :amazon-address :initform
                         common-lisp:nil :type
                         (common-lisp:or amazon-address common-lisp:null)
                         :accessor
                         struct-shape-new-private-virtual-interface-allocation-amazon-address
                         :shape "AmazonAddress" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (address-family :initarg :address-family :initform
                         common-lisp:nil :type
                         (common-lisp:or address-family common-lisp:null)
                         :accessor
                         struct-shape-new-private-virtual-interface-allocation-address-family
                         :shape "AddressFamily" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (customer-address :initarg :customer-address :initform
                         common-lisp:nil :type
                         (common-lisp:or customer-address common-lisp:null)
                         :accessor
                         struct-shape-new-private-virtual-interface-allocation-customer-address
                         :shape "CustomerAddress" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-new-private-virtual-interface-allocation-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-new-private-virtual-interface-allocation
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'new-private-virtual-interface-allocation
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'new-private-virtual-interface-allocation
                    'make-new-private-virtual-interface-allocation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          new-private-virtual-interface-allocation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          new-private-virtual-interface-allocation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-interface-name))
      (common-lisp:list
       (common-lisp:cons "virtualInterfaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vlan))
      (common-lisp:list
       (common-lisp:cons "vlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asn))
      (common-lisp:list
       (common-lisp:cons "asn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mtu))
      (common-lisp:list
       (common-lisp:cons "mtu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-key))
      (common-lisp:list
       (common-lisp:cons "authKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amazon-address))
      (common-lisp:list
       (common-lisp:cons "amazonAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-family))
      (common-lisp:list
       (common-lisp:cons "addressFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-address))
      (common-lisp:list
       (common-lisp:cons "customerAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          new-private-virtual-interface-allocation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass new-public-virtual-interface common-lisp:nil
                       ((virtual-interface-name :initarg
                         :virtual-interface-name :initform
                         (common-lisp:error
                          ":virtualinterfacename is required")
                         :type
                         (common-lisp:or virtual-interface-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-new-public-virtual-interface-virtual-interface-name
                         :shape "VirtualInterfaceName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (vlan :initarg :vlan :initform
                         (common-lisp:error ":vlan is required") :type
                         (common-lisp:or vlan common-lisp:null) :accessor
                         struct-shape-new-public-virtual-interface-vlan :shape
                         "VLAN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (asn :initarg :asn :initform
                         (common-lisp:error ":asn is required") :type
                         (common-lisp:or asn common-lisp:null) :accessor
                         struct-shape-new-public-virtual-interface-asn :shape
                         "ASN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (auth-key :initarg :auth-key :initform common-lisp:nil
                         :type (common-lisp:or bgpauth-key common-lisp:null)
                         :accessor
                         struct-shape-new-public-virtual-interface-auth-key
                         :shape "BGPAuthKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (amazon-address :initarg :amazon-address :initform
                         common-lisp:nil :type
                         (common-lisp:or amazon-address common-lisp:null)
                         :accessor
                         struct-shape-new-public-virtual-interface-amazon-address
                         :shape "AmazonAddress" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (customer-address :initarg :customer-address :initform
                         common-lisp:nil :type
                         (common-lisp:or customer-address common-lisp:null)
                         :accessor
                         struct-shape-new-public-virtual-interface-customer-address
                         :shape "CustomerAddress" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (address-family :initarg :address-family :initform
                         common-lisp:nil :type
                         (common-lisp:or address-family common-lisp:null)
                         :accessor
                         struct-shape-new-public-virtual-interface-address-family
                         :shape "AddressFamily" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (route-filter-prefixes :initarg :route-filter-prefixes
                         :initform common-lisp:nil :type
                         (common-lisp:or route-filter-prefix-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-new-public-virtual-interface-route-filter-prefixes
                         :shape "RouteFilterPrefixList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-new-public-virtual-interface-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-new-public-virtual-interface
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'new-public-virtual-interface
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'new-public-virtual-interface
                    'make-new-public-virtual-interface))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          new-public-virtual-interface))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          new-public-virtual-interface))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-interface-name))
      (common-lisp:list
       (common-lisp:cons "virtualInterfaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vlan))
      (common-lisp:list
       (common-lisp:cons "vlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asn))
      (common-lisp:list
       (common-lisp:cons "asn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-key))
      (common-lisp:list
       (common-lisp:cons "authKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amazon-address))
      (common-lisp:list
       (common-lisp:cons "amazonAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-address))
      (common-lisp:list
       (common-lisp:cons "customerAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-family))
      (common-lisp:list
       (common-lisp:cons "addressFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'route-filter-prefixes))
      (common-lisp:list
       (common-lisp:cons "routeFilterPrefixes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          new-public-virtual-interface))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass new-public-virtual-interface-allocation common-lisp:nil
                       ((virtual-interface-name :initarg
                         :virtual-interface-name :initform
                         (common-lisp:error
                          ":virtualinterfacename is required")
                         :type
                         (common-lisp:or virtual-interface-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-new-public-virtual-interface-allocation-virtual-interface-name
                         :shape "VirtualInterfaceName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (vlan :initarg :vlan :initform
                         (common-lisp:error ":vlan is required") :type
                         (common-lisp:or vlan common-lisp:null) :accessor
                         struct-shape-new-public-virtual-interface-allocation-vlan
                         :shape "VLAN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (asn :initarg :asn :initform
                         (common-lisp:error ":asn is required") :type
                         (common-lisp:or asn common-lisp:null) :accessor
                         struct-shape-new-public-virtual-interface-allocation-asn
                         :shape "ASN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (auth-key :initarg :auth-key :initform common-lisp:nil
                         :type (common-lisp:or bgpauth-key common-lisp:null)
                         :accessor
                         struct-shape-new-public-virtual-interface-allocation-auth-key
                         :shape "BGPAuthKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (amazon-address :initarg :amazon-address :initform
                         common-lisp:nil :type
                         (common-lisp:or amazon-address common-lisp:null)
                         :accessor
                         struct-shape-new-public-virtual-interface-allocation-amazon-address
                         :shape "AmazonAddress" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (customer-address :initarg :customer-address :initform
                         common-lisp:nil :type
                         (common-lisp:or customer-address common-lisp:null)
                         :accessor
                         struct-shape-new-public-virtual-interface-allocation-customer-address
                         :shape "CustomerAddress" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (address-family :initarg :address-family :initform
                         common-lisp:nil :type
                         (common-lisp:or address-family common-lisp:null)
                         :accessor
                         struct-shape-new-public-virtual-interface-allocation-address-family
                         :shape "AddressFamily" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (route-filter-prefixes :initarg :route-filter-prefixes
                         :initform common-lisp:nil :type
                         (common-lisp:or route-filter-prefix-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-new-public-virtual-interface-allocation-route-filter-prefixes
                         :shape "RouteFilterPrefixList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-new-public-virtual-interface-allocation-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-new-public-virtual-interface-allocation
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'new-public-virtual-interface-allocation
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'new-public-virtual-interface-allocation
                    'make-new-public-virtual-interface-allocation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          new-public-virtual-interface-allocation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          new-public-virtual-interface-allocation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-interface-name))
      (common-lisp:list
       (common-lisp:cons "virtualInterfaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vlan))
      (common-lisp:list
       (common-lisp:cons "vlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asn))
      (common-lisp:list
       (common-lisp:cons "asn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-key))
      (common-lisp:list
       (common-lisp:cons "authKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amazon-address))
      (common-lisp:list
       (common-lisp:cons "amazonAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-address))
      (common-lisp:list
       (common-lisp:cons "customerAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-family))
      (common-lisp:list
       (common-lisp:cons "addressFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'route-filter-prefixes))
      (common-lisp:list
       (common-lisp:cons "routeFilterPrefixes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          new-public-virtual-interface-allocation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass new-transit-virtual-interface common-lisp:nil
                       ((virtual-interface-name :initarg
                         :virtual-interface-name :initform common-lisp:nil
                         :type
                         (common-lisp:or virtual-interface-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-new-transit-virtual-interface-virtual-interface-name
                         :shape "VirtualInterfaceName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (vlan :initarg :vlan :initform common-lisp:nil :type
                         (common-lisp:or vlan common-lisp:null) :accessor
                         struct-shape-new-transit-virtual-interface-vlan :shape
                         "VLAN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (asn :initarg :asn :initform common-lisp:nil :type
                         (common-lisp:or asn common-lisp:null) :accessor
                         struct-shape-new-transit-virtual-interface-asn :shape
                         "ASN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (mtu :initarg :mtu :initform common-lisp:nil :type
                         (common-lisp:or mtu common-lisp:null) :accessor
                         struct-shape-new-transit-virtual-interface-mtu :shape
                         "MTU" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (auth-key :initarg :auth-key :initform common-lisp:nil
                         :type (common-lisp:or bgpauth-key common-lisp:null)
                         :accessor
                         struct-shape-new-transit-virtual-interface-auth-key
                         :shape "BGPAuthKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (amazon-address :initarg :amazon-address :initform
                         common-lisp:nil :type
                         (common-lisp:or amazon-address common-lisp:null)
                         :accessor
                         struct-shape-new-transit-virtual-interface-amazon-address
                         :shape "AmazonAddress" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (customer-address :initarg :customer-address :initform
                         common-lisp:nil :type
                         (common-lisp:or customer-address common-lisp:null)
                         :accessor
                         struct-shape-new-transit-virtual-interface-customer-address
                         :shape "CustomerAddress" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (address-family :initarg :address-family :initform
                         common-lisp:nil :type
                         (common-lisp:or address-family common-lisp:null)
                         :accessor
                         struct-shape-new-transit-virtual-interface-address-family
                         :shape "AddressFamily" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (direct-connect-gateway-id :initarg
                         :direct-connect-gateway-id :initform common-lisp:nil
                         :type
                         (common-lisp:or direct-connect-gateway-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-new-transit-virtual-interface-direct-connect-gateway-id
                         :shape "DirectConnectGatewayId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-new-transit-virtual-interface-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (enable-site-link :initarg :enable-site-link :initform
                         common-lisp:nil :type
                         (common-lisp:or enable-site-link common-lisp:null)
                         :accessor
                         struct-shape-new-transit-virtual-interface-enable-site-link
                         :shape "EnableSiteLink" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-new-transit-virtual-interface
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'new-transit-virtual-interface
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'new-transit-virtual-interface
                    'make-new-transit-virtual-interface))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          new-transit-virtual-interface))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          new-transit-virtual-interface))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-interface-name))
      (common-lisp:list
       (common-lisp:cons "virtualInterfaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vlan))
      (common-lisp:list
       (common-lisp:cons "vlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asn))
      (common-lisp:list
       (common-lisp:cons "asn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mtu))
      (common-lisp:list
       (common-lisp:cons "mtu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-key))
      (common-lisp:list
       (common-lisp:cons "authKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amazon-address))
      (common-lisp:list
       (common-lisp:cons "amazonAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-address))
      (common-lisp:list
       (common-lisp:cons "customerAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-family))
      (common-lisp:list
       (common-lisp:cons "addressFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'direct-connect-gateway-id))
      (common-lisp:list
       (common-lisp:cons "directConnectGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-site-link))
      (common-lisp:list
       (common-lisp:cons "enableSiteLink"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          new-transit-virtual-interface))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass new-transit-virtual-interface-allocation common-lisp:nil
                       ((virtual-interface-name :initarg
                         :virtual-interface-name :initform common-lisp:nil
                         :type
                         (common-lisp:or virtual-interface-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-new-transit-virtual-interface-allocation-virtual-interface-name
                         :shape "VirtualInterfaceName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (vlan :initarg :vlan :initform common-lisp:nil :type
                         (common-lisp:or vlan common-lisp:null) :accessor
                         struct-shape-new-transit-virtual-interface-allocation-vlan
                         :shape "VLAN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (asn :initarg :asn :initform common-lisp:nil :type
                         (common-lisp:or asn common-lisp:null) :accessor
                         struct-shape-new-transit-virtual-interface-allocation-asn
                         :shape "ASN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (mtu :initarg :mtu :initform common-lisp:nil :type
                         (common-lisp:or mtu common-lisp:null) :accessor
                         struct-shape-new-transit-virtual-interface-allocation-mtu
                         :shape "MTU" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (auth-key :initarg :auth-key :initform common-lisp:nil
                         :type (common-lisp:or bgpauth-key common-lisp:null)
                         :accessor
                         struct-shape-new-transit-virtual-interface-allocation-auth-key
                         :shape "BGPAuthKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (amazon-address :initarg :amazon-address :initform
                         common-lisp:nil :type
                         (common-lisp:or amazon-address common-lisp:null)
                         :accessor
                         struct-shape-new-transit-virtual-interface-allocation-amazon-address
                         :shape "AmazonAddress" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (customer-address :initarg :customer-address :initform
                         common-lisp:nil :type
                         (common-lisp:or customer-address common-lisp:null)
                         :accessor
                         struct-shape-new-transit-virtual-interface-allocation-customer-address
                         :shape "CustomerAddress" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (address-family :initarg :address-family :initform
                         common-lisp:nil :type
                         (common-lisp:or address-family common-lisp:null)
                         :accessor
                         struct-shape-new-transit-virtual-interface-allocation-address-family
                         :shape "AddressFamily" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-new-transit-virtual-interface-allocation-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-new-transit-virtual-interface-allocation
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'new-transit-virtual-interface-allocation
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'new-transit-virtual-interface-allocation
                    'make-new-transit-virtual-interface-allocation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          new-transit-virtual-interface-allocation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          new-transit-virtual-interface-allocation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-interface-name))
      (common-lisp:list
       (common-lisp:cons "virtualInterfaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vlan))
      (common-lisp:list
       (common-lisp:cons "vlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asn))
      (common-lisp:list
       (common-lisp:cons "asn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mtu))
      (common-lisp:list
       (common-lisp:cons "mtu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-key))
      (common-lisp:list
       (common-lisp:cons "authKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amazon-address))
      (common-lisp:list
       (common-lisp:cons "amazonAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-address))
      (common-lisp:list
       (common-lisp:cons "customerAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-family))
      (common-lisp:list
       (common-lisp:cons "addressFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          new-transit-virtual-interface-allocation))
   common-lisp:nil))
(common-lisp:deftype nni-partner-type () 'common-lisp:string)
(common-lisp:deftype owner-account () 'common-lisp:string)
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:deftype partner-name () 'common-lisp:string)
(common-lisp:deftype platform () 'common-lisp:string)
(common-lisp:deftype port-encryption-status () 'common-lisp:string)
(common-lisp:deftype port-speed () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype provider-list ()
   '(trivial-types:proper-list provider-name))
 (common-lisp:defun make-provider-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list provider-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype provider-name () 'common-lisp:string)
(common-lisp:deftype region () 'common-lisp:string)
(common-lisp:deftype request-macsec () 'common-lisp:boolean)
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-arn-list ()
   '(trivial-types:proper-list resource-arn))
 (common-lisp:defun make-resource-arn-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass resource-tag common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor struct-shape-resource-tag-resource-arn
                         :shape "ResourceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-resource-tag-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resource-tag
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resource-tag
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'resource-tag 'make-resource-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-tag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-tag-list ()
   '(trivial-types:proper-list resource-tag))
 (common-lisp:defun make-resource-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass route-filter-prefix common-lisp:nil
                       ((cidr :initarg :cidr :initform common-lisp:nil :type
                         (common-lisp:or cidr common-lisp:null) :accessor
                         struct-shape-route-filter-prefix-cidr :shape "CIDR"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-route-filter-prefix
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'route-filter-prefix
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'route-filter-prefix 'make-route-filter-prefix))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input route-filter-prefix))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input route-filter-prefix))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr))
      (common-lisp:list
       (common-lisp:cons "cidr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input route-filter-prefix))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype route-filter-prefix-list ()
   '(trivial-types:proper-list route-filter-prefix))
 (common-lisp:defun make-route-filter-prefix-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list route-filter-prefix))
   aws-sdk/generator/shape::members))
(common-lisp:deftype router-config () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass router-type common-lisp:nil
                       ((vendor :initarg :vendor :initform common-lisp:nil
                         :type (common-lisp:or vendor common-lisp:null)
                         :accessor struct-shape-router-type-vendor :shape
                         "Vendor" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (platform :initarg :platform :initform common-lisp:nil
                         :type (common-lisp:or platform common-lisp:null)
                         :accessor struct-shape-router-type-platform :shape
                         "Platform" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (software :initarg :software :initform common-lisp:nil
                         :type (common-lisp:or software common-lisp:null)
                         :accessor struct-shape-router-type-software :shape
                         "Software" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (xslt-template-name :initarg :xslt-template-name
                         :initform common-lisp:nil :type
                         (common-lisp:or xslt-template-name common-lisp:null)
                         :accessor struct-shape-router-type-xslt-template-name
                         :shape "XsltTemplateName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (xslt-template-name-for-mac-sec :initarg
                         :xslt-template-name-for-mac-sec :initform
                         common-lisp:nil :type
                         (common-lisp:or xslt-template-name-for-mac-sec
                                         common-lisp:null)
                         :accessor
                         struct-shape-router-type-xslt-template-name-for-mac-sec
                         :shape "XsltTemplateNameForMacSec" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (router-type-identifier :initarg
                         :router-type-identifier :initform common-lisp:nil
                         :type
                         (common-lisp:or router-type-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-router-type-router-type-identifier :shape
                         "RouterTypeIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-router-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'router-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'router-type 'make-router-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input router-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input router-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vendor))
      (common-lisp:list
       (common-lisp:cons "vendor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'software))
      (common-lisp:list
       (common-lisp:cons "software"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xslt-template-name))
      (common-lisp:list
       (common-lisp:cons "xsltTemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'xslt-template-name-for-mac-sec))
      (common-lisp:list
       (common-lisp:cons "xsltTemplateNameForMacSec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'router-type-identifier))
      (common-lisp:list
       (common-lisp:cons "routerTypeIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input router-type))
   common-lisp:nil))
(common-lisp:deftype router-type-identifier () 'common-lisp:string)
(common-lisp:deftype secret-arn () 'common-lisp:string)
(common-lisp:deftype site-link-enabled () 'common-lisp:boolean)
(common-lisp:deftype software () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass start-bgp-failover-test-request common-lisp:nil
                       ((virtual-interface-id :initarg :virtual-interface-id
                         :initform
                         (common-lisp:error ":virtualinterfaceid is required")
                         :type
                         (common-lisp:or virtual-interface-id common-lisp:null)
                         :accessor
                         struct-shape-start-bgp-failover-test-request-virtual-interface-id
                         :shape "VirtualInterfaceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bgp-peers :initarg :bgp-peers :initform
                         common-lisp:nil :type
                         (common-lisp:or bgppeer-id-list common-lisp:null)
                         :accessor
                         struct-shape-start-bgp-failover-test-request-bgp-peers
                         :shape "BGPPeerIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (test-duration-in-minutes :initarg
                         :test-duration-in-minutes :initform common-lisp:nil
                         :type (common-lisp:or test-duration common-lisp:null)
                         :accessor
                         struct-shape-start-bgp-failover-test-request-test-duration-in-minutes
                         :shape "TestDuration" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-bgp-failover-test-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-bgp-failover-test-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-bgp-failover-test-request
                    'make-start-bgp-failover-test-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-bgp-failover-test-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-bgp-failover-test-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-interface-id))
      (common-lisp:list
       (common-lisp:cons "virtualInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bgp-peers))
      (common-lisp:list
       (common-lisp:cons "bgpPeers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'test-duration-in-minutes))
      (common-lisp:list
       (common-lisp:cons "testDurationInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-bgp-failover-test-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-bgp-failover-test-response common-lisp:nil
                       ((virtual-interface-test :initarg
                         :virtual-interface-test :initform common-lisp:nil
                         :type
                         (common-lisp:or virtual-interface-test-history
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-bgp-failover-test-response-virtual-interface-test
                         :shape "VirtualInterfaceTestHistory" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-bgp-failover-test-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-bgp-failover-test-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-bgp-failover-test-response
                    'make-start-bgp-failover-test-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-bgp-failover-test-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-bgp-failover-test-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-interface-test))
      (common-lisp:list
       (common-lisp:cons "virtualInterfaceTest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-bgp-failover-test-response))
   common-lisp:nil))
(common-lisp:deftype start-on-date () 'common-lisp:string)
(common-lisp:deftype start-time () 'common-lisp:string)
(common-lisp:deftype state () 'common-lisp:string)
(common-lisp:deftype state-change-error () 'common-lisp:string)
(common-lisp:deftype status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass stop-bgp-failover-test-request common-lisp:nil
                       ((virtual-interface-id :initarg :virtual-interface-id
                         :initform
                         (common-lisp:error ":virtualinterfaceid is required")
                         :type
                         (common-lisp:or virtual-interface-id common-lisp:null)
                         :accessor
                         struct-shape-stop-bgp-failover-test-request-virtual-interface-id
                         :shape "VirtualInterfaceId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-bgp-failover-test-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-bgp-failover-test-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-bgp-failover-test-request
                    'make-stop-bgp-failover-test-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-bgp-failover-test-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-bgp-failover-test-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-interface-id))
      (common-lisp:list
       (common-lisp:cons "virtualInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-bgp-failover-test-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-bgp-failover-test-response common-lisp:nil
                       ((virtual-interface-test :initarg
                         :virtual-interface-test :initform common-lisp:nil
                         :type
                         (common-lisp:or virtual-interface-test-history
                                         common-lisp:null)
                         :accessor
                         struct-shape-stop-bgp-failover-test-response-virtual-interface-test
                         :shape "VirtualInterfaceTestHistory" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-bgp-failover-test-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-bgp-failover-test-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-bgp-failover-test-response
                    'make-stop-bgp-failover-test-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-bgp-failover-test-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-bgp-failover-test-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-interface-test))
      (common-lisp:list
       (common-lisp:cons "virtualInterfaceTest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-bgp-failover-test-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         struct-shape-tag-key :shape "TagKey" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         struct-shape-tag-value :shape "TagValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "ResourceArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype test-duration () 'common-lisp:integer)
(common-lisp:deftype test-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition too-many-tags-exception
     (directconnect-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'too-many-tags-exception)))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "ResourceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tagkeys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-untag-resource-request-tag-keys
                         :shape "TagKeyList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "tagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-connection-request common-lisp:nil
                       ((connection-id :initarg :connection-id :initform
                         (common-lisp:error ":connectionid is required") :type
                         (common-lisp:or connection-id common-lisp:null)
                         :accessor
                         struct-shape-update-connection-request-connection-id
                         :shape "ConnectionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connection-name :initarg :connection-name :initform
                         common-lisp:nil :type
                         (common-lisp:or connection-name common-lisp:null)
                         :accessor
                         struct-shape-update-connection-request-connection-name
                         :shape "ConnectionName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encryption-mode :initarg :encryption-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or encryption-mode common-lisp:null)
                         :accessor
                         struct-shape-update-connection-request-encryption-mode
                         :shape "EncryptionMode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-connection-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-connection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-connection-request
                    'make-update-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-connection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-id))
      (common-lisp:list
       (common-lisp:cons "connectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-name))
      (common-lisp:list
       (common-lisp:cons "connectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-mode))
      (common-lisp:list
       (common-lisp:cons "encryptionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-direct-connect-gateway-association-request
                       common-lisp:nil
                       ((association-id :initarg :association-id :initform
                         common-lisp:nil :type
                         (common-lisp:or direct-connect-gateway-association-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-direct-connect-gateway-association-request-association-id
                         :shape "DirectConnectGatewayAssociationId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (add-allowed-prefixes-to-direct-connect-gateway
                         :initarg
                         :add-allowed-prefixes-to-direct-connect-gateway
                         :initform common-lisp:nil :type
                         (common-lisp:or route-filter-prefix-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-direct-connect-gateway-association-request-add-allowed-prefixes-to-direct-connect-gateway
                         :shape "RouteFilterPrefixList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (remove-allowed-prefixes-to-direct-connect-gateway
                         :initarg
                         :remove-allowed-prefixes-to-direct-connect-gateway
                         :initform common-lisp:nil :type
                         (common-lisp:or route-filter-prefix-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-direct-connect-gateway-association-request-remove-allowed-prefixes-to-direct-connect-gateway
                         :shape "RouteFilterPrefixList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-direct-connect-gateway-association-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-direct-connect-gateway-association-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-direct-connect-gateway-association-request
                    'make-update-direct-connect-gateway-association-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-direct-connect-gateway-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-direct-connect-gateway-association-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "associationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'add-allowed-prefixes-to-direct-connect-gateway))
      (common-lisp:list
       (common-lisp:cons "addAllowedPrefixesToDirectConnectGateway"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remove-allowed-prefixes-to-direct-connect-gateway))
      (common-lisp:list
       (common-lisp:cons "removeAllowedPrefixesToDirectConnectGateway"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-direct-connect-gateway-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-direct-connect-gateway-association-result
                       common-lisp:nil
                       ((direct-connect-gateway-association :initarg
                         :direct-connect-gateway-association :initform
                         common-lisp:nil :type
                         (common-lisp:or direct-connect-gateway-association
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-direct-connect-gateway-association-result-direct-connect-gateway-association
                         :shape "DirectConnectGatewayAssociation" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-direct-connect-gateway-association-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-direct-connect-gateway-association-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-direct-connect-gateway-association-result
                    'make-update-direct-connect-gateway-association-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-direct-connect-gateway-association-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-direct-connect-gateway-association-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'direct-connect-gateway-association))
      (common-lisp:list
       (common-lisp:cons "directConnectGatewayAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-direct-connect-gateway-association-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-direct-connect-gateway-request common-lisp:nil
                       ((direct-connect-gateway-id :initarg
                         :direct-connect-gateway-id :initform
                         (common-lisp:error
                          ":directconnectgatewayid is required")
                         :type
                         (common-lisp:or direct-connect-gateway-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-direct-connect-gateway-request-direct-connect-gateway-id
                         :shape "DirectConnectGatewayId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (new-direct-connect-gateway-name :initarg
                         :new-direct-connect-gateway-name :initform
                         (common-lisp:error
                          ":newdirectconnectgatewayname is required")
                         :type
                         (common-lisp:or direct-connect-gateway-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-direct-connect-gateway-request-new-direct-connect-gateway-name
                         :shape "DirectConnectGatewayName" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-direct-connect-gateway-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-direct-connect-gateway-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-direct-connect-gateway-request
                    'make-update-direct-connect-gateway-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-direct-connect-gateway-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-direct-connect-gateway-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'direct-connect-gateway-id))
      (common-lisp:list
       (common-lisp:cons "directConnectGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'new-direct-connect-gateway-name))
      (common-lisp:list
       (common-lisp:cons "newDirectConnectGatewayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-direct-connect-gateway-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-direct-connect-gateway-response common-lisp:nil
                       ((direct-connect-gateway :initarg
                         :direct-connect-gateway :initform common-lisp:nil
                         :type
                         (common-lisp:or direct-connect-gateway
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-direct-connect-gateway-response-direct-connect-gateway
                         :shape "DirectConnectGateway" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-direct-connect-gateway-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-direct-connect-gateway-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-direct-connect-gateway-response
                    'make-update-direct-connect-gateway-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-direct-connect-gateway-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-direct-connect-gateway-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'direct-connect-gateway))
      (common-lisp:list
       (common-lisp:cons "directConnectGateway"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-direct-connect-gateway-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-lag-request common-lisp:nil
                       ((lag-id :initarg :lag-id :initform
                         (common-lisp:error ":lagid is required") :type
                         (common-lisp:or lag-id common-lisp:null) :accessor
                         struct-shape-update-lag-request-lag-id :shape "LagId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (lag-name :initarg :lag-name :initform common-lisp:nil
                         :type (common-lisp:or lag-name common-lisp:null)
                         :accessor struct-shape-update-lag-request-lag-name
                         :shape "LagName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (minimum-links :initarg :minimum-links :initform
                         common-lisp:nil :type
                         (common-lisp:or count common-lisp:null) :accessor
                         struct-shape-update-lag-request-minimum-links :shape
                         "Count" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (encryption-mode :initarg :encryption-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or encryption-mode common-lisp:null)
                         :accessor
                         struct-shape-update-lag-request-encryption-mode :shape
                         "EncryptionMode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-lag-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-lag-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-lag-request 'make-update-lag-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-lag-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-lag-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lag-id))
      (common-lisp:list
       (common-lisp:cons "lagId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lag-name))
      (common-lisp:list
       (common-lisp:cons "lagName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimum-links))
      (common-lisp:list
       (common-lisp:cons "minimumLinks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-mode))
      (common-lisp:list
       (common-lisp:cons "encryptionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-lag-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-virtual-interface-attributes-request
                       common-lisp:nil
                       ((virtual-interface-id :initarg :virtual-interface-id
                         :initform
                         (common-lisp:error ":virtualinterfaceid is required")
                         :type
                         (common-lisp:or virtual-interface-id common-lisp:null)
                         :accessor
                         struct-shape-update-virtual-interface-attributes-request-virtual-interface-id
                         :shape "VirtualInterfaceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mtu :initarg :mtu :initform common-lisp:nil :type
                         (common-lisp:or mtu common-lisp:null) :accessor
                         struct-shape-update-virtual-interface-attributes-request-mtu
                         :shape "MTU" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (enable-site-link :initarg :enable-site-link :initform
                         common-lisp:nil :type
                         (common-lisp:or enable-site-link common-lisp:null)
                         :accessor
                         struct-shape-update-virtual-interface-attributes-request-enable-site-link
                         :shape "EnableSiteLink" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (virtual-interface-name :initarg
                         :virtual-interface-name :initform common-lisp:nil
                         :type
                         (common-lisp:or virtual-interface-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-virtual-interface-attributes-request-virtual-interface-name
                         :shape "VirtualInterfaceName" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-virtual-interface-attributes-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-virtual-interface-attributes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-virtual-interface-attributes-request
                    'make-update-virtual-interface-attributes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-interface-attributes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-interface-attributes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-interface-id))
      (common-lisp:list
       (common-lisp:cons "virtualInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mtu))
      (common-lisp:list
       (common-lisp:cons "mtu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-site-link))
      (common-lisp:list
       (common-lisp:cons "enableSiteLink"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-interface-name))
      (common-lisp:list
       (common-lisp:cons "virtualInterfaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-interface-attributes-request))
   common-lisp:nil))
(common-lisp:deftype vlan () 'common-lisp:integer)
(common-lisp:deftype vendor () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass virtual-gateway common-lisp:nil
                       ((virtual-gateway-id :initarg :virtual-gateway-id
                         :initform common-lisp:nil :type
                         (common-lisp:or virtual-gateway-id common-lisp:null)
                         :accessor
                         struct-shape-virtual-gateway-virtual-gateway-id :shape
                         "VirtualGatewayId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (virtual-gateway-state :initarg :virtual-gateway-state
                         :initform common-lisp:nil :type
                         (common-lisp:or virtual-gateway-state
                                         common-lisp:null)
                         :accessor
                         struct-shape-virtual-gateway-virtual-gateway-state
                         :shape "VirtualGatewayState" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-virtual-gateway
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'virtual-gateway
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'virtual-gateway 'make-virtual-gateway))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input virtual-gateway))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input virtual-gateway))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-gateway-id))
      (common-lisp:list
       (common-lisp:cons "virtualGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-gateway-state))
      (common-lisp:list
       (common-lisp:cons "virtualGatewayState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input virtual-gateway))
   common-lisp:nil))
(common-lisp:deftype virtual-gateway-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype virtual-gateway-list ()
   '(trivial-types:proper-list virtual-gateway))
 (common-lisp:defun make-virtual-gateway-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list virtual-gateway))
   aws-sdk/generator/shape::members))
(common-lisp:deftype virtual-gateway-region () 'common-lisp:string)
(common-lisp:deftype virtual-gateway-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass virtual-gateways common-lisp:nil
                       ((virtual-gateways :initarg :virtual-gateways :initform
                         common-lisp:nil :type
                         (common-lisp:or virtual-gateway-list common-lisp:null)
                         :accessor
                         struct-shape-virtual-gateways-virtual-gateways :shape
                         "VirtualGatewayList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-virtual-gateways
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'virtual-gateways
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'virtual-gateways 'make-virtual-gateways))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input virtual-gateways))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input virtual-gateways))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-gateways))
      (common-lisp:list
       (common-lisp:cons "virtualGateways"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input virtual-gateways))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-interface common-lisp:nil
                       ((owner-account :initarg :owner-account :initform
                         common-lisp:nil :type
                         (common-lisp:or owner-account common-lisp:null)
                         :accessor struct-shape-virtual-interface-owner-account
                         :shape "OwnerAccount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (virtual-interface-id :initarg :virtual-interface-id
                         :initform common-lisp:nil :type
                         (common-lisp:or virtual-interface-id common-lisp:null)
                         :accessor
                         struct-shape-virtual-interface-virtual-interface-id
                         :shape "VirtualInterfaceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (location :initarg :location :initform common-lisp:nil
                         :type (common-lisp:or location-code common-lisp:null)
                         :accessor struct-shape-virtual-interface-location
                         :shape "LocationCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connection-id :initarg :connection-id :initform
                         common-lisp:nil :type
                         (common-lisp:or connection-id common-lisp:null)
                         :accessor struct-shape-virtual-interface-connection-id
                         :shape "ConnectionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (virtual-interface-type :initarg
                         :virtual-interface-type :initform common-lisp:nil
                         :type
                         (common-lisp:or virtual-interface-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-virtual-interface-virtual-interface-type
                         :shape "VirtualInterfaceType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (virtual-interface-name :initarg
                         :virtual-interface-name :initform common-lisp:nil
                         :type
                         (common-lisp:or virtual-interface-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-virtual-interface-virtual-interface-name
                         :shape "VirtualInterfaceName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (vlan :initarg :vlan :initform common-lisp:nil :type
                         (common-lisp:or vlan common-lisp:null) :accessor
                         struct-shape-virtual-interface-vlan :shape "VLAN"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (asn :initarg :asn :initform common-lisp:nil :type
                         (common-lisp:or asn common-lisp:null) :accessor
                         struct-shape-virtual-interface-asn :shape "ASN"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (amazon-side-asn :initarg :amazon-side-asn :initform
                         common-lisp:nil :type
                         (common-lisp:or long-asn common-lisp:null) :accessor
                         struct-shape-virtual-interface-amazon-side-asn :shape
                         "LongAsn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (auth-key :initarg :auth-key :initform common-lisp:nil
                         :type (common-lisp:or bgpauth-key common-lisp:null)
                         :accessor struct-shape-virtual-interface-auth-key
                         :shape "BGPAuthKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (amazon-address :initarg :amazon-address :initform
                         common-lisp:nil :type
                         (common-lisp:or amazon-address common-lisp:null)
                         :accessor
                         struct-shape-virtual-interface-amazon-address :shape
                         "AmazonAddress" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (customer-address :initarg :customer-address :initform
                         common-lisp:nil :type
                         (common-lisp:or customer-address common-lisp:null)
                         :accessor
                         struct-shape-virtual-interface-customer-address :shape
                         "CustomerAddress" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (address-family :initarg :address-family :initform
                         common-lisp:nil :type
                         (common-lisp:or address-family common-lisp:null)
                         :accessor
                         struct-shape-virtual-interface-address-family :shape
                         "AddressFamily" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (virtual-interface-state :initarg
                         :virtual-interface-state :initform common-lisp:nil
                         :type
                         (common-lisp:or virtual-interface-state
                                         common-lisp:null)
                         :accessor
                         struct-shape-virtual-interface-virtual-interface-state
                         :shape "VirtualInterfaceState" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (customer-router-config :initarg
                         :customer-router-config :initform common-lisp:nil
                         :type (common-lisp:or router-config common-lisp:null)
                         :accessor
                         struct-shape-virtual-interface-customer-router-config
                         :shape "RouterConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mtu :initarg :mtu :initform common-lisp:nil :type
                         (common-lisp:or mtu common-lisp:null) :accessor
                         struct-shape-virtual-interface-mtu :shape "MTU"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (jumbo-frame-capable :initarg :jumbo-frame-capable
                         :initform common-lisp:nil :type
                         (common-lisp:or jumbo-frame-capable common-lisp:null)
                         :accessor
                         struct-shape-virtual-interface-jumbo-frame-capable
                         :shape "JumboFrameCapable" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (virtual-gateway-id :initarg :virtual-gateway-id
                         :initform common-lisp:nil :type
                         (common-lisp:or virtual-gateway-id common-lisp:null)
                         :accessor
                         struct-shape-virtual-interface-virtual-gateway-id
                         :shape "VirtualGatewayId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (direct-connect-gateway-id :initarg
                         :direct-connect-gateway-id :initform common-lisp:nil
                         :type
                         (common-lisp:or direct-connect-gateway-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-virtual-interface-direct-connect-gateway-id
                         :shape "DirectConnectGatewayId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (route-filter-prefixes :initarg :route-filter-prefixes
                         :initform common-lisp:nil :type
                         (common-lisp:or route-filter-prefix-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-virtual-interface-route-filter-prefixes
                         :shape "RouteFilterPrefixList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (bgp-peers :initarg :bgp-peers :initform
                         common-lisp:nil :type
                         (common-lisp:or bgppeer-list common-lisp:null)
                         :accessor struct-shape-virtual-interface-bgp-peers
                         :shape "BGPPeerList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (region :initarg :region :initform common-lisp:nil
                         :type (common-lisp:or region common-lisp:null)
                         :accessor struct-shape-virtual-interface-region :shape
                         "Region" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (aws-device-v2 :initarg :aws-device-v2 :initform
                         common-lisp:nil :type
                         (common-lisp:or aws-device-v2 common-lisp:null)
                         :accessor struct-shape-virtual-interface-aws-device-v2
                         :shape "AwsDeviceV2" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aws-logical-device-id :initarg :aws-logical-device-id
                         :initform common-lisp:nil :type
                         (common-lisp:or aws-logical-device-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-virtual-interface-aws-logical-device-id
                         :shape "AwsLogicalDeviceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-virtual-interface-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (site-link-enabled :initarg :site-link-enabled
                         :initform common-lisp:nil :type
                         (common-lisp:or site-link-enabled common-lisp:null)
                         :accessor
                         struct-shape-virtual-interface-site-link-enabled
                         :shape "SiteLinkEnabled" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-virtual-interface
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'virtual-interface
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'virtual-interface 'make-virtual-interface))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input virtual-interface))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input virtual-interface))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-account))
      (common-lisp:list
       (common-lisp:cons "ownerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-interface-id))
      (common-lisp:list
       (common-lisp:cons "virtualInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-id))
      (common-lisp:list
       (common-lisp:cons "connectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-interface-type))
      (common-lisp:list
       (common-lisp:cons "virtualInterfaceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-interface-name))
      (common-lisp:list
       (common-lisp:cons "virtualInterfaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vlan))
      (common-lisp:list
       (common-lisp:cons "vlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asn))
      (common-lisp:list
       (common-lisp:cons "asn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amazon-side-asn))
      (common-lisp:list
       (common-lisp:cons "amazonSideAsn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-key))
      (common-lisp:list
       (common-lisp:cons "authKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amazon-address))
      (common-lisp:list
       (common-lisp:cons "amazonAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-address))
      (common-lisp:list
       (common-lisp:cons "customerAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-family))
      (common-lisp:list
       (common-lisp:cons "addressFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-interface-state))
      (common-lisp:list
       (common-lisp:cons "virtualInterfaceState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customer-router-config))
      (common-lisp:list
       (common-lisp:cons "customerRouterConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mtu))
      (common-lisp:list
       (common-lisp:cons "mtu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'jumbo-frame-capable))
      (common-lisp:list
       (common-lisp:cons "jumboFrameCapable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-gateway-id))
      (common-lisp:list
       (common-lisp:cons "virtualGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'direct-connect-gateway-id))
      (common-lisp:list
       (common-lisp:cons "directConnectGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'route-filter-prefixes))
      (common-lisp:list
       (common-lisp:cons "routeFilterPrefixes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bgp-peers))
      (common-lisp:list
       (common-lisp:cons "bgpPeers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-device-v2))
      (common-lisp:list
       (common-lisp:cons "awsDeviceV2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-logical-device-id))
      (common-lisp:list
       (common-lisp:cons "awsLogicalDeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'site-link-enabled))
      (common-lisp:list
       (common-lisp:cons "siteLinkEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input virtual-interface))
   common-lisp:nil))
(common-lisp:deftype virtual-interface-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype virtual-interface-list ()
   '(trivial-types:proper-list virtual-interface))
 (common-lisp:defun make-virtual-interface-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list virtual-interface))
   aws-sdk/generator/shape::members))
(common-lisp:deftype virtual-interface-name () 'common-lisp:string)
(common-lisp:deftype virtual-interface-region () 'common-lisp:string)
(common-lisp:deftype virtual-interface-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass virtual-interface-test-history common-lisp:nil
                       ((test-id :initarg :test-id :initform common-lisp:nil
                         :type (common-lisp:or test-id common-lisp:null)
                         :accessor
                         struct-shape-virtual-interface-test-history-test-id
                         :shape "TestId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (virtual-interface-id :initarg :virtual-interface-id
                         :initform common-lisp:nil :type
                         (common-lisp:or virtual-interface-id common-lisp:null)
                         :accessor
                         struct-shape-virtual-interface-test-history-virtual-interface-id
                         :shape "VirtualInterfaceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bgp-peers :initarg :bgp-peers :initform
                         common-lisp:nil :type
                         (common-lisp:or bgppeer-id-list common-lisp:null)
                         :accessor
                         struct-shape-virtual-interface-test-history-bgp-peers
                         :shape "BGPPeerIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or failure-test-history-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-virtual-interface-test-history-status
                         :shape "FailureTestHistoryStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (owner-account :initarg :owner-account :initform
                         common-lisp:nil :type
                         (common-lisp:or owner-account common-lisp:null)
                         :accessor
                         struct-shape-virtual-interface-test-history-owner-account
                         :shape "OwnerAccount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (test-duration-in-minutes :initarg
                         :test-duration-in-minutes :initform common-lisp:nil
                         :type (common-lisp:or test-duration common-lisp:null)
                         :accessor
                         struct-shape-virtual-interface-test-history-test-duration-in-minutes
                         :shape "TestDuration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or start-time common-lisp:null) :accessor
                         struct-shape-virtual-interface-test-history-start-time
                         :shape "StartTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or end-time common-lisp:null)
                         :accessor
                         struct-shape-virtual-interface-test-history-end-time
                         :shape "EndTime" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-virtual-interface-test-history
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'virtual-interface-test-history
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'virtual-interface-test-history
                    'make-virtual-interface-test-history))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-interface-test-history))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-interface-test-history))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-id))
      (common-lisp:list
       (common-lisp:cons "testId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-interface-id))
      (common-lisp:list
       (common-lisp:cons "virtualInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bgp-peers))
      (common-lisp:list
       (common-lisp:cons "bgpPeers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-account))
      (common-lisp:list
       (common-lisp:cons "ownerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'test-duration-in-minutes))
      (common-lisp:list
       (common-lisp:cons "testDurationInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-interface-test-history))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype virtual-interface-test-history-list ()
   '(trivial-types:proper-list virtual-interface-test-history))
 (common-lisp:defun make-virtual-interface-test-history-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            virtual-interface-test-history))
   aws-sdk/generator/shape::members))
(common-lisp:deftype virtual-interface-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass virtual-interfaces common-lisp:nil
                       ((virtual-interfaces :initarg :virtual-interfaces
                         :initform common-lisp:nil :type
                         (common-lisp:or virtual-interface-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-virtual-interfaces-virtual-interfaces
                         :shape "VirtualInterfaceList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-virtual-interfaces
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'virtual-interfaces
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'virtual-interfaces 'make-virtual-interfaces))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input virtual-interfaces))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input virtual-interfaces))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-interfaces))
      (common-lisp:list
       (common-lisp:cons "virtualInterfaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input virtual-interfaces))
   common-lisp:nil))
(common-lisp:deftype xslt-template-name () 'common-lisp:string)
(common-lisp:deftype xslt-template-name-for-mac-sec () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun accept-direct-connect-gateway-association-proposal
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key direct-connect-gateway-id proposal-id
                     associated-gateway-owner-account
                     override-allowed-prefixes-to-direct-connect-gateway)
   (common-lisp:declare
    (common-lisp:ignorable direct-connect-gateway-id proposal-id
     associated-gateway-owner-account
     override-allowed-prefixes-to-direct-connect-gateway))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-accept-direct-connect-gateway-association-proposal-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AcceptDirectConnectGatewayAssociationProposal"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'accept-direct-connect-gateway-association-proposal))
(common-lisp:progn
 (common-lisp:defun allocate-connection-on-interconnect
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bandwidth connection-name owner-account
                     interconnect-id vlan)
   (common-lisp:declare
    (common-lisp:ignorable bandwidth connection-name owner-account
     interconnect-id vlan))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-allocate-connection-on-interconnect-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AllocateConnectionOnInterconnect"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'allocate-connection-on-interconnect))
(common-lisp:progn
 (common-lisp:defun allocate-hosted-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-id owner-account bandwidth
                     connection-name vlan tags)
   (common-lisp:declare
    (common-lisp:ignorable connection-id owner-account bandwidth
     connection-name vlan tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-allocate-hosted-connection-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AllocateHostedConnection"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'allocate-hosted-connection))
(common-lisp:progn
 (common-lisp:defun allocate-private-virtual-interface
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-id owner-account
                     new-private-virtual-interface-allocation)
   (common-lisp:declare
    (common-lisp:ignorable connection-id owner-account
     new-private-virtual-interface-allocation))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-allocate-private-virtual-interface-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AllocatePrivateVirtualInterface"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'allocate-private-virtual-interface))
(common-lisp:progn
 (common-lisp:defun allocate-public-virtual-interface
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-id owner-account
                     new-public-virtual-interface-allocation)
   (common-lisp:declare
    (common-lisp:ignorable connection-id owner-account
     new-public-virtual-interface-allocation))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-allocate-public-virtual-interface-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AllocatePublicVirtualInterface"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'allocate-public-virtual-interface))
(common-lisp:progn
 (common-lisp:defun allocate-transit-virtual-interface
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-id owner-account
                     new-transit-virtual-interface-allocation)
   (common-lisp:declare
    (common-lisp:ignorable connection-id owner-account
     new-transit-virtual-interface-allocation))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-allocate-transit-virtual-interface-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AllocateTransitVirtualInterface"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'allocate-transit-virtual-interface))
(common-lisp:progn
 (common-lisp:defun associate-connection-with-lag
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-id lag-id)
   (common-lisp:declare (common-lisp:ignorable connection-id lag-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-connection-with-lag-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AssociateConnectionWithLag"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'associate-connection-with-lag))
(common-lisp:progn
 (common-lisp:defun associate-hosted-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-id parent-connection-id)
   (common-lisp:declare
    (common-lisp:ignorable connection-id parent-connection-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-hosted-connection-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AssociateHostedConnection"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'associate-hosted-connection))
(common-lisp:progn
 (common-lisp:defun associate-mac-sec-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-id secret-arn ckn cak)
   (common-lisp:declare
    (common-lisp:ignorable connection-id secret-arn ckn cak))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-associate-mac-sec-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AssociateMacSecKey"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'associate-mac-sec-key))
(common-lisp:progn
 (common-lisp:defun associate-virtual-interface
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key virtual-interface-id connection-id)
   (common-lisp:declare
    (common-lisp:ignorable virtual-interface-id connection-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-virtual-interface-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AssociateVirtualInterface"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'associate-virtual-interface))
(common-lisp:progn
 (common-lisp:defun confirm-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-id)
   (common-lisp:declare (common-lisp:ignorable connection-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-confirm-connection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ConfirmConnection"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'confirm-connection))
(common-lisp:progn
 (common-lisp:defun confirm-customer-agreement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key agreement-name)
   (common-lisp:declare (common-lisp:ignorable agreement-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-confirm-customer-agreement-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ConfirmCustomerAgreement"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'confirm-customer-agreement))
(common-lisp:progn
 (common-lisp:defun confirm-private-virtual-interface
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key virtual-interface-id virtual-gateway-id
                     direct-connect-gateway-id)
   (common-lisp:declare
    (common-lisp:ignorable virtual-interface-id virtual-gateway-id
     direct-connect-gateway-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-confirm-private-virtual-interface-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ConfirmPrivateVirtualInterface"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'confirm-private-virtual-interface))
(common-lisp:progn
 (common-lisp:defun confirm-public-virtual-interface
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key virtual-interface-id)
   (common-lisp:declare (common-lisp:ignorable virtual-interface-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-confirm-public-virtual-interface-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ConfirmPublicVirtualInterface"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'confirm-public-virtual-interface))
(common-lisp:progn
 (common-lisp:defun confirm-transit-virtual-interface
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key virtual-interface-id
                     direct-connect-gateway-id)
   (common-lisp:declare
    (common-lisp:ignorable virtual-interface-id direct-connect-gateway-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-confirm-transit-virtual-interface-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ConfirmTransitVirtualInterface"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'confirm-transit-virtual-interface))
(common-lisp:progn
 (common-lisp:defun create-bgppeer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key virtual-interface-id new-bgppeer)
   (common-lisp:declare
    (common-lisp:ignorable virtual-interface-id new-bgppeer))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-bgppeer-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateBGPPeer"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-bgppeer))
(common-lisp:progn
 (common-lisp:defun create-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key location bandwidth connection-name lag-id
                     tags provider-name request-macsec)
   (common-lisp:declare
    (common-lisp:ignorable location bandwidth connection-name lag-id tags
     provider-name request-macsec))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-connection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateConnection"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-connection))
(common-lisp:progn
 (common-lisp:defun create-direct-connect-gateway
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key direct-connect-gateway-name
                     amazon-side-asn)
   (common-lisp:declare
    (common-lisp:ignorable direct-connect-gateway-name amazon-side-asn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-direct-connect-gateway-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDirectConnectGateway"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-direct-connect-gateway))
(common-lisp:progn
 (common-lisp:defun create-direct-connect-gateway-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key direct-connect-gateway-id gateway-id
                     add-allowed-prefixes-to-direct-connect-gateway
                     virtual-gateway-id)
   (common-lisp:declare
    (common-lisp:ignorable direct-connect-gateway-id gateway-id
     add-allowed-prefixes-to-direct-connect-gateway virtual-gateway-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-direct-connect-gateway-association-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDirectConnectGatewayAssociation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-direct-connect-gateway-association))
(common-lisp:progn
 (common-lisp:defun create-direct-connect-gateway-association-proposal
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key direct-connect-gateway-id
                     direct-connect-gateway-owner-account gateway-id
                     add-allowed-prefixes-to-direct-connect-gateway
                     remove-allowed-prefixes-to-direct-connect-gateway)
   (common-lisp:declare
    (common-lisp:ignorable direct-connect-gateway-id
     direct-connect-gateway-owner-account gateway-id
     add-allowed-prefixes-to-direct-connect-gateway
     remove-allowed-prefixes-to-direct-connect-gateway))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-direct-connect-gateway-association-proposal-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDirectConnectGatewayAssociationProposal"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-direct-connect-gateway-association-proposal))
(common-lisp:progn
 (common-lisp:defun create-interconnect
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key interconnect-name bandwidth location
                     lag-id tags provider-name)
   (common-lisp:declare
    (common-lisp:ignorable interconnect-name bandwidth location lag-id tags
     provider-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-interconnect-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateInterconnect"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-interconnect))
(common-lisp:progn
 (common-lisp:defun create-lag
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key number-of-connections location
                     connections-bandwidth lag-name connection-id tags
                     child-connection-tags provider-name request-macsec)
   (common-lisp:declare
    (common-lisp:ignorable number-of-connections location connections-bandwidth
     lag-name connection-id tags child-connection-tags provider-name
     request-macsec))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-lag-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateLag"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-lag))
(common-lisp:progn
 (common-lisp:defun create-private-virtual-interface
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-id
                     new-private-virtual-interface)
   (common-lisp:declare
    (common-lisp:ignorable connection-id new-private-virtual-interface))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-private-virtual-interface-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreatePrivateVirtualInterface"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-private-virtual-interface))
(common-lisp:progn
 (common-lisp:defun create-public-virtual-interface
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-id
                     new-public-virtual-interface)
   (common-lisp:declare
    (common-lisp:ignorable connection-id new-public-virtual-interface))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-public-virtual-interface-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreatePublicVirtualInterface"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-public-virtual-interface))
(common-lisp:progn
 (common-lisp:defun create-transit-virtual-interface
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-id
                     new-transit-virtual-interface)
   (common-lisp:declare
    (common-lisp:ignorable connection-id new-transit-virtual-interface))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-transit-virtual-interface-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateTransitVirtualInterface"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-transit-virtual-interface))
(common-lisp:progn
 (common-lisp:defun delete-bgppeer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key virtual-interface-id asn customer-address
                     bgp-peer-id)
   (common-lisp:declare
    (common-lisp:ignorable virtual-interface-id asn customer-address
     bgp-peer-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-bgppeer-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteBGPPeer"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-bgppeer))
(common-lisp:progn
 (common-lisp:defun delete-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-id)
   (common-lisp:declare (common-lisp:ignorable connection-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-connection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteConnection"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-connection))
(common-lisp:progn
 (common-lisp:defun delete-direct-connect-gateway
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key direct-connect-gateway-id)
   (common-lisp:declare (common-lisp:ignorable direct-connect-gateway-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-direct-connect-gateway-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDirectConnectGateway"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-direct-connect-gateway))
(common-lisp:progn
 (common-lisp:defun delete-direct-connect-gateway-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key association-id direct-connect-gateway-id
                     virtual-gateway-id)
   (common-lisp:declare
    (common-lisp:ignorable association-id direct-connect-gateway-id
     virtual-gateway-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-direct-connect-gateway-association-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDirectConnectGatewayAssociation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-direct-connect-gateway-association))
(common-lisp:progn
 (common-lisp:defun delete-direct-connect-gateway-association-proposal
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key proposal-id)
   (common-lisp:declare (common-lisp:ignorable proposal-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-direct-connect-gateway-association-proposal-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDirectConnectGatewayAssociationProposal"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-direct-connect-gateway-association-proposal))
(common-lisp:progn
 (common-lisp:defun delete-interconnect
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key interconnect-id)
   (common-lisp:declare (common-lisp:ignorable interconnect-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-interconnect-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteInterconnect"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-interconnect))
(common-lisp:progn
 (common-lisp:defun delete-lag
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key lag-id)
   (common-lisp:declare (common-lisp:ignorable lag-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-lag-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteLag"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-lag))
(common-lisp:progn
 (common-lisp:defun delete-virtual-interface
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key virtual-interface-id)
   (common-lisp:declare (common-lisp:ignorable virtual-interface-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-virtual-interface-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteVirtualInterface"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-virtual-interface))
(common-lisp:progn
 (common-lisp:defun describe-connection-loa
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-id provider-name
                     loa-content-type)
   (common-lisp:declare
    (common-lisp:ignorable connection-id provider-name loa-content-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-connection-loa-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeConnectionLoa"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-connection-loa))
(common-lisp:progn
 (common-lisp:defun describe-connections
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-id)
   (common-lisp:declare (common-lisp:ignorable connection-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-connections-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeConnections"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-connections))
(common-lisp:progn
 (common-lisp:defun describe-connections-on-interconnect
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key interconnect-id)
   (common-lisp:declare (common-lisp:ignorable interconnect-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-connections-on-interconnect-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeConnectionsOnInterconnect"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-connections-on-interconnect))
(common-lisp:progn
 (common-lisp:defun describe-customer-metadata ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'directconnect-request :method "POST" :path "/"
                                :operation "DescribeCustomerMetadata"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'describe-customer-metadata))
(common-lisp:progn
 (common-lisp:defun describe-direct-connect-gateway-association-proposals
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key direct-connect-gateway-id proposal-id
                     associated-gateway-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable direct-connect-gateway-id proposal-id
     associated-gateway-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-direct-connect-gateway-association-proposals-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDirectConnectGatewayAssociationProposals"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-direct-connect-gateway-association-proposals))
(common-lisp:progn
 (common-lisp:defun describe-direct-connect-gateway-associations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key association-id associated-gateway-id
                     direct-connect-gateway-id max-results next-token
                     virtual-gateway-id)
   (common-lisp:declare
    (common-lisp:ignorable association-id associated-gateway-id
     direct-connect-gateway-id max-results next-token virtual-gateway-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-direct-connect-gateway-associations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDirectConnectGatewayAssociations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-direct-connect-gateway-associations))
(common-lisp:progn
 (common-lisp:defun describe-direct-connect-gateway-attachments
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key direct-connect-gateway-id
                     virtual-interface-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable direct-connect-gateway-id virtual-interface-id
     max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-direct-connect-gateway-attachments-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDirectConnectGatewayAttachments"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-direct-connect-gateway-attachments))
(common-lisp:progn
 (common-lisp:defun describe-direct-connect-gateways
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key direct-connect-gateway-id max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable direct-connect-gateway-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-direct-connect-gateways-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDirectConnectGateways"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-direct-connect-gateways))
(common-lisp:progn
 (common-lisp:defun describe-hosted-connections
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-id)
   (common-lisp:declare (common-lisp:ignorable connection-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-hosted-connections-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeHostedConnections"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-hosted-connections))
(common-lisp:progn
 (common-lisp:defun describe-interconnect-loa
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key interconnect-id provider-name
                     loa-content-type)
   (common-lisp:declare
    (common-lisp:ignorable interconnect-id provider-name loa-content-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-interconnect-loa-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeInterconnectLoa"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-interconnect-loa))
(common-lisp:progn
 (common-lisp:defun describe-interconnects
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key interconnect-id)
   (common-lisp:declare (common-lisp:ignorable interconnect-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-interconnects-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeInterconnects"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-interconnects))
(common-lisp:progn
 (common-lisp:defun describe-lags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key lag-id)
   (common-lisp:declare (common-lisp:ignorable lag-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-lags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeLags"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-lags))
(common-lisp:progn
 (common-lisp:defun describe-loa
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-id provider-name
                     loa-content-type)
   (common-lisp:declare
    (common-lisp:ignorable connection-id provider-name loa-content-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-loa-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeLoa"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-loa))
(common-lisp:progn
 (common-lisp:defun describe-locations ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'directconnect-request :method "POST" :path "/"
                                :operation "DescribeLocations"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'describe-locations))
(common-lisp:progn
 (common-lisp:defun describe-router-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key virtual-interface-id
                     router-type-identifier)
   (common-lisp:declare
    (common-lisp:ignorable virtual-interface-id router-type-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-router-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeRouterConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-router-configuration))
(common-lisp:progn
 (common-lisp:defun describe-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arns)
   (common-lisp:declare (common-lisp:ignorable resource-arns))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeTags"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-tags))
(common-lisp:progn
 (common-lisp:defun describe-virtual-gateways ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'directconnect-request :method "POST" :path "/"
                                :operation "DescribeVirtualGateways"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'describe-virtual-gateways))
(common-lisp:progn
 (common-lisp:defun describe-virtual-interfaces
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-id virtual-interface-id)
   (common-lisp:declare
    (common-lisp:ignorable connection-id virtual-interface-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-virtual-interfaces-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeVirtualInterfaces"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-virtual-interfaces))
(common-lisp:progn
 (common-lisp:defun disassociate-connection-from-lag
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-id lag-id)
   (common-lisp:declare (common-lisp:ignorable connection-id lag-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-connection-from-lag-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DisassociateConnectionFromLag"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disassociate-connection-from-lag))
(common-lisp:progn
 (common-lisp:defun disassociate-mac-sec-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-id secret-arn)
   (common-lisp:declare (common-lisp:ignorable connection-id secret-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disassociate-mac-sec-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DisassociateMacSecKey"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disassociate-mac-sec-key))
(common-lisp:progn
 (common-lisp:defun list-virtual-interface-test-history
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key test-id virtual-interface-id bgp-peers
                     status max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable test-id virtual-interface-id bgp-peers status
     max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-virtual-interface-test-history-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListVirtualInterfaceTestHistory"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-virtual-interface-test-history))
(common-lisp:progn
 (common-lisp:defun start-bgp-failover-test
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key virtual-interface-id bgp-peers
                     test-duration-in-minutes)
   (common-lisp:declare
    (common-lisp:ignorable virtual-interface-id bgp-peers
     test-duration-in-minutes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-bgp-failover-test-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartBgpFailoverTest"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-bgp-failover-test))
(common-lisp:progn
 (common-lisp:defun stop-bgp-failover-test
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key virtual-interface-id)
   (common-lisp:declare (common-lisp:ignorable virtual-interface-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-bgp-failover-test-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopBgpFailoverTest"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'stop-bgp-failover-test))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-id connection-name
                     encryption-mode)
   (common-lisp:declare
    (common-lisp:ignorable connection-id connection-name encryption-mode))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-connection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateConnection"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-connection))
(common-lisp:progn
 (common-lisp:defun update-direct-connect-gateway
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key direct-connect-gateway-id
                     new-direct-connect-gateway-name)
   (common-lisp:declare
    (common-lisp:ignorable direct-connect-gateway-id
     new-direct-connect-gateway-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-direct-connect-gateway-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateDirectConnectGateway"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-direct-connect-gateway))
(common-lisp:progn
 (common-lisp:defun update-direct-connect-gateway-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key association-id
                     add-allowed-prefixes-to-direct-connect-gateway
                     remove-allowed-prefixes-to-direct-connect-gateway)
   (common-lisp:declare
    (common-lisp:ignorable association-id
     add-allowed-prefixes-to-direct-connect-gateway
     remove-allowed-prefixes-to-direct-connect-gateway))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-direct-connect-gateway-association-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateDirectConnectGatewayAssociation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-direct-connect-gateway-association))
(common-lisp:progn
 (common-lisp:defun update-lag
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key lag-id lag-name minimum-links
                     encryption-mode)
   (common-lisp:declare
    (common-lisp:ignorable lag-id lag-name minimum-links encryption-mode))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-lag-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateLag"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-lag))
(common-lisp:progn
 (common-lisp:defun update-virtual-interface-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key virtual-interface-id mtu enable-site-link
                     virtual-interface-name)
   (common-lisp:declare
    (common-lisp:ignorable virtual-interface-id mtu enable-site-link
     virtual-interface-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-virtual-interface-attributes-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateVirtualInterfaceAttributes"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-virtual-interface-attributes))
