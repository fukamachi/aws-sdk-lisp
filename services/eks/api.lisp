;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/eks/api
  (:use)
  (:nicknames #:aws/eks)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/eks/api)
(common-lisp:progn
 (common-lisp:define-condition eks-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'eks-error))
(common-lisp:progn
 (common-lisp:defclass eks-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "eks" :api-version
                        "2017-11-01" :host-prefix "eks" :signing-name "eks"
                        :global-host common-lisp:nil))
 (common-lisp:export 'eks-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("BadRequestException" . bad-request-exception)
    ("ClientException" . client-exception)
    ("InvalidParameterException" . invalid-parameter-exception)
    ("InvalidRequestException" . invalid-request-exception)
    ("NotFoundException" . not-found-exception)
    ("ResourceInUseException" . resource-in-use-exception)
    ("ResourceLimitExceededException" . resource-limit-exceeded-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ResourcePropagationDelayException"
     . resource-propagation-delay-exception)
    ("ServerException" . server-exception)
    ("ServiceUnavailableException" . service-unavailable-exception)
    ("UnsupportedAvailabilityZoneException"
     . unsupported-availability-zone-exception)))
(common-lisp:deftype amitypes () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass access-config-response common-lisp:nil
                       ((bootstrap-cluster-creator-admin-permissions :initarg
                         :bootstrap-cluster-creator-admin-permissions :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-access-config-response-bootstrap-cluster-creator-admin-permissions
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (authentication-mode :initarg :authentication-mode
                         :initform common-lisp:nil :type
                         (common-lisp:or authentication-mode common-lisp:null)
                         :accessor
                         struct-shape-access-config-response-authentication-mode
                         :shape "AuthenticationMode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-access-config-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'access-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'access-config-response 'make-access-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          access-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          access-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bootstrap-cluster-creator-admin-permissions))
      (common-lisp:list
       (common-lisp:cons "bootstrapClusterCreatorAdminPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication-mode))
      (common-lisp:list
       (common-lisp:cons "authenticationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          access-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (eks-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defclass access-entry common-lisp:nil
                       ((cluster-name :initarg :cluster-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-access-entry-cluster-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (principal-arn :initarg :principal-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-access-entry-principal-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (kubernetes-groups :initarg :kubernetes-groups
                         :initform common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-access-entry-kubernetes-groups
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (access-entry-arn :initarg :access-entry-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-access-entry-access-entry-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-access-entry-created-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (modified-at :initarg :modified-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-access-entry-modified-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-access-entry-tags :shape "TagMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (username :initarg :username :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-access-entry-username :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-access-entry-type :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-access-entry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'access-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'access-entry 'make-access-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input access-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input access-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "clusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-arn))
      (common-lisp:list
       (common-lisp:cons "principalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kubernetes-groups))
      (common-lisp:list
       (common-lisp:cons "kubernetesGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-entry-arn))
      (common-lisp:list
       (common-lisp:cons "accessEntryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modified-at))
      (common-lisp:list
       (common-lisp:cons "modifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input access-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype access-policies-list ()
   '(trivial-types:proper-list access-policy))
 (common-lisp:defun make-access-policies-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list access-policy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass access-policy common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-access-policy-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-access-policy-arn :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-access-policy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'access-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'access-policy 'make-access-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input access-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input access-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input access-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass access-scope common-lisp:nil
                       ((type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or access-scope-type common-lisp:null)
                         :accessor struct-shape-access-scope-type :shape
                         "AccessScopeType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (namespaces :initarg :namespaces :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-access-scope-namespaces :shape
                         "StringList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-access-scope
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'access-scope
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'access-scope 'make-access-scope))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input access-scope))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input access-scope))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespaces))
      (common-lisp:list
       (common-lisp:cons "namespaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input access-scope))
   common-lisp:nil))
(common-lisp:deftype access-scope-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype additional-info-map () 'common-lisp:hash-table)
 (common-lisp:defun make-additional-info-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass addon common-lisp:nil
                       ((addon-name :initarg :addon-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-addon-addon-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cluster-name :initarg :cluster-name :initform
                         common-lisp:nil :type
                         (common-lisp:or cluster-name common-lisp:null)
                         :accessor struct-shape-addon-cluster-name :shape
                         "ClusterName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or addon-status common-lisp:null)
                         :accessor struct-shape-addon-status :shape
                         "AddonStatus" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (addon-version :initarg :addon-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-addon-addon-version :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (health :initarg :health :initform common-lisp:nil
                         :type (common-lisp:or addon-health common-lisp:null)
                         :accessor struct-shape-addon-health :shape
                         "AddonHealth" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (addon-arn :initarg :addon-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-addon-addon-arn :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-addon-created-at :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (modified-at :initarg :modified-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-addon-modified-at :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (service-account-role-arn :initarg
                         :service-account-role-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-addon-service-account-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-addon-tags :shape "TagMap" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (publisher :initarg :publisher :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-addon-publisher :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (owner :initarg :owner :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-addon-owner :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (marketplace-information :initarg
                         :marketplace-information :initform common-lisp:nil
                         :type
                         (common-lisp:or marketplace-information
                                         common-lisp:null)
                         :accessor struct-shape-addon-marketplace-information
                         :shape "MarketplaceInformation" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (configuration-values :initarg :configuration-values
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-addon-configuration-values :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-addon
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'addon
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'addon 'make-addon))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input addon))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input addon))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addon-name))
      (common-lisp:list
       (common-lisp:cons "addonName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "clusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addon-version))
      (common-lisp:list
       (common-lisp:cons "addonVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health))
      (common-lisp:list
       (common-lisp:cons "health"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addon-arn))
      (common-lisp:list
       (common-lisp:cons "addonArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modified-at))
      (common-lisp:list
       (common-lisp:cons "modifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-account-role-arn))
      (common-lisp:list
       (common-lisp:cons "serviceAccountRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publisher))
      (common-lisp:list
       (common-lisp:cons "publisher"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'marketplace-information))
      (common-lisp:list
       (common-lisp:cons "marketplaceInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-values))
      (common-lisp:list
       (common-lisp:cons "configurationValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input addon))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass addon-health common-lisp:nil
                       ((issues :initarg :issues :initform common-lisp:nil
                         :type
                         (common-lisp:or addon-issue-list common-lisp:null)
                         :accessor struct-shape-addon-health-issues :shape
                         "AddonIssueList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-addon-health
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'addon-health
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'addon-health 'make-addon-health))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input addon-health))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input addon-health))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issues))
      (common-lisp:list
       (common-lisp:cons "issues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input addon-health))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass addon-info common-lisp:nil
                       ((addon-name :initarg :addon-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-addon-info-addon-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-addon-info-type :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (addon-versions :initarg :addon-versions :initform
                         common-lisp:nil :type
                         (common-lisp:or addon-version-info-list
                                         common-lisp:null)
                         :accessor struct-shape-addon-info-addon-versions
                         :shape "AddonVersionInfoList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (publisher :initarg :publisher :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-addon-info-publisher :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (owner :initarg :owner :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-addon-info-owner :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (marketplace-information :initarg
                         :marketplace-information :initform common-lisp:nil
                         :type
                         (common-lisp:or marketplace-information
                                         common-lisp:null)
                         :accessor
                         struct-shape-addon-info-marketplace-information :shape
                         "MarketplaceInformation" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-addon-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'addon-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'addon-info 'make-addon-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input addon-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input addon-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addon-name))
      (common-lisp:list
       (common-lisp:cons "addonName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addon-versions))
      (common-lisp:list
       (common-lisp:cons "addonVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publisher))
      (common-lisp:list
       (common-lisp:cons "publisher"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'marketplace-information))
      (common-lisp:list
       (common-lisp:cons "marketplaceInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input addon-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass addon-issue common-lisp:nil
                       ((code :initarg :code :initform common-lisp:nil :type
                         (common-lisp:or addon-issue-code common-lisp:null)
                         :accessor struct-shape-addon-issue-code :shape
                         "AddonIssueCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-addon-issue-message :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-ids :initarg :resource-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-addon-issue-resource-ids :shape
                         "StringList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-addon-issue
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'addon-issue
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'addon-issue 'make-addon-issue))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input addon-issue))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input addon-issue))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-ids))
      (common-lisp:list
       (common-lisp:cons "resourceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input addon-issue))
   common-lisp:nil))
(common-lisp:deftype addon-issue-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype addon-issue-list ()
   '(trivial-types:proper-list addon-issue))
 (common-lisp:defun make-addon-issue-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list addon-issue))
   aws-sdk/generator/shape::members))
(common-lisp:deftype addon-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass addon-version-info common-lisp:nil
                       ((addon-version :initarg :addon-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-addon-version-info-addon-version :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (architecture :initarg :architecture :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-addon-version-info-architecture
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (compatibilities :initarg :compatibilities :initform
                         common-lisp:nil :type
                         (common-lisp:or compatibilities common-lisp:null)
                         :accessor
                         struct-shape-addon-version-info-compatibilities :shape
                         "Compatibilities" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (requires-configuration :initarg
                         :requires-configuration :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-addon-version-info-requires-configuration
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-addon-version-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'addon-version-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'addon-version-info 'make-addon-version-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input addon-version-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input addon-version-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addon-version))
      (common-lisp:list
       (common-lisp:cons "addonVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'architecture))
      (common-lisp:list
       (common-lisp:cons "architecture"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compatibilities))
      (common-lisp:list
       (common-lisp:cons "compatibilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'requires-configuration))
      (common-lisp:list
       (common-lisp:cons "requiresConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input addon-version-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype addon-version-info-list ()
   '(trivial-types:proper-list addon-version-info))
 (common-lisp:defun make-addon-version-info-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list addon-version-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype addons () '(trivial-types:proper-list addon-info))
 (common-lisp:defun make-addons
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list addon-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass associate-access-policy-request common-lisp:nil
                       ((cluster-name :initarg :cluster-name :initform
                         (common-lisp:error ":clustername is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-associate-access-policy-request-cluster-name
                         :shape "String" :location "uri" :location-name "name")
                        (principal-arn :initarg :principal-arn :initform
                         (common-lisp:error ":principalarn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-associate-access-policy-request-principal-arn
                         :shape "String" :location "uri" :location-name
                         "principalArn")
                        (policy-arn :initarg :policy-arn :initform
                         (common-lisp:error ":policyarn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-associate-access-policy-request-policy-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (access-scope :initarg :access-scope :initform
                         (common-lisp:error ":accessscope is required") :type
                         (common-lisp:or access-scope common-lisp:null)
                         :accessor
                         struct-shape-associate-access-policy-request-access-scope
                         :shape "AccessScope" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-access-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-access-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-access-policy-request
                    'make-associate-access-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-access-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-access-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "policyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-scope))
      (common-lisp:list
       (common-lisp:cons "accessScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-access-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-access-policy-response common-lisp:nil
                       ((cluster-name :initarg :cluster-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-associate-access-policy-response-cluster-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (principal-arn :initarg :principal-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-associate-access-policy-response-principal-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (associated-access-policy :initarg
                         :associated-access-policy :initform common-lisp:nil
                         :type
                         (common-lisp:or associated-access-policy
                                         common-lisp:null)
                         :accessor
                         struct-shape-associate-access-policy-response-associated-access-policy
                         :shape "AssociatedAccessPolicy" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-access-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-access-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-access-policy-response
                    'make-associate-access-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-access-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-access-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "clusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-arn))
      (common-lisp:list
       (common-lisp:cons "principalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associated-access-policy))
      (common-lisp:list
       (common-lisp:cons "associatedAccessPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-access-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-encryption-config-request common-lisp:nil
                       ((cluster-name :initarg :cluster-name :initform
                         (common-lisp:error ":clustername is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-associate-encryption-config-request-cluster-name
                         :shape "String" :location "uri" :location-name "name")
                        (encryption-config :initarg :encryption-config
                         :initform
                         (common-lisp:error ":encryptionconfig is required")
                         :type
                         (common-lisp:or encryption-config-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-associate-encryption-config-request-encryption-config
                         :shape "EncryptionConfigList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-associate-encryption-config-request-client-request-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-encryption-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-encryption-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-encryption-config-request
                    'make-associate-encryption-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-encryption-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-encryption-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-config))
      (common-lisp:list
       (common-lisp:cons "encryptionConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-encryption-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-encryption-config-response common-lisp:nil
                       ((update :initarg :update :initform common-lisp:nil
                         :type (common-lisp:or update common-lisp:null)
                         :accessor
                         struct-shape-associate-encryption-config-response-update
                         :shape "Update" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-encryption-config-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-encryption-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-encryption-config-response
                    'make-associate-encryption-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-encryption-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-encryption-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update))
      (common-lisp:list
       (common-lisp:cons "update"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-encryption-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-identity-provider-config-request
                       common-lisp:nil
                       ((cluster-name :initarg :cluster-name :initform
                         (common-lisp:error ":clustername is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-associate-identity-provider-config-request-cluster-name
                         :shape "String" :location "uri" :location-name "name")
                        (oidc :initarg :oidc :initform
                         (common-lisp:error ":oidc is required") :type
                         (common-lisp:or oidc-identity-provider-config-request
                                         common-lisp:null)
                         :accessor
                         struct-shape-associate-identity-provider-config-request-oidc
                         :shape "OidcIdentityProviderConfigRequest" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-associate-identity-provider-config-request-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-associate-identity-provider-config-request-client-request-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-identity-provider-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-identity-provider-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-identity-provider-config-request
                    'make-associate-identity-provider-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-identity-provider-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-identity-provider-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'oidc))
      (common-lisp:list
       (common-lisp:cons "oidc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-identity-provider-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-identity-provider-config-response
                       common-lisp:nil
                       ((update :initarg :update :initform common-lisp:nil
                         :type (common-lisp:or update common-lisp:null)
                         :accessor
                         struct-shape-associate-identity-provider-config-response-update
                         :shape "Update" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-associate-identity-provider-config-response-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-identity-provider-config-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-identity-provider-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-identity-provider-config-response
                    'make-associate-identity-provider-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-identity-provider-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-identity-provider-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update))
      (common-lisp:list
       (common-lisp:cons "update"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-identity-provider-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype associated-access-policies-list ()
   '(trivial-types:proper-list associated-access-policy))
 (common-lisp:defun make-associated-access-policies-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            associated-access-policy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass associated-access-policy common-lisp:nil
                       ((policy-arn :initarg :policy-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-associated-access-policy-policy-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (access-scope :initarg :access-scope :initform
                         common-lisp:nil :type
                         (common-lisp:or access-scope common-lisp:null)
                         :accessor
                         struct-shape-associated-access-policy-access-scope
                         :shape "AccessScope" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (associated-at :initarg :associated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-associated-access-policy-associated-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (modified-at :initarg :modified-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-associated-access-policy-modified-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associated-access-policy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'associated-access-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associated-access-policy 'make-associated-access-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associated-access-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associated-access-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "policyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-scope))
      (common-lisp:list
       (common-lisp:cons "accessScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'associated-at))
      (common-lisp:list
       (common-lisp:cons "associatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modified-at))
      (common-lisp:list
       (common-lisp:cons "modifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associated-access-policy))
   common-lisp:nil))
(common-lisp:deftype authentication-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass auto-scaling-group common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-auto-scaling-group-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-auto-scaling-group
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'auto-scaling-group
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'auto-scaling-group 'make-auto-scaling-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input auto-scaling-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input auto-scaling-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input auto-scaling-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype auto-scaling-group-list ()
   '(trivial-types:proper-list auto-scaling-group))
 (common-lisp:defun make-auto-scaling-group-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list auto-scaling-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition bad-request-exception
     (eks-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       bad-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'bad-request-exception 'bad-request-exception-message)))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype boxed-boolean () 'common-lisp:boolean)
(common-lisp:deftype boxed-integer () 'common-lisp:integer)
(common-lisp:deftype capacity () 'common-lisp:integer)
(common-lisp:deftype capacity-types () 'common-lisp:string)
(common-lisp:deftype category () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype category-list () '(trivial-types:proper-list category))
 (common-lisp:defun make-category-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list category))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass certificate common-lisp:nil
                       ((data :initarg :data :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-certificate-data :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-certificate
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'certificate
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'certificate 'make-certificate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input certificate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition client-exception
     (eks-error)
     ((cluster-name :initarg :cluster-name :initform common-lisp:nil :reader
       client-exception-cluster-name)
      (nodegroup-name :initarg :nodegroup-name :initform common-lisp:nil
       :reader client-exception-nodegroup-name)
      (addon-name :initarg :addon-name :initform common-lisp:nil :reader
       client-exception-addon-name)
      (subscription-id :initarg :subscription-id :initform common-lisp:nil
       :reader client-exception-subscription-id)
      (message :initarg :message :initform common-lisp:nil :reader
       client-exception-message)))
 (common-lisp:export
  (common-lisp:list 'client-exception 'client-exception-cluster-name
                    'client-exception-nodegroup-name
                    'client-exception-addon-name
                    'client-exception-subscription-id
                    'client-exception-message)))
(common-lisp:progn
 (common-lisp:defclass client-stat common-lisp:nil
                       ((user-agent :initarg :user-agent :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-client-stat-user-agent :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (number-of-requests-last30days :initarg
                         :number-of-requests-last30days :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-client-stat-number-of-requests-last30days
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-request-time :initarg :last-request-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-client-stat-last-request-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-client-stat
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'client-stat
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'client-stat 'make-client-stat))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input client-stat))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input client-stat))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-agent))
      (common-lisp:list
       (common-lisp:cons "userAgent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-requests-last30days))
      (common-lisp:list
       (common-lisp:cons "numberOfRequestsLast30Days"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-request-time))
      (common-lisp:list
       (common-lisp:cons "lastRequestTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input client-stat))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype client-stats () '(trivial-types:proper-list client-stat))
 (common-lisp:defun make-client-stats
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list client-stat))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass cluster common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-name :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-arn :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-cluster-created-at :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (version :initarg :version :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-cluster-version :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (endpoint :initarg :endpoint :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-cluster-endpoint :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-cluster-role-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resources-vpc-config :initarg :resources-vpc-config
                         :initform common-lisp:nil :type
                         (common-lisp:or vpc-config-response common-lisp:null)
                         :accessor struct-shape-cluster-resources-vpc-config
                         :shape "VpcConfigResponse" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kubernetes-network-config :initarg
                         :kubernetes-network-config :initform common-lisp:nil
                         :type
                         (common-lisp:or kubernetes-network-config-response
                                         common-lisp:null)
                         :accessor
                         struct-shape-cluster-kubernetes-network-config :shape
                         "KubernetesNetworkConfigResponse" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (logging :initarg :logging :initform common-lisp:nil
                         :type (common-lisp:or logging common-lisp:null)
                         :accessor struct-shape-cluster-logging :shape
                         "Logging" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (identity :initarg :identity :initform common-lisp:nil
                         :type (common-lisp:or identity common-lisp:null)
                         :accessor struct-shape-cluster-identity :shape
                         "Identity" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or cluster-status common-lisp:null)
                         :accessor struct-shape-cluster-status :shape
                         "ClusterStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-authority :initarg :certificate-authority
                         :initform common-lisp:nil :type
                         (common-lisp:or certificate common-lisp:null)
                         :accessor struct-shape-cluster-certificate-authority
                         :shape "Certificate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-client-request-token :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (platform-version :initarg :platform-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-platform-version :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-cluster-tags :shape "TagMap" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (encryption-config :initarg :encryption-config
                         :initform common-lisp:nil :type
                         (common-lisp:or encryption-config-list
                                         common-lisp:null)
                         :accessor struct-shape-cluster-encryption-config
                         :shape "EncryptionConfigList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (connector-config :initarg :connector-config :initform
                         common-lisp:nil :type
                         (common-lisp:or connector-config-response
                                         common-lisp:null)
                         :accessor struct-shape-cluster-connector-config :shape
                         "ConnectorConfigResponse" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-id :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (health :initarg :health :initform common-lisp:nil
                         :type (common-lisp:or cluster-health common-lisp:null)
                         :accessor struct-shape-cluster-health :shape
                         "ClusterHealth" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (outpost-config :initarg :outpost-config :initform
                         common-lisp:nil :type
                         (common-lisp:or outpost-config-response
                                         common-lisp:null)
                         :accessor struct-shape-cluster-outpost-config :shape
                         "OutpostConfigResponse" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (access-config :initarg :access-config :initform
                         common-lisp:nil :type
                         (common-lisp:or access-config-response
                                         common-lisp:null)
                         :accessor struct-shape-cluster-access-config :shape
                         "AccessConfigResponse" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cluster
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cluster
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'cluster 'make-cluster))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cluster))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cluster))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resources-vpc-config))
      (common-lisp:list
       (common-lisp:cons "resourcesVpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kubernetes-network-config))
      (common-lisp:list
       (common-lisp:cons "kubernetesNetworkConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging))
      (common-lisp:list
       (common-lisp:cons "logging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity))
      (common-lisp:list
       (common-lisp:cons "identity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-authority))
      (common-lisp:list
       (common-lisp:cons "certificateAuthority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-version))
      (common-lisp:list
       (common-lisp:cons "platformVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-config))
      (common-lisp:list
       (common-lisp:cons "encryptionConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-config))
      (common-lisp:list
       (common-lisp:cons "connectorConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health))
      (common-lisp:list
       (common-lisp:cons "health"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outpost-config))
      (common-lisp:list
       (common-lisp:cons "outpostConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-config))
      (common-lisp:list
       (common-lisp:cons "accessConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cluster))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cluster-health common-lisp:nil
                       ((issues :initarg :issues :initform common-lisp:nil
                         :type
                         (common-lisp:or cluster-issue-list common-lisp:null)
                         :accessor struct-shape-cluster-health-issues :shape
                         "ClusterIssueList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cluster-health
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cluster-health
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'cluster-health 'make-cluster-health))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cluster-health))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cluster-health))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issues))
      (common-lisp:list
       (common-lisp:cons "issues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cluster-health))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cluster-issue common-lisp:nil
                       ((code :initarg :code :initform common-lisp:nil :type
                         (common-lisp:or cluster-issue-code common-lisp:null)
                         :accessor struct-shape-cluster-issue-code :shape
                         "ClusterIssueCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-cluster-issue-message :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-ids :initarg :resource-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-cluster-issue-resource-ids
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cluster-issue
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cluster-issue
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'cluster-issue 'make-cluster-issue))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cluster-issue))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cluster-issue))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-ids))
      (common-lisp:list
       (common-lisp:cons "resourceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cluster-issue))
   common-lisp:nil))
(common-lisp:deftype cluster-issue-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype cluster-issue-list ()
   '(trivial-types:proper-list cluster-issue))
 (common-lisp:defun make-cluster-issue-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cluster-issue))
   aws-sdk/generator/shape::members))
(common-lisp:deftype cluster-name () 'common-lisp:string)
(common-lisp:deftype cluster-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype compatibilities ()
   '(trivial-types:proper-list compatibility))
 (common-lisp:defun make-compatibilities
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list compatibility))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass compatibility common-lisp:nil
                       ((cluster-version :initarg :cluster-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-compatibility-cluster-version :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (platform-versions :initarg :platform-versions
                         :initform common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-compatibility-platform-versions
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-version :initarg :default-version :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-compatibility-default-version :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-compatibility
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'compatibility
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'compatibility 'make-compatibility))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input compatibility))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input compatibility))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-version))
      (common-lisp:list
       (common-lisp:cons "clusterVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-versions))
      (common-lisp:list
       (common-lisp:cons "platformVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-version))
      (common-lisp:list
       (common-lisp:cons "defaultVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input compatibility))
   common-lisp:nil))
(common-lisp:deftype connector-config-provider () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass connector-config-request common-lisp:nil
                       ((role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-connector-config-request-role-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (provider :initarg :provider :initform
                         (common-lisp:error ":provider is required") :type
                         (common-lisp:or connector-config-provider
                                         common-lisp:null)
                         :accessor
                         struct-shape-connector-config-request-provider :shape
                         "ConnectorConfigProvider" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-connector-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'connector-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'connector-config-request 'make-connector-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          connector-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          connector-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          connector-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass connector-config-response common-lisp:nil
                       ((activation-id :initarg :activation-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-connector-config-response-activation-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (activation-code :initarg :activation-code :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-connector-config-response-activation-code
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (activation-expiry :initarg :activation-expiry
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-connector-config-response-activation-expiry
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provider :initarg :provider :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-connector-config-response-provider :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-connector-config-response-role-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-connector-config-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'connector-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'connector-config-response
                    'make-connector-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          connector-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          connector-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activation-id))
      (common-lisp:list
       (common-lisp:cons "activationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activation-code))
      (common-lisp:list
       (common-lisp:cons "activationCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activation-expiry))
      (common-lisp:list
       (common-lisp:cons "activationExpiry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          connector-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass control-plane-placement-request common-lisp:nil
                       ((group-name :initarg :group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-control-plane-placement-request-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-control-plane-placement-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'control-plane-placement-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'control-plane-placement-request
                    'make-control-plane-placement-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          control-plane-placement-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          control-plane-placement-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "groupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          control-plane-placement-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass control-plane-placement-response common-lisp:nil
                       ((group-name :initarg :group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-control-plane-placement-response-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-control-plane-placement-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'control-plane-placement-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'control-plane-placement-response
                    'make-control-plane-placement-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          control-plane-placement-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          control-plane-placement-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "groupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          control-plane-placement-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-access-config-request common-lisp:nil
                       ((bootstrap-cluster-creator-admin-permissions :initarg
                         :bootstrap-cluster-creator-admin-permissions :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-create-access-config-request-bootstrap-cluster-creator-admin-permissions
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (authentication-mode :initarg :authentication-mode
                         :initform common-lisp:nil :type
                         (common-lisp:or authentication-mode common-lisp:null)
                         :accessor
                         struct-shape-create-access-config-request-authentication-mode
                         :shape "AuthenticationMode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-access-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-access-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-access-config-request
                    'make-create-access-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-access-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-access-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bootstrap-cluster-creator-admin-permissions))
      (common-lisp:list
       (common-lisp:cons "bootstrapClusterCreatorAdminPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication-mode))
      (common-lisp:list
       (common-lisp:cons "authenticationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-access-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-access-entry-request common-lisp:nil
                       ((cluster-name :initarg :cluster-name :initform
                         (common-lisp:error ":clustername is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-access-entry-request-cluster-name
                         :shape "String" :location "uri" :location-name "name")
                        (principal-arn :initarg :principal-arn :initform
                         (common-lisp:error ":principalarn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-access-entry-request-principal-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kubernetes-groups :initarg :kubernetes-groups
                         :initform common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-create-access-entry-request-kubernetes-groups
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-access-entry-request-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-access-entry-request-client-request-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (username :initarg :username :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-access-entry-request-username
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-access-entry-request-type :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-access-entry-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-access-entry-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-access-entry-request
                    'make-create-access-entry-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-access-entry-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-access-entry-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-arn))
      (common-lisp:list
       (common-lisp:cons "principalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kubernetes-groups))
      (common-lisp:list
       (common-lisp:cons "kubernetesGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-access-entry-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-access-entry-response common-lisp:nil
                       ((access-entry :initarg :access-entry :initform
                         common-lisp:nil :type
                         (common-lisp:or access-entry common-lisp:null)
                         :accessor
                         struct-shape-create-access-entry-response-access-entry
                         :shape "AccessEntry" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-access-entry-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-access-entry-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-access-entry-response
                    'make-create-access-entry-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-access-entry-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-access-entry-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-entry))
      (common-lisp:list
       (common-lisp:cons "accessEntry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-access-entry-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-addon-request common-lisp:nil
                       ((cluster-name :initarg :cluster-name :initform
                         (common-lisp:error ":clustername is required") :type
                         (common-lisp:or cluster-name common-lisp:null)
                         :accessor
                         struct-shape-create-addon-request-cluster-name :shape
                         "ClusterName" :location "uri" :location-name "name")
                        (addon-name :initarg :addon-name :initform
                         (common-lisp:error ":addonname is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-addon-request-addon-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (addon-version :initarg :addon-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-addon-request-addon-version :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (service-account-role-arn :initarg
                         :service-account-role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor
                         struct-shape-create-addon-request-service-account-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resolve-conflicts :initarg :resolve-conflicts
                         :initform common-lisp:nil :type
                         (common-lisp:or resolve-conflicts common-lisp:null)
                         :accessor
                         struct-shape-create-addon-request-resolve-conflicts
                         :shape "ResolveConflicts" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-addon-request-client-request-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-addon-request-tags :shape "TagMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (configuration-values :initarg :configuration-values
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-addon-request-configuration-values
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-addon-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-addon-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-addon-request 'make-create-addon-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-addon-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-addon-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addon-name))
      (common-lisp:list
       (common-lisp:cons "addonName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addon-version))
      (common-lisp:list
       (common-lisp:cons "addonVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-account-role-arn))
      (common-lisp:list
       (common-lisp:cons "serviceAccountRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolve-conflicts))
      (common-lisp:list
       (common-lisp:cons "resolveConflicts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-values))
      (common-lisp:list
       (common-lisp:cons "configurationValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-addon-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-addon-response common-lisp:nil
                       ((addon :initarg :addon :initform common-lisp:nil :type
                         (common-lisp:or addon common-lisp:null) :accessor
                         struct-shape-create-addon-response-addon :shape
                         "Addon" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-addon-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-addon-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-addon-response 'make-create-addon-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-addon-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-addon-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addon))
      (common-lisp:list
       (common-lisp:cons "addon"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-addon-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-cluster-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or cluster-name common-lisp:null)
                         :accessor struct-shape-create-cluster-request-name
                         :shape "ClusterName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (version :initarg :version :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-create-cluster-request-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-cluster-request-role-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resources-vpc-config :initarg :resources-vpc-config
                         :initform
                         (common-lisp:error ":resourcesvpcconfig is required")
                         :type
                         (common-lisp:or vpc-config-request common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-request-resources-vpc-config
                         :shape "VpcConfigRequest" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kubernetes-network-config :initarg
                         :kubernetes-network-config :initform common-lisp:nil
                         :type
                         (common-lisp:or kubernetes-network-config-request
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-request-kubernetes-network-config
                         :shape "KubernetesNetworkConfigRequest" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (logging :initarg :logging :initform common-lisp:nil
                         :type (common-lisp:or logging common-lisp:null)
                         :accessor struct-shape-create-cluster-request-logging
                         :shape "Logging" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-cluster-request-client-request-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-cluster-request-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (encryption-config :initarg :encryption-config
                         :initform common-lisp:nil :type
                         (common-lisp:or encryption-config-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-request-encryption-config
                         :shape "EncryptionConfigList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (outpost-config :initarg :outpost-config :initform
                         common-lisp:nil :type
                         (common-lisp:or outpost-config-request
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-request-outpost-config
                         :shape "OutpostConfigRequest" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (access-config :initarg :access-config :initform
                         common-lisp:nil :type
                         (common-lisp:or create-access-config-request
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-request-access-config
                         :shape "CreateAccessConfigRequest" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-cluster-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-cluster-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-cluster-request 'make-create-cluster-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resources-vpc-config))
      (common-lisp:list
       (common-lisp:cons "resourcesVpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kubernetes-network-config))
      (common-lisp:list
       (common-lisp:cons "kubernetesNetworkConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging))
      (common-lisp:list
       (common-lisp:cons "logging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-config))
      (common-lisp:list
       (common-lisp:cons "encryptionConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outpost-config))
      (common-lisp:list
       (common-lisp:cons "outpostConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-config))
      (common-lisp:list
       (common-lisp:cons "accessConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-cluster-response common-lisp:nil
                       ((cluster :initarg :cluster :initform common-lisp:nil
                         :type (common-lisp:or cluster common-lisp:null)
                         :accessor struct-shape-create-cluster-response-cluster
                         :shape "Cluster" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-cluster-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-cluster-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-cluster-response 'make-create-cluster-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-eks-anywhere-subscription-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or eks-anywhere-subscription-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-eks-anywhere-subscription-request-name
                         :shape "EksAnywhereSubscriptionName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (term :initarg :term :initform
                         (common-lisp:error ":term is required") :type
                         (common-lisp:or eks-anywhere-subscription-term
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-eks-anywhere-subscription-request-term
                         :shape "EksAnywhereSubscriptionTerm" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (license-quantity :initarg :license-quantity :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-create-eks-anywhere-subscription-request-license-quantity
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (license-type :initarg :license-type :initform
                         common-lisp:nil :type
                         (common-lisp:or eks-anywhere-subscription-license-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-eks-anywhere-subscription-request-license-type
                         :shape "EksAnywhereSubscriptionLicenseType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (auto-renew :initarg :auto-renew :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-create-eks-anywhere-subscription-request-auto-renew
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-eks-anywhere-subscription-request-client-request-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-eks-anywhere-subscription-request-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-eks-anywhere-subscription-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-eks-anywhere-subscription-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-eks-anywhere-subscription-request
                    'make-create-eks-anywhere-subscription-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-eks-anywhere-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-eks-anywhere-subscription-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'term))
      (common-lisp:list
       (common-lisp:cons "term"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-quantity))
      (common-lisp:list
       (common-lisp:cons "licenseQuantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-type))
      (common-lisp:list
       (common-lisp:cons "licenseType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-renew))
      (common-lisp:list
       (common-lisp:cons "autoRenew"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-eks-anywhere-subscription-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-eks-anywhere-subscription-response
                       common-lisp:nil
                       ((subscription :initarg :subscription :initform
                         common-lisp:nil :type
                         (common-lisp:or eks-anywhere-subscription
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-eks-anywhere-subscription-response-subscription
                         :shape "EksAnywhereSubscription" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-eks-anywhere-subscription-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-eks-anywhere-subscription-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-eks-anywhere-subscription-response
                    'make-create-eks-anywhere-subscription-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-eks-anywhere-subscription-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-eks-anywhere-subscription-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription))
      (common-lisp:list
       (common-lisp:cons "subscription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-eks-anywhere-subscription-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-fargate-profile-request common-lisp:nil
                       ((fargate-profile-name :initarg :fargate-profile-name
                         :initform
                         (common-lisp:error ":fargateprofilename is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-fargate-profile-request-fargate-profile-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster-name :initarg :cluster-name :initform
                         (common-lisp:error ":clustername is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-fargate-profile-request-cluster-name
                         :shape "String" :location "uri" :location-name "name")
                        (pod-execution-role-arn :initarg
                         :pod-execution-role-arn :initform
                         (common-lisp:error ":podexecutionrolearn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-fargate-profile-request-pod-execution-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subnets :initarg :subnets :initform common-lisp:nil
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-create-fargate-profile-request-subnets
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (selectors :initarg :selectors :initform
                         common-lisp:nil :type
                         (common-lisp:or fargate-profile-selectors
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-fargate-profile-request-selectors
                         :shape "FargateProfileSelectors" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-fargate-profile-request-client-request-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-fargate-profile-request-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-fargate-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-fargate-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-fargate-profile-request
                    'make-create-fargate-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-fargate-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-fargate-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fargate-profile-name))
      (common-lisp:list
       (common-lisp:cons "fargateProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pod-execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "podExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selectors))
      (common-lisp:list
       (common-lisp:cons "selectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-fargate-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-fargate-profile-response common-lisp:nil
                       ((fargate-profile :initarg :fargate-profile :initform
                         common-lisp:nil :type
                         (common-lisp:or fargate-profile common-lisp:null)
                         :accessor
                         struct-shape-create-fargate-profile-response-fargate-profile
                         :shape "FargateProfile" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-fargate-profile-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-fargate-profile-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-fargate-profile-response
                    'make-create-fargate-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-fargate-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-fargate-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fargate-profile))
      (common-lisp:list
       (common-lisp:cons "fargateProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-fargate-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-nodegroup-request common-lisp:nil
                       ((cluster-name :initarg :cluster-name :initform
                         (common-lisp:error ":clustername is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-nodegroup-request-cluster-name
                         :shape "String" :location "uri" :location-name "name")
                        (nodegroup-name :initarg :nodegroup-name :initform
                         (common-lisp:error ":nodegroupname is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-nodegroup-request-nodegroup-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scaling-config :initarg :scaling-config :initform
                         common-lisp:nil :type
                         (common-lisp:or nodegroup-scaling-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-nodegroup-request-scaling-config
                         :shape "NodegroupScalingConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (disk-size :initarg :disk-size :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor
                         struct-shape-create-nodegroup-request-disk-size :shape
                         "BoxedInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subnets :initarg :subnets :initform
                         (common-lisp:error ":subnets is required") :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-create-nodegroup-request-subnets :shape
                         "StringList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (instance-types :initarg :instance-types :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-create-nodegroup-request-instance-types
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ami-type :initarg :ami-type :initform common-lisp:nil
                         :type (common-lisp:or amitypes common-lisp:null)
                         :accessor
                         struct-shape-create-nodegroup-request-ami-type :shape
                         "AMITypes" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (remote-access :initarg :remote-access :initform
                         common-lisp:nil :type
                         (common-lisp:or remote-access-config common-lisp:null)
                         :accessor
                         struct-shape-create-nodegroup-request-remote-access
                         :shape "RemoteAccessConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (node-role :initarg :node-role :initform
                         (common-lisp:error ":noderole is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-nodegroup-request-node-role :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (labels :initarg :labels :initform common-lisp:nil
                         :type (common-lisp:or |labelsMap| common-lisp:null)
                         :accessor struct-shape-create-nodegroup-request-labels
                         :shape "labelsMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (taints :initarg :taints :initform common-lisp:nil
                         :type (common-lisp:or |taintsList| common-lisp:null)
                         :accessor struct-shape-create-nodegroup-request-taints
                         :shape "taintsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-nodegroup-request-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-nodegroup-request-client-request-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (launch-template :initarg :launch-template :initform
                         common-lisp:nil :type
                         (common-lisp:or launch-template-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-nodegroup-request-launch-template
                         :shape "LaunchTemplateSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (update-config :initarg :update-config :initform
                         common-lisp:nil :type
                         (common-lisp:or nodegroup-update-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-nodegroup-request-update-config
                         :shape "NodegroupUpdateConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (capacity-type :initarg :capacity-type :initform
                         common-lisp:nil :type
                         (common-lisp:or capacity-types common-lisp:null)
                         :accessor
                         struct-shape-create-nodegroup-request-capacity-type
                         :shape "CapacityTypes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (version :initarg :version :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-nodegroup-request-version :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (release-version :initarg :release-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-nodegroup-request-release-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-nodegroup-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-nodegroup-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-nodegroup-request 'make-create-nodegroup-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-nodegroup-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-nodegroup-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nodegroup-name))
      (common-lisp:list
       (common-lisp:cons "nodegroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-config))
      (common-lisp:list
       (common-lisp:cons "scalingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disk-size))
      (common-lisp:list
       (common-lisp:cons "diskSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-types))
      (common-lisp:list
       (common-lisp:cons "instanceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ami-type))
      (common-lisp:list
       (common-lisp:cons "amiType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remote-access))
      (common-lisp:list
       (common-lisp:cons "remoteAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-role))
      (common-lisp:list
       (common-lisp:cons "nodeRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labels))
      (common-lisp:list
       (common-lisp:cons "labels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'taints))
      (common-lisp:list
       (common-lisp:cons "taints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-template))
      (common-lisp:list
       (common-lisp:cons "launchTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-config))
      (common-lisp:list
       (common-lisp:cons "updateConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity-type))
      (common-lisp:list
       (common-lisp:cons "capacityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'release-version))
      (common-lisp:list
       (common-lisp:cons "releaseVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-nodegroup-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-nodegroup-response common-lisp:nil
                       ((nodegroup :initarg :nodegroup :initform
                         common-lisp:nil :type
                         (common-lisp:or nodegroup common-lisp:null) :accessor
                         struct-shape-create-nodegroup-response-nodegroup
                         :shape "Nodegroup" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-nodegroup-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-nodegroup-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-nodegroup-response
                    'make-create-nodegroup-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-nodegroup-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-nodegroup-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nodegroup))
      (common-lisp:list
       (common-lisp:cons "nodegroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-nodegroup-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-pod-identity-association-request common-lisp:nil
                       ((cluster-name :initarg :cluster-name :initform
                         (common-lisp:error ":clustername is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-pod-identity-association-request-cluster-name
                         :shape "String" :location "uri" :location-name "name")
                        (namespace :initarg :namespace :initform
                         (common-lisp:error ":namespace is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-pod-identity-association-request-namespace
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-account :initarg :service-account :initform
                         (common-lisp:error ":serviceaccount is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-pod-identity-association-request-service-account
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-pod-identity-association-request-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-pod-identity-association-request-client-request-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-pod-identity-association-request-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-pod-identity-association-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-pod-identity-association-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-pod-identity-association-request
                    'make-create-pod-identity-association-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-pod-identity-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-pod-identity-association-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-account))
      (common-lisp:list
       (common-lisp:cons "serviceAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-pod-identity-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-pod-identity-association-response common-lisp:nil
                       ((association :initarg :association :initform
                         common-lisp:nil :type
                         (common-lisp:or pod-identity-association
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-pod-identity-association-response-association
                         :shape "PodIdentityAssociation" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-pod-identity-association-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-pod-identity-association-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-pod-identity-association-response
                    'make-create-pod-identity-association-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-pod-identity-association-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-pod-identity-association-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association))
      (common-lisp:list
       (common-lisp:cons "association"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-pod-identity-association-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-access-entry-request common-lisp:nil
                       ((cluster-name :initarg :cluster-name :initform
                         (common-lisp:error ":clustername is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-access-entry-request-cluster-name
                         :shape "String" :location "uri" :location-name "name")
                        (principal-arn :initarg :principal-arn :initform
                         (common-lisp:error ":principalarn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-access-entry-request-principal-arn
                         :shape "String" :location "uri" :location-name
                         "principalArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-access-entry-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-access-entry-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-access-entry-request
                    'make-delete-access-entry-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-entry-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-entry-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-entry-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-access-entry-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-access-entry-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-access-entry-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-access-entry-response
                    'make-delete-access-entry-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-entry-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-entry-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-entry-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-addon-request common-lisp:nil
                       ((cluster-name :initarg :cluster-name :initform
                         (common-lisp:error ":clustername is required") :type
                         (common-lisp:or cluster-name common-lisp:null)
                         :accessor
                         struct-shape-delete-addon-request-cluster-name :shape
                         "ClusterName" :location "uri" :location-name "name")
                        (addon-name :initarg :addon-name :initform
                         (common-lisp:error ":addonname is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-addon-request-addon-name :shape
                         "String" :location "uri" :location-name "addonName")
                        (preserve :initarg :preserve :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor struct-shape-delete-addon-request-preserve
                         :shape "Boolean" :location "querystring"
                         :location-name "preserve"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-addon-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-addon-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-addon-request 'make-delete-addon-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-addon-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-addon-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-addon-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-addon-response common-lisp:nil
                       ((addon :initarg :addon :initform common-lisp:nil :type
                         (common-lisp:or addon common-lisp:null) :accessor
                         struct-shape-delete-addon-response-addon :shape
                         "Addon" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-addon-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-addon-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-addon-response 'make-delete-addon-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-addon-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-addon-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addon))
      (common-lisp:list
       (common-lisp:cons "addon"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-addon-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-cluster-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-cluster-request-name :shape
                         "String" :location "uri" :location-name "name"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-cluster-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-cluster-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-cluster-request 'make-delete-cluster-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-cluster-response common-lisp:nil
                       ((cluster :initarg :cluster :initform common-lisp:nil
                         :type (common-lisp:or cluster common-lisp:null)
                         :accessor struct-shape-delete-cluster-response-cluster
                         :shape "Cluster" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-cluster-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-cluster-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-cluster-response 'make-delete-cluster-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-eks-anywhere-subscription-request common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-eks-anywhere-subscription-request-id
                         :shape "String" :location "uri" :location-name "id"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-eks-anywhere-subscription-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-eks-anywhere-subscription-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-eks-anywhere-subscription-request
                    'make-delete-eks-anywhere-subscription-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-eks-anywhere-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-eks-anywhere-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-eks-anywhere-subscription-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-eks-anywhere-subscription-response
                       common-lisp:nil
                       ((subscription :initarg :subscription :initform
                         common-lisp:nil :type
                         (common-lisp:or eks-anywhere-subscription
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-eks-anywhere-subscription-response-subscription
                         :shape "EksAnywhereSubscription" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-eks-anywhere-subscription-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-eks-anywhere-subscription-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-eks-anywhere-subscription-response
                    'make-delete-eks-anywhere-subscription-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-eks-anywhere-subscription-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-eks-anywhere-subscription-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription))
      (common-lisp:list
       (common-lisp:cons "subscription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-eks-anywhere-subscription-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-fargate-profile-request common-lisp:nil
                       ((cluster-name :initarg :cluster-name :initform
                         (common-lisp:error ":clustername is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-fargate-profile-request-cluster-name
                         :shape "String" :location "uri" :location-name "name")
                        (fargate-profile-name :initarg :fargate-profile-name
                         :initform
                         (common-lisp:error ":fargateprofilename is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-fargate-profile-request-fargate-profile-name
                         :shape "String" :location "uri" :location-name
                         "fargateProfileName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-fargate-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-fargate-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-fargate-profile-request
                    'make-delete-fargate-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-fargate-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-fargate-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-fargate-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-fargate-profile-response common-lisp:nil
                       ((fargate-profile :initarg :fargate-profile :initform
                         common-lisp:nil :type
                         (common-lisp:or fargate-profile common-lisp:null)
                         :accessor
                         struct-shape-delete-fargate-profile-response-fargate-profile
                         :shape "FargateProfile" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-fargate-profile-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-fargate-profile-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-fargate-profile-response
                    'make-delete-fargate-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-fargate-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-fargate-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fargate-profile))
      (common-lisp:list
       (common-lisp:cons "fargateProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-fargate-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-nodegroup-request common-lisp:nil
                       ((cluster-name :initarg :cluster-name :initform
                         (common-lisp:error ":clustername is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-nodegroup-request-cluster-name
                         :shape "String" :location "uri" :location-name "name")
                        (nodegroup-name :initarg :nodegroup-name :initform
                         (common-lisp:error ":nodegroupname is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-nodegroup-request-nodegroup-name
                         :shape "String" :location "uri" :location-name
                         "nodegroupName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-nodegroup-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-nodegroup-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-nodegroup-request 'make-delete-nodegroup-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-nodegroup-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-nodegroup-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-nodegroup-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-nodegroup-response common-lisp:nil
                       ((nodegroup :initarg :nodegroup :initform
                         common-lisp:nil :type
                         (common-lisp:or nodegroup common-lisp:null) :accessor
                         struct-shape-delete-nodegroup-response-nodegroup
                         :shape "Nodegroup" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-nodegroup-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-nodegroup-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-nodegroup-response
                    'make-delete-nodegroup-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-nodegroup-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-nodegroup-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nodegroup))
      (common-lisp:list
       (common-lisp:cons "nodegroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-nodegroup-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-pod-identity-association-request common-lisp:nil
                       ((cluster-name :initarg :cluster-name :initform
                         (common-lisp:error ":clustername is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-pod-identity-association-request-cluster-name
                         :shape "String" :location "uri" :location-name "name")
                        (association-id :initarg :association-id :initform
                         (common-lisp:error ":associationid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-pod-identity-association-request-association-id
                         :shape "String" :location "uri" :location-name
                         "associationId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-pod-identity-association-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-pod-identity-association-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-pod-identity-association-request
                    'make-delete-pod-identity-association-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-pod-identity-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-pod-identity-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-pod-identity-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-pod-identity-association-response common-lisp:nil
                       ((association :initarg :association :initform
                         common-lisp:nil :type
                         (common-lisp:or pod-identity-association
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-pod-identity-association-response-association
                         :shape "PodIdentityAssociation" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-pod-identity-association-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-pod-identity-association-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-pod-identity-association-response
                    'make-delete-pod-identity-association-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-pod-identity-association-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-pod-identity-association-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association))
      (common-lisp:list
       (common-lisp:cons "association"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-pod-identity-association-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deprecation-detail common-lisp:nil
                       ((usage :initarg :usage :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-deprecation-detail-usage :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (replaced-with :initarg :replaced-with :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-deprecation-detail-replaced-with :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (stop-serving-version :initarg :stop-serving-version
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-deprecation-detail-stop-serving-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-serving-replacement-version :initarg
                         :start-serving-replacement-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-deprecation-detail-start-serving-replacement-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-stats :initarg :client-stats :initform
                         common-lisp:nil :type
                         (common-lisp:or client-stats common-lisp:null)
                         :accessor struct-shape-deprecation-detail-client-stats
                         :shape "ClientStats" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deprecation-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'deprecation-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deprecation-detail 'make-deprecation-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input deprecation-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input deprecation-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage))
      (common-lisp:list
       (common-lisp:cons "usage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replaced-with))
      (common-lisp:list
       (common-lisp:cons "replacedWith"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stop-serving-version))
      (common-lisp:list
       (common-lisp:cons "stopServingVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'start-serving-replacement-version))
      (common-lisp:list
       (common-lisp:cons "startServingReplacementVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-stats))
      (common-lisp:list
       (common-lisp:cons "clientStats"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input deprecation-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype deprecation-details ()
   '(trivial-types:proper-list deprecation-detail))
 (common-lisp:defun make-deprecation-details
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list deprecation-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass deregister-cluster-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-deregister-cluster-request-name :shape
                         "String" :location "uri" :location-name "name"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deregister-cluster-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'deregister-cluster-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deregister-cluster-request
                    'make-deregister-cluster-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-cluster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-cluster-response common-lisp:nil
                       ((cluster :initarg :cluster :initform common-lisp:nil
                         :type (common-lisp:or cluster common-lisp:null)
                         :accessor
                         struct-shape-deregister-cluster-response-cluster
                         :shape "Cluster" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deregister-cluster-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'deregister-cluster-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deregister-cluster-response
                    'make-deregister-cluster-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-cluster-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-cluster-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-cluster-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-access-entry-request common-lisp:nil
                       ((cluster-name :initarg :cluster-name :initform
                         (common-lisp:error ":clustername is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-access-entry-request-cluster-name
                         :shape "String" :location "uri" :location-name "name")
                        (principal-arn :initarg :principal-arn :initform
                         (common-lisp:error ":principalarn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-access-entry-request-principal-arn
                         :shape "String" :location "uri" :location-name
                         "principalArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-access-entry-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-access-entry-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-access-entry-request
                    'make-describe-access-entry-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-entry-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-entry-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-entry-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-access-entry-response common-lisp:nil
                       ((access-entry :initarg :access-entry :initform
                         common-lisp:nil :type
                         (common-lisp:or access-entry common-lisp:null)
                         :accessor
                         struct-shape-describe-access-entry-response-access-entry
                         :shape "AccessEntry" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-access-entry-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-access-entry-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-access-entry-response
                    'make-describe-access-entry-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-entry-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-entry-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-entry))
      (common-lisp:list
       (common-lisp:cons "accessEntry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-entry-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-addon-configuration-request common-lisp:nil
                       ((addon-name :initarg :addon-name :initform
                         (common-lisp:error ":addonname is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-addon-configuration-request-addon-name
                         :shape "String" :location "querystring" :location-name
                         "addonName")
                        (addon-version :initarg :addon-version :initform
                         (common-lisp:error ":addonversion is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-addon-configuration-request-addon-version
                         :shape "String" :location "querystring" :location-name
                         "addonVersion"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-addon-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-addon-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-addon-configuration-request
                    'make-describe-addon-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-addon-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-addon-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-addon-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-addon-configuration-response common-lisp:nil
                       ((addon-name :initarg :addon-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-addon-configuration-response-addon-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (addon-version :initarg :addon-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-addon-configuration-response-addon-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (configuration-schema :initarg :configuration-schema
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-addon-configuration-response-configuration-schema
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-addon-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-addon-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-addon-configuration-response
                    'make-describe-addon-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-addon-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-addon-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addon-name))
      (common-lisp:list
       (common-lisp:cons "addonName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addon-version))
      (common-lisp:list
       (common-lisp:cons "addonVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-schema))
      (common-lisp:list
       (common-lisp:cons "configurationSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-addon-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-addon-request common-lisp:nil
                       ((cluster-name :initarg :cluster-name :initform
                         (common-lisp:error ":clustername is required") :type
                         (common-lisp:or cluster-name common-lisp:null)
                         :accessor
                         struct-shape-describe-addon-request-cluster-name
                         :shape "ClusterName" :location "uri" :location-name
                         "name")
                        (addon-name :initarg :addon-name :initform
                         (common-lisp:error ":addonname is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-addon-request-addon-name :shape
                         "String" :location "uri" :location-name "addonName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-addon-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-addon-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-addon-request 'make-describe-addon-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-addon-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-addon-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-addon-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-addon-response common-lisp:nil
                       ((addon :initarg :addon :initform common-lisp:nil :type
                         (common-lisp:or addon common-lisp:null) :accessor
                         struct-shape-describe-addon-response-addon :shape
                         "Addon" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-addon-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-addon-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-addon-response 'make-describe-addon-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-addon-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-addon-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addon))
      (common-lisp:list
       (common-lisp:cons "addon"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-addon-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-addon-versions-request common-lisp:nil
                       ((kubernetes-version :initarg :kubernetes-version
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-addon-versions-request-kubernetes-version
                         :shape "String" :location "querystring" :location-name
                         "kubernetesVersion")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          describe-addon-versions-request-max-results
                          common-lisp:null)
                         :accessor
                         struct-shape-describe-addon-versions-request-max-results
                         :shape "DescribeAddonVersionsRequestMaxResults"
                         :location "querystring" :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-addon-versions-request-next-token
                         :shape "String" :location "querystring" :location-name
                         "nextToken")
                        (addon-name :initarg :addon-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-addon-versions-request-addon-name
                         :shape "String" :location "querystring" :location-name
                         "addonName")
                        (types :initarg :types :initform common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-describe-addon-versions-request-types
                         :shape "StringList" :location "querystring"
                         :location-name "types")
                        (publishers :initarg :publishers :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-describe-addon-versions-request-publishers
                         :shape "StringList" :location "querystring"
                         :location-name "publishers")
                        (owners :initarg :owners :initform common-lisp:nil
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-describe-addon-versions-request-owners
                         :shape "StringList" :location "querystring"
                         :location-name "owners"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-addon-versions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-addon-versions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-addon-versions-request
                    'make-describe-addon-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-addon-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-addon-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-addon-versions-request))
   common-lisp:nil))
(common-lisp:deftype describe-addon-versions-request-max-results ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass describe-addon-versions-response common-lisp:nil
                       ((addons :initarg :addons :initform common-lisp:nil
                         :type (common-lisp:or addons common-lisp:null)
                         :accessor
                         struct-shape-describe-addon-versions-response-addons
                         :shape "Addons" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-addon-versions-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-addon-versions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-addon-versions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-addon-versions-response
                    'make-describe-addon-versions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-addon-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-addon-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addons))
      (common-lisp:list
       (common-lisp:cons "addons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-addon-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-cluster-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-cluster-request-name :shape
                         "String" :location "uri" :location-name "name"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-cluster-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-cluster-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-cluster-request 'make-describe-cluster-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-cluster-response common-lisp:nil
                       ((cluster :initarg :cluster :initform common-lisp:nil
                         :type (common-lisp:or cluster common-lisp:null)
                         :accessor
                         struct-shape-describe-cluster-response-cluster :shape
                         "Cluster" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-cluster-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-cluster-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-cluster-response
                    'make-describe-cluster-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-eks-anywhere-subscription-request
                       common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-eks-anywhere-subscription-request-id
                         :shape "String" :location "uri" :location-name "id"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-eks-anywhere-subscription-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-eks-anywhere-subscription-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-eks-anywhere-subscription-request
                    'make-describe-eks-anywhere-subscription-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-eks-anywhere-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-eks-anywhere-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-eks-anywhere-subscription-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-eks-anywhere-subscription-response
                       common-lisp:nil
                       ((subscription :initarg :subscription :initform
                         common-lisp:nil :type
                         (common-lisp:or eks-anywhere-subscription
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-eks-anywhere-subscription-response-subscription
                         :shape "EksAnywhereSubscription" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-eks-anywhere-subscription-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-eks-anywhere-subscription-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-eks-anywhere-subscription-response
                    'make-describe-eks-anywhere-subscription-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-eks-anywhere-subscription-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-eks-anywhere-subscription-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription))
      (common-lisp:list
       (common-lisp:cons "subscription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-eks-anywhere-subscription-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-fargate-profile-request common-lisp:nil
                       ((cluster-name :initarg :cluster-name :initform
                         (common-lisp:error ":clustername is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-fargate-profile-request-cluster-name
                         :shape "String" :location "uri" :location-name "name")
                        (fargate-profile-name :initarg :fargate-profile-name
                         :initform
                         (common-lisp:error ":fargateprofilename is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-fargate-profile-request-fargate-profile-name
                         :shape "String" :location "uri" :location-name
                         "fargateProfileName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-fargate-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-fargate-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-fargate-profile-request
                    'make-describe-fargate-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-fargate-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-fargate-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-fargate-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-fargate-profile-response common-lisp:nil
                       ((fargate-profile :initarg :fargate-profile :initform
                         common-lisp:nil :type
                         (common-lisp:or fargate-profile common-lisp:null)
                         :accessor
                         struct-shape-describe-fargate-profile-response-fargate-profile
                         :shape "FargateProfile" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-fargate-profile-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-fargate-profile-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-fargate-profile-response
                    'make-describe-fargate-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-fargate-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-fargate-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fargate-profile))
      (common-lisp:list
       (common-lisp:cons "fargateProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-fargate-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-identity-provider-config-request
                       common-lisp:nil
                       ((cluster-name :initarg :cluster-name :initform
                         (common-lisp:error ":clustername is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-identity-provider-config-request-cluster-name
                         :shape "String" :location "uri" :location-name "name")
                        (identity-provider-config :initarg
                         :identity-provider-config :initform
                         (common-lisp:error
                          ":identityproviderconfig is required")
                         :type
                         (common-lisp:or identity-provider-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-identity-provider-config-request-identity-provider-config
                         :shape "IdentityProviderConfig" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-identity-provider-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-identity-provider-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-identity-provider-config-request
                    'make-describe-identity-provider-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-identity-provider-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-identity-provider-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-config))
      (common-lisp:list
       (common-lisp:cons "identityProviderConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-identity-provider-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-identity-provider-config-response
                       common-lisp:nil
                       ((identity-provider-config :initarg
                         :identity-provider-config :initform common-lisp:nil
                         :type
                         (common-lisp:or identity-provider-config-response
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-identity-provider-config-response-identity-provider-config
                         :shape "IdentityProviderConfigResponse" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-identity-provider-config-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-identity-provider-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-identity-provider-config-response
                    'make-describe-identity-provider-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-identity-provider-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-identity-provider-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-config))
      (common-lisp:list
       (common-lisp:cons "identityProviderConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-identity-provider-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-insight-request common-lisp:nil
                       ((cluster-name :initarg :cluster-name :initform
                         (common-lisp:error ":clustername is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-insight-request-cluster-name
                         :shape "String" :location "uri" :location-name "name")
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-insight-request-id :shape
                         "String" :location "uri" :location-name "id"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-insight-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-insight-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-insight-request 'make-describe-insight-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-insight-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-insight-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-insight-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-insight-response common-lisp:nil
                       ((insight :initarg :insight :initform common-lisp:nil
                         :type (common-lisp:or insight common-lisp:null)
                         :accessor
                         struct-shape-describe-insight-response-insight :shape
                         "Insight" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-insight-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-insight-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-insight-response
                    'make-describe-insight-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-insight-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-insight-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insight))
      (common-lisp:list
       (common-lisp:cons "insight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-insight-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-nodegroup-request common-lisp:nil
                       ((cluster-name :initarg :cluster-name :initform
                         (common-lisp:error ":clustername is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-nodegroup-request-cluster-name
                         :shape "String" :location "uri" :location-name "name")
                        (nodegroup-name :initarg :nodegroup-name :initform
                         (common-lisp:error ":nodegroupname is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-nodegroup-request-nodegroup-name
                         :shape "String" :location "uri" :location-name
                         "nodegroupName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-nodegroup-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-nodegroup-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-nodegroup-request
                    'make-describe-nodegroup-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-nodegroup-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-nodegroup-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-nodegroup-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-nodegroup-response common-lisp:nil
                       ((nodegroup :initarg :nodegroup :initform
                         common-lisp:nil :type
                         (common-lisp:or nodegroup common-lisp:null) :accessor
                         struct-shape-describe-nodegroup-response-nodegroup
                         :shape "Nodegroup" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-nodegroup-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-nodegroup-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-nodegroup-response
                    'make-describe-nodegroup-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-nodegroup-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-nodegroup-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nodegroup))
      (common-lisp:list
       (common-lisp:cons "nodegroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-nodegroup-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-pod-identity-association-request
                       common-lisp:nil
                       ((cluster-name :initarg :cluster-name :initform
                         (common-lisp:error ":clustername is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-pod-identity-association-request-cluster-name
                         :shape "String" :location "uri" :location-name "name")
                        (association-id :initarg :association-id :initform
                         (common-lisp:error ":associationid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-pod-identity-association-request-association-id
                         :shape "String" :location "uri" :location-name
                         "associationId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-pod-identity-association-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-pod-identity-association-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-pod-identity-association-request
                    'make-describe-pod-identity-association-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-pod-identity-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-pod-identity-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-pod-identity-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-pod-identity-association-response
                       common-lisp:nil
                       ((association :initarg :association :initform
                         common-lisp:nil :type
                         (common-lisp:or pod-identity-association
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-pod-identity-association-response-association
                         :shape "PodIdentityAssociation" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-pod-identity-association-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-pod-identity-association-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-pod-identity-association-response
                    'make-describe-pod-identity-association-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-pod-identity-association-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-pod-identity-association-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association))
      (common-lisp:list
       (common-lisp:cons "association"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-pod-identity-association-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-update-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-update-request-name :shape
                         "String" :location "uri" :location-name "name")
                        (update-id :initarg :update-id :initform
                         (common-lisp:error ":updateid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-update-request-update-id :shape
                         "String" :location "uri" :location-name "updateId")
                        (nodegroup-name :initarg :nodegroup-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-update-request-nodegroup-name
                         :shape "String" :location "querystring" :location-name
                         "nodegroupName")
                        (addon-name :initarg :addon-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-update-request-addon-name :shape
                         "String" :location "querystring" :location-name
                         "addonName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-update-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-update-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-update-request 'make-describe-update-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-update-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-update-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-update-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-update-response common-lisp:nil
                       ((update :initarg :update :initform common-lisp:nil
                         :type (common-lisp:or update common-lisp:null)
                         :accessor struct-shape-describe-update-response-update
                         :shape "Update" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-update-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-update-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-update-response 'make-describe-update-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-update-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-update-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update))
      (common-lisp:list
       (common-lisp:cons "update"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-update-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-access-policy-request common-lisp:nil
                       ((cluster-name :initarg :cluster-name :initform
                         (common-lisp:error ":clustername is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-disassociate-access-policy-request-cluster-name
                         :shape "String" :location "uri" :location-name "name")
                        (principal-arn :initarg :principal-arn :initform
                         (common-lisp:error ":principalarn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-disassociate-access-policy-request-principal-arn
                         :shape "String" :location "uri" :location-name
                         "principalArn")
                        (policy-arn :initarg :policy-arn :initform
                         (common-lisp:error ":policyarn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-disassociate-access-policy-request-policy-arn
                         :shape "String" :location "uri" :location-name
                         "policyArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-access-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-access-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-access-policy-request
                    'make-disassociate-access-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-access-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-access-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-access-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-access-policy-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-access-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-access-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-access-policy-response
                    'make-disassociate-access-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-access-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-access-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-access-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-identity-provider-config-request
                       common-lisp:nil
                       ((cluster-name :initarg :cluster-name :initform
                         (common-lisp:error ":clustername is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-disassociate-identity-provider-config-request-cluster-name
                         :shape "String" :location "uri" :location-name "name")
                        (identity-provider-config :initarg
                         :identity-provider-config :initform
                         (common-lisp:error
                          ":identityproviderconfig is required")
                         :type
                         (common-lisp:or identity-provider-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-disassociate-identity-provider-config-request-identity-provider-config
                         :shape "IdentityProviderConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-disassociate-identity-provider-config-request-client-request-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-identity-provider-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-identity-provider-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-identity-provider-config-request
                    'make-disassociate-identity-provider-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-identity-provider-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-identity-provider-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-config))
      (common-lisp:list
       (common-lisp:cons "identityProviderConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-identity-provider-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-identity-provider-config-response
                       common-lisp:nil
                       ((update :initarg :update :initform common-lisp:nil
                         :type (common-lisp:or update common-lisp:null)
                         :accessor
                         struct-shape-disassociate-identity-provider-config-response-update
                         :shape "Update" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-identity-provider-config-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-identity-provider-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-identity-provider-config-response
                    'make-disassociate-identity-provider-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-identity-provider-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-identity-provider-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update))
      (common-lisp:list
       (common-lisp:cons "update"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-identity-provider-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass eks-anywhere-subscription common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-eks-anywhere-subscription-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-eks-anywhere-subscription-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-eks-anywhere-subscription-created-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (effective-date :initarg :effective-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-eks-anywhere-subscription-effective-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (expiration-date :initarg :expiration-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-eks-anywhere-subscription-expiration-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (license-quantity :initarg :license-quantity :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-eks-anywhere-subscription-license-quantity
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (license-type :initarg :license-type :initform
                         common-lisp:nil :type
                         (common-lisp:or eks-anywhere-subscription-license-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-eks-anywhere-subscription-license-type
                         :shape "EksAnywhereSubscriptionLicenseType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (term :initarg :term :initform common-lisp:nil :type
                         (common-lisp:or eks-anywhere-subscription-term
                                         common-lisp:null)
                         :accessor struct-shape-eks-anywhere-subscription-term
                         :shape "EksAnywhereSubscriptionTerm" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-eks-anywhere-subscription-status :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (auto-renew :initarg :auto-renew :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-eks-anywhere-subscription-auto-renew
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (license-arns :initarg :license-arns :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-eks-anywhere-subscription-license-arns
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-eks-anywhere-subscription-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-eks-anywhere-subscription
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'eks-anywhere-subscription
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'eks-anywhere-subscription
                    'make-eks-anywhere-subscription))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          eks-anywhere-subscription))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          eks-anywhere-subscription))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effective-date))
      (common-lisp:list
       (common-lisp:cons "effectiveDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-date))
      (common-lisp:list
       (common-lisp:cons "expirationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-quantity))
      (common-lisp:list
       (common-lisp:cons "licenseQuantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-type))
      (common-lisp:list
       (common-lisp:cons "licenseType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'term))
      (common-lisp:list
       (common-lisp:cons "term"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-renew))
      (common-lisp:list
       (common-lisp:cons "autoRenew"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-arns))
      (common-lisp:list
       (common-lisp:cons "licenseArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          eks-anywhere-subscription))
   common-lisp:nil))
(common-lisp:deftype eks-anywhere-subscription-license-type ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype eks-anywhere-subscription-list ()
   '(trivial-types:proper-list eks-anywhere-subscription))
 (common-lisp:defun make-eks-anywhere-subscription-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            eks-anywhere-subscription))
   aws-sdk/generator/shape::members))
(common-lisp:deftype eks-anywhere-subscription-name () 'common-lisp:string)
(common-lisp:deftype eks-anywhere-subscription-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype eks-anywhere-subscription-status-values ()
   '(trivial-types:proper-list eks-anywhere-subscription-status))
 (common-lisp:defun make-eks-anywhere-subscription-status-values
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            eks-anywhere-subscription-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass eks-anywhere-subscription-term common-lisp:nil
                       ((duration :initarg :duration :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-eks-anywhere-subscription-term-duration
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unit :initarg :unit :initform common-lisp:nil :type
                         (common-lisp:or eks-anywhere-subscription-term-unit
                                         common-lisp:null)
                         :accessor
                         struct-shape-eks-anywhere-subscription-term-unit
                         :shape "EksAnywhereSubscriptionTermUnit" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-eks-anywhere-subscription-term
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'eks-anywhere-subscription-term
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'eks-anywhere-subscription-term
                    'make-eks-anywhere-subscription-term))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          eks-anywhere-subscription-term))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          eks-anywhere-subscription-term))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          eks-anywhere-subscription-term))
   common-lisp:nil))
(common-lisp:deftype eks-anywhere-subscription-term-unit () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass encryption-config common-lisp:nil
                       ((resources :initarg :resources :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-encryption-config-resources
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provider :initarg :provider :initform common-lisp:nil
                         :type (common-lisp:or provider common-lisp:null)
                         :accessor struct-shape-encryption-config-provider
                         :shape "Provider" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-encryption-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'encryption-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'encryption-config 'make-encryption-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input encryption-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input encryption-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input encryption-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype encryption-config-list ()
   '(trivial-types:proper-list encryption-config))
 (common-lisp:defun make-encryption-config-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list encryption-config))
   aws-sdk/generator/shape::members))
(common-lisp:deftype error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass error-detail common-lisp:nil
                       ((error-code :initarg :error-code :initform
                         common-lisp:nil :type
                         (common-lisp:or error-code common-lisp:null) :accessor
                         struct-shape-error-detail-error-code :shape
                         "ErrorCode" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-error-detail-error-message :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-ids :initarg :resource-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-error-detail-resource-ids
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-error-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'error-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'error-detail 'make-error-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input error-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input error-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-ids))
      (common-lisp:list
       (common-lisp:cons "resourceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input error-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype error-details ()
   '(trivial-types:proper-list error-detail))
 (common-lisp:defun make-error-details
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list error-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass fargate-profile common-lisp:nil
                       ((fargate-profile-name :initarg :fargate-profile-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-fargate-profile-fargate-profile-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (fargate-profile-arn :initarg :fargate-profile-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-fargate-profile-fargate-profile-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster-name :initarg :cluster-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-fargate-profile-cluster-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-fargate-profile-created-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (pod-execution-role-arn :initarg
                         :pod-execution-role-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-fargate-profile-pod-execution-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subnets :initarg :subnets :initform common-lisp:nil
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-fargate-profile-subnets :shape
                         "StringList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (selectors :initarg :selectors :initform
                         common-lisp:nil :type
                         (common-lisp:or fargate-profile-selectors
                                         common-lisp:null)
                         :accessor struct-shape-fargate-profile-selectors
                         :shape "FargateProfileSelectors" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or fargate-profile-status
                                         common-lisp:null)
                         :accessor struct-shape-fargate-profile-status :shape
                         "FargateProfileStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-fargate-profile-tags :shape "TagMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-fargate-profile
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'fargate-profile
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'fargate-profile 'make-fargate-profile))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input fargate-profile))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input fargate-profile))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fargate-profile-name))
      (common-lisp:list
       (common-lisp:cons "fargateProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fargate-profile-arn))
      (common-lisp:list
       (common-lisp:cons "fargateProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "clusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pod-execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "podExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selectors))
      (common-lisp:list
       (common-lisp:cons "selectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input fargate-profile))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype fargate-profile-label () 'common-lisp:hash-table)
 (common-lisp:defun make-fargate-profile-label
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass fargate-profile-selector common-lisp:nil
                       ((namespace :initarg :namespace :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-fargate-profile-selector-namespace :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (labels :initarg :labels :initform common-lisp:nil
                         :type
                         (common-lisp:or fargate-profile-label
                                         common-lisp:null)
                         :accessor struct-shape-fargate-profile-selector-labels
                         :shape "FargateProfileLabel" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-fargate-profile-selector
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'fargate-profile-selector
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'fargate-profile-selector 'make-fargate-profile-selector))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          fargate-profile-selector))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          fargate-profile-selector))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labels))
      (common-lisp:list
       (common-lisp:cons "labels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          fargate-profile-selector))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype fargate-profile-selectors ()
   '(trivial-types:proper-list fargate-profile-selector))
 (common-lisp:defun make-fargate-profile-selectors
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            fargate-profile-selector))
   aws-sdk/generator/shape::members))
(common-lisp:deftype fargate-profile-status () 'common-lisp:string)
(common-lisp:deftype fargate-profiles-request-max-results ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass identity common-lisp:nil
                       ((oidc :initarg :oidc :initform common-lisp:nil :type
                         (common-lisp:or oidc common-lisp:null) :accessor
                         struct-shape-identity-oidc :shape "OIDC" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-identity
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'identity
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'identity 'make-identity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input identity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input identity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'oidc))
      (common-lisp:list
       (common-lisp:cons "oidc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input identity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass identity-provider-config common-lisp:nil
                       ((type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-identity-provider-config-type :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-identity-provider-config-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-identity-provider-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'identity-provider-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'identity-provider-config 'make-identity-provider-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          identity-provider-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          identity-provider-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          identity-provider-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass identity-provider-config-response common-lisp:nil
                       ((oidc :initarg :oidc :initform common-lisp:nil :type
                         (common-lisp:or oidc-identity-provider-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-identity-provider-config-response-oidc
                         :shape "OidcIdentityProviderConfig" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-identity-provider-config-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'identity-provider-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'identity-provider-config-response
                    'make-identity-provider-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          identity-provider-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          identity-provider-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'oidc))
      (common-lisp:list
       (common-lisp:cons "oidc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          identity-provider-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype identity-provider-configs ()
   '(trivial-types:proper-list identity-provider-config))
 (common-lisp:defun make-identity-provider-configs
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            identity-provider-config))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype include-clusters-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-include-clusters-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass insight common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-insight-id :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-insight-name :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (category :initarg :category :initform common-lisp:nil
                         :type (common-lisp:or category common-lisp:null)
                         :accessor struct-shape-insight-category :shape
                         "Category" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (kubernetes-version :initarg :kubernetes-version
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-insight-kubernetes-version :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-refresh-time :initarg :last-refresh-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-insight-last-refresh-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-transition-time :initarg :last-transition-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-insight-last-transition-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-insight-description :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (insight-status :initarg :insight-status :initform
                         common-lisp:nil :type
                         (common-lisp:or insight-status common-lisp:null)
                         :accessor struct-shape-insight-insight-status :shape
                         "InsightStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (recommendation :initarg :recommendation :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-insight-recommendation :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (additional-info :initarg :additional-info :initform
                         common-lisp:nil :type
                         (common-lisp:or additional-info-map common-lisp:null)
                         :accessor struct-shape-insight-additional-info :shape
                         "AdditionalInfoMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resources :initarg :resources :initform
                         common-lisp:nil :type
                         (common-lisp:or insight-resource-details
                                         common-lisp:null)
                         :accessor struct-shape-insight-resources :shape
                         "InsightResourceDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (category-specific-summary :initarg
                         :category-specific-summary :initform common-lisp:nil
                         :type
                         (common-lisp:or insight-category-specific-summary
                                         common-lisp:null)
                         :accessor
                         struct-shape-insight-category-specific-summary :shape
                         "InsightCategorySpecificSummary" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-insight
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'insight
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'insight 'make-insight))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input insight))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input insight))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kubernetes-version))
      (common-lisp:list
       (common-lisp:cons "kubernetesVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-refresh-time))
      (common-lisp:list
       (common-lisp:cons "lastRefreshTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-transition-time))
      (common-lisp:list
       (common-lisp:cons "lastTransitionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insight-status))
      (common-lisp:list
       (common-lisp:cons "insightStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation))
      (common-lisp:list
       (common-lisp:cons "recommendation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-info))
      (common-lisp:list
       (common-lisp:cons "additionalInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'category-specific-summary))
      (common-lisp:list
       (common-lisp:cons "categorySpecificSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input insight))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass insight-category-specific-summary common-lisp:nil
                       ((deprecation-details :initarg :deprecation-details
                         :initform common-lisp:nil :type
                         (common-lisp:or deprecation-details common-lisp:null)
                         :accessor
                         struct-shape-insight-category-specific-summary-deprecation-details
                         :shape "DeprecationDetails" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-insight-category-specific-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'insight-category-specific-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'insight-category-specific-summary
                    'make-insight-category-specific-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          insight-category-specific-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          insight-category-specific-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deprecation-details))
      (common-lisp:list
       (common-lisp:cons "deprecationDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          insight-category-specific-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass insight-resource-detail common-lisp:nil
                       ((insight-status :initarg :insight-status :initform
                         common-lisp:nil :type
                         (common-lisp:or insight-status common-lisp:null)
                         :accessor
                         struct-shape-insight-resource-detail-insight-status
                         :shape "InsightStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kubernetes-resource-uri :initarg
                         :kubernetes-resource-uri :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-insight-resource-detail-kubernetes-resource-uri
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-insight-resource-detail-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-insight-resource-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'insight-resource-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'insight-resource-detail 'make-insight-resource-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          insight-resource-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          insight-resource-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insight-status))
      (common-lisp:list
       (common-lisp:cons "insightStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kubernetes-resource-uri))
      (common-lisp:list
       (common-lisp:cons "kubernetesResourceUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          insight-resource-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype insight-resource-details ()
   '(trivial-types:proper-list insight-resource-detail))
 (common-lisp:defun make-insight-resource-details
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list insight-resource-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass insight-status common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or insight-status-value common-lisp:null)
                         :accessor struct-shape-insight-status-status :shape
                         "InsightStatusValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reason :initarg :reason :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-insight-status-reason :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-insight-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'insight-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'insight-status 'make-insight-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input insight-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input insight-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input insight-status))
   common-lisp:nil))
(common-lisp:deftype insight-status-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype insight-status-value-list ()
   '(trivial-types:proper-list insight-status-value))
 (common-lisp:defun make-insight-status-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list insight-status-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype insight-summaries ()
   '(trivial-types:proper-list insight-summary))
 (common-lisp:defun make-insight-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list insight-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass insight-summary common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-insight-summary-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-insight-summary-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (category :initarg :category :initform common-lisp:nil
                         :type (common-lisp:or category common-lisp:null)
                         :accessor struct-shape-insight-summary-category :shape
                         "Category" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (kubernetes-version :initarg :kubernetes-version
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-insight-summary-kubernetes-version :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-refresh-time :initarg :last-refresh-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-insight-summary-last-refresh-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-transition-time :initarg :last-transition-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-insight-summary-last-transition-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-insight-summary-description :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (insight-status :initarg :insight-status :initform
                         common-lisp:nil :type
                         (common-lisp:or insight-status common-lisp:null)
                         :accessor struct-shape-insight-summary-insight-status
                         :shape "InsightStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-insight-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'insight-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'insight-summary 'make-insight-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input insight-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input insight-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kubernetes-version))
      (common-lisp:list
       (common-lisp:cons "kubernetesVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-refresh-time))
      (common-lisp:list
       (common-lisp:cons "lastRefreshTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-transition-time))
      (common-lisp:list
       (common-lisp:cons "lastTransitionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insight-status))
      (common-lisp:list
       (common-lisp:cons "insightStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input insight-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass insights-filter common-lisp:nil
                       ((categories :initarg :categories :initform
                         common-lisp:nil :type
                         (common-lisp:or category-list common-lisp:null)
                         :accessor struct-shape-insights-filter-categories
                         :shape "CategoryList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kubernetes-versions :initarg :kubernetes-versions
                         :initform common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-insights-filter-kubernetes-versions
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (statuses :initarg :statuses :initform common-lisp:nil
                         :type
                         (common-lisp:or insight-status-value-list
                                         common-lisp:null)
                         :accessor struct-shape-insights-filter-statuses :shape
                         "InsightStatusValueList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-insights-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'insights-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'insights-filter 'make-insights-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input insights-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input insights-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'categories))
      (common-lisp:list
       (common-lisp:cons "categories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kubernetes-versions))
      (common-lisp:list
       (common-lisp:cons "kubernetesVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statuses))
      (common-lisp:list
       (common-lisp:cons "statuses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input insights-filter))
   common-lisp:nil))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-exception
     (eks-error)
     ((cluster-name :initarg :cluster-name :initform common-lisp:nil :reader
       invalid-parameter-exception-cluster-name)
      (nodegroup-name :initarg :nodegroup-name :initform common-lisp:nil
       :reader invalid-parameter-exception-nodegroup-name)
      (fargate-profile-name :initarg :fargate-profile-name :initform
       common-lisp:nil :reader
       invalid-parameter-exception-fargate-profile-name)
      (addon-name :initarg :addon-name :initform common-lisp:nil :reader
       invalid-parameter-exception-addon-name)
      (subscription-id :initarg :subscription-id :initform common-lisp:nil
       :reader invalid-parameter-exception-subscription-id)
      (message :initarg :message :initform common-lisp:nil :reader
       invalid-parameter-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-exception
                    'invalid-parameter-exception-cluster-name
                    'invalid-parameter-exception-nodegroup-name
                    'invalid-parameter-exception-fargate-profile-name
                    'invalid-parameter-exception-addon-name
                    'invalid-parameter-exception-subscription-id
                    'invalid-parameter-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-request-exception
     (eks-error)
     ((cluster-name :initarg :cluster-name :initform common-lisp:nil :reader
       invalid-request-exception-cluster-name)
      (nodegroup-name :initarg :nodegroup-name :initform common-lisp:nil
       :reader invalid-request-exception-nodegroup-name)
      (addon-name :initarg :addon-name :initform common-lisp:nil :reader
       invalid-request-exception-addon-name)
      (subscription-id :initarg :subscription-id :initform common-lisp:nil
       :reader invalid-request-exception-subscription-id)
      (message :initarg :message :initform common-lisp:nil :reader
       invalid-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-request-exception
                    'invalid-request-exception-cluster-name
                    'invalid-request-exception-nodegroup-name
                    'invalid-request-exception-addon-name
                    'invalid-request-exception-subscription-id
                    'invalid-request-exception-message)))
(common-lisp:deftype ip-family () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass issue common-lisp:nil
                       ((code :initarg :code :initform common-lisp:nil :type
                         (common-lisp:or nodegroup-issue-code common-lisp:null)
                         :accessor struct-shape-issue-code :shape
                         "NodegroupIssueCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-issue-message :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-ids :initarg :resource-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-issue-resource-ids :shape
                         "StringList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-issue
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'issue
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'issue 'make-issue))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input issue))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input issue))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-ids))
      (common-lisp:list
       (common-lisp:cons "resourceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input issue))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype issue-list () '(trivial-types:proper-list issue))
 (common-lisp:defun make-issue-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list issue))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass kubernetes-network-config-request common-lisp:nil
                       ((service-ipv4cidr :initarg :service-ipv4cidr :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-kubernetes-network-config-request-service-ipv4cidr
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ip-family :initarg :ip-family :initform
                         common-lisp:nil :type
                         (common-lisp:or ip-family common-lisp:null) :accessor
                         struct-shape-kubernetes-network-config-request-ip-family
                         :shape "IpFamily" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kubernetes-network-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'kubernetes-network-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'kubernetes-network-config-request
                    'make-kubernetes-network-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kubernetes-network-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kubernetes-network-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-ipv4cidr))
      (common-lisp:list
       (common-lisp:cons "serviceIpv4Cidr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-family))
      (common-lisp:list
       (common-lisp:cons "ipFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kubernetes-network-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass kubernetes-network-config-response common-lisp:nil
                       ((service-ipv4cidr :initarg :service-ipv4cidr :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-kubernetes-network-config-response-service-ipv4cidr
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-ipv6cidr :initarg :service-ipv6cidr :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-kubernetes-network-config-response-service-ipv6cidr
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ip-family :initarg :ip-family :initform
                         common-lisp:nil :type
                         (common-lisp:or ip-family common-lisp:null) :accessor
                         struct-shape-kubernetes-network-config-response-ip-family
                         :shape "IpFamily" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kubernetes-network-config-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'kubernetes-network-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'kubernetes-network-config-response
                    'make-kubernetes-network-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kubernetes-network-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kubernetes-network-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-ipv4cidr))
      (common-lisp:list
       (common-lisp:cons "serviceIpv4Cidr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-ipv6cidr))
      (common-lisp:list
       (common-lisp:cons "serviceIpv6Cidr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-family))
      (common-lisp:list
       (common-lisp:cons "ipFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kubernetes-network-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass launch-template-specification common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-launch-template-specification-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (version :initarg :version :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-launch-template-specification-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-launch-template-specification-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-launch-template-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'launch-template-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'launch-template-specification
                    'make-launch-template-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          launch-template-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          launch-template-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          launch-template-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-access-entries-request common-lisp:nil
                       ((cluster-name :initarg :cluster-name :initform
                         (common-lisp:error ":clustername is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-access-entries-request-cluster-name
                         :shape "String" :location "uri" :location-name "name")
                        (associated-policy-arn :initarg :associated-policy-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-access-entries-request-associated-policy-arn
                         :shape "String" :location "querystring" :location-name
                         "associatedPolicyArn")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          list-access-entries-request-max-results
                          common-lisp:null)
                         :accessor
                         struct-shape-list-access-entries-request-max-results
                         :shape "ListAccessEntriesRequestMaxResults" :location
                         "querystring" :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-access-entries-request-next-token
                         :shape "String" :location "querystring" :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-access-entries-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-access-entries-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-access-entries-request
                    'make-list-access-entries-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-access-entries-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-access-entries-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-access-entries-request))
   common-lisp:nil))
(common-lisp:deftype list-access-entries-request-max-results ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-access-entries-response common-lisp:nil
                       ((access-entries :initarg :access-entries :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-list-access-entries-response-access-entries
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-access-entries-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-access-entries-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-access-entries-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-access-entries-response
                    'make-list-access-entries-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-access-entries-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-access-entries-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-entries))
      (common-lisp:list
       (common-lisp:cons "accessEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-access-entries-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-access-policies-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          list-access-policies-request-max-results
                          common-lisp:null)
                         :accessor
                         struct-shape-list-access-policies-request-max-results
                         :shape "ListAccessPoliciesRequestMaxResults" :location
                         "querystring" :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-access-policies-request-next-token
                         :shape "String" :location "querystring" :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-access-policies-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-access-policies-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-access-policies-request
                    'make-list-access-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-access-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-access-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-access-policies-request))
   common-lisp:nil))
(common-lisp:deftype list-access-policies-request-max-results ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-access-policies-response common-lisp:nil
                       ((access-policies :initarg :access-policies :initform
                         common-lisp:nil :type
                         (common-lisp:or access-policies-list common-lisp:null)
                         :accessor
                         struct-shape-list-access-policies-response-access-policies
                         :shape "AccessPoliciesList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-access-policies-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-access-policies-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-access-policies-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-access-policies-response
                    'make-list-access-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-access-policies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-access-policies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-policies))
      (common-lisp:list
       (common-lisp:cons "accessPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-access-policies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-addons-request common-lisp:nil
                       ((cluster-name :initarg :cluster-name :initform
                         (common-lisp:error ":clustername is required") :type
                         (common-lisp:or cluster-name common-lisp:null)
                         :accessor
                         struct-shape-list-addons-request-cluster-name :shape
                         "ClusterName" :location "uri" :location-name "name")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or list-addons-request-max-results
                                         common-lisp:null)
                         :accessor struct-shape-list-addons-request-max-results
                         :shape "ListAddonsRequestMaxResults" :location
                         "querystring" :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-addons-request-next-token :shape
                         "String" :location "querystring" :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-addons-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-addons-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-addons-request 'make-list-addons-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-addons-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-addons-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-addons-request))
   common-lisp:nil))
(common-lisp:deftype list-addons-request-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-addons-response common-lisp:nil
                       ((addons :initarg :addons :initform common-lisp:nil
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-list-addons-response-addons
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-addons-response-next-token :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-addons-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-addons-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-addons-response 'make-list-addons-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-addons-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-addons-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addons))
      (common-lisp:list
       (common-lisp:cons "addons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-addons-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-associated-access-policies-request common-lisp:nil
                       ((cluster-name :initarg :cluster-name :initform
                         (common-lisp:error ":clustername is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-associated-access-policies-request-cluster-name
                         :shape "String" :location "uri" :location-name "name")
                        (principal-arn :initarg :principal-arn :initform
                         (common-lisp:error ":principalarn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-associated-access-policies-request-principal-arn
                         :shape "String" :location "uri" :location-name
                         "principalArn")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          list-associated-access-policies-request-max-results
                          common-lisp:null)
                         :accessor
                         struct-shape-list-associated-access-policies-request-max-results
                         :shape "ListAssociatedAccessPoliciesRequestMaxResults"
                         :location "querystring" :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-associated-access-policies-request-next-token
                         :shape "String" :location "querystring" :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-associated-access-policies-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-associated-access-policies-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-associated-access-policies-request
                    'make-list-associated-access-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-associated-access-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-associated-access-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-associated-access-policies-request))
   common-lisp:nil))
(common-lisp:deftype list-associated-access-policies-request-max-results ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-associated-access-policies-response common-lisp:nil
                       ((cluster-name :initarg :cluster-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-associated-access-policies-response-cluster-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (principal-arn :initarg :principal-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-associated-access-policies-response-principal-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-associated-access-policies-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (associated-access-policies :initarg
                         :associated-access-policies :initform common-lisp:nil
                         :type
                         (common-lisp:or associated-access-policies-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-associated-access-policies-response-associated-access-policies
                         :shape "AssociatedAccessPoliciesList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-associated-access-policies-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-associated-access-policies-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-associated-access-policies-response
                    'make-list-associated-access-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-associated-access-policies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-associated-access-policies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "clusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-arn))
      (common-lisp:list
       (common-lisp:cons "principalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associated-access-policies))
      (common-lisp:list
       (common-lisp:cons "associatedAccessPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-associated-access-policies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-clusters-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or list-clusters-request-max-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-clusters-request-max-results :shape
                         "ListClustersRequestMaxResults" :location
                         "querystring" :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-clusters-request-next-token :shape
                         "String" :location "querystring" :location-name
                         "nextToken")
                        (include :initarg :include :initform common-lisp:nil
                         :type
                         (common-lisp:or include-clusters-list
                                         common-lisp:null)
                         :accessor struct-shape-list-clusters-request-include
                         :shape "IncludeClustersList" :location "querystring"
                         :location-name "include"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-clusters-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-clusters-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-clusters-request 'make-list-clusters-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-request))
   common-lisp:nil))
(common-lisp:deftype list-clusters-request-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-clusters-response common-lisp:nil
                       ((clusters :initarg :clusters :initform common-lisp:nil
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-list-clusters-response-clusters
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-clusters-response-next-token :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-clusters-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-clusters-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-clusters-response 'make-list-clusters-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'clusters))
      (common-lisp:list
       (common-lisp:cons "clusters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-eks-anywhere-subscriptions-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          list-eks-anywhere-subscriptions-request-max-results
                          common-lisp:null)
                         :accessor
                         struct-shape-list-eks-anywhere-subscriptions-request-max-results
                         :shape "ListEksAnywhereSubscriptionsRequestMaxResults"
                         :location "querystring" :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-eks-anywhere-subscriptions-request-next-token
                         :shape "String" :location "querystring" :location-name
                         "nextToken")
                        (include-status :initarg :include-status :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          eks-anywhere-subscription-status-values
                          common-lisp:null)
                         :accessor
                         struct-shape-list-eks-anywhere-subscriptions-request-include-status
                         :shape "EksAnywhereSubscriptionStatusValues" :location
                         "querystring" :location-name "includeStatus"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-eks-anywhere-subscriptions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-eks-anywhere-subscriptions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-eks-anywhere-subscriptions-request
                    'make-list-eks-anywhere-subscriptions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-eks-anywhere-subscriptions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-eks-anywhere-subscriptions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-eks-anywhere-subscriptions-request))
   common-lisp:nil))
(common-lisp:deftype list-eks-anywhere-subscriptions-request-max-results ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-eks-anywhere-subscriptions-response common-lisp:nil
                       ((subscriptions :initarg :subscriptions :initform
                         common-lisp:nil :type
                         (common-lisp:or eks-anywhere-subscription-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-eks-anywhere-subscriptions-response-subscriptions
                         :shape "EksAnywhereSubscriptionList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-eks-anywhere-subscriptions-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-eks-anywhere-subscriptions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-eks-anywhere-subscriptions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-eks-anywhere-subscriptions-response
                    'make-list-eks-anywhere-subscriptions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-eks-anywhere-subscriptions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-eks-anywhere-subscriptions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscriptions))
      (common-lisp:list
       (common-lisp:cons "subscriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-eks-anywhere-subscriptions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-fargate-profiles-request common-lisp:nil
                       ((cluster-name :initarg :cluster-name :initform
                         (common-lisp:error ":clustername is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-fargate-profiles-request-cluster-name
                         :shape "String" :location "uri" :location-name "name")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or fargate-profiles-request-max-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-fargate-profiles-request-max-results
                         :shape "FargateProfilesRequestMaxResults" :location
                         "querystring" :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-fargate-profiles-request-next-token
                         :shape "String" :location "querystring" :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-fargate-profiles-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-fargate-profiles-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-fargate-profiles-request
                    'make-list-fargate-profiles-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-fargate-profiles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-fargate-profiles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-fargate-profiles-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-fargate-profiles-response common-lisp:nil
                       ((fargate-profile-names :initarg :fargate-profile-names
                         :initform common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-list-fargate-profiles-response-fargate-profile-names
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-fargate-profiles-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-fargate-profiles-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-fargate-profiles-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-fargate-profiles-response
                    'make-list-fargate-profiles-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-fargate-profiles-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-fargate-profiles-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fargate-profile-names))
      (common-lisp:list
       (common-lisp:cons "fargateProfileNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-fargate-profiles-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-identity-provider-configs-request common-lisp:nil
                       ((cluster-name :initarg :cluster-name :initform
                         (common-lisp:error ":clustername is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-identity-provider-configs-request-cluster-name
                         :shape "String" :location "uri" :location-name "name")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          list-identity-provider-configs-request-max-results
                          common-lisp:null)
                         :accessor
                         struct-shape-list-identity-provider-configs-request-max-results
                         :shape "ListIdentityProviderConfigsRequestMaxResults"
                         :location "querystring" :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-identity-provider-configs-request-next-token
                         :shape "String" :location "querystring" :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-identity-provider-configs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-identity-provider-configs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-identity-provider-configs-request
                    'make-list-identity-provider-configs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-provider-configs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-provider-configs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-provider-configs-request))
   common-lisp:nil))
(common-lisp:deftype list-identity-provider-configs-request-max-results ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-identity-provider-configs-response common-lisp:nil
                       ((identity-provider-configs :initarg
                         :identity-provider-configs :initform common-lisp:nil
                         :type
                         (common-lisp:or identity-provider-configs
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-identity-provider-configs-response-identity-provider-configs
                         :shape "IdentityProviderConfigs" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-identity-provider-configs-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-identity-provider-configs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-identity-provider-configs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-identity-provider-configs-response
                    'make-list-identity-provider-configs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-provider-configs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-provider-configs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-configs))
      (common-lisp:list
       (common-lisp:cons "identityProviderConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-provider-configs-response))
   common-lisp:nil))
(common-lisp:deftype list-insights-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-insights-request common-lisp:nil
                       ((cluster-name :initarg :cluster-name :initform
                         (common-lisp:error ":clustername is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-insights-request-cluster-name :shape
                         "String" :location "uri" :location-name "name")
                        (filter :initarg :filter :initform common-lisp:nil
                         :type
                         (common-lisp:or insights-filter common-lisp:null)
                         :accessor struct-shape-list-insights-request-filter
                         :shape "InsightsFilter" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or list-insights-max-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-insights-request-max-results :shape
                         "ListInsightsMaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-insights-request-next-token :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-insights-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-insights-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-insights-request 'make-list-insights-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-insights-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-insights-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-insights-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-insights-response common-lisp:nil
                       ((insights :initarg :insights :initform common-lisp:nil
                         :type
                         (common-lisp:or insight-summaries common-lisp:null)
                         :accessor struct-shape-list-insights-response-insights
                         :shape "InsightSummaries" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-insights-response-next-token :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-insights-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-insights-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-insights-response 'make-list-insights-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-insights-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-insights-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insights))
      (common-lisp:list
       (common-lisp:cons "insights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-insights-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-nodegroups-request common-lisp:nil
                       ((cluster-name :initarg :cluster-name :initform
                         (common-lisp:error ":clustername is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-nodegroups-request-cluster-name
                         :shape "String" :location "uri" :location-name "name")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or list-nodegroups-request-max-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-nodegroups-request-max-results
                         :shape "ListNodegroupsRequestMaxResults" :location
                         "querystring" :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-nodegroups-request-next-token :shape
                         "String" :location "querystring" :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-nodegroups-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-nodegroups-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-nodegroups-request 'make-list-nodegroups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-nodegroups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-nodegroups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-nodegroups-request))
   common-lisp:nil))
(common-lisp:deftype list-nodegroups-request-max-results ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-nodegroups-response common-lisp:nil
                       ((nodegroups :initarg :nodegroups :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-list-nodegroups-response-nodegroups
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-nodegroups-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-nodegroups-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-nodegroups-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-nodegroups-response 'make-list-nodegroups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-nodegroups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-nodegroups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nodegroups))
      (common-lisp:list
       (common-lisp:cons "nodegroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-nodegroups-response))
   common-lisp:nil))
(common-lisp:deftype list-pod-identity-associations-max-results ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-pod-identity-associations-request common-lisp:nil
                       ((cluster-name :initarg :cluster-name :initform
                         (common-lisp:error ":clustername is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-pod-identity-associations-request-cluster-name
                         :shape "String" :location "uri" :location-name "name")
                        (namespace :initarg :namespace :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-pod-identity-associations-request-namespace
                         :shape "String" :location "querystring" :location-name
                         "namespace")
                        (service-account :initarg :service-account :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-pod-identity-associations-request-service-account
                         :shape "String" :location "querystring" :location-name
                         "serviceAccount")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          list-pod-identity-associations-max-results
                          common-lisp:null)
                         :accessor
                         struct-shape-list-pod-identity-associations-request-max-results
                         :shape "ListPodIdentityAssociationsMaxResults"
                         :location "querystring" :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-pod-identity-associations-request-next-token
                         :shape "String" :location "querystring" :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-pod-identity-associations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-pod-identity-associations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-pod-identity-associations-request
                    'make-list-pod-identity-associations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-pod-identity-associations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-pod-identity-associations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-pod-identity-associations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-pod-identity-associations-response common-lisp:nil
                       ((associations :initarg :associations :initform
                         common-lisp:nil :type
                         (common-lisp:or pod-identity-association-summaries
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-pod-identity-associations-response-associations
                         :shape "PodIdentityAssociationSummaries" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-pod-identity-associations-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-pod-identity-associations-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-pod-identity-associations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-pod-identity-associations-response
                    'make-list-pod-identity-associations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-pod-identity-associations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-pod-identity-associations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'associations))
      (common-lisp:list
       (common-lisp:cons "associations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-pod-identity-associations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-request-resource-arn
                         :shape "String" :location "uri" :location-name
                         "resourceArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-updates-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-updates-request-name :shape "String"
                         :location "uri" :location-name "name")
                        (nodegroup-name :initarg :nodegroup-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-updates-request-nodegroup-name
                         :shape "String" :location "querystring" :location-name
                         "nodegroupName")
                        (addon-name :initarg :addon-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-updates-request-addon-name :shape
                         "String" :location "querystring" :location-name
                         "addonName")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-updates-request-next-token :shape
                         "String" :location "querystring" :location-name
                         "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or list-updates-request-max-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-updates-request-max-results :shape
                         "ListUpdatesRequestMaxResults" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-updates-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-updates-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-updates-request 'make-list-updates-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-updates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-updates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-updates-request))
   common-lisp:nil))
(common-lisp:deftype list-updates-request-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-updates-response common-lisp:nil
                       ((update-ids :initarg :update-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-list-updates-response-update-ids :shape
                         "StringList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-updates-response-next-token :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-updates-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-updates-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-updates-response 'make-list-updates-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-updates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-updates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-ids))
      (common-lisp:list
       (common-lisp:cons "updateIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-updates-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass log-setup common-lisp:nil
                       ((types :initarg :types :initform common-lisp:nil :type
                         (common-lisp:or log-types common-lisp:null) :accessor
                         struct-shape-log-setup-types :shape "LogTypes"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (enabled :initarg :enabled :initform common-lisp:nil
                         :type (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor struct-shape-log-setup-enabled :shape
                         "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-log-setup
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'log-setup
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'log-setup 'make-log-setup))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input log-setup))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input log-setup))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'types))
      (common-lisp:list
       (common-lisp:cons "types"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input log-setup))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype log-setups () '(trivial-types:proper-list log-setup))
 (common-lisp:defun make-log-setups
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list log-setup))
   aws-sdk/generator/shape::members))
(common-lisp:deftype log-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype log-types () '(trivial-types:proper-list log-type))
 (common-lisp:defun make-log-types
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list log-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass logging common-lisp:nil
                       ((cluster-logging :initarg :cluster-logging :initform
                         common-lisp:nil :type
                         (common-lisp:or log-setups common-lisp:null) :accessor
                         struct-shape-logging-cluster-logging :shape
                         "LogSetups" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-logging
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'logging
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'logging 'make-logging))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input logging))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input logging))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-logging))
      (common-lisp:list
       (common-lisp:cons "clusterLogging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input logging))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass marketplace-information common-lisp:nil
                       ((product-id :initarg :product-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-marketplace-information-product-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (product-url :initarg :product-url :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-marketplace-information-product-url
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-marketplace-information
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'marketplace-information
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'marketplace-information 'make-marketplace-information))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          marketplace-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          marketplace-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-id))
      (common-lisp:list
       (common-lisp:cons "productId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-url))
      (common-lisp:list
       (common-lisp:cons "productUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          marketplace-information))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass nodegroup common-lisp:nil
                       ((nodegroup-name :initarg :nodegroup-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-nodegroup-nodegroup-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (nodegroup-arn :initarg :nodegroup-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-nodegroup-nodegroup-arn :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cluster-name :initarg :cluster-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-nodegroup-cluster-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (version :initarg :version :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-nodegroup-version :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (release-version :initarg :release-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-nodegroup-release-version :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-nodegroup-created-at :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (modified-at :initarg :modified-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-nodegroup-modified-at :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or nodegroup-status common-lisp:null)
                         :accessor struct-shape-nodegroup-status :shape
                         "NodegroupStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (capacity-type :initarg :capacity-type :initform
                         common-lisp:nil :type
                         (common-lisp:or capacity-types common-lisp:null)
                         :accessor struct-shape-nodegroup-capacity-type :shape
                         "CapacityTypes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scaling-config :initarg :scaling-config :initform
                         common-lisp:nil :type
                         (common-lisp:or nodegroup-scaling-config
                                         common-lisp:null)
                         :accessor struct-shape-nodegroup-scaling-config :shape
                         "NodegroupScalingConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-types :initarg :instance-types :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-nodegroup-instance-types :shape
                         "StringList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (subnets :initarg :subnets :initform common-lisp:nil
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-nodegroup-subnets :shape
                         "StringList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (remote-access :initarg :remote-access :initform
                         common-lisp:nil :type
                         (common-lisp:or remote-access-config common-lisp:null)
                         :accessor struct-shape-nodegroup-remote-access :shape
                         "RemoteAccessConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ami-type :initarg :ami-type :initform common-lisp:nil
                         :type (common-lisp:or amitypes common-lisp:null)
                         :accessor struct-shape-nodegroup-ami-type :shape
                         "AMITypes" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (node-role :initarg :node-role :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-nodegroup-node-role :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (labels :initarg :labels :initform common-lisp:nil
                         :type (common-lisp:or |labelsMap| common-lisp:null)
                         :accessor struct-shape-nodegroup-labels :shape
                         "labelsMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (taints :initarg :taints :initform common-lisp:nil
                         :type (common-lisp:or |taintsList| common-lisp:null)
                         :accessor struct-shape-nodegroup-taints :shape
                         "taintsList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resources :initarg :resources :initform
                         common-lisp:nil :type
                         (common-lisp:or nodegroup-resources common-lisp:null)
                         :accessor struct-shape-nodegroup-resources :shape
                         "NodegroupResources" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (disk-size :initarg :disk-size :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor struct-shape-nodegroup-disk-size :shape
                         "BoxedInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (health :initarg :health :initform common-lisp:nil
                         :type
                         (common-lisp:or nodegroup-health common-lisp:null)
                         :accessor struct-shape-nodegroup-health :shape
                         "NodegroupHealth" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (update-config :initarg :update-config :initform
                         common-lisp:nil :type
                         (common-lisp:or nodegroup-update-config
                                         common-lisp:null)
                         :accessor struct-shape-nodegroup-update-config :shape
                         "NodegroupUpdateConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (launch-template :initarg :launch-template :initform
                         common-lisp:nil :type
                         (common-lisp:or launch-template-specification
                                         common-lisp:null)
                         :accessor struct-shape-nodegroup-launch-template
                         :shape "LaunchTemplateSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-nodegroup-tags :shape "TagMap" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-nodegroup
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'nodegroup
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'nodegroup 'make-nodegroup))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input nodegroup))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input nodegroup))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nodegroup-name))
      (common-lisp:list
       (common-lisp:cons "nodegroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nodegroup-arn))
      (common-lisp:list
       (common-lisp:cons "nodegroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "clusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'release-version))
      (common-lisp:list
       (common-lisp:cons "releaseVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modified-at))
      (common-lisp:list
       (common-lisp:cons "modifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity-type))
      (common-lisp:list
       (common-lisp:cons "capacityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-config))
      (common-lisp:list
       (common-lisp:cons "scalingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-types))
      (common-lisp:list
       (common-lisp:cons "instanceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remote-access))
      (common-lisp:list
       (common-lisp:cons "remoteAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ami-type))
      (common-lisp:list
       (common-lisp:cons "amiType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-role))
      (common-lisp:list
       (common-lisp:cons "nodeRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labels))
      (common-lisp:list
       (common-lisp:cons "labels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'taints))
      (common-lisp:list
       (common-lisp:cons "taints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disk-size))
      (common-lisp:list
       (common-lisp:cons "diskSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health))
      (common-lisp:list
       (common-lisp:cons "health"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-config))
      (common-lisp:list
       (common-lisp:cons "updateConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-template))
      (common-lisp:list
       (common-lisp:cons "launchTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input nodegroup))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass nodegroup-health common-lisp:nil
                       ((issues :initarg :issues :initform common-lisp:nil
                         :type (common-lisp:or issue-list common-lisp:null)
                         :accessor struct-shape-nodegroup-health-issues :shape
                         "IssueList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-nodegroup-health
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'nodegroup-health
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'nodegroup-health 'make-nodegroup-health))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input nodegroup-health))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input nodegroup-health))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issues))
      (common-lisp:list
       (common-lisp:cons "issues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input nodegroup-health))
   common-lisp:nil))
(common-lisp:deftype nodegroup-issue-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass nodegroup-resources common-lisp:nil
                       ((auto-scaling-groups :initarg :auto-scaling-groups
                         :initform common-lisp:nil :type
                         (common-lisp:or auto-scaling-group-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-nodegroup-resources-auto-scaling-groups
                         :shape "AutoScalingGroupList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (remote-access-security-group :initarg
                         :remote-access-security-group :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-nodegroup-resources-remote-access-security-group
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-nodegroup-resources
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'nodegroup-resources
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'nodegroup-resources 'make-nodegroup-resources))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input nodegroup-resources))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input nodegroup-resources))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-scaling-groups))
      (common-lisp:list
       (common-lisp:cons "autoScalingGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remote-access-security-group))
      (common-lisp:list
       (common-lisp:cons "remoteAccessSecurityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input nodegroup-resources))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass nodegroup-scaling-config common-lisp:nil
                       ((min-size :initarg :min-size :initform common-lisp:nil
                         :type (common-lisp:or zero-capacity common-lisp:null)
                         :accessor
                         struct-shape-nodegroup-scaling-config-min-size :shape
                         "ZeroCapacity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-size :initarg :max-size :initform common-lisp:nil
                         :type (common-lisp:or capacity common-lisp:null)
                         :accessor
                         struct-shape-nodegroup-scaling-config-max-size :shape
                         "Capacity" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (desired-size :initarg :desired-size :initform
                         common-lisp:nil :type
                         (common-lisp:or zero-capacity common-lisp:null)
                         :accessor
                         struct-shape-nodegroup-scaling-config-desired-size
                         :shape "ZeroCapacity" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-nodegroup-scaling-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'nodegroup-scaling-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'nodegroup-scaling-config 'make-nodegroup-scaling-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          nodegroup-scaling-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          nodegroup-scaling-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-size))
      (common-lisp:list
       (common-lisp:cons "minSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-size))
      (common-lisp:list
       (common-lisp:cons "maxSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-size))
      (common-lisp:list
       (common-lisp:cons "desiredSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          nodegroup-scaling-config))
   common-lisp:nil))
(common-lisp:deftype nodegroup-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass nodegroup-update-config common-lisp:nil
                       ((max-unavailable :initarg :max-unavailable :initform
                         common-lisp:nil :type
                         (common-lisp:or non-zero-integer common-lisp:null)
                         :accessor
                         struct-shape-nodegroup-update-config-max-unavailable
                         :shape "NonZeroInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-unavailable-percentage :initarg
                         :max-unavailable-percentage :initform common-lisp:nil
                         :type
                         (common-lisp:or percent-capacity common-lisp:null)
                         :accessor
                         struct-shape-nodegroup-update-config-max-unavailable-percentage
                         :shape "PercentCapacity" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-nodegroup-update-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'nodegroup-update-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'nodegroup-update-config 'make-nodegroup-update-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          nodegroup-update-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          nodegroup-update-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-unavailable))
      (common-lisp:list
       (common-lisp:cons "maxUnavailable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-unavailable-percentage))
      (common-lisp:list
       (common-lisp:cons "maxUnavailablePercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          nodegroup-update-config))
   common-lisp:nil))
(common-lisp:deftype non-zero-integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition not-found-exception
     (eks-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'not-found-exception 'not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defclass oidc common-lisp:nil
                       ((issuer :initarg :issuer :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-oidc-issuer :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-oidc (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'oidc
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'oidc 'make-oidc))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input oidc))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input oidc))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issuer))
      (common-lisp:list
       (common-lisp:cons "issuer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input oidc))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass oidc-identity-provider-config common-lisp:nil
                       ((identity-provider-config-name :initarg
                         :identity-provider-config-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-oidc-identity-provider-config-identity-provider-config-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identity-provider-config-arn :initarg
                         :identity-provider-config-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-oidc-identity-provider-config-identity-provider-config-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster-name :initarg :cluster-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-oidc-identity-provider-config-cluster-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (issuer-url :initarg :issuer-url :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-oidc-identity-provider-config-issuer-url
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-id :initarg :client-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-oidc-identity-provider-config-client-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (username-claim :initarg :username-claim :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-oidc-identity-provider-config-username-claim
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (username-prefix :initarg :username-prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-oidc-identity-provider-config-username-prefix
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (groups-claim :initarg :groups-claim :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-oidc-identity-provider-config-groups-claim
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (groups-prefix :initarg :groups-prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-oidc-identity-provider-config-groups-prefix
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (required-claims :initarg :required-claims :initform
                         common-lisp:nil :type
                         (common-lisp:or |requiredClaimsMap| common-lisp:null)
                         :accessor
                         struct-shape-oidc-identity-provider-config-required-claims
                         :shape "requiredClaimsMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-oidc-identity-provider-config-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or |configStatus| common-lisp:null)
                         :accessor
                         struct-shape-oidc-identity-provider-config-status
                         :shape "configStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-oidc-identity-provider-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'oidc-identity-provider-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'oidc-identity-provider-config
                    'make-oidc-identity-provider-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          oidc-identity-provider-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          oidc-identity-provider-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-config-name))
      (common-lisp:list
       (common-lisp:cons "identityProviderConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-config-arn))
      (common-lisp:list
       (common-lisp:cons "identityProviderConfigArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "clusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issuer-url))
      (common-lisp:list
       (common-lisp:cons "issuerUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "clientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username-claim))
      (common-lisp:list
       (common-lisp:cons "usernameClaim"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username-prefix))
      (common-lisp:list
       (common-lisp:cons "usernamePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups-claim))
      (common-lisp:list
       (common-lisp:cons "groupsClaim"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups-prefix))
      (common-lisp:list
       (common-lisp:cons "groupsPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'required-claims))
      (common-lisp:list
       (common-lisp:cons "requiredClaims"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          oidc-identity-provider-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass oidc-identity-provider-config-request common-lisp:nil
                       ((identity-provider-config-name :initarg
                         :identity-provider-config-name :initform
                         (common-lisp:error
                          ":identityproviderconfigname is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-oidc-identity-provider-config-request-identity-provider-config-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (issuer-url :initarg :issuer-url :initform
                         (common-lisp:error ":issuerurl is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-oidc-identity-provider-config-request-issuer-url
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-id :initarg :client-id :initform
                         (common-lisp:error ":clientid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-oidc-identity-provider-config-request-client-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (username-claim :initarg :username-claim :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-oidc-identity-provider-config-request-username-claim
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (username-prefix :initarg :username-prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-oidc-identity-provider-config-request-username-prefix
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (groups-claim :initarg :groups-claim :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-oidc-identity-provider-config-request-groups-claim
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (groups-prefix :initarg :groups-prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-oidc-identity-provider-config-request-groups-prefix
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (required-claims :initarg :required-claims :initform
                         common-lisp:nil :type
                         (common-lisp:or |requiredClaimsMap| common-lisp:null)
                         :accessor
                         struct-shape-oidc-identity-provider-config-request-required-claims
                         :shape "requiredClaimsMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-oidc-identity-provider-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'oidc-identity-provider-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'oidc-identity-provider-config-request
                    'make-oidc-identity-provider-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          oidc-identity-provider-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          oidc-identity-provider-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-config-name))
      (common-lisp:list
       (common-lisp:cons "identityProviderConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issuer-url))
      (common-lisp:list
       (common-lisp:cons "issuerUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "clientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username-claim))
      (common-lisp:list
       (common-lisp:cons "usernameClaim"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username-prefix))
      (common-lisp:list
       (common-lisp:cons "usernamePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups-claim))
      (common-lisp:list
       (common-lisp:cons "groupsClaim"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups-prefix))
      (common-lisp:list
       (common-lisp:cons "groupsPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'required-claims))
      (common-lisp:list
       (common-lisp:cons "requiredClaims"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          oidc-identity-provider-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass outpost-config-request common-lisp:nil
                       ((outpost-arns :initarg :outpost-arns :initform
                         (common-lisp:error ":outpostarns is required") :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-outpost-config-request-outpost-arns
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (control-plane-instance-type :initarg
                         :control-plane-instance-type :initform
                         (common-lisp:error
                          ":controlplaneinstancetype is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-outpost-config-request-control-plane-instance-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (control-plane-placement :initarg
                         :control-plane-placement :initform common-lisp:nil
                         :type
                         (common-lisp:or control-plane-placement-request
                                         common-lisp:null)
                         :accessor
                         struct-shape-outpost-config-request-control-plane-placement
                         :shape "ControlPlanePlacementRequest" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-outpost-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'outpost-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'outpost-config-request 'make-outpost-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          outpost-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          outpost-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outpost-arns))
      (common-lisp:list
       (common-lisp:cons "outpostArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'control-plane-instance-type))
      (common-lisp:list
       (common-lisp:cons "controlPlaneInstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'control-plane-placement))
      (common-lisp:list
       (common-lisp:cons "controlPlanePlacement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          outpost-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass outpost-config-response common-lisp:nil
                       ((outpost-arns :initarg :outpost-arns :initform
                         (common-lisp:error ":outpostarns is required") :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-outpost-config-response-outpost-arns
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (control-plane-instance-type :initarg
                         :control-plane-instance-type :initform
                         (common-lisp:error
                          ":controlplaneinstancetype is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-outpost-config-response-control-plane-instance-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (control-plane-placement :initarg
                         :control-plane-placement :initform common-lisp:nil
                         :type
                         (common-lisp:or control-plane-placement-response
                                         common-lisp:null)
                         :accessor
                         struct-shape-outpost-config-response-control-plane-placement
                         :shape "ControlPlanePlacementResponse" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-outpost-config-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'outpost-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'outpost-config-response 'make-outpost-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          outpost-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          outpost-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outpost-arns))
      (common-lisp:list
       (common-lisp:cons "outpostArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'control-plane-instance-type))
      (common-lisp:list
       (common-lisp:cons "controlPlaneInstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'control-plane-placement))
      (common-lisp:list
       (common-lisp:cons "controlPlanePlacement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          outpost-config-response))
   common-lisp:nil))
(common-lisp:deftype percent-capacity () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass pod-identity-association common-lisp:nil
                       ((cluster-name :initarg :cluster-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-pod-identity-association-cluster-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (namespace :initarg :namespace :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-pod-identity-association-namespace :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (service-account :initarg :service-account :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-pod-identity-association-service-account
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-pod-identity-association-role-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (association-arn :initarg :association-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-pod-identity-association-association-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (association-id :initarg :association-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-pod-identity-association-association-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-pod-identity-association-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-pod-identity-association-created-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (modified-at :initarg :modified-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-pod-identity-association-modified-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-pod-identity-association
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'pod-identity-association
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'pod-identity-association 'make-pod-identity-association))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pod-identity-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pod-identity-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "clusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-account))
      (common-lisp:list
       (common-lisp:cons "serviceAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-arn))
      (common-lisp:list
       (common-lisp:cons "associationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "associationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modified-at))
      (common-lisp:list
       (common-lisp:cons "modifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pod-identity-association))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype pod-identity-association-summaries ()
   '(trivial-types:proper-list pod-identity-association-summary))
 (common-lisp:defun make-pod-identity-association-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            pod-identity-association-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass pod-identity-association-summary common-lisp:nil
                       ((cluster-name :initarg :cluster-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-pod-identity-association-summary-cluster-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (namespace :initarg :namespace :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-pod-identity-association-summary-namespace
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-account :initarg :service-account :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-pod-identity-association-summary-service-account
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (association-arn :initarg :association-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-pod-identity-association-summary-association-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (association-id :initarg :association-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-pod-identity-association-summary-association-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-pod-identity-association-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'pod-identity-association-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'pod-identity-association-summary
                    'make-pod-identity-association-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pod-identity-association-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pod-identity-association-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "clusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-account))
      (common-lisp:list
       (common-lisp:cons "serviceAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-arn))
      (common-lisp:list
       (common-lisp:cons "associationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "associationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pod-identity-association-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass provider common-lisp:nil
                       ((key-arn :initarg :key-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-provider-key-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-provider
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'provider
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'provider 'make-provider))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input provider))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input provider))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-arn))
      (common-lisp:list
       (common-lisp:cons "keyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input provider))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-cluster-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or cluster-name common-lisp:null)
                         :accessor struct-shape-register-cluster-request-name
                         :shape "ClusterName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connector-config :initarg :connector-config :initform
                         (common-lisp:error ":connectorconfig is required")
                         :type
                         (common-lisp:or connector-config-request
                                         common-lisp:null)
                         :accessor
                         struct-shape-register-cluster-request-connector-config
                         :shape "ConnectorConfigRequest" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-register-cluster-request-client-request-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-register-cluster-request-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-register-cluster-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'register-cluster-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'register-cluster-request 'make-register-cluster-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-cluster-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-config))
      (common-lisp:list
       (common-lisp:cons "connectorConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-cluster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-cluster-response common-lisp:nil
                       ((cluster :initarg :cluster :initform common-lisp:nil
                         :type (common-lisp:or cluster common-lisp:null)
                         :accessor
                         struct-shape-register-cluster-response-cluster :shape
                         "Cluster" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-register-cluster-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'register-cluster-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'register-cluster-response
                    'make-register-cluster-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-cluster-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-cluster-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-cluster-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remote-access-config common-lisp:nil
                       ((ec2ssh-key :initarg :ec2ssh-key :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-remote-access-config-ec2ssh-key :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source-security-groups :initarg
                         :source-security-groups :initform common-lisp:nil
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-remote-access-config-source-security-groups
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remote-access-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'remote-access-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remote-access-config 'make-remote-access-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input remote-access-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input remote-access-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2ssh-key))
      (common-lisp:list
       (common-lisp:cons "ec2SshKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-security-groups))
      (common-lisp:list
       (common-lisp:cons "sourceSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input remote-access-config))
   common-lisp:nil))
(common-lisp:deftype resolve-conflicts () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-in-use-exception
     (eks-error)
     ((cluster-name :initarg :cluster-name :initform common-lisp:nil :reader
       resource-in-use-exception-cluster-name)
      (nodegroup-name :initarg :nodegroup-name :initform common-lisp:nil
       :reader resource-in-use-exception-nodegroup-name)
      (addon-name :initarg :addon-name :initform common-lisp:nil :reader
       resource-in-use-exception-addon-name)
      (message :initarg :message :initform common-lisp:nil :reader
       resource-in-use-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-in-use-exception
                    'resource-in-use-exception-cluster-name
                    'resource-in-use-exception-nodegroup-name
                    'resource-in-use-exception-addon-name
                    'resource-in-use-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-limit-exceeded-exception
     (eks-error)
     ((cluster-name :initarg :cluster-name :initform common-lisp:nil :reader
       resource-limit-exceeded-exception-cluster-name)
      (nodegroup-name :initarg :nodegroup-name :initform common-lisp:nil
       :reader resource-limit-exceeded-exception-nodegroup-name)
      (subscription-id :initarg :subscription-id :initform common-lisp:nil
       :reader resource-limit-exceeded-exception-subscription-id)
      (message :initarg :message :initform common-lisp:nil :reader
       resource-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-limit-exceeded-exception
                    'resource-limit-exceeded-exception-cluster-name
                    'resource-limit-exceeded-exception-nodegroup-name
                    'resource-limit-exceeded-exception-subscription-id
                    'resource-limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (eks-error)
     ((cluster-name :initarg :cluster-name :initform common-lisp:nil :reader
       resource-not-found-exception-cluster-name)
      (nodegroup-name :initarg :nodegroup-name :initform common-lisp:nil
       :reader resource-not-found-exception-nodegroup-name)
      (fargate-profile-name :initarg :fargate-profile-name :initform
       common-lisp:nil :reader
       resource-not-found-exception-fargate-profile-name)
      (addon-name :initarg :addon-name :initform common-lisp:nil :reader
       resource-not-found-exception-addon-name)
      (subscription-id :initarg :subscription-id :initform common-lisp:nil
       :reader resource-not-found-exception-subscription-id)
      (message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-cluster-name
                    'resource-not-found-exception-nodegroup-name
                    'resource-not-found-exception-fargate-profile-name
                    'resource-not-found-exception-addon-name
                    'resource-not-found-exception-subscription-id
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-propagation-delay-exception
     (eks-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-propagation-delay-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-propagation-delay-exception
                    'resource-propagation-delay-exception-message)))
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition server-exception
     (eks-error)
     ((cluster-name :initarg :cluster-name :initform common-lisp:nil :reader
       server-exception-cluster-name)
      (nodegroup-name :initarg :nodegroup-name :initform common-lisp:nil
       :reader server-exception-nodegroup-name)
      (addon-name :initarg :addon-name :initform common-lisp:nil :reader
       server-exception-addon-name)
      (subscription-id :initarg :subscription-id :initform common-lisp:nil
       :reader server-exception-subscription-id)
      (message :initarg :message :initform common-lisp:nil :reader
       server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'server-exception 'server-exception-cluster-name
                    'server-exception-nodegroup-name
                    'server-exception-addon-name
                    'server-exception-subscription-id
                    'server-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition service-unavailable-exception
     (eks-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-unavailable-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-unavailable-exception
                    'service-unavailable-exception-message)))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-string-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun make-tag-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "String" :location "uri" :location-name "resourceArn")
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape "TagMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass taint common-lisp:nil
                       ((key :initarg :key :initform common-lisp:nil :type
                         (common-lisp:or |taintKey| common-lisp:null) :accessor
                         struct-shape-taint-key :shape "taintKey" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or |taintValue| common-lisp:null)
                         :accessor struct-shape-taint-value :shape "taintValue"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (effect :initarg :effect :initform common-lisp:nil
                         :type (common-lisp:or taint-effect common-lisp:null)
                         :accessor struct-shape-taint-effect :shape
                         "TaintEffect" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-taint
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'taint
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'taint 'make-taint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input taint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input taint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effect))
      (common-lisp:list
       (common-lisp:cons "effect"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input taint))
   common-lisp:nil))
(common-lisp:deftype taint-effect () 'common-lisp:string)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition unsupported-availability-zone-exception
     (eks-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unsupported-availability-zone-exception-message)
      (cluster-name :initarg :cluster-name :initform common-lisp:nil :reader
       unsupported-availability-zone-exception-cluster-name)
      (nodegroup-name :initarg :nodegroup-name :initform common-lisp:nil
       :reader unsupported-availability-zone-exception-nodegroup-name)
      (valid-zones :initarg :valid-zones :initform common-lisp:nil :reader
       unsupported-availability-zone-exception-valid-zones)))
 (common-lisp:export
  (common-lisp:list 'unsupported-availability-zone-exception
                    'unsupported-availability-zone-exception-message
                    'unsupported-availability-zone-exception-cluster-name
                    'unsupported-availability-zone-exception-nodegroup-name
                    'unsupported-availability-zone-exception-valid-zones)))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "String" :location "uri" :location-name
                         "resourceArn")
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tagkeys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-untag-resource-request-tag-keys
                         :shape "TagKeyList" :location "querystring"
                         :location-name "tagKeys"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-id :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or update-status common-lisp:null)
                         :accessor struct-shape-update-status :shape
                         "UpdateStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or update-type common-lisp:null)
                         :accessor struct-shape-update-type :shape "UpdateType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (params :initarg :params :initform common-lisp:nil
                         :type (common-lisp:or update-params common-lisp:null)
                         :accessor struct-shape-update-params :shape
                         "UpdateParams" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-update-created-at :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (errors :initarg :errors :initform common-lisp:nil
                         :type (common-lisp:or error-details common-lisp:null)
                         :accessor struct-shape-update-errors :shape
                         "ErrorDetails" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'update 'make-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'params))
      (common-lisp:list
       (common-lisp:cons "params"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-access-config-request common-lisp:nil
                       ((authentication-mode :initarg :authentication-mode
                         :initform common-lisp:nil :type
                         (common-lisp:or authentication-mode common-lisp:null)
                         :accessor
                         struct-shape-update-access-config-request-authentication-mode
                         :shape "AuthenticationMode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-access-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-access-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-access-config-request
                    'make-update-access-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-access-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-access-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication-mode))
      (common-lisp:list
       (common-lisp:cons "authenticationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-access-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-access-entry-request common-lisp:nil
                       ((cluster-name :initarg :cluster-name :initform
                         (common-lisp:error ":clustername is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-access-entry-request-cluster-name
                         :shape "String" :location "uri" :location-name "name")
                        (principal-arn :initarg :principal-arn :initform
                         (common-lisp:error ":principalarn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-access-entry-request-principal-arn
                         :shape "String" :location "uri" :location-name
                         "principalArn")
                        (kubernetes-groups :initarg :kubernetes-groups
                         :initform common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-update-access-entry-request-kubernetes-groups
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-access-entry-request-client-request-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (username :initarg :username :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-update-access-entry-request-username
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-access-entry-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-access-entry-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-access-entry-request
                    'make-update-access-entry-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-access-entry-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-access-entry-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kubernetes-groups))
      (common-lisp:list
       (common-lisp:cons "kubernetesGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-access-entry-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-access-entry-response common-lisp:nil
                       ((access-entry :initarg :access-entry :initform
                         common-lisp:nil :type
                         (common-lisp:or access-entry common-lisp:null)
                         :accessor
                         struct-shape-update-access-entry-response-access-entry
                         :shape "AccessEntry" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-access-entry-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-access-entry-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-access-entry-response
                    'make-update-access-entry-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-access-entry-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-access-entry-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-entry))
      (common-lisp:list
       (common-lisp:cons "accessEntry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-access-entry-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-addon-request common-lisp:nil
                       ((cluster-name :initarg :cluster-name :initform
                         (common-lisp:error ":clustername is required") :type
                         (common-lisp:or cluster-name common-lisp:null)
                         :accessor
                         struct-shape-update-addon-request-cluster-name :shape
                         "ClusterName" :location "uri" :location-name "name")
                        (addon-name :initarg :addon-name :initform
                         (common-lisp:error ":addonname is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-addon-request-addon-name :shape
                         "String" :location "uri" :location-name "addonName")
                        (addon-version :initarg :addon-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-addon-request-addon-version :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (service-account-role-arn :initarg
                         :service-account-role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor
                         struct-shape-update-addon-request-service-account-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resolve-conflicts :initarg :resolve-conflicts
                         :initform common-lisp:nil :type
                         (common-lisp:or resolve-conflicts common-lisp:null)
                         :accessor
                         struct-shape-update-addon-request-resolve-conflicts
                         :shape "ResolveConflicts" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-addon-request-client-request-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (configuration-values :initarg :configuration-values
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-addon-request-configuration-values
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-addon-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-addon-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-addon-request 'make-update-addon-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-addon-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-addon-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addon-version))
      (common-lisp:list
       (common-lisp:cons "addonVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-account-role-arn))
      (common-lisp:list
       (common-lisp:cons "serviceAccountRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolve-conflicts))
      (common-lisp:list
       (common-lisp:cons "resolveConflicts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-values))
      (common-lisp:list
       (common-lisp:cons "configurationValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-addon-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-addon-response common-lisp:nil
                       ((update :initarg :update :initform common-lisp:nil
                         :type (common-lisp:or update common-lisp:null)
                         :accessor struct-shape-update-addon-response-update
                         :shape "Update" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-addon-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-addon-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-addon-response 'make-update-addon-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-addon-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-addon-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update))
      (common-lisp:list
       (common-lisp:cons "update"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-addon-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-cluster-config-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-cluster-config-request-name :shape
                         "String" :location "uri" :location-name "name")
                        (resources-vpc-config :initarg :resources-vpc-config
                         :initform common-lisp:nil :type
                         (common-lisp:or vpc-config-request common-lisp:null)
                         :accessor
                         struct-shape-update-cluster-config-request-resources-vpc-config
                         :shape "VpcConfigRequest" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (logging :initarg :logging :initform common-lisp:nil
                         :type (common-lisp:or logging common-lisp:null)
                         :accessor
                         struct-shape-update-cluster-config-request-logging
                         :shape "Logging" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-cluster-config-request-client-request-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (access-config :initarg :access-config :initform
                         common-lisp:nil :type
                         (common-lisp:or update-access-config-request
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-cluster-config-request-access-config
                         :shape "UpdateAccessConfigRequest" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-cluster-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-cluster-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-cluster-config-request
                    'make-update-cluster-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resources-vpc-config))
      (common-lisp:list
       (common-lisp:cons "resourcesVpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging))
      (common-lisp:list
       (common-lisp:cons "logging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-config))
      (common-lisp:list
       (common-lisp:cons "accessConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-cluster-config-response common-lisp:nil
                       ((update :initarg :update :initform common-lisp:nil
                         :type (common-lisp:or update common-lisp:null)
                         :accessor
                         struct-shape-update-cluster-config-response-update
                         :shape "Update" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-cluster-config-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-cluster-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-cluster-config-response
                    'make-update-cluster-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update))
      (common-lisp:list
       (common-lisp:cons "update"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-cluster-version-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-cluster-version-request-name
                         :shape "String" :location "uri" :location-name "name")
                        (version :initarg :version :initform
                         (common-lisp:error ":version is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-cluster-version-request-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-cluster-version-request-client-request-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-cluster-version-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-cluster-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-cluster-version-request
                    'make-update-cluster-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-cluster-version-response common-lisp:nil
                       ((update :initarg :update :initform common-lisp:nil
                         :type (common-lisp:or update common-lisp:null)
                         :accessor
                         struct-shape-update-cluster-version-response-update
                         :shape "Update" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-cluster-version-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-cluster-version-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-cluster-version-response
                    'make-update-cluster-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update))
      (common-lisp:list
       (common-lisp:cons "update"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-eks-anywhere-subscription-request common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-eks-anywhere-subscription-request-id
                         :shape "String" :location "uri" :location-name "id")
                        (auto-renew :initarg :auto-renew :initform
                         (common-lisp:error ":autorenew is required") :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-update-eks-anywhere-subscription-request-auto-renew
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-eks-anywhere-subscription-request-client-request-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-eks-anywhere-subscription-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-eks-anywhere-subscription-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-eks-anywhere-subscription-request
                    'make-update-eks-anywhere-subscription-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-eks-anywhere-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-eks-anywhere-subscription-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-renew))
      (common-lisp:list
       (common-lisp:cons "autoRenew"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-eks-anywhere-subscription-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-eks-anywhere-subscription-response
                       common-lisp:nil
                       ((subscription :initarg :subscription :initform
                         common-lisp:nil :type
                         (common-lisp:or eks-anywhere-subscription
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-eks-anywhere-subscription-response-subscription
                         :shape "EksAnywhereSubscription" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-eks-anywhere-subscription-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-eks-anywhere-subscription-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-eks-anywhere-subscription-response
                    'make-update-eks-anywhere-subscription-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-eks-anywhere-subscription-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-eks-anywhere-subscription-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription))
      (common-lisp:list
       (common-lisp:cons "subscription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-eks-anywhere-subscription-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-labels-payload common-lisp:nil
                       ((add-or-update-labels :initarg :add-or-update-labels
                         :initform common-lisp:nil :type
                         (common-lisp:or |labelsMap| common-lisp:null)
                         :accessor
                         struct-shape-update-labels-payload-add-or-update-labels
                         :shape "labelsMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (remove-labels :initarg :remove-labels :initform
                         common-lisp:nil :type
                         (common-lisp:or |labelsKeyList| common-lisp:null)
                         :accessor
                         struct-shape-update-labels-payload-remove-labels
                         :shape "labelsKeyList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-labels-payload
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-labels-payload
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-labels-payload 'make-update-labels-payload))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-labels-payload))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-labels-payload))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'add-or-update-labels))
      (common-lisp:list
       (common-lisp:cons "addOrUpdateLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remove-labels))
      (common-lisp:list
       (common-lisp:cons "removeLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-labels-payload))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-nodegroup-config-request common-lisp:nil
                       ((cluster-name :initarg :cluster-name :initform
                         (common-lisp:error ":clustername is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-nodegroup-config-request-cluster-name
                         :shape "String" :location "uri" :location-name "name")
                        (nodegroup-name :initarg :nodegroup-name :initform
                         (common-lisp:error ":nodegroupname is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-nodegroup-config-request-nodegroup-name
                         :shape "String" :location "uri" :location-name
                         "nodegroupName")
                        (labels :initarg :labels :initform common-lisp:nil
                         :type
                         (common-lisp:or update-labels-payload
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-nodegroup-config-request-labels
                         :shape "UpdateLabelsPayload" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (taints :initarg :taints :initform common-lisp:nil
                         :type
                         (common-lisp:or update-taints-payload
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-nodegroup-config-request-taints
                         :shape "UpdateTaintsPayload" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scaling-config :initarg :scaling-config :initform
                         common-lisp:nil :type
                         (common-lisp:or nodegroup-scaling-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-nodegroup-config-request-scaling-config
                         :shape "NodegroupScalingConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (update-config :initarg :update-config :initform
                         common-lisp:nil :type
                         (common-lisp:or nodegroup-update-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-nodegroup-config-request-update-config
                         :shape "NodegroupUpdateConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-nodegroup-config-request-client-request-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-nodegroup-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-nodegroup-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-nodegroup-config-request
                    'make-update-nodegroup-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-nodegroup-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-nodegroup-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labels))
      (common-lisp:list
       (common-lisp:cons "labels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'taints))
      (common-lisp:list
       (common-lisp:cons "taints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-config))
      (common-lisp:list
       (common-lisp:cons "scalingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-config))
      (common-lisp:list
       (common-lisp:cons "updateConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-nodegroup-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-nodegroup-config-response common-lisp:nil
                       ((update :initarg :update :initform common-lisp:nil
                         :type (common-lisp:or update common-lisp:null)
                         :accessor
                         struct-shape-update-nodegroup-config-response-update
                         :shape "Update" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-nodegroup-config-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-nodegroup-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-nodegroup-config-response
                    'make-update-nodegroup-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-nodegroup-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-nodegroup-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update))
      (common-lisp:list
       (common-lisp:cons "update"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-nodegroup-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-nodegroup-version-request common-lisp:nil
                       ((cluster-name :initarg :cluster-name :initform
                         (common-lisp:error ":clustername is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-nodegroup-version-request-cluster-name
                         :shape "String" :location "uri" :location-name "name")
                        (nodegroup-name :initarg :nodegroup-name :initform
                         (common-lisp:error ":nodegroupname is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-nodegroup-version-request-nodegroup-name
                         :shape "String" :location "uri" :location-name
                         "nodegroupName")
                        (version :initarg :version :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-update-nodegroup-version-request-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (release-version :initarg :release-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-nodegroup-version-request-release-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (launch-template :initarg :launch-template :initform
                         common-lisp:nil :type
                         (common-lisp:or launch-template-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-nodegroup-version-request-launch-template
                         :shape "LaunchTemplateSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (force :initarg :force :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-update-nodegroup-version-request-force
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-nodegroup-version-request-client-request-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-nodegroup-version-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-nodegroup-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-nodegroup-version-request
                    'make-update-nodegroup-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-nodegroup-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-nodegroup-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'release-version))
      (common-lisp:list
       (common-lisp:cons "releaseVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-template))
      (common-lisp:list
       (common-lisp:cons "launchTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force))
      (common-lisp:list
       (common-lisp:cons "force"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-nodegroup-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-nodegroup-version-response common-lisp:nil
                       ((update :initarg :update :initform common-lisp:nil
                         :type (common-lisp:or update common-lisp:null)
                         :accessor
                         struct-shape-update-nodegroup-version-response-update
                         :shape "Update" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-nodegroup-version-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-nodegroup-version-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-nodegroup-version-response
                    'make-update-nodegroup-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-nodegroup-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-nodegroup-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update))
      (common-lisp:list
       (common-lisp:cons "update"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-nodegroup-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-param common-lisp:nil
                       ((type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or update-param-type common-lisp:null)
                         :accessor struct-shape-update-param-type :shape
                         "UpdateParamType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-param-value :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-param
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-param
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'update-param 'make-update-param))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-param))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-param))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-param))
   common-lisp:nil))
(common-lisp:deftype update-param-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype update-params ()
   '(trivial-types:proper-list update-param))
 (common-lisp:defun make-update-params
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list update-param))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass update-pod-identity-association-request common-lisp:nil
                       ((cluster-name :initarg :cluster-name :initform
                         (common-lisp:error ":clustername is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-pod-identity-association-request-cluster-name
                         :shape "String" :location "uri" :location-name "name")
                        (association-id :initarg :association-id :initform
                         (common-lisp:error ":associationid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-pod-identity-association-request-association-id
                         :shape "String" :location "uri" :location-name
                         "associationId")
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-update-pod-identity-association-request-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-pod-identity-association-request-client-request-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-pod-identity-association-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-pod-identity-association-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-pod-identity-association-request
                    'make-update-pod-identity-association-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-pod-identity-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-pod-identity-association-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-pod-identity-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-pod-identity-association-response common-lisp:nil
                       ((association :initarg :association :initform
                         common-lisp:nil :type
                         (common-lisp:or pod-identity-association
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-pod-identity-association-response-association
                         :shape "PodIdentityAssociation" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-pod-identity-association-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-pod-identity-association-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-pod-identity-association-response
                    'make-update-pod-identity-association-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-pod-identity-association-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-pod-identity-association-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association))
      (common-lisp:list
       (common-lisp:cons "association"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-pod-identity-association-response))
   common-lisp:nil))
(common-lisp:deftype update-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass update-taints-payload common-lisp:nil
                       ((add-or-update-taints :initarg :add-or-update-taints
                         :initform common-lisp:nil :type
                         (common-lisp:or |taintsList| common-lisp:null)
                         :accessor
                         struct-shape-update-taints-payload-add-or-update-taints
                         :shape "taintsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (remove-taints :initarg :remove-taints :initform
                         common-lisp:nil :type
                         (common-lisp:or |taintsList| common-lisp:null)
                         :accessor
                         struct-shape-update-taints-payload-remove-taints
                         :shape "taintsList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-taints-payload
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-taints-payload
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-taints-payload 'make-update-taints-payload))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-taints-payload))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-taints-payload))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'add-or-update-taints))
      (common-lisp:list
       (common-lisp:cons "addOrUpdateTaints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remove-taints))
      (common-lisp:list
       (common-lisp:cons "removeTaints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-taints-payload))
   common-lisp:nil))
(common-lisp:deftype update-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass vpc-config-request common-lisp:nil
                       ((subnet-ids :initarg :subnet-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-vpc-config-request-subnet-ids
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (security-group-ids :initarg :security-group-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-vpc-config-request-security-group-ids
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (endpoint-public-access :initarg
                         :endpoint-public-access :initform common-lisp:nil
                         :type (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-vpc-config-request-endpoint-public-access
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (endpoint-private-access :initarg
                         :endpoint-private-access :initform common-lisp:nil
                         :type (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-vpc-config-request-endpoint-private-access
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (public-access-cidrs :initarg :public-access-cidrs
                         :initform common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-vpc-config-request-public-access-cidrs
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-vpc-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'vpc-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'vpc-config-request 'make-vpc-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "subnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "securityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-public-access))
      (common-lisp:list
       (common-lisp:cons "endpointPublicAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-private-access))
      (common-lisp:list
       (common-lisp:cons "endpointPrivateAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-access-cidrs))
      (common-lisp:list
       (common-lisp:cons "publicAccessCidrs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass vpc-config-response common-lisp:nil
                       ((subnet-ids :initarg :subnet-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-vpc-config-response-subnet-ids
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (security-group-ids :initarg :security-group-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-vpc-config-response-security-group-ids
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster-security-group-id :initarg
                         :cluster-security-group-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-vpc-config-response-cluster-security-group-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-id :initarg :vpc-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-vpc-config-response-vpc-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (endpoint-public-access :initarg
                         :endpoint-public-access :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-vpc-config-response-endpoint-public-access
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (endpoint-private-access :initarg
                         :endpoint-private-access :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-vpc-config-response-endpoint-private-access
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (public-access-cidrs :initarg :public-access-cidrs
                         :initform common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-vpc-config-response-public-access-cidrs
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-vpc-config-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'vpc-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'vpc-config-response 'make-vpc-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "subnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "securityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-security-group-id))
      (common-lisp:list
       (common-lisp:cons "clusterSecurityGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "vpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-public-access))
      (common-lisp:list
       (common-lisp:cons "endpointPublicAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-private-access))
      (common-lisp:list
       (common-lisp:cons "endpointPrivateAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-access-cidrs))
      (common-lisp:list
       (common-lisp:cons "publicAccessCidrs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-config-response))
   common-lisp:nil))
(common-lisp:deftype zero-capacity () 'common-lisp:integer)
(common-lisp:deftype |configStatus| () 'common-lisp:string)
(common-lisp:deftype |labelKey| () 'common-lisp:string)
(common-lisp:deftype |labelValue| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |labelsKeyList| () '(trivial-types:proper-list string))
 (common-lisp:defun make-labelskeylist
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |labelsMap| () 'common-lisp:hash-table)
 (common-lisp:defun make-labelsmap (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype |requiredClaimsKey| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |requiredClaimsMap| () 'common-lisp:hash-table)
 (common-lisp:defun make-requiredclaimsmap
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype |requiredClaimsValue| () 'common-lisp:string)
(common-lisp:deftype |taintKey| () 'common-lisp:string)
(common-lisp:deftype |taintValue| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |taintsList| () '(trivial-types:proper-list taint))
 (common-lisp:defun make-taintslist
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list taint))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defun associate-access-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name principal-arn policy-arn
                     access-scope)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name principal-arn policy-arn access-scope))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-associate-access-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/access-entries/~A/access-policies"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'principal-arn))))
                                                        "AssociateAccessPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'associate-access-policy))
(common-lisp:progn
 (common-lisp:defun associate-encryption-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name encryption-config
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name encryption-config
     client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-encryption-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/encryption-config/associate"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "AssociateEncryptionConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'associate-encryption-config))
(common-lisp:progn
 (common-lisp:defun associate-identity-provider-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name oidc tags
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name oidc tags client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-identity-provider-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/identity-provider-configs/associate"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "AssociateIdentityProviderConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'associate-identity-provider-config))
(common-lisp:progn
 (common-lisp:defun create-access-entry
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name principal-arn
                     kubernetes-groups tags client-request-token username type)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name principal-arn kubernetes-groups tags
     client-request-token username type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-access-entry-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/access-entries"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "CreateAccessEntry"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-access-entry))
(common-lisp:progn
 (common-lisp:defun create-addon
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name addon-name addon-version
                     service-account-role-arn resolve-conflicts
                     client-request-token tags configuration-values)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name addon-name addon-version
     service-account-role-arn resolve-conflicts client-request-token tags
     configuration-values))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-addon-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/addons"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "CreateAddon"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-addon))
(common-lisp:progn
 (common-lisp:defun create-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name version role-arn
                     resources-vpc-config kubernetes-network-config logging
                     client-request-token tags encryption-config outpost-config
                     access-config)
   (common-lisp:declare
    (common-lisp:ignorable name version role-arn resources-vpc-config
     kubernetes-network-config logging client-request-token tags
     encryption-config outpost-config access-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-cluster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/clusters"
                                                        "CreateCluster"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-cluster))
(common-lisp:progn
 (common-lisp:defun create-eks-anywhere-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name term license-quantity license-type
                     auto-renew client-request-token tags)
   (common-lisp:declare
    (common-lisp:ignorable name term license-quantity license-type auto-renew
     client-request-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-eks-anywhere-subscription-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/eks-anywhere-subscriptions"
                                                        "CreateEksAnywhereSubscription"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-eks-anywhere-subscription))
(common-lisp:progn
 (common-lisp:defun create-fargate-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key fargate-profile-name cluster-name
                     pod-execution-role-arn subnets selectors
                     client-request-token tags)
   (common-lisp:declare
    (common-lisp:ignorable fargate-profile-name cluster-name
     pod-execution-role-arn subnets selectors client-request-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-fargate-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/fargate-profiles"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "CreateFargateProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-fargate-profile))
(common-lisp:progn
 (common-lisp:defun create-nodegroup
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name nodegroup-name
                     scaling-config disk-size subnets instance-types ami-type
                     remote-access node-role labels taints tags
                     client-request-token launch-template update-config
                     capacity-type version release-version)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name nodegroup-name scaling-config disk-size
     subnets instance-types ami-type remote-access node-role labels taints tags
     client-request-token launch-template update-config capacity-type version
     release-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-nodegroup-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/node-groups"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "CreateNodegroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-nodegroup))
(common-lisp:progn
 (common-lisp:defun create-pod-identity-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name namespace service-account
                     role-arn client-request-token tags)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name namespace service-account role-arn
     client-request-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-pod-identity-association-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/pod-identity-associations"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "CreatePodIdentityAssociation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-pod-identity-association))
(common-lisp:progn
 (common-lisp:defun delete-access-entry
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name principal-arn)
   (common-lisp:declare (common-lisp:ignorable cluster-name principal-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-access-entry-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/access-entries/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'principal-arn))))
                                                        "DeleteAccessEntry"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-access-entry))
(common-lisp:progn
 (common-lisp:defun delete-addon
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name addon-name preserve)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name addon-name preserve))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-addon-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/addons/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'addon-name))))
                                                        "DeleteAddon"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-addon))
(common-lisp:progn
 (common-lisp:defun delete-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-cluster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DeleteCluster"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-cluster))
(common-lisp:progn
 (common-lisp:defun delete-eks-anywhere-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-eks-anywhere-subscription-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/eks-anywhere-subscriptions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DeleteEksAnywhereSubscription"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-eks-anywhere-subscription))
(common-lisp:progn
 (common-lisp:defun delete-fargate-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name fargate-profile-name)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name fargate-profile-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-fargate-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/fargate-profiles/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'fargate-profile-name))))
                                                        "DeleteFargateProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-fargate-profile))
(common-lisp:progn
 (common-lisp:defun delete-nodegroup
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name nodegroup-name)
   (common-lisp:declare (common-lisp:ignorable cluster-name nodegroup-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-nodegroup-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/node-groups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'nodegroup-name))))
                                                        "DeleteNodegroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-nodegroup))
(common-lisp:progn
 (common-lisp:defun delete-pod-identity-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name association-id)
   (common-lisp:declare (common-lisp:ignorable cluster-name association-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-pod-identity-association-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/pod-identity-associations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'association-id))))
                                                        "DeletePodIdentityAssociation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-pod-identity-association))
(common-lisp:progn
 (common-lisp:defun deregister-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-deregister-cluster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/cluster-registrations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DeregisterCluster"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'deregister-cluster))
(common-lisp:progn
 (common-lisp:defun describe-access-entry
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name principal-arn)
   (common-lisp:declare (common-lisp:ignorable cluster-name principal-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-access-entry-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/access-entries/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'principal-arn))))
                                                        "DescribeAccessEntry"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-access-entry))
(common-lisp:progn
 (common-lisp:defun describe-addon
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name addon-name)
   (common-lisp:declare (common-lisp:ignorable cluster-name addon-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-addon-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/addons/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'addon-name))))
                                                        "DescribeAddon"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-addon))
(common-lisp:progn
 (common-lisp:defun describe-addon-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key addon-name addon-version)
   (common-lisp:declare (common-lisp:ignorable addon-name addon-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-addon-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/addons/configuration-schemas"
                                                        "DescribeAddonConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-addon-configuration))
(common-lisp:progn
 (common-lisp:defun describe-addon-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key kubernetes-version max-results next-token
                     addon-name types publishers owners)
   (common-lisp:declare
    (common-lisp:ignorable kubernetes-version max-results next-token addon-name
     types publishers owners))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-addon-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/addons/supported-versions"
                                                        "DescribeAddonVersions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-addon-versions))
(common-lisp:progn
 (common-lisp:defun describe-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-cluster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DescribeCluster"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-cluster))
(common-lisp:progn
 (common-lisp:defun describe-eks-anywhere-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-eks-anywhere-subscription-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/eks-anywhere-subscriptions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DescribeEksAnywhereSubscription"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-eks-anywhere-subscription))
(common-lisp:progn
 (common-lisp:defun describe-fargate-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name fargate-profile-name)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name fargate-profile-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-fargate-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/fargate-profiles/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'fargate-profile-name))))
                                                        "DescribeFargateProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-fargate-profile))
(common-lisp:progn
 (common-lisp:defun describe-identity-provider-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name identity-provider-config)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name identity-provider-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-identity-provider-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/identity-provider-configs/describe"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DescribeIdentityProviderConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-identity-provider-config))
(common-lisp:progn
 (common-lisp:defun describe-insight
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name id)
   (common-lisp:declare (common-lisp:ignorable cluster-name id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-insight-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/insights/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DescribeInsight"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-insight))
(common-lisp:progn
 (common-lisp:defun describe-nodegroup
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name nodegroup-name)
   (common-lisp:declare (common-lisp:ignorable cluster-name nodegroup-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-nodegroup-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/node-groups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'nodegroup-name))))
                                                        "DescribeNodegroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-nodegroup))
(common-lisp:progn
 (common-lisp:defun describe-pod-identity-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name association-id)
   (common-lisp:declare (common-lisp:ignorable cluster-name association-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-pod-identity-association-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/pod-identity-associations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'association-id))))
                                                        "DescribePodIdentityAssociation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-pod-identity-association))
(common-lisp:progn
 (common-lisp:defun describe-update
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name update-id nodegroup-name addon-name)
   (common-lisp:declare
    (common-lisp:ignorable name update-id nodegroup-name addon-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-update-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/updates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'update-id))))
                                                        "DescribeUpdate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-update))
(common-lisp:progn
 (common-lisp:defun disassociate-access-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name principal-arn policy-arn)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name principal-arn policy-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-access-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/access-entries/~A/access-policies/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'principal-arn))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-arn))))
                                                        "DisassociateAccessPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disassociate-access-policy))
(common-lisp:progn
 (common-lisp:defun disassociate-identity-provider-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name identity-provider-config
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name identity-provider-config
     client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-identity-provider-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/identity-provider-configs/disassociate"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DisassociateIdentityProviderConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disassociate-identity-provider-config))
(common-lisp:progn
 (common-lisp:defun list-access-entries
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name associated-policy-arn
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name associated-policy-arn max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-access-entries-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/access-entries"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "ListAccessEntries"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-access-entries))
(common-lisp:progn
 (common-lisp:defun list-access-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-access-policies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/access-policies"
                                                        "ListAccessPolicies"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-access-policies))
(common-lisp:progn
 (common-lisp:defun list-addons
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-addons-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/addons"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "ListAddons"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-addons))
(common-lisp:progn
 (common-lisp:defun list-associated-access-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name principal-arn max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name principal-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-associated-access-policies-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/access-entries/~A/access-policies"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'principal-arn))))
                                                        "ListAssociatedAccessPolicies"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-associated-access-policies))
(common-lisp:progn
 (common-lisp:defun list-clusters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token include)
   (common-lisp:declare (common-lisp:ignorable max-results next-token include))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-clusters-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/clusters"
                                                        "ListClusters"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-clusters))
(common-lisp:progn
 (common-lisp:defun list-eks-anywhere-subscriptions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token include-status)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token include-status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-eks-anywhere-subscriptions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/eks-anywhere-subscriptions"
                                                        "ListEksAnywhereSubscriptions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-eks-anywhere-subscriptions))
(common-lisp:progn
 (common-lisp:defun list-fargate-profiles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-fargate-profiles-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/fargate-profiles"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "ListFargateProfiles"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-fargate-profiles))
(common-lisp:progn
 (common-lisp:defun list-identity-provider-configs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-identity-provider-configs-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/identity-provider-configs"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "ListIdentityProviderConfigs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-identity-provider-configs))
(common-lisp:progn
 (common-lisp:defun list-insights
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name filter max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name filter max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-insights-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/insights"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "ListInsights"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-insights))
(common-lisp:progn
 (common-lisp:defun list-nodegroups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-nodegroups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/node-groups"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "ListNodegroups"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-nodegroups))
(common-lisp:progn
 (common-lisp:defun list-pod-identity-associations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name namespace service-account
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name namespace service-account max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-pod-identity-associations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/pod-identity-associations"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "ListPodIdentityAssociations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-pod-identity-associations))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-updates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name nodegroup-name addon-name next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable name nodegroup-name addon-name next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-updates-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/updates"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "ListUpdates"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-updates))
(common-lisp:progn
 (common-lisp:defun register-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name connector-config
                     client-request-token tags)
   (common-lisp:declare
    (common-lisp:ignorable name connector-config client-request-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-cluster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/cluster-registrations"
                                                        "RegisterCluster"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'register-cluster))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-access-entry
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name principal-arn
                     kubernetes-groups client-request-token username)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name principal-arn kubernetes-groups
     client-request-token username))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-access-entry-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/access-entries/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'principal-arn))))
                                                        "UpdateAccessEntry"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-access-entry))
(common-lisp:progn
 (common-lisp:defun update-addon
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name addon-name addon-version
                     service-account-role-arn resolve-conflicts
                     client-request-token configuration-values)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name addon-name addon-version
     service-account-role-arn resolve-conflicts client-request-token
     configuration-values))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-addon-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/addons/~A/update"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'addon-name))))
                                                        "UpdateAddon"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-addon))
(common-lisp:progn
 (common-lisp:defun update-cluster-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name resources-vpc-config logging
                     client-request-token access-config)
   (common-lisp:declare
    (common-lisp:ignorable name resources-vpc-config logging
     client-request-token access-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-cluster-config-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/update-config"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "UpdateClusterConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-cluster-config))
(common-lisp:progn
 (common-lisp:defun update-cluster-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name version client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable name version client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-cluster-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/updates"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "UpdateClusterVersion"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-cluster-version))
(common-lisp:progn
 (common-lisp:defun update-eks-anywhere-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id auto-renew client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable id auto-renew client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-eks-anywhere-subscription-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/eks-anywhere-subscriptions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "UpdateEksAnywhereSubscription"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-eks-anywhere-subscription))
(common-lisp:progn
 (common-lisp:defun update-nodegroup-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name nodegroup-name labels taints
                     scaling-config update-config client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name nodegroup-name labels taints
     scaling-config update-config client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-nodegroup-config-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/node-groups/~A/update-config"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'nodegroup-name))))
                                                        "UpdateNodegroupConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-nodegroup-config))
(common-lisp:progn
 (common-lisp:defun update-nodegroup-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name nodegroup-name version
                     release-version launch-template force
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name nodegroup-name version release-version
     launch-template force client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-nodegroup-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/node-groups/~A/update-version"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'nodegroup-name))))
                                                        "UpdateNodegroupVersion"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-nodegroup-version))
(common-lisp:progn
 (common-lisp:defun update-pod-identity-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name association-id role-arn
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name association-id role-arn
     client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-pod-identity-association-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/pod-identity-associations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'association-id))))
                                                        "UpdatePodIdentityAssociation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-pod-identity-association))
