;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/cleanrooms/api
  (:use)
  (:nicknames #:aws/cleanrooms)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/cleanrooms/api)
(common-lisp:progn
 (common-lisp:define-condition cleanrooms-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'cleanrooms-error))
(common-lisp:progn
 (common-lisp:defclass cleanrooms-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "cleanrooms" :api-version
                        "2022-02-17" :host-prefix "cleanrooms" :signing-name
                        "cleanrooms" :global-host common-lisp:nil))
 (common-lisp:export 'cleanrooms-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (cleanrooms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       access-denied-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message
                    'access-denied-exception-reason)))
(common-lisp:deftype access-denied-exception-reason () 'common-lisp:string)
(common-lisp:deftype account-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass aggregate-column common-lisp:nil
                       ((column-names :initarg :column-names :initform
                         (common-lisp:error ":columnnames is required") :type
                         (common-lisp:or aggregate-column-column-names-list
                                         common-lisp:null)
                         :accessor struct-shape-aggregate-column-column-names
                         :shape "AggregateColumnColumnNamesList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (function :initarg :function :initform
                         (common-lisp:error ":function is required") :type
                         (common-lisp:or aggregate-function-name
                                         common-lisp:null)
                         :accessor struct-shape-aggregate-column-function
                         :shape "AggregateFunctionName" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-aggregate-column
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'aggregate-column
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'aggregate-column 'make-aggregate-column))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aggregate-column))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aggregate-column))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-names))
      (common-lisp:list
       (common-lisp:cons "columnNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function))
      (common-lisp:list
       (common-lisp:cons "function"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aggregate-column))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aggregate-column-column-names-list ()
   '(trivial-types:proper-list analysis-rule-column-name))
 (common-lisp:defun make-aggregate-column-column-names-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            analysis-rule-column-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype aggregate-function-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass aggregation-constraint common-lisp:nil
                       ((column-name :initarg :column-name :initform
                         (common-lisp:error ":columnname is required") :type
                         (common-lisp:or analysis-rule-column-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-aggregation-constraint-column-name :shape
                         "AnalysisRuleColumnName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (minimum :initarg :minimum :initform
                         (common-lisp:error ":minimum is required") :type
                         (common-lisp:or aggregation-constraint-minimum-integer
                                         common-lisp:null)
                         :accessor struct-shape-aggregation-constraint-minimum
                         :shape "AggregationConstraintMinimumInteger" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or aggregation-type common-lisp:null)
                         :accessor struct-shape-aggregation-constraint-type
                         :shape "AggregationType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-aggregation-constraint
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'aggregation-constraint
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'aggregation-constraint 'make-aggregation-constraint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aggregation-constraint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aggregation-constraint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-name))
      (common-lisp:list
       (common-lisp:cons "columnName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimum))
      (common-lisp:list
       (common-lisp:cons "minimum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aggregation-constraint))
   common-lisp:nil))
(common-lisp:deftype aggregation-constraint-minimum-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype aggregation-constraints ()
   '(trivial-types:proper-list aggregation-constraint))
 (common-lisp:defun make-aggregation-constraints
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list aggregation-constraint))
   aws-sdk/generator/shape::members))
(common-lisp:deftype aggregation-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype allowed-column-list ()
   '(trivial-types:proper-list column-name))
 (common-lisp:defun make-allowed-column-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype analysis-format () 'common-lisp:string)
(common-lisp:deftype analysis-method () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass analysis-parameter common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or parameter-name common-lisp:null)
                         :accessor struct-shape-analysis-parameter-name :shape
                         "ParameterName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or parameter-type common-lisp:null)
                         :accessor struct-shape-analysis-parameter-type :shape
                         "ParameterType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-value :initarg :default-value :initform
                         common-lisp:nil :type
                         (common-lisp:or parameter-value common-lisp:null)
                         :accessor
                         struct-shape-analysis-parameter-default-value :shape
                         "ParameterValue" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-analysis-parameter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'analysis-parameter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'analysis-parameter 'make-analysis-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input analysis-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input analysis-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "defaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input analysis-parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype analysis-parameter-list ()
   '(trivial-types:proper-list analysis-parameter))
 (common-lisp:defun make-analysis-parameter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list analysis-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass analysis-rule common-lisp:nil
                       ((collaboration-id :initarg :collaboration-id :initform
                         (common-lisp:error ":collaborationid is required")
                         :type
                         (common-lisp:or collaboration-identifier
                                         common-lisp:null)
                         :accessor struct-shape-analysis-rule-collaboration-id
                         :shape "CollaborationIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or analysis-rule-type common-lisp:null)
                         :accessor struct-shape-analysis-rule-type :shape
                         "AnalysisRuleType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or table-alias common-lisp:null)
                         :accessor struct-shape-analysis-rule-name :shape
                         "TableAlias" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (create-time :initarg :create-time :initform
                         (common-lisp:error ":createtime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-analysis-rule-create-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (update-time :initarg :update-time :initform
                         (common-lisp:error ":updatetime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-analysis-rule-update-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (policy :initarg :policy :initform
                         (common-lisp:error ":policy is required") :type
                         (common-lisp:or analysis-rule-policy common-lisp:null)
                         :accessor struct-shape-analysis-rule-policy :shape
                         "AnalysisRulePolicy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-analysis-rule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'analysis-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'analysis-rule 'make-analysis-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input analysis-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input analysis-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-id))
      (common-lisp:list
       (common-lisp:cons "collaborationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input analysis-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass analysis-rule-aggregation common-lisp:nil
                       ((aggregate-columns :initarg :aggregate-columns
                         :initform
                         (common-lisp:error ":aggregatecolumns is required")
                         :type
                         (common-lisp:or
                          analysis-rule-aggregation-aggregate-columns-list
                          common-lisp:null)
                         :accessor
                         struct-shape-analysis-rule-aggregation-aggregate-columns
                         :shape "AnalysisRuleAggregationAggregateColumnsList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (join-columns :initarg :join-columns :initform
                         (common-lisp:error ":joincolumns is required") :type
                         (common-lisp:or analysis-rule-column-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-analysis-rule-aggregation-join-columns
                         :shape "AnalysisRuleColumnList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (join-required :initarg :join-required :initform
                         common-lisp:nil :type
                         (common-lisp:or join-required-option common-lisp:null)
                         :accessor
                         struct-shape-analysis-rule-aggregation-join-required
                         :shape "JoinRequiredOption" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allowed-join-operators :initarg
                         :allowed-join-operators :initform common-lisp:nil
                         :type
                         (common-lisp:or join-operators-list common-lisp:null)
                         :accessor
                         struct-shape-analysis-rule-aggregation-allowed-join-operators
                         :shape "JoinOperatorsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dimension-columns :initarg :dimension-columns
                         :initform
                         (common-lisp:error ":dimensioncolumns is required")
                         :type
                         (common-lisp:or analysis-rule-column-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-analysis-rule-aggregation-dimension-columns
                         :shape "AnalysisRuleColumnList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (scalar-functions :initarg :scalar-functions :initform
                         (common-lisp:error ":scalarfunctions is required")
                         :type
                         (common-lisp:or scalar-functions-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-analysis-rule-aggregation-scalar-functions
                         :shape "ScalarFunctionsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-constraints :initarg :output-constraints
                         :initform
                         (common-lisp:error ":outputconstraints is required")
                         :type
                         (common-lisp:or aggregation-constraints
                                         common-lisp:null)
                         :accessor
                         struct-shape-analysis-rule-aggregation-output-constraints
                         :shape "AggregationConstraints" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-analysis-rule-aggregation
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'analysis-rule-aggregation
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'analysis-rule-aggregation
                    'make-analysis-rule-aggregation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analysis-rule-aggregation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analysis-rule-aggregation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregate-columns))
      (common-lisp:list
       (common-lisp:cons "aggregateColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'join-columns))
      (common-lisp:list
       (common-lisp:cons "joinColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'join-required))
      (common-lisp:list
       (common-lisp:cons "joinRequired"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allowed-join-operators))
      (common-lisp:list
       (common-lisp:cons "allowedJoinOperators"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimension-columns))
      (common-lisp:list
       (common-lisp:cons "dimensionColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scalar-functions))
      (common-lisp:list
       (common-lisp:cons "scalarFunctions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-constraints))
      (common-lisp:list
       (common-lisp:cons "outputConstraints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analysis-rule-aggregation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype analysis-rule-aggregation-aggregate-columns-list ()
   '(trivial-types:proper-list aggregate-column))
 (common-lisp:defun make-analysis-rule-aggregation-aggregate-columns-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list aggregate-column))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype analysis-rule-column-list ()
   '(trivial-types:proper-list analysis-rule-column-name))
 (common-lisp:defun make-analysis-rule-column-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            analysis-rule-column-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype analysis-rule-column-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass analysis-rule-custom common-lisp:nil
                       ((allowed-analyses :initarg :allowed-analyses :initform
                         (common-lisp:error ":allowedanalyses is required")
                         :type
                         (common-lisp:or
                          analysis-rule-custom-allowed-analyses-list
                          common-lisp:null)
                         :accessor
                         struct-shape-analysis-rule-custom-allowed-analyses
                         :shape "AnalysisRuleCustomAllowedAnalysesList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (allowed-analysis-providers :initarg
                         :allowed-analysis-providers :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          analysis-rule-custom-allowed-analysis-providers-list
                          common-lisp:null)
                         :accessor
                         struct-shape-analysis-rule-custom-allowed-analysis-providers
                         :shape
                         "AnalysisRuleCustomAllowedAnalysisProvidersList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (differential-privacy :initarg :differential-privacy
                         :initform common-lisp:nil :type
                         (common-lisp:or differential-privacy-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-analysis-rule-custom-differential-privacy
                         :shape "DifferentialPrivacyConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-analysis-rule-custom
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'analysis-rule-custom
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'analysis-rule-custom 'make-analysis-rule-custom))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input analysis-rule-custom))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input analysis-rule-custom))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-analyses))
      (common-lisp:list
       (common-lisp:cons "allowedAnalyses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allowed-analysis-providers))
      (common-lisp:list
       (common-lisp:cons "allowedAnalysisProviders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'differential-privacy))
      (common-lisp:list
       (common-lisp:cons "differentialPrivacy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input analysis-rule-custom))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype analysis-rule-custom-allowed-analyses-list ()
   '(trivial-types:proper-list analysis-template-arn-or-query-wildcard))
 (common-lisp:defun make-analysis-rule-custom-allowed-analyses-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            analysis-template-arn-or-query-wildcard))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype analysis-rule-custom-allowed-analysis-providers-list ()
   '(trivial-types:proper-list account-id))
 (common-lisp:defun make-analysis-rule-custom-allowed-analysis-providers-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list account-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass analysis-rule-list common-lisp:nil
                       ((join-columns :initarg :join-columns :initform
                         (common-lisp:error ":joincolumns is required") :type
                         (common-lisp:or analysis-rule-list-join-columns-list
                                         common-lisp:null)
                         :accessor struct-shape-analysis-rule-list-join-columns
                         :shape "AnalysisRuleListJoinColumnsList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (allowed-join-operators :initarg
                         :allowed-join-operators :initform common-lisp:nil
                         :type
                         (common-lisp:or join-operators-list common-lisp:null)
                         :accessor
                         struct-shape-analysis-rule-list-allowed-join-operators
                         :shape "JoinOperatorsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (list-columns :initarg :list-columns :initform
                         (common-lisp:error ":listcolumns is required") :type
                         (common-lisp:or analysis-rule-column-list
                                         common-lisp:null)
                         :accessor struct-shape-analysis-rule-list-list-columns
                         :shape "AnalysisRuleColumnList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-analysis-rule-list
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'analysis-rule-list
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'analysis-rule-list 'make-analysis-rule-list))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input analysis-rule-list))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input analysis-rule-list))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'join-columns))
      (common-lisp:list
       (common-lisp:cons "joinColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allowed-join-operators))
      (common-lisp:list
       (common-lisp:cons "allowedJoinOperators"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list-columns))
      (common-lisp:list
       (common-lisp:cons "listColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input analysis-rule-list))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype analysis-rule-list-join-columns-list ()
   '(trivial-types:proper-list analysis-rule-column-name))
 (common-lisp:defun make-analysis-rule-list-join-columns-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            analysis-rule-column-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass analysis-rule-policy common-lisp:nil
                       ((v1 :initarg :v1 :initform common-lisp:nil :type
                         (common-lisp:or analysis-rule-policy-v1
                                         common-lisp:null)
                         :accessor struct-shape-analysis-rule-policy-v1 :shape
                         "AnalysisRulePolicyV1" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-analysis-rule-policy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'analysis-rule-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'analysis-rule-policy 'make-analysis-rule-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input analysis-rule-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input analysis-rule-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'v1))
      (common-lisp:list
       (common-lisp:cons "v1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input analysis-rule-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass analysis-rule-policy-v1 common-lisp:nil
                       ((list :initarg :list :initform common-lisp:nil :type
                         (common-lisp:or analysis-rule-list common-lisp:null)
                         :accessor struct-shape-analysis-rule-policy-v1-list
                         :shape "AnalysisRuleList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aggregation :initarg :aggregation :initform
                         common-lisp:nil :type
                         (common-lisp:or analysis-rule-aggregation
                                         common-lisp:null)
                         :accessor
                         struct-shape-analysis-rule-policy-v1-aggregation
                         :shape "AnalysisRuleAggregation" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (custom :initarg :custom :initform common-lisp:nil
                         :type
                         (common-lisp:or analysis-rule-custom common-lisp:null)
                         :accessor struct-shape-analysis-rule-policy-v1-custom
                         :shape "AnalysisRuleCustom" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-analysis-rule-policy-v1
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'analysis-rule-policy-v1
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'analysis-rule-policy-v1 'make-analysis-rule-policy-v1))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analysis-rule-policy-v1))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analysis-rule-policy-v1))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list))
      (common-lisp:list
       (common-lisp:cons "list"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregation))
      (common-lisp:list
       (common-lisp:cons "aggregation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom))
      (common-lisp:list
       (common-lisp:cons "custom"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analysis-rule-policy-v1))
   common-lisp:nil))
(common-lisp:deftype analysis-rule-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype analysis-rule-type-list ()
   '(trivial-types:proper-list analysis-rule-type))
 (common-lisp:defun make-analysis-rule-type-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list analysis-rule-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass analysis-schema common-lisp:nil
                       ((referenced-tables :initarg :referenced-tables
                         :initform common-lisp:nil :type
                         (common-lisp:or query-tables common-lisp:null)
                         :accessor
                         struct-shape-analysis-schema-referenced-tables :shape
                         "QueryTables" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-analysis-schema
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'analysis-schema
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'analysis-schema 'make-analysis-schema))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input analysis-schema))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input analysis-schema))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'referenced-tables))
      (common-lisp:list
       (common-lisp:cons "referencedTables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input analysis-schema))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass analysis-source common-lisp:nil
                       ((text :initarg :text :initform common-lisp:nil :type
                         (common-lisp:or analysis-template-text
                                         common-lisp:null)
                         :accessor struct-shape-analysis-source-text :shape
                         "AnalysisTemplateText" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-analysis-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'analysis-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'analysis-source 'make-analysis-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input analysis-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input analysis-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input analysis-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass analysis-template common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or analysis-template-identifier
                                         common-lisp:null)
                         :accessor struct-shape-analysis-template-id :shape
                         "AnalysisTemplateIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or analysis-template-arn
                                         common-lisp:null)
                         :accessor struct-shape-analysis-template-arn :shape
                         "AnalysisTemplateArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (collaboration-id :initarg :collaboration-id :initform
                         (common-lisp:error ":collaborationid is required")
                         :type (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-analysis-template-collaboration-id :shape
                         "UUID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (collaboration-arn :initarg :collaboration-arn
                         :initform
                         (common-lisp:error ":collaborationarn is required")
                         :type
                         (common-lisp:or collaboration-arn common-lisp:null)
                         :accessor
                         struct-shape-analysis-template-collaboration-arn
                         :shape "CollaborationArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (membership-id :initarg :membership-id :initform
                         (common-lisp:error ":membershipid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-analysis-template-membership-id :shape
                         "UUID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (membership-arn :initarg :membership-arn :initform
                         (common-lisp:error ":membershiparn is required") :type
                         (common-lisp:or membership-arn common-lisp:null)
                         :accessor
                         struct-shape-analysis-template-membership-arn :shape
                         "MembershipArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-description common-lisp:null)
                         :accessor struct-shape-analysis-template-description
                         :shape "ResourceDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or resource-alias common-lisp:null)
                         :accessor struct-shape-analysis-template-name :shape
                         "ResourceAlias" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (create-time :initarg :create-time :initform
                         (common-lisp:error ":createtime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-analysis-template-create-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (update-time :initarg :update-time :initform
                         (common-lisp:error ":updatetime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-analysis-template-update-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (schema :initarg :schema :initform
                         (common-lisp:error ":schema is required") :type
                         (common-lisp:or analysis-schema common-lisp:null)
                         :accessor struct-shape-analysis-template-schema :shape
                         "AnalysisSchema" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (format :initarg :format :initform
                         (common-lisp:error ":format is required") :type
                         (common-lisp:or analysis-format common-lisp:null)
                         :accessor struct-shape-analysis-template-format :shape
                         "AnalysisFormat" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source :initarg :source :initform
                         (common-lisp:error ":source is required") :type
                         (common-lisp:or analysis-source common-lisp:null)
                         :accessor struct-shape-analysis-template-source :shape
                         "AnalysisSource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (analysis-parameters :initarg :analysis-parameters
                         :initform common-lisp:nil :type
                         (common-lisp:or analysis-parameter-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-analysis-template-analysis-parameters
                         :shape "AnalysisParameterList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-analysis-template
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'analysis-template
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'analysis-template 'make-analysis-template))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input analysis-template))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input analysis-template))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-id))
      (common-lisp:list
       (common-lisp:cons "collaborationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-arn))
      (common-lisp:list
       (common-lisp:cons "collaborationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-id))
      (common-lisp:list
       (common-lisp:cons "membershipId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-arn))
      (common-lisp:list
       (common-lisp:cons "membershipArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema))
      (common-lisp:list
       (common-lisp:cons "schema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-parameters))
      (common-lisp:list
       (common-lisp:cons "analysisParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input analysis-template))
   common-lisp:nil))
(common-lisp:deftype analysis-template-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype analysis-template-arn-list ()
   '(trivial-types:proper-list analysis-template-arn))
 (common-lisp:defun make-analysis-template-arn-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list analysis-template-arn))
   aws-sdk/generator/shape::members))
(common-lisp:deftype analysis-template-arn-or-query-wildcard ()
  'common-lisp:string)
(common-lisp:deftype analysis-template-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass analysis-template-summary common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or analysis-template-arn
                                         common-lisp:null)
                         :accessor struct-shape-analysis-template-summary-arn
                         :shape "AnalysisTemplateArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (create-time :initarg :create-time :initform
                         (common-lisp:error ":createtime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-analysis-template-summary-create-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or analysis-template-identifier
                                         common-lisp:null)
                         :accessor struct-shape-analysis-template-summary-id
                         :shape "AnalysisTemplateIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or resource-alias common-lisp:null)
                         :accessor struct-shape-analysis-template-summary-name
                         :shape "ResourceAlias" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (update-time :initarg :update-time :initform
                         (common-lisp:error ":updatetime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-analysis-template-summary-update-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (membership-arn :initarg :membership-arn :initform
                         (common-lisp:error ":membershiparn is required") :type
                         (common-lisp:or membership-arn common-lisp:null)
                         :accessor
                         struct-shape-analysis-template-summary-membership-arn
                         :shape "MembershipArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (membership-id :initarg :membership-id :initform
                         (common-lisp:error ":membershipid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-analysis-template-summary-membership-id
                         :shape "UUID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (collaboration-arn :initarg :collaboration-arn
                         :initform
                         (common-lisp:error ":collaborationarn is required")
                         :type
                         (common-lisp:or collaboration-arn common-lisp:null)
                         :accessor
                         struct-shape-analysis-template-summary-collaboration-arn
                         :shape "CollaborationArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (collaboration-id :initarg :collaboration-id :initform
                         (common-lisp:error ":collaborationid is required")
                         :type (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-analysis-template-summary-collaboration-id
                         :shape "UUID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-description common-lisp:null)
                         :accessor
                         struct-shape-analysis-template-summary-description
                         :shape "ResourceDescription" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-analysis-template-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'analysis-template-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'analysis-template-summary
                    'make-analysis-template-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analysis-template-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analysis-template-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-arn))
      (common-lisp:list
       (common-lisp:cons "membershipArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-id))
      (common-lisp:list
       (common-lisp:cons "membershipId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-arn))
      (common-lisp:list
       (common-lisp:cons "collaborationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-id))
      (common-lisp:list
       (common-lisp:cons "collaborationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analysis-template-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype analysis-template-summary-list ()
   '(trivial-types:proper-list analysis-template-summary))
 (common-lisp:defun make-analysis-template-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            analysis-template-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype analysis-template-text () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass batch-get-collaboration-analysis-template-error
                       common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or analysis-template-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-get-collaboration-analysis-template-error-arn
                         :shape "AnalysisTemplateArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (code :initarg :code :initform
                         (common-lisp:error ":code is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-batch-get-collaboration-analysis-template-error-code
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform
                         (common-lisp:error ":message is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-batch-get-collaboration-analysis-template-error-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-collaboration-analysis-template-error
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-collaboration-analysis-template-error
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-collaboration-analysis-template-error
                    'make-batch-get-collaboration-analysis-template-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-collaboration-analysis-template-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-collaboration-analysis-template-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-collaboration-analysis-template-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-get-collaboration-analysis-template-error-list ()
   '(trivial-types:proper-list
     batch-get-collaboration-analysis-template-error))
 (common-lisp:defun make-batch-get-collaboration-analysis-template-error-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-get-collaboration-analysis-template-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-get-collaboration-analysis-template-input
                       common-lisp:nil
                       ((collaboration-identifier :initarg
                         :collaboration-identifier :initform
                         (common-lisp:error
                          ":collaborationidentifier is required")
                         :type
                         (common-lisp:or collaboration-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-get-collaboration-analysis-template-input-collaboration-identifier
                         :shape "CollaborationIdentifier" :location "uri"
                         :location-name "collaborationIdentifier")
                        (analysis-template-arns :initarg
                         :analysis-template-arns :initform
                         (common-lisp:error
                          ":analysistemplatearns is required")
                         :type
                         (common-lisp:or analysis-template-arn-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-get-collaboration-analysis-template-input-analysis-template-arns
                         :shape "AnalysisTemplateArnList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-collaboration-analysis-template-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-collaboration-analysis-template-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-collaboration-analysis-template-input
                    'make-batch-get-collaboration-analysis-template-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-collaboration-analysis-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-collaboration-analysis-template-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'analysis-template-arns))
      (common-lisp:list
       (common-lisp:cons "analysisTemplateArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-collaboration-analysis-template-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-collaboration-analysis-template-output
                       common-lisp:nil
                       ((collaboration-analysis-templates :initarg
                         :collaboration-analysis-templates :initform
                         (common-lisp:error
                          ":collaborationanalysistemplates is required")
                         :type
                         (common-lisp:or collaboration-analysis-template-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-get-collaboration-analysis-template-output-collaboration-analysis-templates
                         :shape "CollaborationAnalysisTemplateList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (errors :initarg :errors :initform
                         (common-lisp:error ":errors is required") :type
                         (common-lisp:or
                          batch-get-collaboration-analysis-template-error-list
                          common-lisp:null)
                         :accessor
                         struct-shape-batch-get-collaboration-analysis-template-output-errors
                         :shape
                         "BatchGetCollaborationAnalysisTemplateErrorList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-collaboration-analysis-template-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-collaboration-analysis-template-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-collaboration-analysis-template-output
                    'make-batch-get-collaboration-analysis-template-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-collaboration-analysis-template-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-collaboration-analysis-template-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'collaboration-analysis-templates))
      (common-lisp:list
       (common-lisp:cons "collaborationAnalysisTemplates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-collaboration-analysis-template-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-schema-error common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or table-alias common-lisp:null)
                         :accessor struct-shape-batch-get-schema-error-name
                         :shape "TableAlias" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (code :initarg :code :initform
                         (common-lisp:error ":code is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-batch-get-schema-error-code :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message :initarg :message :initform
                         (common-lisp:error ":message is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-batch-get-schema-error-message :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-schema-error
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-get-schema-error
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-schema-error 'make-batch-get-schema-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-schema-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-schema-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-schema-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-get-schema-error-list ()
   '(trivial-types:proper-list batch-get-schema-error))
 (common-lisp:defun make-batch-get-schema-error-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list batch-get-schema-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-get-schema-input common-lisp:nil
                       ((collaboration-identifier :initarg
                         :collaboration-identifier :initform
                         (common-lisp:error
                          ":collaborationidentifier is required")
                         :type
                         (common-lisp:or collaboration-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-get-schema-input-collaboration-identifier
                         :shape "CollaborationIdentifier" :location "uri"
                         :location-name "collaborationIdentifier")
                        (names :initarg :names :initform
                         (common-lisp:error ":names is required") :type
                         (common-lisp:or table-alias-list common-lisp:null)
                         :accessor struct-shape-batch-get-schema-input-names
                         :shape "TableAliasList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-schema-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-get-schema-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-schema-input 'make-batch-get-schema-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-schema-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-schema-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'names))
      (common-lisp:list
       (common-lisp:cons "names"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-schema-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-schema-output common-lisp:nil
                       ((schemas :initarg :schemas :initform
                         (common-lisp:error ":schemas is required") :type
                         (common-lisp:or schema-list common-lisp:null)
                         :accessor struct-shape-batch-get-schema-output-schemas
                         :shape "SchemaList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (errors :initarg :errors :initform
                         (common-lisp:error ":errors is required") :type
                         (common-lisp:or batch-get-schema-error-list
                                         common-lisp:null)
                         :accessor struct-shape-batch-get-schema-output-errors
                         :shape "BatchGetSchemaErrorList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-schema-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-get-schema-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-schema-output 'make-batch-get-schema-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-schema-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-schema-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schemas))
      (common-lisp:list
       (common-lisp:cons "schemas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-schema-output))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype cleanrooms-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass collaboration common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-collaboration-id :shape "UUID" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or collaboration-arn common-lisp:null)
                         :accessor struct-shape-collaboration-arn :shape
                         "CollaborationArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or collaboration-name common-lisp:null)
                         :accessor struct-shape-collaboration-name :shape
                         "CollaborationName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or collaboration-description
                                         common-lisp:null)
                         :accessor struct-shape-collaboration-description
                         :shape "CollaborationDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (creator-account-id :initarg :creator-account-id
                         :initform
                         (common-lisp:error ":creatoraccountid is required")
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         struct-shape-collaboration-creator-account-id :shape
                         "AccountId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creator-display-name :initarg :creator-display-name
                         :initform
                         (common-lisp:error ":creatordisplayname is required")
                         :type (common-lisp:or display-name common-lisp:null)
                         :accessor
                         struct-shape-collaboration-creator-display-name :shape
                         "DisplayName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (create-time :initarg :create-time :initform
                         (common-lisp:error ":createtime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-collaboration-create-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (update-time :initarg :update-time :initform
                         (common-lisp:error ":updatetime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-collaboration-update-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (member-status :initarg :member-status :initform
                         (common-lisp:error ":memberstatus is required") :type
                         (common-lisp:or member-status common-lisp:null)
                         :accessor struct-shape-collaboration-member-status
                         :shape "MemberStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (membership-id :initarg :membership-id :initform
                         common-lisp:nil :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-collaboration-membership-id :shape "UUID"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (membership-arn :initarg :membership-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or membership-arn common-lisp:null)
                         :accessor struct-shape-collaboration-membership-arn
                         :shape "MembershipArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-encryption-metadata :initarg
                         :data-encryption-metadata :initform common-lisp:nil
                         :type
                         (common-lisp:or data-encryption-metadata
                                         common-lisp:null)
                         :accessor
                         struct-shape-collaboration-data-encryption-metadata
                         :shape "DataEncryptionMetadata" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (query-log-status :initarg :query-log-status :initform
                         (common-lisp:error ":querylogstatus is required")
                         :type
                         (common-lisp:or collaboration-query-log-status
                                         common-lisp:null)
                         :accessor struct-shape-collaboration-query-log-status
                         :shape "CollaborationQueryLogStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-collaboration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'collaboration
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'collaboration 'make-collaboration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input collaboration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input collaboration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-account-id))
      (common-lisp:list
       (common-lisp:cons "creatorAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creator-display-name))
      (common-lisp:list
       (common-lisp:cons "creatorDisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-status))
      (common-lisp:list
       (common-lisp:cons "memberStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-id))
      (common-lisp:list
       (common-lisp:cons "membershipId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-arn))
      (common-lisp:list
       (common-lisp:cons "membershipArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-encryption-metadata))
      (common-lisp:list
       (common-lisp:cons "dataEncryptionMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-log-status))
      (common-lisp:list
       (common-lisp:cons "queryLogStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input collaboration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass collaboration-analysis-template common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or analysis-template-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-collaboration-analysis-template-id :shape
                         "AnalysisTemplateIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or analysis-template-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-collaboration-analysis-template-arn
                         :shape "AnalysisTemplateArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (collaboration-id :initarg :collaboration-id :initform
                         (common-lisp:error ":collaborationid is required")
                         :type (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-collaboration-analysis-template-collaboration-id
                         :shape "UUID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (collaboration-arn :initarg :collaboration-arn
                         :initform
                         (common-lisp:error ":collaborationarn is required")
                         :type
                         (common-lisp:or collaboration-arn common-lisp:null)
                         :accessor
                         struct-shape-collaboration-analysis-template-collaboration-arn
                         :shape "CollaborationArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-description common-lisp:null)
                         :accessor
                         struct-shape-collaboration-analysis-template-description
                         :shape "ResourceDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creator-account-id :initarg :creator-account-id
                         :initform
                         (common-lisp:error ":creatoraccountid is required")
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         struct-shape-collaboration-analysis-template-creator-account-id
                         :shape "AccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or resource-alias common-lisp:null)
                         :accessor
                         struct-shape-collaboration-analysis-template-name
                         :shape "ResourceAlias" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (create-time :initarg :create-time :initform
                         (common-lisp:error ":createtime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-collaboration-analysis-template-create-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (update-time :initarg :update-time :initform
                         (common-lisp:error ":updatetime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-collaboration-analysis-template-update-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema :initarg :schema :initform
                         (common-lisp:error ":schema is required") :type
                         (common-lisp:or analysis-schema common-lisp:null)
                         :accessor
                         struct-shape-collaboration-analysis-template-schema
                         :shape "AnalysisSchema" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (format :initarg :format :initform
                         (common-lisp:error ":format is required") :type
                         (common-lisp:or analysis-format common-lisp:null)
                         :accessor
                         struct-shape-collaboration-analysis-template-format
                         :shape "AnalysisFormat" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source :initarg :source :initform
                         (common-lisp:error ":source is required") :type
                         (common-lisp:or analysis-source common-lisp:null)
                         :accessor
                         struct-shape-collaboration-analysis-template-source
                         :shape "AnalysisSource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (analysis-parameters :initarg :analysis-parameters
                         :initform common-lisp:nil :type
                         (common-lisp:or analysis-parameter-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-collaboration-analysis-template-analysis-parameters
                         :shape "AnalysisParameterList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-collaboration-analysis-template
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'collaboration-analysis-template
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'collaboration-analysis-template
                    'make-collaboration-analysis-template))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          collaboration-analysis-template))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          collaboration-analysis-template))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-id))
      (common-lisp:list
       (common-lisp:cons "collaborationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-arn))
      (common-lisp:list
       (common-lisp:cons "collaborationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-account-id))
      (common-lisp:list
       (common-lisp:cons "creatorAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema))
      (common-lisp:list
       (common-lisp:cons "schema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-parameters))
      (common-lisp:list
       (common-lisp:cons "analysisParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          collaboration-analysis-template))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype collaboration-analysis-template-list ()
   '(trivial-types:proper-list collaboration-analysis-template))
 (common-lisp:defun make-collaboration-analysis-template-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            collaboration-analysis-template))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass collaboration-analysis-template-summary common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or analysis-template-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-collaboration-analysis-template-summary-arn
                         :shape "AnalysisTemplateArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (create-time :initarg :create-time :initform
                         (common-lisp:error ":createtime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-collaboration-analysis-template-summary-create-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or analysis-template-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-collaboration-analysis-template-summary-id
                         :shape "AnalysisTemplateIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or resource-alias common-lisp:null)
                         :accessor
                         struct-shape-collaboration-analysis-template-summary-name
                         :shape "ResourceAlias" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (update-time :initarg :update-time :initform
                         (common-lisp:error ":updatetime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-collaboration-analysis-template-summary-update-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (collaboration-arn :initarg :collaboration-arn
                         :initform
                         (common-lisp:error ":collaborationarn is required")
                         :type
                         (common-lisp:or collaboration-arn common-lisp:null)
                         :accessor
                         struct-shape-collaboration-analysis-template-summary-collaboration-arn
                         :shape "CollaborationArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (collaboration-id :initarg :collaboration-id :initform
                         (common-lisp:error ":collaborationid is required")
                         :type (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-collaboration-analysis-template-summary-collaboration-id
                         :shape "UUID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creator-account-id :initarg :creator-account-id
                         :initform
                         (common-lisp:error ":creatoraccountid is required")
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         struct-shape-collaboration-analysis-template-summary-creator-account-id
                         :shape "AccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-description common-lisp:null)
                         :accessor
                         struct-shape-collaboration-analysis-template-summary-description
                         :shape "ResourceDescription" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-collaboration-analysis-template-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'collaboration-analysis-template-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'collaboration-analysis-template-summary
                    'make-collaboration-analysis-template-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          collaboration-analysis-template-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          collaboration-analysis-template-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-arn))
      (common-lisp:list
       (common-lisp:cons "collaborationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-id))
      (common-lisp:list
       (common-lisp:cons "collaborationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-account-id))
      (common-lisp:list
       (common-lisp:cons "creatorAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          collaboration-analysis-template-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype collaboration-analysis-template-summary-list ()
   '(trivial-types:proper-list collaboration-analysis-template-summary))
 (common-lisp:defun make-collaboration-analysis-template-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            collaboration-analysis-template-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype collaboration-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass collaboration-configured-audience-model-association
                       common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or
                          configured-audience-model-association-identifier
                          common-lisp:null)
                         :accessor
                         struct-shape-collaboration-configured-audience-model-association-id
                         :shape "ConfiguredAudienceModelAssociationIdentifier"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or
                          configured-audience-model-association-arn
                          common-lisp:null)
                         :accessor
                         struct-shape-collaboration-configured-audience-model-association-arn
                         :shape "ConfiguredAudienceModelAssociationArn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (collaboration-id :initarg :collaboration-id :initform
                         (common-lisp:error ":collaborationid is required")
                         :type (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-collaboration-configured-audience-model-association-collaboration-id
                         :shape "UUID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (collaboration-arn :initarg :collaboration-arn
                         :initform
                         (common-lisp:error ":collaborationarn is required")
                         :type
                         (common-lisp:or collaboration-arn common-lisp:null)
                         :accessor
                         struct-shape-collaboration-configured-audience-model-association-collaboration-arn
                         :shape "CollaborationArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (configured-audience-model-arn :initarg
                         :configured-audience-model-arn :initform
                         (common-lisp:error
                          ":configuredaudiencemodelarn is required")
                         :type
                         (common-lisp:or configured-audience-model-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-collaboration-configured-audience-model-association-configured-audience-model-arn
                         :shape "ConfiguredAudienceModelArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or
                          configured-audience-model-association-name
                          common-lisp:null)
                         :accessor
                         struct-shape-collaboration-configured-audience-model-association-name
                         :shape "ConfiguredAudienceModelAssociationName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-description common-lisp:null)
                         :accessor
                         struct-shape-collaboration-configured-audience-model-association-description
                         :shape "ResourceDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creator-account-id :initarg :creator-account-id
                         :initform
                         (common-lisp:error ":creatoraccountid is required")
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         struct-shape-collaboration-configured-audience-model-association-creator-account-id
                         :shape "AccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (create-time :initarg :create-time :initform
                         (common-lisp:error ":createtime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-collaboration-configured-audience-model-association-create-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (update-time :initarg :update-time :initform
                         (common-lisp:error ":updatetime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-collaboration-configured-audience-model-association-update-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-collaboration-configured-audience-model-association
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'collaboration-configured-audience-model-association
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'collaboration-configured-audience-model-association
                    'make-collaboration-configured-audience-model-association))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          collaboration-configured-audience-model-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          collaboration-configured-audience-model-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-id))
      (common-lisp:list
       (common-lisp:cons "collaborationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-arn))
      (common-lisp:list
       (common-lisp:cons "collaborationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configured-audience-model-arn))
      (common-lisp:list
       (common-lisp:cons "configuredAudienceModelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-account-id))
      (common-lisp:list
       (common-lisp:cons "creatorAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          collaboration-configured-audience-model-association))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  collaboration-configured-audience-model-association-summary common-lisp:nil
  ((arn :initarg :arn :initform (common-lisp:error ":arn is required") :type
    (common-lisp:or configured-audience-model-association-arn common-lisp:null)
    :accessor
    struct-shape-collaboration-configured-audience-model-association-summary-arn
    :shape "ConfiguredAudienceModelAssociationArn" :location common-lisp:nil
    :location-name common-lisp:nil)
   (create-time :initarg :create-time :initform
    (common-lisp:error ":createtime is required") :type
    (common-lisp:or timestamp common-lisp:null) :accessor
    struct-shape-collaboration-configured-audience-model-association-summary-create-time
    :shape "Timestamp" :location common-lisp:nil :location-name
    common-lisp:nil)
   (id :initarg :id :initform (common-lisp:error ":id is required") :type
    (common-lisp:or configured-audience-model-association-identifier
                    common-lisp:null)
    :accessor
    struct-shape-collaboration-configured-audience-model-association-summary-id
    :shape "ConfiguredAudienceModelAssociationIdentifier" :location
    common-lisp:nil :location-name common-lisp:nil)
   (name :initarg :name :initform (common-lisp:error ":name is required") :type
    (common-lisp:or configured-audience-model-association-name
                    common-lisp:null)
    :accessor
    struct-shape-collaboration-configured-audience-model-association-summary-name
    :shape "ConfiguredAudienceModelAssociationName" :location common-lisp:nil
    :location-name common-lisp:nil)
   (update-time :initarg :update-time :initform
    (common-lisp:error ":updatetime is required") :type
    (common-lisp:or timestamp common-lisp:null) :accessor
    struct-shape-collaboration-configured-audience-model-association-summary-update-time
    :shape "Timestamp" :location common-lisp:nil :location-name
    common-lisp:nil)
   (collaboration-arn :initarg :collaboration-arn :initform
    (common-lisp:error ":collaborationarn is required") :type
    (common-lisp:or collaboration-arn common-lisp:null) :accessor
    struct-shape-collaboration-configured-audience-model-association-summary-collaboration-arn
    :shape "CollaborationArn" :location common-lisp:nil :location-name
    common-lisp:nil)
   (collaboration-id :initarg :collaboration-id :initform
    (common-lisp:error ":collaborationid is required") :type
    (common-lisp:or uuid common-lisp:null) :accessor
    struct-shape-collaboration-configured-audience-model-association-summary-collaboration-id
    :shape "UUID" :location common-lisp:nil :location-name common-lisp:nil)
   (creator-account-id :initarg :creator-account-id :initform
    (common-lisp:error ":creatoraccountid is required") :type
    (common-lisp:or account-id common-lisp:null) :accessor
    struct-shape-collaboration-configured-audience-model-association-summary-creator-account-id
    :shape "AccountId" :location common-lisp:nil :location-name
    common-lisp:nil)
   (description :initarg :description :initform common-lisp:nil :type
    (common-lisp:or resource-description common-lisp:null) :accessor
    struct-shape-collaboration-configured-audience-model-association-summary-description
    :shape "ResourceDescription" :location common-lisp:nil :location-name
    common-lisp:nil))
  (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-collaboration-configured-audience-model-association-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'collaboration-configured-audience-model-association-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list
   'collaboration-configured-audience-model-association-summary
   'make-collaboration-configured-audience-model-association-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          collaboration-configured-audience-model-association-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          collaboration-configured-audience-model-association-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-arn))
      (common-lisp:list
       (common-lisp:cons "collaborationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-id))
      (common-lisp:list
       (common-lisp:cons "collaborationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-account-id))
      (common-lisp:list
       (common-lisp:cons "creatorAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          collaboration-configured-audience-model-association-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype collaboration-configured-audience-model-association-summary-list
                      ()
   '(trivial-types:proper-list
     collaboration-configured-audience-model-association-summary))
 (common-lisp:defun make-collaboration-configured-audience-model-association-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            collaboration-configured-audience-model-association-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype collaboration-description () 'common-lisp:string)
(common-lisp:deftype collaboration-identifier () 'common-lisp:string)
(common-lisp:deftype collaboration-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass collaboration-privacy-budget-summary common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-collaboration-privacy-budget-summary-id
                         :shape "UUID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (privacy-budget-template-id :initarg
                         :privacy-budget-template-id :initform
                         (common-lisp:error
                          ":privacybudgettemplateid is required")
                         :type
                         (common-lisp:or privacy-budget-template-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-collaboration-privacy-budget-summary-privacy-budget-template-id
                         :shape "PrivacyBudgetTemplateIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (privacy-budget-template-arn :initarg
                         :privacy-budget-template-arn :initform
                         (common-lisp:error
                          ":privacybudgettemplatearn is required")
                         :type
                         (common-lisp:or privacy-budget-template-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-collaboration-privacy-budget-summary-privacy-budget-template-arn
                         :shape "PrivacyBudgetTemplateArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (collaboration-id :initarg :collaboration-id :initform
                         (common-lisp:error ":collaborationid is required")
                         :type (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-collaboration-privacy-budget-summary-collaboration-id
                         :shape "UUID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (collaboration-arn :initarg :collaboration-arn
                         :initform
                         (common-lisp:error ":collaborationarn is required")
                         :type
                         (common-lisp:or collaboration-arn common-lisp:null)
                         :accessor
                         struct-shape-collaboration-privacy-budget-summary-collaboration-arn
                         :shape "CollaborationArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creator-account-id :initarg :creator-account-id
                         :initform
                         (common-lisp:error ":creatoraccountid is required")
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         struct-shape-collaboration-privacy-budget-summary-creator-account-id
                         :shape "AccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or privacy-budget-type common-lisp:null)
                         :accessor
                         struct-shape-collaboration-privacy-budget-summary-type
                         :shape "PrivacyBudgetType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (create-time :initarg :create-time :initform
                         (common-lisp:error ":createtime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-collaboration-privacy-budget-summary-create-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (update-time :initarg :update-time :initform
                         (common-lisp:error ":updatetime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-collaboration-privacy-budget-summary-update-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (budget :initarg :budget :initform
                         (common-lisp:error ":budget is required") :type
                         (common-lisp:or privacy-budget common-lisp:null)
                         :accessor
                         struct-shape-collaboration-privacy-budget-summary-budget
                         :shape "PrivacyBudget" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-collaboration-privacy-budget-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'collaboration-privacy-budget-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'collaboration-privacy-budget-summary
                    'make-collaboration-privacy-budget-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          collaboration-privacy-budget-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          collaboration-privacy-budget-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'privacy-budget-template-id))
      (common-lisp:list
       (common-lisp:cons "privacyBudgetTemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'privacy-budget-template-arn))
      (common-lisp:list
       (common-lisp:cons "privacyBudgetTemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-id))
      (common-lisp:list
       (common-lisp:cons "collaborationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-arn))
      (common-lisp:list
       (common-lisp:cons "collaborationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-account-id))
      (common-lisp:list
       (common-lisp:cons "creatorAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'budget))
      (common-lisp:list
       (common-lisp:cons "budget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          collaboration-privacy-budget-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype collaboration-privacy-budget-summary-list ()
   '(trivial-types:proper-list collaboration-privacy-budget-summary))
 (common-lisp:defun make-collaboration-privacy-budget-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            collaboration-privacy-budget-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass collaboration-privacy-budget-template common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or privacy-budget-template-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-collaboration-privacy-budget-template-id
                         :shape "PrivacyBudgetTemplateIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or privacy-budget-template-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-collaboration-privacy-budget-template-arn
                         :shape "PrivacyBudgetTemplateArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (collaboration-id :initarg :collaboration-id :initform
                         (common-lisp:error ":collaborationid is required")
                         :type (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-collaboration-privacy-budget-template-collaboration-id
                         :shape "UUID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (collaboration-arn :initarg :collaboration-arn
                         :initform
                         (common-lisp:error ":collaborationarn is required")
                         :type
                         (common-lisp:or collaboration-arn common-lisp:null)
                         :accessor
                         struct-shape-collaboration-privacy-budget-template-collaboration-arn
                         :shape "CollaborationArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creator-account-id :initarg :creator-account-id
                         :initform
                         (common-lisp:error ":creatoraccountid is required")
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         struct-shape-collaboration-privacy-budget-template-creator-account-id
                         :shape "AccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (create-time :initarg :create-time :initform
                         (common-lisp:error ":createtime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-collaboration-privacy-budget-template-create-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (update-time :initarg :update-time :initform
                         (common-lisp:error ":updatetime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-collaboration-privacy-budget-template-update-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (privacy-budget-type :initarg :privacy-budget-type
                         :initform
                         (common-lisp:error ":privacybudgettype is required")
                         :type
                         (common-lisp:or privacy-budget-type common-lisp:null)
                         :accessor
                         struct-shape-collaboration-privacy-budget-template-privacy-budget-type
                         :shape "PrivacyBudgetType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-refresh :initarg :auto-refresh :initform
                         (common-lisp:error ":autorefresh is required") :type
                         (common-lisp:or privacy-budget-template-auto-refresh
                                         common-lisp:null)
                         :accessor
                         struct-shape-collaboration-privacy-budget-template-auto-refresh
                         :shape "PrivacyBudgetTemplateAutoRefresh" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         (common-lisp:error ":parameters is required") :type
                         (common-lisp:or
                          privacy-budget-template-parameters-output
                          common-lisp:null)
                         :accessor
                         struct-shape-collaboration-privacy-budget-template-parameters
                         :shape "PrivacyBudgetTemplateParametersOutput"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-collaboration-privacy-budget-template
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'collaboration-privacy-budget-template
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'collaboration-privacy-budget-template
                    'make-collaboration-privacy-budget-template))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          collaboration-privacy-budget-template))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          collaboration-privacy-budget-template))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-id))
      (common-lisp:list
       (common-lisp:cons "collaborationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-arn))
      (common-lisp:list
       (common-lisp:cons "collaborationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-account-id))
      (common-lisp:list
       (common-lisp:cons "creatorAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'privacy-budget-type))
      (common-lisp:list
       (common-lisp:cons "privacyBudgetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-refresh))
      (common-lisp:list
       (common-lisp:cons "autoRefresh"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          collaboration-privacy-budget-template))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass collaboration-privacy-budget-template-summary
                       common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or privacy-budget-template-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-collaboration-privacy-budget-template-summary-id
                         :shape "PrivacyBudgetTemplateIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or privacy-budget-template-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-collaboration-privacy-budget-template-summary-arn
                         :shape "PrivacyBudgetTemplateArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (collaboration-id :initarg :collaboration-id :initform
                         (common-lisp:error ":collaborationid is required")
                         :type (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-collaboration-privacy-budget-template-summary-collaboration-id
                         :shape "UUID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (collaboration-arn :initarg :collaboration-arn
                         :initform
                         (common-lisp:error ":collaborationarn is required")
                         :type
                         (common-lisp:or collaboration-arn common-lisp:null)
                         :accessor
                         struct-shape-collaboration-privacy-budget-template-summary-collaboration-arn
                         :shape "CollaborationArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creator-account-id :initarg :creator-account-id
                         :initform
                         (common-lisp:error ":creatoraccountid is required")
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         struct-shape-collaboration-privacy-budget-template-summary-creator-account-id
                         :shape "AccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (privacy-budget-type :initarg :privacy-budget-type
                         :initform
                         (common-lisp:error ":privacybudgettype is required")
                         :type
                         (common-lisp:or privacy-budget-type common-lisp:null)
                         :accessor
                         struct-shape-collaboration-privacy-budget-template-summary-privacy-budget-type
                         :shape "PrivacyBudgetType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (create-time :initarg :create-time :initform
                         (common-lisp:error ":createtime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-collaboration-privacy-budget-template-summary-create-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (update-time :initarg :update-time :initform
                         (common-lisp:error ":updatetime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-collaboration-privacy-budget-template-summary-update-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-collaboration-privacy-budget-template-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'collaboration-privacy-budget-template-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'collaboration-privacy-budget-template-summary
                    'make-collaboration-privacy-budget-template-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          collaboration-privacy-budget-template-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          collaboration-privacy-budget-template-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-id))
      (common-lisp:list
       (common-lisp:cons "collaborationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-arn))
      (common-lisp:list
       (common-lisp:cons "collaborationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-account-id))
      (common-lisp:list
       (common-lisp:cons "creatorAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'privacy-budget-type))
      (common-lisp:list
       (common-lisp:cons "privacyBudgetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          collaboration-privacy-budget-template-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype collaboration-privacy-budget-template-summary-list ()
   '(trivial-types:proper-list collaboration-privacy-budget-template-summary))
 (common-lisp:defun make-collaboration-privacy-budget-template-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            collaboration-privacy-budget-template-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype collaboration-query-log-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass collaboration-summary common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-collaboration-summary-id :shape "UUID"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or collaboration-arn common-lisp:null)
                         :accessor struct-shape-collaboration-summary-arn
                         :shape "CollaborationArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or collaboration-name common-lisp:null)
                         :accessor struct-shape-collaboration-summary-name
                         :shape "CollaborationName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creator-account-id :initarg :creator-account-id
                         :initform
                         (common-lisp:error ":creatoraccountid is required")
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         struct-shape-collaboration-summary-creator-account-id
                         :shape "AccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creator-display-name :initarg :creator-display-name
                         :initform
                         (common-lisp:error ":creatordisplayname is required")
                         :type (common-lisp:or display-name common-lisp:null)
                         :accessor
                         struct-shape-collaboration-summary-creator-display-name
                         :shape "DisplayName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (create-time :initarg :create-time :initform
                         (common-lisp:error ":createtime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-collaboration-summary-create-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (update-time :initarg :update-time :initform
                         (common-lisp:error ":updatetime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-collaboration-summary-update-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (member-status :initarg :member-status :initform
                         (common-lisp:error ":memberstatus is required") :type
                         (common-lisp:or member-status common-lisp:null)
                         :accessor
                         struct-shape-collaboration-summary-member-status
                         :shape "MemberStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (membership-id :initarg :membership-id :initform
                         common-lisp:nil :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-collaboration-summary-membership-id
                         :shape "UUID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (membership-arn :initarg :membership-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or membership-arn common-lisp:null)
                         :accessor
                         struct-shape-collaboration-summary-membership-arn
                         :shape "MembershipArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-collaboration-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'collaboration-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'collaboration-summary 'make-collaboration-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          collaboration-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          collaboration-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-account-id))
      (common-lisp:list
       (common-lisp:cons "creatorAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creator-display-name))
      (common-lisp:list
       (common-lisp:cons "creatorDisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-status))
      (common-lisp:list
       (common-lisp:cons "memberStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-id))
      (common-lisp:list
       (common-lisp:cons "membershipId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-arn))
      (common-lisp:list
       (common-lisp:cons "membershipArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          collaboration-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype collaboration-summary-list ()
   '(trivial-types:proper-list collaboration-summary))
 (common-lisp:defun make-collaboration-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list collaboration-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass column common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or column-name common-lisp:null)
                         :accessor struct-shape-column-name :shape "ColumnName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or column-type-string common-lisp:null)
                         :accessor struct-shape-column-type :shape
                         "ColumnTypeString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-column
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'column
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'column 'make-column))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input column))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input column))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input column))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype column-list () '(trivial-types:proper-list column))
 (common-lisp:defun make-column-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column))
   aws-sdk/generator/shape::members))
(common-lisp:deftype column-name () 'common-lisp:string)
(common-lisp:deftype column-type-string () 'common-lisp:string)
(common-lisp:deftype configured-audience-model-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass configured-audience-model-association common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or
                          configured-audience-model-association-identifier
                          common-lisp:null)
                         :accessor
                         struct-shape-configured-audience-model-association-id
                         :shape "ConfiguredAudienceModelAssociationIdentifier"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or
                          configured-audience-model-association-arn
                          common-lisp:null)
                         :accessor
                         struct-shape-configured-audience-model-association-arn
                         :shape "ConfiguredAudienceModelAssociationArn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (configured-audience-model-arn :initarg
                         :configured-audience-model-arn :initform
                         (common-lisp:error
                          ":configuredaudiencemodelarn is required")
                         :type
                         (common-lisp:or configured-audience-model-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-configured-audience-model-association-configured-audience-model-arn
                         :shape "ConfiguredAudienceModelArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (membership-id :initarg :membership-id :initform
                         (common-lisp:error ":membershipid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-configured-audience-model-association-membership-id
                         :shape "UUID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (membership-arn :initarg :membership-arn :initform
                         (common-lisp:error ":membershiparn is required") :type
                         (common-lisp:or membership-arn common-lisp:null)
                         :accessor
                         struct-shape-configured-audience-model-association-membership-arn
                         :shape "MembershipArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (collaboration-id :initarg :collaboration-id :initform
                         (common-lisp:error ":collaborationid is required")
                         :type (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-configured-audience-model-association-collaboration-id
                         :shape "UUID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (collaboration-arn :initarg :collaboration-arn
                         :initform
                         (common-lisp:error ":collaborationarn is required")
                         :type
                         (common-lisp:or collaboration-arn common-lisp:null)
                         :accessor
                         struct-shape-configured-audience-model-association-collaboration-arn
                         :shape "CollaborationArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or
                          configured-audience-model-association-name
                          common-lisp:null)
                         :accessor
                         struct-shape-configured-audience-model-association-name
                         :shape "ConfiguredAudienceModelAssociationName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (manage-resource-policies :initarg
                         :manage-resource-policies :initform
                         (common-lisp:error
                          ":manageresourcepolicies is required")
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-configured-audience-model-association-manage-resource-policies
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-description common-lisp:null)
                         :accessor
                         struct-shape-configured-audience-model-association-description
                         :shape "ResourceDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (create-time :initarg :create-time :initform
                         (common-lisp:error ":createtime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-configured-audience-model-association-create-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (update-time :initarg :update-time :initform
                         (common-lisp:error ":updatetime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-configured-audience-model-association-update-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-configured-audience-model-association
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'configured-audience-model-association
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'configured-audience-model-association
                    'make-configured-audience-model-association))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configured-audience-model-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configured-audience-model-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configured-audience-model-arn))
      (common-lisp:list
       (common-lisp:cons "configuredAudienceModelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-id))
      (common-lisp:list
       (common-lisp:cons "membershipId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-arn))
      (common-lisp:list
       (common-lisp:cons "membershipArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-id))
      (common-lisp:list
       (common-lisp:cons "collaborationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-arn))
      (common-lisp:list
       (common-lisp:cons "collaborationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manage-resource-policies))
      (common-lisp:list
       (common-lisp:cons "manageResourcePolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configured-audience-model-association))
   common-lisp:nil))
(common-lisp:deftype configured-audience-model-association-arn ()
  'common-lisp:string)
(common-lisp:deftype configured-audience-model-association-identifier ()
  'common-lisp:string)
(common-lisp:deftype configured-audience-model-association-name ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass configured-audience-model-association-summary
                       common-lisp:nil
                       ((membership-id :initarg :membership-id :initform
                         (common-lisp:error ":membershipid is required") :type
                         (common-lisp:or membership-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-configured-audience-model-association-summary-membership-id
                         :shape "MembershipIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (membership-arn :initarg :membership-arn :initform
                         (common-lisp:error ":membershiparn is required") :type
                         (common-lisp:or membership-arn common-lisp:null)
                         :accessor
                         struct-shape-configured-audience-model-association-summary-membership-arn
                         :shape "MembershipArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (collaboration-arn :initarg :collaboration-arn
                         :initform
                         (common-lisp:error ":collaborationarn is required")
                         :type
                         (common-lisp:or collaboration-arn common-lisp:null)
                         :accessor
                         struct-shape-configured-audience-model-association-summary-collaboration-arn
                         :shape "CollaborationArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (collaboration-id :initarg :collaboration-id :initform
                         (common-lisp:error ":collaborationid is required")
                         :type (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-configured-audience-model-association-summary-collaboration-id
                         :shape "UUID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (create-time :initarg :create-time :initform
                         (common-lisp:error ":createtime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-configured-audience-model-association-summary-create-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (update-time :initarg :update-time :initform
                         (common-lisp:error ":updatetime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-configured-audience-model-association-summary-update-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-configured-audience-model-association-summary-id
                         :shape "UUID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or
                          configured-audience-model-association-arn
                          common-lisp:null)
                         :accessor
                         struct-shape-configured-audience-model-association-summary-arn
                         :shape "ConfiguredAudienceModelAssociationArn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or
                          configured-audience-model-association-name
                          common-lisp:null)
                         :accessor
                         struct-shape-configured-audience-model-association-summary-name
                         :shape "ConfiguredAudienceModelAssociationName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (configured-audience-model-arn :initarg
                         :configured-audience-model-arn :initform
                         (common-lisp:error
                          ":configuredaudiencemodelarn is required")
                         :type
                         (common-lisp:or configured-audience-model-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-configured-audience-model-association-summary-configured-audience-model-arn
                         :shape "ConfiguredAudienceModelArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-description common-lisp:null)
                         :accessor
                         struct-shape-configured-audience-model-association-summary-description
                         :shape "ResourceDescription" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-configured-audience-model-association-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'configured-audience-model-association-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'configured-audience-model-association-summary
                    'make-configured-audience-model-association-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configured-audience-model-association-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configured-audience-model-association-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-id))
      (common-lisp:list
       (common-lisp:cons "membershipId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-arn))
      (common-lisp:list
       (common-lisp:cons "membershipArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-arn))
      (common-lisp:list
       (common-lisp:cons "collaborationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-id))
      (common-lisp:list
       (common-lisp:cons "collaborationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configured-audience-model-arn))
      (common-lisp:list
       (common-lisp:cons "configuredAudienceModelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configured-audience-model-association-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype configured-audience-model-association-summary-list ()
   '(trivial-types:proper-list configured-audience-model-association-summary))
 (common-lisp:defun make-configured-audience-model-association-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            configured-audience-model-association-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass configured-table common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-configured-table-id :shape "UUID"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or configured-table-arn common-lisp:null)
                         :accessor struct-shape-configured-table-arn :shape
                         "ConfiguredTableArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or display-name common-lisp:null)
                         :accessor struct-shape-configured-table-name :shape
                         "DisplayName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or table-description common-lisp:null)
                         :accessor struct-shape-configured-table-description
                         :shape "TableDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-reference :initarg :table-reference :initform
                         (common-lisp:error ":tablereference is required")
                         :type
                         (common-lisp:or table-reference common-lisp:null)
                         :accessor
                         struct-shape-configured-table-table-reference :shape
                         "TableReference" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (create-time :initarg :create-time :initform
                         (common-lisp:error ":createtime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-configured-table-create-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (update-time :initarg :update-time :initform
                         (common-lisp:error ":updatetime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-configured-table-update-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (analysis-rule-types :initarg :analysis-rule-types
                         :initform
                         (common-lisp:error ":analysisruletypes is required")
                         :type
                         (common-lisp:or
                          configured-table-analysis-rule-type-list
                          common-lisp:null)
                         :accessor
                         struct-shape-configured-table-analysis-rule-types
                         :shape "ConfiguredTableAnalysisRuleTypeList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (analysis-method :initarg :analysis-method :initform
                         (common-lisp:error ":analysismethod is required")
                         :type
                         (common-lisp:or analysis-method common-lisp:null)
                         :accessor
                         struct-shape-configured-table-analysis-method :shape
                         "AnalysisMethod" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allowed-columns :initarg :allowed-columns :initform
                         (common-lisp:error ":allowedcolumns is required")
                         :type
                         (common-lisp:or allowed-column-list common-lisp:null)
                         :accessor
                         struct-shape-configured-table-allowed-columns :shape
                         "AllowedColumnList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-configured-table
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'configured-table
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'configured-table 'make-configured-table))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input configured-table))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input configured-table))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-reference))
      (common-lisp:list
       (common-lisp:cons "tableReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-rule-types))
      (common-lisp:list
       (common-lisp:cons "analysisRuleTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-method))
      (common-lisp:list
       (common-lisp:cons "analysisMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-columns))
      (common-lisp:list
       (common-lisp:cons "allowedColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input configured-table))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass configured-table-analysis-rule common-lisp:nil
                       ((configured-table-id :initarg :configured-table-id
                         :initform
                         (common-lisp:error ":configuredtableid is required")
                         :type (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-configured-table-analysis-rule-configured-table-id
                         :shape "UUID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (configured-table-arn :initarg :configured-table-arn
                         :initform
                         (common-lisp:error ":configuredtablearn is required")
                         :type
                         (common-lisp:or configured-table-arn common-lisp:null)
                         :accessor
                         struct-shape-configured-table-analysis-rule-configured-table-arn
                         :shape "ConfiguredTableArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy :initarg :policy :initform
                         (common-lisp:error ":policy is required") :type
                         (common-lisp:or configured-table-analysis-rule-policy
                                         common-lisp:null)
                         :accessor
                         struct-shape-configured-table-analysis-rule-policy
                         :shape "ConfiguredTableAnalysisRulePolicy" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or configured-table-analysis-rule-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-configured-table-analysis-rule-type
                         :shape "ConfiguredTableAnalysisRuleType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (create-time :initarg :create-time :initform
                         (common-lisp:error ":createtime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-configured-table-analysis-rule-create-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (update-time :initarg :update-time :initform
                         (common-lisp:error ":updatetime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-configured-table-analysis-rule-update-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-configured-table-analysis-rule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'configured-table-analysis-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'configured-table-analysis-rule
                    'make-configured-table-analysis-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configured-table-analysis-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configured-table-analysis-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configured-table-id))
      (common-lisp:list
       (common-lisp:cons "configuredTableId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configured-table-arn))
      (common-lisp:list
       (common-lisp:cons "configuredTableArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configured-table-analysis-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass configured-table-analysis-rule-policy common-lisp:nil
                       ((v1 :initarg :v1 :initform common-lisp:nil :type
                         (common-lisp:or
                          configured-table-analysis-rule-policy-v1
                          common-lisp:null)
                         :accessor
                         struct-shape-configured-table-analysis-rule-policy-v1
                         :shape "ConfiguredTableAnalysisRulePolicyV1" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-configured-table-analysis-rule-policy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'configured-table-analysis-rule-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'configured-table-analysis-rule-policy
                    'make-configured-table-analysis-rule-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configured-table-analysis-rule-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configured-table-analysis-rule-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'v1))
      (common-lisp:list
       (common-lisp:cons "v1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configured-table-analysis-rule-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass configured-table-analysis-rule-policy-v1 common-lisp:nil
                       ((list :initarg :list :initform common-lisp:nil :type
                         (common-lisp:or analysis-rule-list common-lisp:null)
                         :accessor
                         struct-shape-configured-table-analysis-rule-policy-v1-list
                         :shape "AnalysisRuleList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aggregation :initarg :aggregation :initform
                         common-lisp:nil :type
                         (common-lisp:or analysis-rule-aggregation
                                         common-lisp:null)
                         :accessor
                         struct-shape-configured-table-analysis-rule-policy-v1-aggregation
                         :shape "AnalysisRuleAggregation" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (custom :initarg :custom :initform common-lisp:nil
                         :type
                         (common-lisp:or analysis-rule-custom common-lisp:null)
                         :accessor
                         struct-shape-configured-table-analysis-rule-policy-v1-custom
                         :shape "AnalysisRuleCustom" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-configured-table-analysis-rule-policy-v1
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'configured-table-analysis-rule-policy-v1
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'configured-table-analysis-rule-policy-v1
                    'make-configured-table-analysis-rule-policy-v1))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configured-table-analysis-rule-policy-v1))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configured-table-analysis-rule-policy-v1))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list))
      (common-lisp:list
       (common-lisp:cons "list"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregation))
      (common-lisp:list
       (common-lisp:cons "aggregation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom))
      (common-lisp:list
       (common-lisp:cons "custom"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configured-table-analysis-rule-policy-v1))
   common-lisp:nil))
(common-lisp:deftype configured-table-analysis-rule-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype configured-table-analysis-rule-type-list ()
   '(trivial-types:proper-list configured-table-analysis-rule-type))
 (common-lisp:defun make-configured-table-analysis-rule-type-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            configured-table-analysis-rule-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype configured-table-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass configured-table-association common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or configured-table-association-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-configured-table-association-arn :shape
                         "ConfiguredTableAssociationArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-configured-table-association-id :shape
                         "UUID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (configured-table-id :initarg :configured-table-id
                         :initform
                         (common-lisp:error ":configuredtableid is required")
                         :type (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-configured-table-association-configured-table-id
                         :shape "UUID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (configured-table-arn :initarg :configured-table-arn
                         :initform
                         (common-lisp:error ":configuredtablearn is required")
                         :type
                         (common-lisp:or configured-table-arn common-lisp:null)
                         :accessor
                         struct-shape-configured-table-association-configured-table-arn
                         :shape "ConfiguredTableArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (membership-id :initarg :membership-id :initform
                         (common-lisp:error ":membershipid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-configured-table-association-membership-id
                         :shape "UUID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (membership-arn :initarg :membership-arn :initform
                         (common-lisp:error ":membershiparn is required") :type
                         (common-lisp:or membership-arn common-lisp:null)
                         :accessor
                         struct-shape-configured-table-association-membership-arn
                         :shape "MembershipArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-configured-table-association-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or table-alias common-lisp:null)
                         :accessor
                         struct-shape-configured-table-association-name :shape
                         "TableAlias" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or table-description common-lisp:null)
                         :accessor
                         struct-shape-configured-table-association-description
                         :shape "TableDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (create-time :initarg :create-time :initform
                         (common-lisp:error ":createtime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-configured-table-association-create-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (update-time :initarg :update-time :initform
                         (common-lisp:error ":updatetime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-configured-table-association-update-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-configured-table-association
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'configured-table-association
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'configured-table-association
                    'make-configured-table-association))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configured-table-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configured-table-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configured-table-id))
      (common-lisp:list
       (common-lisp:cons "configuredTableId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configured-table-arn))
      (common-lisp:list
       (common-lisp:cons "configuredTableArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-id))
      (common-lisp:list
       (common-lisp:cons "membershipId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-arn))
      (common-lisp:list
       (common-lisp:cons "membershipArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configured-table-association))
   common-lisp:nil))
(common-lisp:deftype configured-table-association-arn () 'common-lisp:string)
(common-lisp:deftype configured-table-association-identifier ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass configured-table-association-summary common-lisp:nil
                       ((configured-table-id :initarg :configured-table-id
                         :initform
                         (common-lisp:error ":configuredtableid is required")
                         :type (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-configured-table-association-summary-configured-table-id
                         :shape "UUID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (membership-id :initarg :membership-id :initform
                         (common-lisp:error ":membershipid is required") :type
                         (common-lisp:or membership-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-configured-table-association-summary-membership-id
                         :shape "MembershipIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (membership-arn :initarg :membership-arn :initform
                         (common-lisp:error ":membershiparn is required") :type
                         (common-lisp:or membership-arn common-lisp:null)
                         :accessor
                         struct-shape-configured-table-association-summary-membership-arn
                         :shape "MembershipArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or table-alias common-lisp:null)
                         :accessor
                         struct-shape-configured-table-association-summary-name
                         :shape "TableAlias" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (create-time :initarg :create-time :initform
                         (common-lisp:error ":createtime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-configured-table-association-summary-create-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (update-time :initarg :update-time :initform
                         (common-lisp:error ":updatetime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-configured-table-association-summary-update-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-configured-table-association-summary-id
                         :shape "UUID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or configured-table-association-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-configured-table-association-summary-arn
                         :shape "ConfiguredTableAssociationArn" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-configured-table-association-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'configured-table-association-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'configured-table-association-summary
                    'make-configured-table-association-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configured-table-association-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configured-table-association-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configured-table-id))
      (common-lisp:list
       (common-lisp:cons "configuredTableId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-id))
      (common-lisp:list
       (common-lisp:cons "membershipId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-arn))
      (common-lisp:list
       (common-lisp:cons "membershipArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configured-table-association-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype configured-table-association-summary-list ()
   '(trivial-types:proper-list configured-table-association-summary))
 (common-lisp:defun make-configured-table-association-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            configured-table-association-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype configured-table-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass configured-table-summary common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or configured-table-identifier
                                         common-lisp:null)
                         :accessor struct-shape-configured-table-summary-id
                         :shape "ConfiguredTableIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or configured-table-arn common-lisp:null)
                         :accessor struct-shape-configured-table-summary-arn
                         :shape "ConfiguredTableArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or display-name common-lisp:null)
                         :accessor struct-shape-configured-table-summary-name
                         :shape "DisplayName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (create-time :initarg :create-time :initform
                         (common-lisp:error ":createtime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-configured-table-summary-create-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (update-time :initarg :update-time :initform
                         (common-lisp:error ":updatetime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-configured-table-summary-update-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (analysis-rule-types :initarg :analysis-rule-types
                         :initform
                         (common-lisp:error ":analysisruletypes is required")
                         :type
                         (common-lisp:or
                          configured-table-analysis-rule-type-list
                          common-lisp:null)
                         :accessor
                         struct-shape-configured-table-summary-analysis-rule-types
                         :shape "ConfiguredTableAnalysisRuleTypeList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (analysis-method :initarg :analysis-method :initform
                         (common-lisp:error ":analysismethod is required")
                         :type
                         (common-lisp:or analysis-method common-lisp:null)
                         :accessor
                         struct-shape-configured-table-summary-analysis-method
                         :shape "AnalysisMethod" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-configured-table-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'configured-table-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'configured-table-summary 'make-configured-table-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configured-table-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configured-table-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-rule-types))
      (common-lisp:list
       (common-lisp:cons "analysisRuleTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-method))
      (common-lisp:list
       (common-lisp:cons "analysisMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configured-table-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype configured-table-summary-list ()
   '(trivial-types:proper-list configured-table-summary))
 (common-lisp:defun make-configured-table-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            configured-table-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (cleanrooms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       conflict-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       conflict-exception-resource-type)
      (reason :initarg :reason :initform common-lisp:nil :reader
       conflict-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message
                    'conflict-exception-resource-id
                    'conflict-exception-resource-type
                    'conflict-exception-reason)))
(common-lisp:deftype conflict-exception-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-analysis-template-input common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-description common-lisp:null)
                         :accessor
                         struct-shape-create-analysis-template-input-description
                         :shape "ResourceDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (membership-identifier :initarg :membership-identifier
                         :initform
                         (common-lisp:error
                          ":membershipidentifier is required")
                         :type
                         (common-lisp:or membership-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-analysis-template-input-membership-identifier
                         :shape "MembershipIdentifier" :location "uri"
                         :location-name "membershipIdentifier")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or table-alias common-lisp:null)
                         :accessor
                         struct-shape-create-analysis-template-input-name
                         :shape "TableAlias" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (format :initarg :format :initform
                         (common-lisp:error ":format is required") :type
                         (common-lisp:or analysis-format common-lisp:null)
                         :accessor
                         struct-shape-create-analysis-template-input-format
                         :shape "AnalysisFormat" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source :initarg :source :initform
                         (common-lisp:error ":source is required") :type
                         (common-lisp:or analysis-source common-lisp:null)
                         :accessor
                         struct-shape-create-analysis-template-input-source
                         :shape "AnalysisSource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-analysis-template-input-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (analysis-parameters :initarg :analysis-parameters
                         :initform common-lisp:nil :type
                         (common-lisp:or analysis-parameter-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-analysis-template-input-analysis-parameters
                         :shape "AnalysisParameterList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-analysis-template-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-analysis-template-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-analysis-template-input
                    'make-create-analysis-template-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-analysis-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-analysis-template-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-parameters))
      (common-lisp:list
       (common-lisp:cons "analysisParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-analysis-template-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-analysis-template-output common-lisp:nil
                       ((analysis-template :initarg :analysis-template
                         :initform
                         (common-lisp:error ":analysistemplate is required")
                         :type
                         (common-lisp:or analysis-template common-lisp:null)
                         :accessor
                         struct-shape-create-analysis-template-output-analysis-template
                         :shape "AnalysisTemplate" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-analysis-template-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-analysis-template-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-analysis-template-output
                    'make-create-analysis-template-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-analysis-template-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-analysis-template-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-template))
      (common-lisp:list
       (common-lisp:cons "analysisTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-analysis-template-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-collaboration-input common-lisp:nil
                       ((members :initarg :members :initform
                         (common-lisp:error ":members is required") :type
                         (common-lisp:or member-list common-lisp:null)
                         :accessor
                         struct-shape-create-collaboration-input-members :shape
                         "MemberList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or collaboration-name common-lisp:null)
                         :accessor struct-shape-create-collaboration-input-name
                         :shape "CollaborationName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         (common-lisp:error ":description is required") :type
                         (common-lisp:or collaboration-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-collaboration-input-description
                         :shape "CollaborationDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (creator-member-abilities :initarg
                         :creator-member-abilities :initform
                         (common-lisp:error
                          ":creatormemberabilities is required")
                         :type
                         (common-lisp:or member-abilities common-lisp:null)
                         :accessor
                         struct-shape-create-collaboration-input-creator-member-abilities
                         :shape "MemberAbilities" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creator-display-name :initarg :creator-display-name
                         :initform
                         (common-lisp:error ":creatordisplayname is required")
                         :type (common-lisp:or display-name common-lisp:null)
                         :accessor
                         struct-shape-create-collaboration-input-creator-display-name
                         :shape "DisplayName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-encryption-metadata :initarg
                         :data-encryption-metadata :initform common-lisp:nil
                         :type
                         (common-lisp:or data-encryption-metadata
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-collaboration-input-data-encryption-metadata
                         :shape "DataEncryptionMetadata" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (query-log-status :initarg :query-log-status :initform
                         (common-lisp:error ":querylogstatus is required")
                         :type
                         (common-lisp:or collaboration-query-log-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-collaboration-input-query-log-status
                         :shape "CollaborationQueryLogStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-collaboration-input-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creator-payment-configuration :initarg
                         :creator-payment-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or payment-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-collaboration-input-creator-payment-configuration
                         :shape "PaymentConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-collaboration-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-collaboration-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-collaboration-input
                    'make-create-collaboration-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-collaboration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-collaboration-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'members))
      (common-lisp:list
       (common-lisp:cons "members"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creator-member-abilities))
      (common-lisp:list
       (common-lisp:cons "creatorMemberAbilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creator-display-name))
      (common-lisp:list
       (common-lisp:cons "creatorDisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-encryption-metadata))
      (common-lisp:list
       (common-lisp:cons "dataEncryptionMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-log-status))
      (common-lisp:list
       (common-lisp:cons "queryLogStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creator-payment-configuration))
      (common-lisp:list
       (common-lisp:cons "creatorPaymentConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-collaboration-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-collaboration-output common-lisp:nil
                       ((collaboration :initarg :collaboration :initform
                         (common-lisp:error ":collaboration is required") :type
                         (common-lisp:or collaboration common-lisp:null)
                         :accessor
                         struct-shape-create-collaboration-output-collaboration
                         :shape "Collaboration" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-collaboration-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-collaboration-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-collaboration-output
                    'make-create-collaboration-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-collaboration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-collaboration-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration))
      (common-lisp:list
       (common-lisp:cons "collaboration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-collaboration-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-configured-audience-model-association-input
                       common-lisp:nil
                       ((membership-identifier :initarg :membership-identifier
                         :initform
                         (common-lisp:error
                          ":membershipidentifier is required")
                         :type
                         (common-lisp:or membership-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-configured-audience-model-association-input-membership-identifier
                         :shape "MembershipIdentifier" :location "uri"
                         :location-name "membershipIdentifier")
                        (configured-audience-model-arn :initarg
                         :configured-audience-model-arn :initform
                         (common-lisp:error
                          ":configuredaudiencemodelarn is required")
                         :type
                         (common-lisp:or configured-audience-model-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-configured-audience-model-association-input-configured-audience-model-arn
                         :shape "ConfiguredAudienceModelArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (configured-audience-model-association-name :initarg
                         :configured-audience-model-association-name :initform
                         (common-lisp:error
                          ":configuredaudiencemodelassociationname is required")
                         :type
                         (common-lisp:or
                          configured-audience-model-association-name
                          common-lisp:null)
                         :accessor
                         struct-shape-create-configured-audience-model-association-input-configured-audience-model-association-name
                         :shape "ConfiguredAudienceModelAssociationName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (manage-resource-policies :initarg
                         :manage-resource-policies :initform
                         (common-lisp:error
                          ":manageresourcepolicies is required")
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-create-configured-audience-model-association-input-manage-resource-policies
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-configured-audience-model-association-input-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-description common-lisp:null)
                         :accessor
                         struct-shape-create-configured-audience-model-association-input-description
                         :shape "ResourceDescription" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-configured-audience-model-association-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-configured-audience-model-association-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-configured-audience-model-association-input
                    'make-create-configured-audience-model-association-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-audience-model-association-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-audience-model-association-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configured-audience-model-arn))
      (common-lisp:list
       (common-lisp:cons "configuredAudienceModelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configured-audience-model-association-name))
      (common-lisp:list
       (common-lisp:cons "configuredAudienceModelAssociationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manage-resource-policies))
      (common-lisp:list
       (common-lisp:cons "manageResourcePolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-audience-model-association-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-configured-audience-model-association-output
                       common-lisp:nil
                       ((configured-audience-model-association :initarg
                         :configured-audience-model-association :initform
                         (common-lisp:error
                          ":configuredaudiencemodelassociation is required")
                         :type
                         (common-lisp:or configured-audience-model-association
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-configured-audience-model-association-output-configured-audience-model-association
                         :shape "ConfiguredAudienceModelAssociation" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-configured-audience-model-association-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-configured-audience-model-association-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-configured-audience-model-association-output
                    'make-create-configured-audience-model-association-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-audience-model-association-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-audience-model-association-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configured-audience-model-association))
      (common-lisp:list
       (common-lisp:cons "configuredAudienceModelAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-audience-model-association-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-configured-table-analysis-rule-input
                       common-lisp:nil
                       ((configured-table-identifier :initarg
                         :configured-table-identifier :initform
                         (common-lisp:error
                          ":configuredtableidentifier is required")
                         :type
                         (common-lisp:or configured-table-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-configured-table-analysis-rule-input-configured-table-identifier
                         :shape "ConfiguredTableIdentifier" :location "uri"
                         :location-name "configuredTableIdentifier")
                        (analysis-rule-type :initarg :analysis-rule-type
                         :initform
                         (common-lisp:error ":analysisruletype is required")
                         :type
                         (common-lisp:or configured-table-analysis-rule-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-configured-table-analysis-rule-input-analysis-rule-type
                         :shape "ConfiguredTableAnalysisRuleType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (analysis-rule-policy :initarg :analysis-rule-policy
                         :initform
                         (common-lisp:error ":analysisrulepolicy is required")
                         :type
                         (common-lisp:or configured-table-analysis-rule-policy
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-configured-table-analysis-rule-input-analysis-rule-policy
                         :shape "ConfiguredTableAnalysisRulePolicy" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-configured-table-analysis-rule-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-configured-table-analysis-rule-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-configured-table-analysis-rule-input
                    'make-create-configured-table-analysis-rule-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-table-analysis-rule-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-table-analysis-rule-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-rule-type))
      (common-lisp:list
       (common-lisp:cons "analysisRuleType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'analysis-rule-policy))
      (common-lisp:list
       (common-lisp:cons "analysisRulePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-table-analysis-rule-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-configured-table-analysis-rule-output
                       common-lisp:nil
                       ((analysis-rule :initarg :analysis-rule :initform
                         (common-lisp:error ":analysisrule is required") :type
                         (common-lisp:or configured-table-analysis-rule
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-configured-table-analysis-rule-output-analysis-rule
                         :shape "ConfiguredTableAnalysisRule" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-configured-table-analysis-rule-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-configured-table-analysis-rule-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-configured-table-analysis-rule-output
                    'make-create-configured-table-analysis-rule-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-table-analysis-rule-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-table-analysis-rule-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-rule))
      (common-lisp:list
       (common-lisp:cons "analysisRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-table-analysis-rule-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-configured-table-association-input
                       common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or table-alias common-lisp:null)
                         :accessor
                         struct-shape-create-configured-table-association-input-name
                         :shape "TableAlias" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or table-description common-lisp:null)
                         :accessor
                         struct-shape-create-configured-table-association-input-description
                         :shape "TableDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (membership-identifier :initarg :membership-identifier
                         :initform
                         (common-lisp:error
                          ":membershipidentifier is required")
                         :type
                         (common-lisp:or membership-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-configured-table-association-input-membership-identifier
                         :shape "MembershipIdentifier" :location "uri"
                         :location-name "membershipIdentifier")
                        (configured-table-identifier :initarg
                         :configured-table-identifier :initform
                         (common-lisp:error
                          ":configuredtableidentifier is required")
                         :type
                         (common-lisp:or configured-table-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-configured-table-association-input-configured-table-identifier
                         :shape "ConfiguredTableIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-create-configured-table-association-input-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-configured-table-association-input-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-configured-table-association-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-configured-table-association-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-configured-table-association-input
                    'make-create-configured-table-association-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-table-association-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-table-association-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configured-table-identifier))
      (common-lisp:list
       (common-lisp:cons "configuredTableIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-table-association-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-configured-table-association-output
                       common-lisp:nil
                       ((configured-table-association :initarg
                         :configured-table-association :initform
                         (common-lisp:error
                          ":configuredtableassociation is required")
                         :type
                         (common-lisp:or configured-table-association
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-configured-table-association-output-configured-table-association
                         :shape "ConfiguredTableAssociation" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-configured-table-association-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-configured-table-association-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-configured-table-association-output
                    'make-create-configured-table-association-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-table-association-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-table-association-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configured-table-association))
      (common-lisp:list
       (common-lisp:cons "configuredTableAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-table-association-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-configured-table-input common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or display-name common-lisp:null)
                         :accessor
                         struct-shape-create-configured-table-input-name :shape
                         "DisplayName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or table-description common-lisp:null)
                         :accessor
                         struct-shape-create-configured-table-input-description
                         :shape "TableDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-reference :initarg :table-reference :initform
                         (common-lisp:error ":tablereference is required")
                         :type
                         (common-lisp:or table-reference common-lisp:null)
                         :accessor
                         struct-shape-create-configured-table-input-table-reference
                         :shape "TableReference" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allowed-columns :initarg :allowed-columns :initform
                         (common-lisp:error ":allowedcolumns is required")
                         :type
                         (common-lisp:or allowed-column-list common-lisp:null)
                         :accessor
                         struct-shape-create-configured-table-input-allowed-columns
                         :shape "AllowedColumnList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (analysis-method :initarg :analysis-method :initform
                         (common-lisp:error ":analysismethod is required")
                         :type
                         (common-lisp:or analysis-method common-lisp:null)
                         :accessor
                         struct-shape-create-configured-table-input-analysis-method
                         :shape "AnalysisMethod" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-configured-table-input-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-configured-table-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-configured-table-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-configured-table-input
                    'make-create-configured-table-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-table-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-table-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-reference))
      (common-lisp:list
       (common-lisp:cons "tableReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-columns))
      (common-lisp:list
       (common-lisp:cons "allowedColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-method))
      (common-lisp:list
       (common-lisp:cons "analysisMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-table-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-configured-table-output common-lisp:nil
                       ((configured-table :initarg :configured-table :initform
                         (common-lisp:error ":configuredtable is required")
                         :type
                         (common-lisp:or configured-table common-lisp:null)
                         :accessor
                         struct-shape-create-configured-table-output-configured-table
                         :shape "ConfiguredTable" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-configured-table-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-configured-table-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-configured-table-output
                    'make-create-configured-table-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-table-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-table-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configured-table))
      (common-lisp:list
       (common-lisp:cons "configuredTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-table-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-membership-input common-lisp:nil
                       ((collaboration-identifier :initarg
                         :collaboration-identifier :initform
                         (common-lisp:error
                          ":collaborationidentifier is required")
                         :type
                         (common-lisp:or collaboration-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-membership-input-collaboration-identifier
                         :shape "CollaborationIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (query-log-status :initarg :query-log-status :initform
                         (common-lisp:error ":querylogstatus is required")
                         :type
                         (common-lisp:or membership-query-log-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-membership-input-query-log-status
                         :shape "MembershipQueryLogStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-membership-input-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (default-result-configuration :initarg
                         :default-result-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          membership-protected-query-result-configuration
                          common-lisp:null)
                         :accessor
                         struct-shape-create-membership-input-default-result-configuration
                         :shape "MembershipProtectedQueryResultConfiguration"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (payment-configuration :initarg :payment-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or membership-payment-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-membership-input-payment-configuration
                         :shape "MembershipPaymentConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-membership-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-membership-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-membership-input 'make-create-membership-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-membership-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-membership-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'collaboration-identifier))
      (common-lisp:list
       (common-lisp:cons "collaborationIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-log-status))
      (common-lisp:list
       (common-lisp:cons "queryLogStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-result-configuration))
      (common-lisp:list
       (common-lisp:cons "defaultResultConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'payment-configuration))
      (common-lisp:list
       (common-lisp:cons "paymentConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-membership-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-membership-output common-lisp:nil
                       ((membership :initarg :membership :initform
                         (common-lisp:error ":membership is required") :type
                         (common-lisp:or membership common-lisp:null) :accessor
                         struct-shape-create-membership-output-membership
                         :shape "Membership" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-membership-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-membership-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-membership-output 'make-create-membership-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-membership-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-membership-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership))
      (common-lisp:list
       (common-lisp:cons "membership"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-membership-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-privacy-budget-template-input common-lisp:nil
                       ((membership-identifier :initarg :membership-identifier
                         :initform
                         (common-lisp:error
                          ":membershipidentifier is required")
                         :type
                         (common-lisp:or membership-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-privacy-budget-template-input-membership-identifier
                         :shape "MembershipIdentifier" :location "uri"
                         :location-name "membershipIdentifier")
                        (auto-refresh :initarg :auto-refresh :initform
                         (common-lisp:error ":autorefresh is required") :type
                         (common-lisp:or privacy-budget-template-auto-refresh
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-privacy-budget-template-input-auto-refresh
                         :shape "PrivacyBudgetTemplateAutoRefresh" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (privacy-budget-type :initarg :privacy-budget-type
                         :initform
                         (common-lisp:error ":privacybudgettype is required")
                         :type
                         (common-lisp:or privacy-budget-type common-lisp:null)
                         :accessor
                         struct-shape-create-privacy-budget-template-input-privacy-budget-type
                         :shape "PrivacyBudgetType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         (common-lisp:error ":parameters is required") :type
                         (common-lisp:or
                          privacy-budget-template-parameters-input
                          common-lisp:null)
                         :accessor
                         struct-shape-create-privacy-budget-template-input-parameters
                         :shape "PrivacyBudgetTemplateParametersInput"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-privacy-budget-template-input-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-privacy-budget-template-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-privacy-budget-template-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-privacy-budget-template-input
                    'make-create-privacy-budget-template-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-privacy-budget-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-privacy-budget-template-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-refresh))
      (common-lisp:list
       (common-lisp:cons "autoRefresh"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'privacy-budget-type))
      (common-lisp:list
       (common-lisp:cons "privacyBudgetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-privacy-budget-template-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-privacy-budget-template-output common-lisp:nil
                       ((privacy-budget-template :initarg
                         :privacy-budget-template :initform
                         (common-lisp:error
                          ":privacybudgettemplate is required")
                         :type
                         (common-lisp:or privacy-budget-template
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-privacy-budget-template-output-privacy-budget-template
                         :shape "PrivacyBudgetTemplate" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-privacy-budget-template-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-privacy-budget-template-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-privacy-budget-template-output
                    'make-create-privacy-budget-template-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-privacy-budget-template-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-privacy-budget-template-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'privacy-budget-template))
      (common-lisp:list
       (common-lisp:cons "privacyBudgetTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-privacy-budget-template-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-encryption-metadata common-lisp:nil
                       ((allow-cleartext :initarg :allow-cleartext :initform
                         (common-lisp:error ":allowcleartext is required")
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-data-encryption-metadata-allow-cleartext
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allow-duplicates :initarg :allow-duplicates :initform
                         (common-lisp:error ":allowduplicates is required")
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-data-encryption-metadata-allow-duplicates
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allow-joins-on-columns-with-different-names :initarg
                         :allow-joins-on-columns-with-different-names :initform
                         (common-lisp:error
                          ":allowjoinsoncolumnswithdifferentnames is required")
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-data-encryption-metadata-allow-joins-on-columns-with-different-names
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (preserve-nulls :initarg :preserve-nulls :initform
                         (common-lisp:error ":preservenulls is required") :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-data-encryption-metadata-preserve-nulls
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-encryption-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-encryption-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-encryption-metadata 'make-data-encryption-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-encryption-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-encryption-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-cleartext))
      (common-lisp:list
       (common-lisp:cons "allowCleartext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-duplicates))
      (common-lisp:list
       (common-lisp:cons "allowDuplicates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-joins-on-columns-with-different-names))
      (common-lisp:list
       (common-lisp:cons "allowJoinsOnColumnsWithDifferentNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'preserve-nulls))
      (common-lisp:list
       (common-lisp:cons "preserveNulls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-encryption-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-analysis-template-input common-lisp:nil
                       ((membership-identifier :initarg :membership-identifier
                         :initform
                         (common-lisp:error
                          ":membershipidentifier is required")
                         :type
                         (common-lisp:or membership-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-analysis-template-input-membership-identifier
                         :shape "MembershipIdentifier" :location "uri"
                         :location-name "membershipIdentifier")
                        (analysis-template-identifier :initarg
                         :analysis-template-identifier :initform
                         (common-lisp:error
                          ":analysistemplateidentifier is required")
                         :type
                         (common-lisp:or analysis-template-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-analysis-template-input-analysis-template-identifier
                         :shape "AnalysisTemplateIdentifier" :location "uri"
                         :location-name "analysisTemplateIdentifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-analysis-template-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-analysis-template-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-analysis-template-input
                    'make-delete-analysis-template-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-analysis-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-analysis-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-analysis-template-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-analysis-template-output common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-analysis-template-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-analysis-template-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-analysis-template-output
                    'make-delete-analysis-template-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-analysis-template-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-analysis-template-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-analysis-template-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-collaboration-input common-lisp:nil
                       ((collaboration-identifier :initarg
                         :collaboration-identifier :initform
                         (common-lisp:error
                          ":collaborationidentifier is required")
                         :type
                         (common-lisp:or collaboration-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-collaboration-input-collaboration-identifier
                         :shape "CollaborationIdentifier" :location "uri"
                         :location-name "collaborationIdentifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-collaboration-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-collaboration-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-collaboration-input
                    'make-delete-collaboration-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-collaboration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-collaboration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-collaboration-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-collaboration-output common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-collaboration-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-collaboration-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-collaboration-output
                    'make-delete-collaboration-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-collaboration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-collaboration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-collaboration-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-configured-audience-model-association-input
                       common-lisp:nil
                       ((configured-audience-model-association-identifier
                         :initarg
                         :configured-audience-model-association-identifier
                         :initform
                         (common-lisp:error
                          ":configuredaudiencemodelassociationidentifier is required")
                         :type
                         (common-lisp:or
                          configured-audience-model-association-identifier
                          common-lisp:null)
                         :accessor
                         struct-shape-delete-configured-audience-model-association-input-configured-audience-model-association-identifier
                         :shape "ConfiguredAudienceModelAssociationIdentifier"
                         :location "uri" :location-name
                         "configuredAudienceModelAssociationIdentifier")
                        (membership-identifier :initarg :membership-identifier
                         :initform
                         (common-lisp:error
                          ":membershipidentifier is required")
                         :type
                         (common-lisp:or membership-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-configured-audience-model-association-input-membership-identifier
                         :shape "MembershipIdentifier" :location "uri"
                         :location-name "membershipIdentifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-configured-audience-model-association-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-configured-audience-model-association-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-configured-audience-model-association-input
                    'make-delete-configured-audience-model-association-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-audience-model-association-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-audience-model-association-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-audience-model-association-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-configured-audience-model-association-output
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-configured-audience-model-association-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-configured-audience-model-association-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-configured-audience-model-association-output
                    'make-delete-configured-audience-model-association-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-audience-model-association-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-audience-model-association-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-audience-model-association-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-configured-table-analysis-rule-input
                       common-lisp:nil
                       ((configured-table-identifier :initarg
                         :configured-table-identifier :initform
                         (common-lisp:error
                          ":configuredtableidentifier is required")
                         :type
                         (common-lisp:or configured-table-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-configured-table-analysis-rule-input-configured-table-identifier
                         :shape "ConfiguredTableIdentifier" :location "uri"
                         :location-name "configuredTableIdentifier")
                        (analysis-rule-type :initarg :analysis-rule-type
                         :initform
                         (common-lisp:error ":analysisruletype is required")
                         :type
                         (common-lisp:or configured-table-analysis-rule-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-configured-table-analysis-rule-input-analysis-rule-type
                         :shape "ConfiguredTableAnalysisRuleType" :location
                         "uri" :location-name "analysisRuleType"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-configured-table-analysis-rule-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-configured-table-analysis-rule-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-configured-table-analysis-rule-input
                    'make-delete-configured-table-analysis-rule-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-table-analysis-rule-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-table-analysis-rule-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-table-analysis-rule-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-configured-table-analysis-rule-output
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-configured-table-analysis-rule-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-configured-table-analysis-rule-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-configured-table-analysis-rule-output
                    'make-delete-configured-table-analysis-rule-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-table-analysis-rule-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-table-analysis-rule-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-table-analysis-rule-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-configured-table-association-input
                       common-lisp:nil
                       ((configured-table-association-identifier :initarg
                         :configured-table-association-identifier :initform
                         (common-lisp:error
                          ":configuredtableassociationidentifier is required")
                         :type
                         (common-lisp:or
                          configured-table-association-identifier
                          common-lisp:null)
                         :accessor
                         struct-shape-delete-configured-table-association-input-configured-table-association-identifier
                         :shape "ConfiguredTableAssociationIdentifier"
                         :location "uri" :location-name
                         "configuredTableAssociationIdentifier")
                        (membership-identifier :initarg :membership-identifier
                         :initform
                         (common-lisp:error
                          ":membershipidentifier is required")
                         :type
                         (common-lisp:or membership-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-configured-table-association-input-membership-identifier
                         :shape "MembershipIdentifier" :location "uri"
                         :location-name "membershipIdentifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-configured-table-association-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-configured-table-association-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-configured-table-association-input
                    'make-delete-configured-table-association-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-table-association-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-table-association-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-table-association-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-configured-table-association-output
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-configured-table-association-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-configured-table-association-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-configured-table-association-output
                    'make-delete-configured-table-association-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-table-association-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-table-association-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-table-association-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-configured-table-input common-lisp:nil
                       ((configured-table-identifier :initarg
                         :configured-table-identifier :initform
                         (common-lisp:error
                          ":configuredtableidentifier is required")
                         :type
                         (common-lisp:or configured-table-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-configured-table-input-configured-table-identifier
                         :shape "ConfiguredTableIdentifier" :location "uri"
                         :location-name "configuredTableIdentifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-configured-table-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-configured-table-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-configured-table-input
                    'make-delete-configured-table-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-table-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-table-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-table-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-configured-table-output common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-configured-table-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-configured-table-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-configured-table-output
                    'make-delete-configured-table-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-table-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-table-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-table-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-member-input common-lisp:nil
                       ((collaboration-identifier :initarg
                         :collaboration-identifier :initform
                         (common-lisp:error
                          ":collaborationidentifier is required")
                         :type
                         (common-lisp:or collaboration-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-member-input-collaboration-identifier
                         :shape "CollaborationIdentifier" :location "uri"
                         :location-name "collaborationIdentifier")
                        (account-id :initarg :account-id :initform
                         (common-lisp:error ":accountid is required") :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-delete-member-input-account-id :shape
                         "AccountId" :location "uri" :location-name
                         "accountId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-member-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-member-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-member-input 'make-delete-member-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-member-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-member-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-member-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-member-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-member-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-member-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-member-output 'make-delete-member-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-member-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-member-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-member-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-membership-input common-lisp:nil
                       ((membership-identifier :initarg :membership-identifier
                         :initform
                         (common-lisp:error
                          ":membershipidentifier is required")
                         :type
                         (common-lisp:or membership-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-membership-input-membership-identifier
                         :shape "MembershipIdentifier" :location "uri"
                         :location-name "membershipIdentifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-membership-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-membership-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-membership-input 'make-delete-membership-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-membership-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-membership-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-membership-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-membership-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-membership-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-membership-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-membership-output 'make-delete-membership-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-membership-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-membership-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-membership-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-privacy-budget-template-input common-lisp:nil
                       ((membership-identifier :initarg :membership-identifier
                         :initform
                         (common-lisp:error
                          ":membershipidentifier is required")
                         :type
                         (common-lisp:or membership-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-privacy-budget-template-input-membership-identifier
                         :shape "MembershipIdentifier" :location "uri"
                         :location-name "membershipIdentifier")
                        (privacy-budget-template-identifier :initarg
                         :privacy-budget-template-identifier :initform
                         (common-lisp:error
                          ":privacybudgettemplateidentifier is required")
                         :type
                         (common-lisp:or privacy-budget-template-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-privacy-budget-template-input-privacy-budget-template-identifier
                         :shape "PrivacyBudgetTemplateIdentifier" :location
                         "uri" :location-name
                         "privacyBudgetTemplateIdentifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-privacy-budget-template-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-privacy-budget-template-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-privacy-budget-template-input
                    'make-delete-privacy-budget-template-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-privacy-budget-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-privacy-budget-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-privacy-budget-template-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-privacy-budget-template-output common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-privacy-budget-template-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-privacy-budget-template-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-privacy-budget-template-output
                    'make-delete-privacy-budget-template-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-privacy-budget-template-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-privacy-budget-template-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-privacy-budget-template-output))
   common-lisp:nil))
(common-lisp:deftype differential-privacy-aggregation-expression ()
  'common-lisp:string)
(common-lisp:deftype differential-privacy-aggregation-type ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass differential-privacy-column common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-differential-privacy-column-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-differential-privacy-column
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'differential-privacy-column
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'differential-privacy-column
                    'make-differential-privacy-column))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          differential-privacy-column))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          differential-privacy-column))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          differential-privacy-column))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype differential-privacy-column-list ()
   '(trivial-types:proper-list differential-privacy-column))
 (common-lisp:defun make-differential-privacy-column-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            differential-privacy-column))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass differential-privacy-configuration common-lisp:nil
                       ((columns :initarg :columns :initform
                         (common-lisp:error ":columns is required") :type
                         (common-lisp:or differential-privacy-column-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-differential-privacy-configuration-columns
                         :shape "DifferentialPrivacyColumnList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-differential-privacy-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'differential-privacy-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'differential-privacy-configuration
                    'make-differential-privacy-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          differential-privacy-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          differential-privacy-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'columns))
      (common-lisp:list
       (common-lisp:cons "columns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          differential-privacy-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass differential-privacy-parameters common-lisp:nil
                       ((sensitivity-parameters :initarg
                         :sensitivity-parameters :initform
                         (common-lisp:error
                          ":sensitivityparameters is required")
                         :type
                         (common-lisp:or
                          differential-privacy-sensitivity-parameters-list
                          common-lisp:null)
                         :accessor
                         struct-shape-differential-privacy-parameters-sensitivity-parameters
                         :shape "DifferentialPrivacySensitivityParametersList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-differential-privacy-parameters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'differential-privacy-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'differential-privacy-parameters
                    'make-differential-privacy-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          differential-privacy-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          differential-privacy-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sensitivity-parameters))
      (common-lisp:list
       (common-lisp:cons "sensitivityParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          differential-privacy-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass differential-privacy-preview-aggregation common-lisp:nil
                       ((type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or differential-privacy-aggregation-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-differential-privacy-preview-aggregation-type
                         :shape "DifferentialPrivacyAggregationType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-count :initarg :max-count :initform
                         (common-lisp:error ":maxcount is required") :type
                         (common-lisp:or
                          differential-privacy-preview-aggregation-max-count-integer
                          common-lisp:null)
                         :accessor
                         struct-shape-differential-privacy-preview-aggregation-max-count
                         :shape
                         "DifferentialPrivacyPreviewAggregationMaxCountInteger"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-differential-privacy-preview-aggregation
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'differential-privacy-preview-aggregation
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'differential-privacy-preview-aggregation
                    'make-differential-privacy-preview-aggregation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          differential-privacy-preview-aggregation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          differential-privacy-preview-aggregation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-count))
      (common-lisp:list
       (common-lisp:cons "maxCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          differential-privacy-preview-aggregation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype differential-privacy-preview-aggregation-list ()
   '(trivial-types:proper-list differential-privacy-preview-aggregation))
 (common-lisp:defun make-differential-privacy-preview-aggregation-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            differential-privacy-preview-aggregation))
   aws-sdk/generator/shape::members))
(common-lisp:deftype differential-privacy-preview-aggregation-max-count-integer
                     ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass differential-privacy-preview-parameters-input
                       common-lisp:nil
                       ((epsilon :initarg :epsilon :initform
                         (common-lisp:error ":epsilon is required") :type
                         (common-lisp:or epsilon common-lisp:null) :accessor
                         struct-shape-differential-privacy-preview-parameters-input-epsilon
                         :shape "Epsilon" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (users-noise-per-query :initarg :users-noise-per-query
                         :initform
                         (common-lisp:error ":usersnoiseperquery is required")
                         :type
                         (common-lisp:or users-noise-per-query
                                         common-lisp:null)
                         :accessor
                         struct-shape-differential-privacy-preview-parameters-input-users-noise-per-query
                         :shape "UsersNoisePerQuery" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-differential-privacy-preview-parameters-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'differential-privacy-preview-parameters-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'differential-privacy-preview-parameters-input
                    'make-differential-privacy-preview-parameters-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          differential-privacy-preview-parameters-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          differential-privacy-preview-parameters-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'epsilon))
      (common-lisp:list
       (common-lisp:cons "epsilon"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'users-noise-per-query))
      (common-lisp:list
       (common-lisp:cons "usersNoisePerQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          differential-privacy-preview-parameters-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass differential-privacy-privacy-budget common-lisp:nil
                       ((aggregations :initarg :aggregations :initform
                         (common-lisp:error ":aggregations is required") :type
                         (common-lisp:or
                          differential-privacy-privacy-budget-aggregation-list
                          common-lisp:null)
                         :accessor
                         struct-shape-differential-privacy-privacy-budget-aggregations
                         :shape
                         "DifferentialPrivacyPrivacyBudgetAggregationList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (epsilon :initarg :epsilon :initform
                         (common-lisp:error ":epsilon is required") :type
                         (common-lisp:or epsilon common-lisp:null) :accessor
                         struct-shape-differential-privacy-privacy-budget-epsilon
                         :shape "Epsilon" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-differential-privacy-privacy-budget
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'differential-privacy-privacy-budget
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'differential-privacy-privacy-budget
                    'make-differential-privacy-privacy-budget))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          differential-privacy-privacy-budget))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          differential-privacy-privacy-budget))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregations))
      (common-lisp:list
       (common-lisp:cons "aggregations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'epsilon))
      (common-lisp:list
       (common-lisp:cons "epsilon"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          differential-privacy-privacy-budget))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass differential-privacy-privacy-budget-aggregation
                       common-lisp:nil
                       ((type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or differential-privacy-aggregation-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-differential-privacy-privacy-budget-aggregation-type
                         :shape "DifferentialPrivacyAggregationType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-count :initarg :max-count :initform
                         (common-lisp:error ":maxcount is required") :type
                         (common-lisp:or
                          differential-privacy-privacy-budget-aggregation-max-count-integer
                          common-lisp:null)
                         :accessor
                         struct-shape-differential-privacy-privacy-budget-aggregation-max-count
                         :shape
                         "DifferentialPrivacyPrivacyBudgetAggregationMaxCountInteger"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (remaining-count :initarg :remaining-count :initform
                         (common-lisp:error ":remainingcount is required")
                         :type
                         (common-lisp:or
                          differential-privacy-privacy-budget-aggregation-remaining-count-integer
                          common-lisp:null)
                         :accessor
                         struct-shape-differential-privacy-privacy-budget-aggregation-remaining-count
                         :shape
                         "DifferentialPrivacyPrivacyBudgetAggregationRemainingCountInteger"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-differential-privacy-privacy-budget-aggregation
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'differential-privacy-privacy-budget-aggregation
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'differential-privacy-privacy-budget-aggregation
                    'make-differential-privacy-privacy-budget-aggregation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          differential-privacy-privacy-budget-aggregation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          differential-privacy-privacy-budget-aggregation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-count))
      (common-lisp:list
       (common-lisp:cons "maxCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remaining-count))
      (common-lisp:list
       (common-lisp:cons "remainingCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          differential-privacy-privacy-budget-aggregation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype differential-privacy-privacy-budget-aggregation-list ()
   '(trivial-types:proper-list
     differential-privacy-privacy-budget-aggregation))
 (common-lisp:defun make-differential-privacy-privacy-budget-aggregation-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            differential-privacy-privacy-budget-aggregation))
   aws-sdk/generator/shape::members))
(common-lisp:deftype differential-privacy-privacy-budget-aggregation-max-count-integer
                     ()
  'common-lisp:integer)
(common-lisp:deftype differential-privacy-privacy-budget-aggregation-remaining-count-integer
                     ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass differential-privacy-privacy-impact common-lisp:nil
                       ((aggregations :initarg :aggregations :initform
                         (common-lisp:error ":aggregations is required") :type
                         (common-lisp:or
                          differential-privacy-preview-aggregation-list
                          common-lisp:null)
                         :accessor
                         struct-shape-differential-privacy-privacy-impact-aggregations
                         :shape "DifferentialPrivacyPreviewAggregationList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-differential-privacy-privacy-impact
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'differential-privacy-privacy-impact
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'differential-privacy-privacy-impact
                    'make-differential-privacy-privacy-impact))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          differential-privacy-privacy-impact))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          differential-privacy-privacy-impact))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregations))
      (common-lisp:list
       (common-lisp:cons "aggregations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          differential-privacy-privacy-impact))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass differential-privacy-sensitivity-parameters
                       common-lisp:nil
                       ((aggregation-type :initarg :aggregation-type :initform
                         (common-lisp:error ":aggregationtype is required")
                         :type
                         (common-lisp:or differential-privacy-aggregation-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-differential-privacy-sensitivity-parameters-aggregation-type
                         :shape "DifferentialPrivacyAggregationType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (aggregation-expression :initarg
                         :aggregation-expression :initform
                         (common-lisp:error
                          ":aggregationexpression is required")
                         :type
                         (common-lisp:or
                          differential-privacy-aggregation-expression
                          common-lisp:null)
                         :accessor
                         struct-shape-differential-privacy-sensitivity-parameters-aggregation-expression
                         :shape "DifferentialPrivacyAggregationExpression"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (user-contribution-limit :initarg
                         :user-contribution-limit :initform
                         (common-lisp:error
                          ":usercontributionlimit is required")
                         :type
                         (common-lisp:or
                          differential-privacy-sensitivity-parameters-user-contribution-limit-integer
                          common-lisp:null)
                         :accessor
                         struct-shape-differential-privacy-sensitivity-parameters-user-contribution-limit
                         :shape
                         "DifferentialPrivacySensitivityParametersUserContributionLimitInteger"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (min-column-value :initarg :min-column-value :initform
                         common-lisp:nil :type
                         (common-lisp:or float common-lisp:null) :accessor
                         struct-shape-differential-privacy-sensitivity-parameters-min-column-value
                         :shape "Float" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-column-value :initarg :max-column-value :initform
                         common-lisp:nil :type
                         (common-lisp:or float common-lisp:null) :accessor
                         struct-shape-differential-privacy-sensitivity-parameters-max-column-value
                         :shape "Float" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-differential-privacy-sensitivity-parameters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'differential-privacy-sensitivity-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'differential-privacy-sensitivity-parameters
                    'make-differential-privacy-sensitivity-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          differential-privacy-sensitivity-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          differential-privacy-sensitivity-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregation-type))
      (common-lisp:list
       (common-lisp:cons "aggregationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aggregation-expression))
      (common-lisp:list
       (common-lisp:cons "aggregationExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-contribution-limit))
      (common-lisp:list
       (common-lisp:cons "userContributionLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-column-value))
      (common-lisp:list
       (common-lisp:cons "minColumnValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-column-value))
      (common-lisp:list
       (common-lisp:cons "maxColumnValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          differential-privacy-sensitivity-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype differential-privacy-sensitivity-parameters-list ()
   '(trivial-types:proper-list differential-privacy-sensitivity-parameters))
 (common-lisp:defun make-differential-privacy-sensitivity-parameters-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            differential-privacy-sensitivity-parameters))
   aws-sdk/generator/shape::members))
(common-lisp:deftype differential-privacy-sensitivity-parameters-user-contribution-limit-integer
                     ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass differential-privacy-template-parameters-input
                       common-lisp:nil
                       ((epsilon :initarg :epsilon :initform
                         (common-lisp:error ":epsilon is required") :type
                         (common-lisp:or epsilon common-lisp:null) :accessor
                         struct-shape-differential-privacy-template-parameters-input-epsilon
                         :shape "Epsilon" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (users-noise-per-query :initarg :users-noise-per-query
                         :initform
                         (common-lisp:error ":usersnoiseperquery is required")
                         :type
                         (common-lisp:or users-noise-per-query
                                         common-lisp:null)
                         :accessor
                         struct-shape-differential-privacy-template-parameters-input-users-noise-per-query
                         :shape "UsersNoisePerQuery" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-differential-privacy-template-parameters-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'differential-privacy-template-parameters-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'differential-privacy-template-parameters-input
                    'make-differential-privacy-template-parameters-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          differential-privacy-template-parameters-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          differential-privacy-template-parameters-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'epsilon))
      (common-lisp:list
       (common-lisp:cons "epsilon"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'users-noise-per-query))
      (common-lisp:list
       (common-lisp:cons "usersNoisePerQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          differential-privacy-template-parameters-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass differential-privacy-template-parameters-output
                       common-lisp:nil
                       ((epsilon :initarg :epsilon :initform
                         (common-lisp:error ":epsilon is required") :type
                         (common-lisp:or epsilon common-lisp:null) :accessor
                         struct-shape-differential-privacy-template-parameters-output-epsilon
                         :shape "Epsilon" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (users-noise-per-query :initarg :users-noise-per-query
                         :initform
                         (common-lisp:error ":usersnoiseperquery is required")
                         :type
                         (common-lisp:or users-noise-per-query
                                         common-lisp:null)
                         :accessor
                         struct-shape-differential-privacy-template-parameters-output-users-noise-per-query
                         :shape "UsersNoisePerQuery" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-differential-privacy-template-parameters-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'differential-privacy-template-parameters-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'differential-privacy-template-parameters-output
                    'make-differential-privacy-template-parameters-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          differential-privacy-template-parameters-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          differential-privacy-template-parameters-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'epsilon))
      (common-lisp:list
       (common-lisp:cons "epsilon"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'users-noise-per-query))
      (common-lisp:list
       (common-lisp:cons "usersNoisePerQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          differential-privacy-template-parameters-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass differential-privacy-template-update-parameters
                       common-lisp:nil
                       ((epsilon :initarg :epsilon :initform common-lisp:nil
                         :type (common-lisp:or epsilon common-lisp:null)
                         :accessor
                         struct-shape-differential-privacy-template-update-parameters-epsilon
                         :shape "Epsilon" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (users-noise-per-query :initarg :users-noise-per-query
                         :initform common-lisp:nil :type
                         (common-lisp:or users-noise-per-query
                                         common-lisp:null)
                         :accessor
                         struct-shape-differential-privacy-template-update-parameters-users-noise-per-query
                         :shape "UsersNoisePerQuery" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-differential-privacy-template-update-parameters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'differential-privacy-template-update-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'differential-privacy-template-update-parameters
                    'make-differential-privacy-template-update-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          differential-privacy-template-update-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          differential-privacy-template-update-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'epsilon))
      (common-lisp:list
       (common-lisp:cons "epsilon"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'users-noise-per-query))
      (common-lisp:list
       (common-lisp:cons "usersNoisePerQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          differential-privacy-template-update-parameters))
   common-lisp:nil))
(common-lisp:deftype display-name () 'common-lisp:string)
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:deftype epsilon () 'common-lisp:integer)
(common-lisp:deftype filterable-member-status () 'common-lisp:string)
(common-lisp:deftype float () 'common-lisp:single-float)
(common-lisp:progn
 (common-lisp:defclass get-analysis-template-input common-lisp:nil
                       ((membership-identifier :initarg :membership-identifier
                         :initform
                         (common-lisp:error
                          ":membershipidentifier is required")
                         :type
                         (common-lisp:or membership-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-analysis-template-input-membership-identifier
                         :shape "MembershipIdentifier" :location "uri"
                         :location-name "membershipIdentifier")
                        (analysis-template-identifier :initarg
                         :analysis-template-identifier :initform
                         (common-lisp:error
                          ":analysistemplateidentifier is required")
                         :type
                         (common-lisp:or analysis-template-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-analysis-template-input-analysis-template-identifier
                         :shape "AnalysisTemplateIdentifier" :location "uri"
                         :location-name "analysisTemplateIdentifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-analysis-template-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-analysis-template-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-analysis-template-input
                    'make-get-analysis-template-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-analysis-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-analysis-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-analysis-template-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-analysis-template-output common-lisp:nil
                       ((analysis-template :initarg :analysis-template
                         :initform
                         (common-lisp:error ":analysistemplate is required")
                         :type
                         (common-lisp:or analysis-template common-lisp:null)
                         :accessor
                         struct-shape-get-analysis-template-output-analysis-template
                         :shape "AnalysisTemplate" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-analysis-template-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-analysis-template-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-analysis-template-output
                    'make-get-analysis-template-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-analysis-template-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-analysis-template-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-template))
      (common-lisp:list
       (common-lisp:cons "analysisTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-analysis-template-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-collaboration-analysis-template-input
                       common-lisp:nil
                       ((collaboration-identifier :initarg
                         :collaboration-identifier :initform
                         (common-lisp:error
                          ":collaborationidentifier is required")
                         :type
                         (common-lisp:or collaboration-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-collaboration-analysis-template-input-collaboration-identifier
                         :shape "CollaborationIdentifier" :location "uri"
                         :location-name "collaborationIdentifier")
                        (analysis-template-arn :initarg :analysis-template-arn
                         :initform
                         (common-lisp:error ":analysistemplatearn is required")
                         :type
                         (common-lisp:or analysis-template-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-collaboration-analysis-template-input-analysis-template-arn
                         :shape "AnalysisTemplateArn" :location "uri"
                         :location-name "analysisTemplateArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-collaboration-analysis-template-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-collaboration-analysis-template-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-collaboration-analysis-template-input
                    'make-get-collaboration-analysis-template-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-collaboration-analysis-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-collaboration-analysis-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-collaboration-analysis-template-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-collaboration-analysis-template-output
                       common-lisp:nil
                       ((collaboration-analysis-template :initarg
                         :collaboration-analysis-template :initform
                         (common-lisp:error
                          ":collaborationanalysistemplate is required")
                         :type
                         (common-lisp:or collaboration-analysis-template
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-collaboration-analysis-template-output-collaboration-analysis-template
                         :shape "CollaborationAnalysisTemplate" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-collaboration-analysis-template-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-collaboration-analysis-template-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-collaboration-analysis-template-output
                    'make-get-collaboration-analysis-template-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-collaboration-analysis-template-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-collaboration-analysis-template-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'collaboration-analysis-template))
      (common-lisp:list
       (common-lisp:cons "collaborationAnalysisTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-collaboration-analysis-template-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  get-collaboration-configured-audience-model-association-input common-lisp:nil
  ((collaboration-identifier :initarg :collaboration-identifier :initform
    (common-lisp:error ":collaborationidentifier is required") :type
    (common-lisp:or collaboration-identifier common-lisp:null) :accessor
    struct-shape-get-collaboration-configured-audience-model-association-input-collaboration-identifier
    :shape "CollaborationIdentifier" :location "uri" :location-name
    "collaborationIdentifier")
   (configured-audience-model-association-identifier :initarg
    :configured-audience-model-association-identifier :initform
    (common-lisp:error
     ":configuredaudiencemodelassociationidentifier is required")
    :type
    (common-lisp:or configured-audience-model-association-identifier
                    common-lisp:null)
    :accessor
    struct-shape-get-collaboration-configured-audience-model-association-input-configured-audience-model-association-identifier
    :shape "ConfiguredAudienceModelAssociationIdentifier" :location "uri"
    :location-name "configuredAudienceModelAssociationIdentifier"))
  (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-collaboration-configured-audience-model-association-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-collaboration-configured-audience-model-association-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list
   'get-collaboration-configured-audience-model-association-input
   'make-get-collaboration-configured-audience-model-association-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-collaboration-configured-audience-model-association-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-collaboration-configured-audience-model-association-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-collaboration-configured-audience-model-association-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  get-collaboration-configured-audience-model-association-output
  common-lisp:nil
  ((collaboration-configured-audience-model-association :initarg
    :collaboration-configured-audience-model-association :initform
    (common-lisp:error
     ":collaborationconfiguredaudiencemodelassociation is required")
    :type
    (common-lisp:or collaboration-configured-audience-model-association
                    common-lisp:null)
    :accessor
    struct-shape-get-collaboration-configured-audience-model-association-output-collaboration-configured-audience-model-association
    :shape "CollaborationConfiguredAudienceModelAssociation" :location
    common-lisp:nil :location-name common-lisp:nil))
  (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-collaboration-configured-audience-model-association-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-collaboration-configured-audience-model-association-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list
   'get-collaboration-configured-audience-model-association-output
   'make-get-collaboration-configured-audience-model-association-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-collaboration-configured-audience-model-association-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-collaboration-configured-audience-model-association-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'collaboration-configured-audience-model-association))
      (common-lisp:list
       (common-lisp:cons "collaborationConfiguredAudienceModelAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-collaboration-configured-audience-model-association-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-collaboration-input common-lisp:nil
                       ((collaboration-identifier :initarg
                         :collaboration-identifier :initform
                         (common-lisp:error
                          ":collaborationidentifier is required")
                         :type
                         (common-lisp:or collaboration-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-collaboration-input-collaboration-identifier
                         :shape "CollaborationIdentifier" :location "uri"
                         :location-name "collaborationIdentifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-collaboration-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-collaboration-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-collaboration-input 'make-get-collaboration-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-collaboration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-collaboration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-collaboration-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-collaboration-output common-lisp:nil
                       ((collaboration :initarg :collaboration :initform
                         (common-lisp:error ":collaboration is required") :type
                         (common-lisp:or collaboration common-lisp:null)
                         :accessor
                         struct-shape-get-collaboration-output-collaboration
                         :shape "Collaboration" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-collaboration-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-collaboration-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-collaboration-output 'make-get-collaboration-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-collaboration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-collaboration-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration))
      (common-lisp:list
       (common-lisp:cons "collaboration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-collaboration-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-collaboration-privacy-budget-template-input
                       common-lisp:nil
                       ((collaboration-identifier :initarg
                         :collaboration-identifier :initform
                         (common-lisp:error
                          ":collaborationidentifier is required")
                         :type
                         (common-lisp:or collaboration-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-collaboration-privacy-budget-template-input-collaboration-identifier
                         :shape "CollaborationIdentifier" :location "uri"
                         :location-name "collaborationIdentifier")
                        (privacy-budget-template-identifier :initarg
                         :privacy-budget-template-identifier :initform
                         (common-lisp:error
                          ":privacybudgettemplateidentifier is required")
                         :type
                         (common-lisp:or privacy-budget-template-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-collaboration-privacy-budget-template-input-privacy-budget-template-identifier
                         :shape "PrivacyBudgetTemplateIdentifier" :location
                         "uri" :location-name
                         "privacyBudgetTemplateIdentifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-collaboration-privacy-budget-template-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-collaboration-privacy-budget-template-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-collaboration-privacy-budget-template-input
                    'make-get-collaboration-privacy-budget-template-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-collaboration-privacy-budget-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-collaboration-privacy-budget-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-collaboration-privacy-budget-template-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-collaboration-privacy-budget-template-output
                       common-lisp:nil
                       ((collaboration-privacy-budget-template :initarg
                         :collaboration-privacy-budget-template :initform
                         (common-lisp:error
                          ":collaborationprivacybudgettemplate is required")
                         :type
                         (common-lisp:or collaboration-privacy-budget-template
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-collaboration-privacy-budget-template-output-collaboration-privacy-budget-template
                         :shape "CollaborationPrivacyBudgetTemplate" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-collaboration-privacy-budget-template-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-collaboration-privacy-budget-template-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-collaboration-privacy-budget-template-output
                    'make-get-collaboration-privacy-budget-template-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-collaboration-privacy-budget-template-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-collaboration-privacy-budget-template-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'collaboration-privacy-budget-template))
      (common-lisp:list
       (common-lisp:cons "collaborationPrivacyBudgetTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-collaboration-privacy-budget-template-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-configured-audience-model-association-input
                       common-lisp:nil
                       ((configured-audience-model-association-identifier
                         :initarg
                         :configured-audience-model-association-identifier
                         :initform
                         (common-lisp:error
                          ":configuredaudiencemodelassociationidentifier is required")
                         :type
                         (common-lisp:or
                          configured-audience-model-association-identifier
                          common-lisp:null)
                         :accessor
                         struct-shape-get-configured-audience-model-association-input-configured-audience-model-association-identifier
                         :shape "ConfiguredAudienceModelAssociationIdentifier"
                         :location "uri" :location-name
                         "configuredAudienceModelAssociationIdentifier")
                        (membership-identifier :initarg :membership-identifier
                         :initform
                         (common-lisp:error
                          ":membershipidentifier is required")
                         :type
                         (common-lisp:or membership-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-configured-audience-model-association-input-membership-identifier
                         :shape "MembershipIdentifier" :location "uri"
                         :location-name "membershipIdentifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-configured-audience-model-association-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-configured-audience-model-association-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-configured-audience-model-association-input
                    'make-get-configured-audience-model-association-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-audience-model-association-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-audience-model-association-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-audience-model-association-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-configured-audience-model-association-output
                       common-lisp:nil
                       ((configured-audience-model-association :initarg
                         :configured-audience-model-association :initform
                         (common-lisp:error
                          ":configuredaudiencemodelassociation is required")
                         :type
                         (common-lisp:or configured-audience-model-association
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-configured-audience-model-association-output-configured-audience-model-association
                         :shape "ConfiguredAudienceModelAssociation" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-configured-audience-model-association-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-configured-audience-model-association-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-configured-audience-model-association-output
                    'make-get-configured-audience-model-association-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-audience-model-association-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-audience-model-association-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configured-audience-model-association))
      (common-lisp:list
       (common-lisp:cons "configuredAudienceModelAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-audience-model-association-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-configured-table-analysis-rule-input common-lisp:nil
                       ((configured-table-identifier :initarg
                         :configured-table-identifier :initform
                         (common-lisp:error
                          ":configuredtableidentifier is required")
                         :type
                         (common-lisp:or configured-table-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-configured-table-analysis-rule-input-configured-table-identifier
                         :shape "ConfiguredTableIdentifier" :location "uri"
                         :location-name "configuredTableIdentifier")
                        (analysis-rule-type :initarg :analysis-rule-type
                         :initform
                         (common-lisp:error ":analysisruletype is required")
                         :type
                         (common-lisp:or configured-table-analysis-rule-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-configured-table-analysis-rule-input-analysis-rule-type
                         :shape "ConfiguredTableAnalysisRuleType" :location
                         "uri" :location-name "analysisRuleType"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-configured-table-analysis-rule-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-configured-table-analysis-rule-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-configured-table-analysis-rule-input
                    'make-get-configured-table-analysis-rule-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-table-analysis-rule-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-table-analysis-rule-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-table-analysis-rule-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-configured-table-analysis-rule-output
                       common-lisp:nil
                       ((analysis-rule :initarg :analysis-rule :initform
                         (common-lisp:error ":analysisrule is required") :type
                         (common-lisp:or configured-table-analysis-rule
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-configured-table-analysis-rule-output-analysis-rule
                         :shape "ConfiguredTableAnalysisRule" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-configured-table-analysis-rule-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-configured-table-analysis-rule-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-configured-table-analysis-rule-output
                    'make-get-configured-table-analysis-rule-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-table-analysis-rule-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-table-analysis-rule-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-rule))
      (common-lisp:list
       (common-lisp:cons "analysisRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-table-analysis-rule-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-configured-table-association-input common-lisp:nil
                       ((configured-table-association-identifier :initarg
                         :configured-table-association-identifier :initform
                         (common-lisp:error
                          ":configuredtableassociationidentifier is required")
                         :type
                         (common-lisp:or
                          configured-table-association-identifier
                          common-lisp:null)
                         :accessor
                         struct-shape-get-configured-table-association-input-configured-table-association-identifier
                         :shape "ConfiguredTableAssociationIdentifier"
                         :location "uri" :location-name
                         "configuredTableAssociationIdentifier")
                        (membership-identifier :initarg :membership-identifier
                         :initform
                         (common-lisp:error
                          ":membershipidentifier is required")
                         :type
                         (common-lisp:or membership-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-configured-table-association-input-membership-identifier
                         :shape "MembershipIdentifier" :location "uri"
                         :location-name "membershipIdentifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-configured-table-association-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-configured-table-association-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-configured-table-association-input
                    'make-get-configured-table-association-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-table-association-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-table-association-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-table-association-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-configured-table-association-output common-lisp:nil
                       ((configured-table-association :initarg
                         :configured-table-association :initform
                         (common-lisp:error
                          ":configuredtableassociation is required")
                         :type
                         (common-lisp:or configured-table-association
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-configured-table-association-output-configured-table-association
                         :shape "ConfiguredTableAssociation" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-configured-table-association-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-configured-table-association-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-configured-table-association-output
                    'make-get-configured-table-association-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-table-association-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-table-association-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configured-table-association))
      (common-lisp:list
       (common-lisp:cons "configuredTableAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-table-association-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-configured-table-input common-lisp:nil
                       ((configured-table-identifier :initarg
                         :configured-table-identifier :initform
                         (common-lisp:error
                          ":configuredtableidentifier is required")
                         :type
                         (common-lisp:or configured-table-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-configured-table-input-configured-table-identifier
                         :shape "ConfiguredTableIdentifier" :location "uri"
                         :location-name "configuredTableIdentifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-configured-table-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-configured-table-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-configured-table-input
                    'make-get-configured-table-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-table-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-table-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-table-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-configured-table-output common-lisp:nil
                       ((configured-table :initarg :configured-table :initform
                         (common-lisp:error ":configuredtable is required")
                         :type
                         (common-lisp:or configured-table common-lisp:null)
                         :accessor
                         struct-shape-get-configured-table-output-configured-table
                         :shape "ConfiguredTable" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-configured-table-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-configured-table-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-configured-table-output
                    'make-get-configured-table-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-table-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-table-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configured-table))
      (common-lisp:list
       (common-lisp:cons "configuredTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-table-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-membership-input common-lisp:nil
                       ((membership-identifier :initarg :membership-identifier
                         :initform
                         (common-lisp:error
                          ":membershipidentifier is required")
                         :type
                         (common-lisp:or membership-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-membership-input-membership-identifier
                         :shape "MembershipIdentifier" :location "uri"
                         :location-name "membershipIdentifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-membership-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-membership-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-membership-input 'make-get-membership-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-membership-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-membership-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-membership-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-membership-output common-lisp:nil
                       ((membership :initarg :membership :initform
                         (common-lisp:error ":membership is required") :type
                         (common-lisp:or membership common-lisp:null) :accessor
                         struct-shape-get-membership-output-membership :shape
                         "Membership" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-membership-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-membership-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-membership-output 'make-get-membership-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-membership-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-membership-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership))
      (common-lisp:list
       (common-lisp:cons "membership"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-membership-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-privacy-budget-template-input common-lisp:nil
                       ((membership-identifier :initarg :membership-identifier
                         :initform
                         (common-lisp:error
                          ":membershipidentifier is required")
                         :type
                         (common-lisp:or membership-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-privacy-budget-template-input-membership-identifier
                         :shape "MembershipIdentifier" :location "uri"
                         :location-name "membershipIdentifier")
                        (privacy-budget-template-identifier :initarg
                         :privacy-budget-template-identifier :initform
                         (common-lisp:error
                          ":privacybudgettemplateidentifier is required")
                         :type
                         (common-lisp:or privacy-budget-template-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-privacy-budget-template-input-privacy-budget-template-identifier
                         :shape "PrivacyBudgetTemplateIdentifier" :location
                         "uri" :location-name
                         "privacyBudgetTemplateIdentifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-privacy-budget-template-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-privacy-budget-template-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-privacy-budget-template-input
                    'make-get-privacy-budget-template-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-privacy-budget-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-privacy-budget-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-privacy-budget-template-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-privacy-budget-template-output common-lisp:nil
                       ((privacy-budget-template :initarg
                         :privacy-budget-template :initform
                         (common-lisp:error
                          ":privacybudgettemplate is required")
                         :type
                         (common-lisp:or privacy-budget-template
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-privacy-budget-template-output-privacy-budget-template
                         :shape "PrivacyBudgetTemplate" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-privacy-budget-template-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-privacy-budget-template-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-privacy-budget-template-output
                    'make-get-privacy-budget-template-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-privacy-budget-template-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-privacy-budget-template-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'privacy-budget-template))
      (common-lisp:list
       (common-lisp:cons "privacyBudgetTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-privacy-budget-template-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-protected-query-input common-lisp:nil
                       ((membership-identifier :initarg :membership-identifier
                         :initform
                         (common-lisp:error
                          ":membershipidentifier is required")
                         :type
                         (common-lisp:or membership-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-protected-query-input-membership-identifier
                         :shape "MembershipIdentifier" :location "uri"
                         :location-name "membershipIdentifier")
                        (protected-query-identifier :initarg
                         :protected-query-identifier :initform
                         (common-lisp:error
                          ":protectedqueryidentifier is required")
                         :type
                         (common-lisp:or protected-query-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-protected-query-input-protected-query-identifier
                         :shape "ProtectedQueryIdentifier" :location "uri"
                         :location-name "protectedQueryIdentifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-protected-query-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-protected-query-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-protected-query-input
                    'make-get-protected-query-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-protected-query-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-protected-query-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-protected-query-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-protected-query-output common-lisp:nil
                       ((protected-query :initarg :protected-query :initform
                         (common-lisp:error ":protectedquery is required")
                         :type
                         (common-lisp:or protected-query common-lisp:null)
                         :accessor
                         struct-shape-get-protected-query-output-protected-query
                         :shape "ProtectedQuery" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-protected-query-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-protected-query-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-protected-query-output
                    'make-get-protected-query-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-protected-query-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-protected-query-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protected-query))
      (common-lisp:list
       (common-lisp:cons "protectedQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-protected-query-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-schema-analysis-rule-input common-lisp:nil
                       ((collaboration-identifier :initarg
                         :collaboration-identifier :initform
                         (common-lisp:error
                          ":collaborationidentifier is required")
                         :type
                         (common-lisp:or collaboration-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-schema-analysis-rule-input-collaboration-identifier
                         :shape "CollaborationIdentifier" :location "uri"
                         :location-name "collaborationIdentifier")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or table-alias common-lisp:null)
                         :accessor
                         struct-shape-get-schema-analysis-rule-input-name
                         :shape "TableAlias" :location "uri" :location-name
                         "name")
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or analysis-rule-type common-lisp:null)
                         :accessor
                         struct-shape-get-schema-analysis-rule-input-type
                         :shape "AnalysisRuleType" :location "uri"
                         :location-name "type"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-schema-analysis-rule-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-schema-analysis-rule-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-schema-analysis-rule-input
                    'make-get-schema-analysis-rule-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-analysis-rule-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-analysis-rule-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-analysis-rule-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-schema-analysis-rule-output common-lisp:nil
                       ((analysis-rule :initarg :analysis-rule :initform
                         (common-lisp:error ":analysisrule is required") :type
                         (common-lisp:or analysis-rule common-lisp:null)
                         :accessor
                         struct-shape-get-schema-analysis-rule-output-analysis-rule
                         :shape "AnalysisRule" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-schema-analysis-rule-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-schema-analysis-rule-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-schema-analysis-rule-output
                    'make-get-schema-analysis-rule-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-analysis-rule-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-analysis-rule-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-rule))
      (common-lisp:list
       (common-lisp:cons "analysisRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-analysis-rule-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-schema-input common-lisp:nil
                       ((collaboration-identifier :initarg
                         :collaboration-identifier :initform
                         (common-lisp:error
                          ":collaborationidentifier is required")
                         :type
                         (common-lisp:or collaboration-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-schema-input-collaboration-identifier
                         :shape "CollaborationIdentifier" :location "uri"
                         :location-name "collaborationIdentifier")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or table-alias common-lisp:null)
                         :accessor struct-shape-get-schema-input-name :shape
                         "TableAlias" :location "uri" :location-name "name"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-schema-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-schema-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-schema-input 'make-get-schema-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-schema-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-schema-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-schema-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-schema-output common-lisp:nil
                       ((schema :initarg :schema :initform
                         (common-lisp:error ":schema is required") :type
                         (common-lisp:or schema common-lisp:null) :accessor
                         struct-shape-get-schema-output-schema :shape "Schema"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-schema-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-schema-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-schema-output 'make-get-schema-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-schema-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-schema-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema))
      (common-lisp:list
       (common-lisp:cons "schema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-schema-output))
   common-lisp:nil))
(common-lisp:deftype glue-database-name () 'common-lisp:string)
(common-lisp:deftype glue-table-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass glue-table-reference common-lisp:nil
                       ((table-name :initarg :table-name :initform
                         (common-lisp:error ":tablename is required") :type
                         (common-lisp:or glue-table-name common-lisp:null)
                         :accessor struct-shape-glue-table-reference-table-name
                         :shape "GlueTableName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":databasename is required") :type
                         (common-lisp:or glue-database-name common-lisp:null)
                         :accessor
                         struct-shape-glue-table-reference-database-name :shape
                         "GlueDatabaseName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-glue-table-reference
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'glue-table-reference
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'glue-table-reference 'make-glue-table-reference))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input glue-table-reference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input glue-table-reference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "tableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "databaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input glue-table-reference))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (cleanrooms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:deftype join-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype join-operators-list ()
   '(trivial-types:proper-list join-operator))
 (common-lisp:defun make-join-operators-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list join-operator))
   aws-sdk/generator/shape::members))
(common-lisp:deftype join-required-option () 'common-lisp:string)
(common-lisp:deftype key-prefix () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-analysis-templates-input common-lisp:nil
                       ((membership-identifier :initarg :membership-identifier
                         :initform
                         (common-lisp:error
                          ":membershipidentifier is required")
                         :type
                         (common-lisp:or membership-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-analysis-templates-input-membership-identifier
                         :shape "MembershipIdentifier" :location "uri"
                         :location-name "membershipIdentifier")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-analysis-templates-input-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-analysis-templates-input-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-analysis-templates-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-analysis-templates-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-analysis-templates-input
                    'make-list-analysis-templates-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-analysis-templates-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-analysis-templates-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-analysis-templates-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-analysis-templates-output common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-analysis-templates-output-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (analysis-template-summaries :initarg
                         :analysis-template-summaries :initform
                         (common-lisp:error
                          ":analysistemplatesummaries is required")
                         :type
                         (common-lisp:or analysis-template-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-analysis-templates-output-analysis-template-summaries
                         :shape "AnalysisTemplateSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-analysis-templates-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-analysis-templates-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-analysis-templates-output
                    'make-list-analysis-templates-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-analysis-templates-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-analysis-templates-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'analysis-template-summaries))
      (common-lisp:list
       (common-lisp:cons "analysisTemplateSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-analysis-templates-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-collaboration-analysis-templates-input
                       common-lisp:nil
                       ((collaboration-identifier :initarg
                         :collaboration-identifier :initform
                         (common-lisp:error
                          ":collaborationidentifier is required")
                         :type
                         (common-lisp:or collaboration-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-collaboration-analysis-templates-input-collaboration-identifier
                         :shape "CollaborationIdentifier" :location "uri"
                         :location-name "collaborationIdentifier")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-collaboration-analysis-templates-input-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-collaboration-analysis-templates-input-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-collaboration-analysis-templates-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-collaboration-analysis-templates-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-collaboration-analysis-templates-input
                    'make-list-collaboration-analysis-templates-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-collaboration-analysis-templates-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-collaboration-analysis-templates-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-collaboration-analysis-templates-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-collaboration-analysis-templates-output
                       common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-collaboration-analysis-templates-output-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (collaboration-analysis-template-summaries :initarg
                         :collaboration-analysis-template-summaries :initform
                         (common-lisp:error
                          ":collaborationanalysistemplatesummaries is required")
                         :type
                         (common-lisp:or
                          collaboration-analysis-template-summary-list
                          common-lisp:null)
                         :accessor
                         struct-shape-list-collaboration-analysis-templates-output-collaboration-analysis-template-summaries
                         :shape "CollaborationAnalysisTemplateSummaryList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-collaboration-analysis-templates-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-collaboration-analysis-templates-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-collaboration-analysis-templates-output
                    'make-list-collaboration-analysis-templates-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-collaboration-analysis-templates-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-collaboration-analysis-templates-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'collaboration-analysis-template-summaries))
      (common-lisp:list
       (common-lisp:cons "collaborationAnalysisTemplateSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-collaboration-analysis-templates-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  list-collaboration-configured-audience-model-associations-input
  common-lisp:nil
  ((collaboration-identifier :initarg :collaboration-identifier :initform
    (common-lisp:error ":collaborationidentifier is required") :type
    (common-lisp:or collaboration-identifier common-lisp:null) :accessor
    struct-shape-list-collaboration-configured-audience-model-associations-input-collaboration-identifier
    :shape "CollaborationIdentifier" :location "uri" :location-name
    "collaborationIdentifier")
   (next-token :initarg :next-token :initform common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null) :accessor
    struct-shape-list-collaboration-configured-audience-model-associations-input-next-token
    :shape "PaginationToken" :location "querystring" :location-name
    "nextToken")
   (max-results :initarg :max-results :initform common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null) :accessor
    struct-shape-list-collaboration-configured-audience-model-associations-input-max-results
    :shape "MaxResults" :location "querystring" :location-name "maxResults"))
  (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-collaboration-configured-audience-model-associations-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-collaboration-configured-audience-model-associations-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list
   'list-collaboration-configured-audience-model-associations-input
   'make-list-collaboration-configured-audience-model-associations-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-collaboration-configured-audience-model-associations-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-collaboration-configured-audience-model-associations-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-collaboration-configured-audience-model-associations-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  list-collaboration-configured-audience-model-associations-output
  common-lisp:nil
  ((collaboration-configured-audience-model-association-summaries :initarg
    :collaboration-configured-audience-model-association-summaries :initform
    (common-lisp:error
     ":collaborationconfiguredaudiencemodelassociationsummaries is required")
    :type
    (common-lisp:or
     collaboration-configured-audience-model-association-summary-list
     common-lisp:null)
    :accessor
    struct-shape-list-collaboration-configured-audience-model-associations-output-collaboration-configured-audience-model-association-summaries
    :shape "CollaborationConfiguredAudienceModelAssociationSummaryList"
    :location common-lisp:nil :location-name common-lisp:nil)
   (next-token :initarg :next-token :initform common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null) :accessor
    struct-shape-list-collaboration-configured-audience-model-associations-output-next-token
    :shape "PaginationToken" :location common-lisp:nil :location-name
    common-lisp:nil))
  (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-collaboration-configured-audience-model-associations-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-collaboration-configured-audience-model-associations-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list
   'list-collaboration-configured-audience-model-associations-output
   'make-list-collaboration-configured-audience-model-associations-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-collaboration-configured-audience-model-associations-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-collaboration-configured-audience-model-associations-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'collaboration-configured-audience-model-association-summaries))
      (common-lisp:list
       (common-lisp:cons
        "collaborationConfiguredAudienceModelAssociationSummaries"
        (aws-sdk/generator/shape::input-params
         aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-collaboration-configured-audience-model-associations-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-collaboration-privacy-budget-templates-input
                       common-lisp:nil
                       ((collaboration-identifier :initarg
                         :collaboration-identifier :initform
                         (common-lisp:error
                          ":collaborationidentifier is required")
                         :type
                         (common-lisp:or collaboration-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-collaboration-privacy-budget-templates-input-collaboration-identifier
                         :shape "CollaborationIdentifier" :location "uri"
                         :location-name "collaborationIdentifier")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-collaboration-privacy-budget-templates-input-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-collaboration-privacy-budget-templates-input-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-collaboration-privacy-budget-templates-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-collaboration-privacy-budget-templates-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-collaboration-privacy-budget-templates-input
                    'make-list-collaboration-privacy-budget-templates-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-collaboration-privacy-budget-templates-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-collaboration-privacy-budget-templates-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-collaboration-privacy-budget-templates-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-collaboration-privacy-budget-templates-output
                       common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-collaboration-privacy-budget-templates-output-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (collaboration-privacy-budget-template-summaries
                         :initarg
                         :collaboration-privacy-budget-template-summaries
                         :initform
                         (common-lisp:error
                          ":collaborationprivacybudgettemplatesummaries is required")
                         :type
                         (common-lisp:or
                          collaboration-privacy-budget-template-summary-list
                          common-lisp:null)
                         :accessor
                         struct-shape-list-collaboration-privacy-budget-templates-output-collaboration-privacy-budget-template-summaries
                         :shape "CollaborationPrivacyBudgetTemplateSummaryList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-collaboration-privacy-budget-templates-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-collaboration-privacy-budget-templates-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-collaboration-privacy-budget-templates-output
                    'make-list-collaboration-privacy-budget-templates-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-collaboration-privacy-budget-templates-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-collaboration-privacy-budget-templates-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'collaboration-privacy-budget-template-summaries))
      (common-lisp:list
       (common-lisp:cons "collaborationPrivacyBudgetTemplateSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-collaboration-privacy-budget-templates-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-collaboration-privacy-budgets-input common-lisp:nil
                       ((collaboration-identifier :initarg
                         :collaboration-identifier :initform
                         (common-lisp:error
                          ":collaborationidentifier is required")
                         :type
                         (common-lisp:or collaboration-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-collaboration-privacy-budgets-input-collaboration-identifier
                         :shape "CollaborationIdentifier" :location "uri"
                         :location-name "collaborationIdentifier")
                        (privacy-budget-type :initarg :privacy-budget-type
                         :initform
                         (common-lisp:error ":privacybudgettype is required")
                         :type
                         (common-lisp:or privacy-budget-type common-lisp:null)
                         :accessor
                         struct-shape-list-collaboration-privacy-budgets-input-privacy-budget-type
                         :shape "PrivacyBudgetType" :location "querystring"
                         :location-name "privacyBudgetType")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-collaboration-privacy-budgets-input-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-collaboration-privacy-budgets-input-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-collaboration-privacy-budgets-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-collaboration-privacy-budgets-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-collaboration-privacy-budgets-input
                    'make-list-collaboration-privacy-budgets-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-collaboration-privacy-budgets-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-collaboration-privacy-budgets-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-collaboration-privacy-budgets-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-collaboration-privacy-budgets-output
                       common-lisp:nil
                       ((collaboration-privacy-budget-summaries :initarg
                         :collaboration-privacy-budget-summaries :initform
                         (common-lisp:error
                          ":collaborationprivacybudgetsummaries is required")
                         :type
                         (common-lisp:or
                          collaboration-privacy-budget-summary-list
                          common-lisp:null)
                         :accessor
                         struct-shape-list-collaboration-privacy-budgets-output-collaboration-privacy-budget-summaries
                         :shape "CollaborationPrivacyBudgetSummaryList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-collaboration-privacy-budgets-output-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-collaboration-privacy-budgets-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-collaboration-privacy-budgets-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-collaboration-privacy-budgets-output
                    'make-list-collaboration-privacy-budgets-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-collaboration-privacy-budgets-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-collaboration-privacy-budgets-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'collaboration-privacy-budget-summaries))
      (common-lisp:list
       (common-lisp:cons "collaborationPrivacyBudgetSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-collaboration-privacy-budgets-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-collaborations-input common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-collaborations-input-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-collaborations-input-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (member-status :initarg :member-status :initform
                         common-lisp:nil :type
                         (common-lisp:or filterable-member-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-collaborations-input-member-status
                         :shape "FilterableMemberStatus" :location
                         "querystring" :location-name "memberStatus"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-collaborations-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-collaborations-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-collaborations-input
                    'make-list-collaborations-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-collaborations-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-collaborations-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-collaborations-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-collaborations-output common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-collaborations-output-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (collaboration-list :initarg :collaboration-list
                         :initform
                         (common-lisp:error ":collaborationlist is required")
                         :type
                         (common-lisp:or collaboration-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-collaborations-output-collaboration-list
                         :shape "CollaborationSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-collaborations-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-collaborations-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-collaborations-output
                    'make-list-collaborations-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-collaborations-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-collaborations-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-list))
      (common-lisp:list
       (common-lisp:cons "collaborationList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-collaborations-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-configured-audience-model-associations-input
                       common-lisp:nil
                       ((membership-identifier :initarg :membership-identifier
                         :initform
                         (common-lisp:error
                          ":membershipidentifier is required")
                         :type
                         (common-lisp:or membership-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-configured-audience-model-associations-input-membership-identifier
                         :shape "MembershipIdentifier" :location "uri"
                         :location-name "membershipIdentifier")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-configured-audience-model-associations-input-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-configured-audience-model-associations-input-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-configured-audience-model-associations-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-configured-audience-model-associations-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-configured-audience-model-associations-input
                    'make-list-configured-audience-model-associations-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-configured-audience-model-associations-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-configured-audience-model-associations-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-configured-audience-model-associations-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-configured-audience-model-associations-output
                       common-lisp:nil
                       ((configured-audience-model-association-summaries
                         :initarg
                         :configured-audience-model-association-summaries
                         :initform
                         (common-lisp:error
                          ":configuredaudiencemodelassociationsummaries is required")
                         :type
                         (common-lisp:or
                          configured-audience-model-association-summary-list
                          common-lisp:null)
                         :accessor
                         struct-shape-list-configured-audience-model-associations-output-configured-audience-model-association-summaries
                         :shape "ConfiguredAudienceModelAssociationSummaryList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-configured-audience-model-associations-output-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-configured-audience-model-associations-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-configured-audience-model-associations-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-configured-audience-model-associations-output
                    'make-list-configured-audience-model-associations-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-configured-audience-model-associations-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-configured-audience-model-associations-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configured-audience-model-association-summaries))
      (common-lisp:list
       (common-lisp:cons "configuredAudienceModelAssociationSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-configured-audience-model-associations-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-configured-table-associations-input common-lisp:nil
                       ((membership-identifier :initarg :membership-identifier
                         :initform
                         (common-lisp:error
                          ":membershipidentifier is required")
                         :type
                         (common-lisp:or membership-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-configured-table-associations-input-membership-identifier
                         :shape "MembershipIdentifier" :location "uri"
                         :location-name "membershipIdentifier")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-configured-table-associations-input-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-configured-table-associations-input-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-configured-table-associations-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-configured-table-associations-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-configured-table-associations-input
                    'make-list-configured-table-associations-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-configured-table-associations-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-configured-table-associations-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-configured-table-associations-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-configured-table-associations-output
                       common-lisp:nil
                       ((configured-table-association-summaries :initarg
                         :configured-table-association-summaries :initform
                         (common-lisp:error
                          ":configuredtableassociationsummaries is required")
                         :type
                         (common-lisp:or
                          configured-table-association-summary-list
                          common-lisp:null)
                         :accessor
                         struct-shape-list-configured-table-associations-output-configured-table-association-summaries
                         :shape "ConfiguredTableAssociationSummaryList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-configured-table-associations-output-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-configured-table-associations-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-configured-table-associations-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-configured-table-associations-output
                    'make-list-configured-table-associations-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-configured-table-associations-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-configured-table-associations-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configured-table-association-summaries))
      (common-lisp:list
       (common-lisp:cons "configuredTableAssociationSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-configured-table-associations-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-configured-tables-input common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-configured-tables-input-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-configured-tables-input-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-configured-tables-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-configured-tables-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-configured-tables-input
                    'make-list-configured-tables-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-configured-tables-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-configured-tables-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-configured-tables-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-configured-tables-output common-lisp:nil
                       ((configured-table-summaries :initarg
                         :configured-table-summaries :initform
                         (common-lisp:error
                          ":configuredtablesummaries is required")
                         :type
                         (common-lisp:or configured-table-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-configured-tables-output-configured-table-summaries
                         :shape "ConfiguredTableSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-configured-tables-output-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-configured-tables-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-configured-tables-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-configured-tables-output
                    'make-list-configured-tables-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-configured-tables-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-configured-tables-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configured-table-summaries))
      (common-lisp:list
       (common-lisp:cons "configuredTableSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-configured-tables-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-members-input common-lisp:nil
                       ((collaboration-identifier :initarg
                         :collaboration-identifier :initform
                         (common-lisp:error
                          ":collaborationidentifier is required")
                         :type
                         (common-lisp:or collaboration-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-members-input-collaboration-identifier
                         :shape "CollaborationIdentifier" :location "uri"
                         :location-name "collaborationIdentifier")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor struct-shape-list-members-input-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor struct-shape-list-members-input-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-members-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-members-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-members-input 'make-list-members-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-members-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-members-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-members-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-members-output common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor struct-shape-list-members-output-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (member-summaries :initarg :member-summaries :initform
                         (common-lisp:error ":membersummaries is required")
                         :type
                         (common-lisp:or member-summary-list common-lisp:null)
                         :accessor
                         struct-shape-list-members-output-member-summaries
                         :shape "MemberSummaryList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-members-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-members-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-members-output 'make-list-members-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-members-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-members-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-summaries))
      (common-lisp:list
       (common-lisp:cons "memberSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-members-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-memberships-input common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-memberships-input-next-token :shape
                         "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-memberships-input-max-results :shape
                         "MaxResults" :location "querystring" :location-name
                         "maxResults")
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or membership-status common-lisp:null)
                         :accessor struct-shape-list-memberships-input-status
                         :shape "MembershipStatus" :location "querystring"
                         :location-name "status"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-memberships-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-memberships-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-memberships-input 'make-list-memberships-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-memberships-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-memberships-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-memberships-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-memberships-output common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-memberships-output-next-token :shape
                         "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (membership-summaries :initarg :membership-summaries
                         :initform
                         (common-lisp:error ":membershipsummaries is required")
                         :type
                         (common-lisp:or membership-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-memberships-output-membership-summaries
                         :shape "MembershipSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-memberships-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-memberships-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-memberships-output 'make-list-memberships-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-memberships-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-memberships-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'membership-summaries))
      (common-lisp:list
       (common-lisp:cons "membershipSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-memberships-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-privacy-budget-templates-input common-lisp:nil
                       ((membership-identifier :initarg :membership-identifier
                         :initform
                         (common-lisp:error
                          ":membershipidentifier is required")
                         :type
                         (common-lisp:or membership-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-privacy-budget-templates-input-membership-identifier
                         :shape "MembershipIdentifier" :location "uri"
                         :location-name "membershipIdentifier")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-privacy-budget-templates-input-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-privacy-budget-templates-input-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-privacy-budget-templates-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-privacy-budget-templates-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-privacy-budget-templates-input
                    'make-list-privacy-budget-templates-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-privacy-budget-templates-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-privacy-budget-templates-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-privacy-budget-templates-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-privacy-budget-templates-output common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-privacy-budget-templates-output-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (privacy-budget-template-summaries :initarg
                         :privacy-budget-template-summaries :initform
                         (common-lisp:error
                          ":privacybudgettemplatesummaries is required")
                         :type
                         (common-lisp:or privacy-budget-template-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-privacy-budget-templates-output-privacy-budget-template-summaries
                         :shape "PrivacyBudgetTemplateSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-privacy-budget-templates-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-privacy-budget-templates-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-privacy-budget-templates-output
                    'make-list-privacy-budget-templates-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-privacy-budget-templates-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-privacy-budget-templates-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'privacy-budget-template-summaries))
      (common-lisp:list
       (common-lisp:cons "privacyBudgetTemplateSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-privacy-budget-templates-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-privacy-budgets-input common-lisp:nil
                       ((membership-identifier :initarg :membership-identifier
                         :initform
                         (common-lisp:error
                          ":membershipidentifier is required")
                         :type
                         (common-lisp:or membership-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-privacy-budgets-input-membership-identifier
                         :shape "MembershipIdentifier" :location "uri"
                         :location-name "membershipIdentifier")
                        (privacy-budget-type :initarg :privacy-budget-type
                         :initform
                         (common-lisp:error ":privacybudgettype is required")
                         :type
                         (common-lisp:or privacy-budget-type common-lisp:null)
                         :accessor
                         struct-shape-list-privacy-budgets-input-privacy-budget-type
                         :shape "PrivacyBudgetType" :location "querystring"
                         :location-name "privacyBudgetType")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-privacy-budgets-input-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-privacy-budgets-input-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-privacy-budgets-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-privacy-budgets-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-privacy-budgets-input
                    'make-list-privacy-budgets-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-privacy-budgets-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-privacy-budgets-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-privacy-budgets-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-privacy-budgets-output common-lisp:nil
                       ((privacy-budget-summaries :initarg
                         :privacy-budget-summaries :initform
                         (common-lisp:error
                          ":privacybudgetsummaries is required")
                         :type
                         (common-lisp:or privacy-budget-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-privacy-budgets-output-privacy-budget-summaries
                         :shape "PrivacyBudgetSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-privacy-budgets-output-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-privacy-budgets-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-privacy-budgets-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-privacy-budgets-output
                    'make-list-privacy-budgets-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-privacy-budgets-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-privacy-budgets-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'privacy-budget-summaries))
      (common-lisp:list
       (common-lisp:cons "privacyBudgetSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-privacy-budgets-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-protected-queries-input common-lisp:nil
                       ((membership-identifier :initarg :membership-identifier
                         :initform
                         (common-lisp:error
                          ":membershipidentifier is required")
                         :type
                         (common-lisp:or membership-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-protected-queries-input-membership-identifier
                         :shape "MembershipIdentifier" :location "uri"
                         :location-name "membershipIdentifier")
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or protected-query-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-protected-queries-input-status
                         :shape "ProtectedQueryStatus" :location "querystring"
                         :location-name "status")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-protected-queries-input-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-protected-queries-input-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-protected-queries-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-protected-queries-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-protected-queries-input
                    'make-list-protected-queries-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-protected-queries-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-protected-queries-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-protected-queries-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-protected-queries-output common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-protected-queries-output-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (protected-queries :initarg :protected-queries
                         :initform
                         (common-lisp:error ":protectedqueries is required")
                         :type
                         (common-lisp:or protected-query-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-protected-queries-output-protected-queries
                         :shape "ProtectedQuerySummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-protected-queries-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-protected-queries-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-protected-queries-output
                    'make-list-protected-queries-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-protected-queries-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-protected-queries-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protected-queries))
      (common-lisp:list
       (common-lisp:cons "protectedQueries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-protected-queries-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-schemas-input common-lisp:nil
                       ((collaboration-identifier :initarg
                         :collaboration-identifier :initform
                         (common-lisp:error
                          ":collaborationidentifier is required")
                         :type
                         (common-lisp:or collaboration-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-schemas-input-collaboration-identifier
                         :shape "CollaborationIdentifier" :location "uri"
                         :location-name "collaborationIdentifier")
                        (schema-type :initarg :schema-type :initform
                         common-lisp:nil :type
                         (common-lisp:or schema-type common-lisp:null)
                         :accessor struct-shape-list-schemas-input-schema-type
                         :shape "SchemaType" :location "querystring"
                         :location-name "schemaType")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor struct-shape-list-schemas-input-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor struct-shape-list-schemas-input-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-schemas-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-schemas-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-schemas-input 'make-list-schemas-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-schemas-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-schemas-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-schemas-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-schemas-output common-lisp:nil
                       ((schema-summaries :initarg :schema-summaries :initform
                         (common-lisp:error ":schemasummaries is required")
                         :type
                         (common-lisp:or schema-summary-list common-lisp:null)
                         :accessor
                         struct-shape-list-schemas-output-schema-summaries
                         :shape "SchemaSummaryList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor struct-shape-list-schemas-output-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-schemas-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-schemas-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-schemas-output 'make-list-schemas-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-schemas-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-schemas-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-summaries))
      (common-lisp:list
       (common-lisp:cons "schemaSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-schemas-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-input common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or cleanrooms-arn common-lisp:null)
                         :accessor
                         struct-shape-list-tags-for-resource-input-resource-arn
                         :shape "CleanroomsArn" :location "uri" :location-name
                         "resourceArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-tags-for-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-input
                    'make-list-tags-for-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-output common-lisp:nil
                       ((tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-output-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-output
                    'make-list-tags-for-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   common-lisp:nil))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype member-abilities ()
   '(trivial-types:proper-list member-ability))
 (common-lisp:defun make-member-abilities
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list member-ability))
   aws-sdk/generator/shape::members))
(common-lisp:deftype member-ability () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype member-list ()
   '(trivial-types:proper-list member-specification))
 (common-lisp:defun make-member-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list member-specification))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass member-specification common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         (common-lisp:error ":accountid is required") :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-member-specification-account-id :shape
                         "AccountId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (member-abilities :initarg :member-abilities :initform
                         (common-lisp:error ":memberabilities is required")
                         :type
                         (common-lisp:or member-abilities common-lisp:null)
                         :accessor
                         struct-shape-member-specification-member-abilities
                         :shape "MemberAbilities" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         (common-lisp:error ":displayname is required") :type
                         (common-lisp:or display-name common-lisp:null)
                         :accessor
                         struct-shape-member-specification-display-name :shape
                         "DisplayName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (payment-configuration :initarg :payment-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or payment-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-member-specification-payment-configuration
                         :shape "PaymentConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-member-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'member-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'member-specification 'make-member-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input member-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input member-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-abilities))
      (common-lisp:list
       (common-lisp:cons "memberAbilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'payment-configuration))
      (common-lisp:list
       (common-lisp:cons "paymentConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input member-specification))
   common-lisp:nil))
(common-lisp:deftype member-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass member-summary common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         (common-lisp:error ":accountid is required") :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-member-summary-account-id :shape
                         "AccountId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or member-status common-lisp:null)
                         :accessor struct-shape-member-summary-status :shape
                         "MemberStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         (common-lisp:error ":displayname is required") :type
                         (common-lisp:or display-name common-lisp:null)
                         :accessor struct-shape-member-summary-display-name
                         :shape "DisplayName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (abilities :initarg :abilities :initform
                         (common-lisp:error ":abilities is required") :type
                         (common-lisp:or member-abilities common-lisp:null)
                         :accessor struct-shape-member-summary-abilities :shape
                         "MemberAbilities" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (create-time :initarg :create-time :initform
                         (common-lisp:error ":createtime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-member-summary-create-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (update-time :initarg :update-time :initform
                         (common-lisp:error ":updatetime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-member-summary-update-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (membership-id :initarg :membership-id :initform
                         common-lisp:nil :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-member-summary-membership-id :shape
                         "UUID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (membership-arn :initarg :membership-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or membership-arn common-lisp:null)
                         :accessor struct-shape-member-summary-membership-arn
                         :shape "MembershipArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (payment-configuration :initarg :payment-configuration
                         :initform
                         (common-lisp:error
                          ":paymentconfiguration is required")
                         :type
                         (common-lisp:or payment-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-member-summary-payment-configuration
                         :shape "PaymentConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-member-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'member-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'member-summary 'make-member-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input member-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input member-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'abilities))
      (common-lisp:list
       (common-lisp:cons "abilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-id))
      (common-lisp:list
       (common-lisp:cons "membershipId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-arn))
      (common-lisp:list
       (common-lisp:cons "membershipArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'payment-configuration))
      (common-lisp:list
       (common-lisp:cons "paymentConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input member-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype member-summary-list ()
   '(trivial-types:proper-list member-summary))
 (common-lisp:defun make-member-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list member-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass membership common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-membership-id :shape "UUID" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or membership-arn common-lisp:null)
                         :accessor struct-shape-membership-arn :shape
                         "MembershipArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (collaboration-arn :initarg :collaboration-arn
                         :initform
                         (common-lisp:error ":collaborationarn is required")
                         :type
                         (common-lisp:or collaboration-arn common-lisp:null)
                         :accessor struct-shape-membership-collaboration-arn
                         :shape "CollaborationArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (collaboration-id :initarg :collaboration-id :initform
                         (common-lisp:error ":collaborationid is required")
                         :type (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-membership-collaboration-id :shape "UUID"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (collaboration-creator-account-id :initarg
                         :collaboration-creator-account-id :initform
                         (common-lisp:error
                          ":collaborationcreatoraccountid is required")
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         struct-shape-membership-collaboration-creator-account-id
                         :shape "AccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (collaboration-creator-display-name :initarg
                         :collaboration-creator-display-name :initform
                         (common-lisp:error
                          ":collaborationcreatordisplayname is required")
                         :type (common-lisp:or display-name common-lisp:null)
                         :accessor
                         struct-shape-membership-collaboration-creator-display-name
                         :shape "DisplayName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (collaboration-name :initarg :collaboration-name
                         :initform
                         (common-lisp:error ":collaborationname is required")
                         :type
                         (common-lisp:or collaboration-name common-lisp:null)
                         :accessor struct-shape-membership-collaboration-name
                         :shape "CollaborationName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (create-time :initarg :create-time :initform
                         (common-lisp:error ":createtime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-membership-create-time :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (update-time :initarg :update-time :initform
                         (common-lisp:error ":updatetime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-membership-update-time :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or membership-status common-lisp:null)
                         :accessor struct-shape-membership-status :shape
                         "MembershipStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (member-abilities :initarg :member-abilities :initform
                         (common-lisp:error ":memberabilities is required")
                         :type
                         (common-lisp:or member-abilities common-lisp:null)
                         :accessor struct-shape-membership-member-abilities
                         :shape "MemberAbilities" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (query-log-status :initarg :query-log-status :initform
                         (common-lisp:error ":querylogstatus is required")
                         :type
                         (common-lisp:or membership-query-log-status
                                         common-lisp:null)
                         :accessor struct-shape-membership-query-log-status
                         :shape "MembershipQueryLogStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (default-result-configuration :initarg
                         :default-result-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          membership-protected-query-result-configuration
                          common-lisp:null)
                         :accessor
                         struct-shape-membership-default-result-configuration
                         :shape "MembershipProtectedQueryResultConfiguration"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (payment-configuration :initarg :payment-configuration
                         :initform
                         (common-lisp:error
                          ":paymentconfiguration is required")
                         :type
                         (common-lisp:or membership-payment-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-membership-payment-configuration :shape
                         "MembershipPaymentConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-membership
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'membership
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'membership 'make-membership))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input membership))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input membership))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-arn))
      (common-lisp:list
       (common-lisp:cons "collaborationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-id))
      (common-lisp:list
       (common-lisp:cons "collaborationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'collaboration-creator-account-id))
      (common-lisp:list
       (common-lisp:cons "collaborationCreatorAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'collaboration-creator-display-name))
      (common-lisp:list
       (common-lisp:cons "collaborationCreatorDisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-name))
      (common-lisp:list
       (common-lisp:cons "collaborationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-abilities))
      (common-lisp:list
       (common-lisp:cons "memberAbilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-log-status))
      (common-lisp:list
       (common-lisp:cons "queryLogStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-result-configuration))
      (common-lisp:list
       (common-lisp:cons "defaultResultConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'payment-configuration))
      (common-lisp:list
       (common-lisp:cons "paymentConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input membership))
   common-lisp:nil))
(common-lisp:deftype membership-arn () 'common-lisp:string)
(common-lisp:deftype membership-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass membership-payment-configuration common-lisp:nil
                       ((query-compute :initarg :query-compute :initform
                         (common-lisp:error ":querycompute is required") :type
                         (common-lisp:or
                          membership-query-compute-payment-config
                          common-lisp:null)
                         :accessor
                         struct-shape-membership-payment-configuration-query-compute
                         :shape "MembershipQueryComputePaymentConfig" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-membership-payment-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'membership-payment-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'membership-payment-configuration
                    'make-membership-payment-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          membership-payment-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          membership-payment-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-compute))
      (common-lisp:list
       (common-lisp:cons "queryCompute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          membership-payment-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass membership-protected-query-output-configuration
                       common-lisp:nil
                       ((s3 :initarg :s3 :initform common-lisp:nil :type
                         (common-lisp:or protected-query-s3output-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-membership-protected-query-output-configuration-s3
                         :shape "ProtectedQueryS3OutputConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-membership-protected-query-output-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'membership-protected-query-output-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'membership-protected-query-output-configuration
                    'make-membership-protected-query-output-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          membership-protected-query-output-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          membership-protected-query-output-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3))
      (common-lisp:list
       (common-lisp:cons "s3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          membership-protected-query-output-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass membership-protected-query-result-configuration
                       common-lisp:nil
                       ((output-configuration :initarg :output-configuration
                         :initform
                         (common-lisp:error ":outputconfiguration is required")
                         :type
                         (common-lisp:or
                          membership-protected-query-output-configuration
                          common-lisp:null)
                         :accessor
                         struct-shape-membership-protected-query-result-configuration-output-configuration
                         :shape "MembershipProtectedQueryOutputConfiguration"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor
                         struct-shape-membership-protected-query-result-configuration-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-membership-protected-query-result-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'membership-protected-query-result-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'membership-protected-query-result-configuration
                    'make-membership-protected-query-result-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          membership-protected-query-result-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          membership-protected-query-result-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-configuration))
      (common-lisp:list
       (common-lisp:cons "outputConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          membership-protected-query-result-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass membership-query-compute-payment-config common-lisp:nil
                       ((is-responsible :initarg :is-responsible :initform
                         (common-lisp:error ":isresponsible is required") :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-membership-query-compute-payment-config-is-responsible
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-membership-query-compute-payment-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'membership-query-compute-payment-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'membership-query-compute-payment-config
                    'make-membership-query-compute-payment-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          membership-query-compute-payment-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          membership-query-compute-payment-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-responsible))
      (common-lisp:list
       (common-lisp:cons "isResponsible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          membership-query-compute-payment-config))
   common-lisp:nil))
(common-lisp:deftype membership-query-log-status () 'common-lisp:string)
(common-lisp:deftype membership-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass membership-summary common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-membership-summary-id :shape "UUID"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or membership-arn common-lisp:null)
                         :accessor struct-shape-membership-summary-arn :shape
                         "MembershipArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (collaboration-arn :initarg :collaboration-arn
                         :initform
                         (common-lisp:error ":collaborationarn is required")
                         :type
                         (common-lisp:or collaboration-arn common-lisp:null)
                         :accessor
                         struct-shape-membership-summary-collaboration-arn
                         :shape "CollaborationArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (collaboration-id :initarg :collaboration-id :initform
                         (common-lisp:error ":collaborationid is required")
                         :type
                         (common-lisp:or collaboration-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-membership-summary-collaboration-id
                         :shape "CollaborationIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (collaboration-creator-account-id :initarg
                         :collaboration-creator-account-id :initform
                         (common-lisp:error
                          ":collaborationcreatoraccountid is required")
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         struct-shape-membership-summary-collaboration-creator-account-id
                         :shape "AccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (collaboration-creator-display-name :initarg
                         :collaboration-creator-display-name :initform
                         (common-lisp:error
                          ":collaborationcreatordisplayname is required")
                         :type (common-lisp:or display-name common-lisp:null)
                         :accessor
                         struct-shape-membership-summary-collaboration-creator-display-name
                         :shape "DisplayName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (collaboration-name :initarg :collaboration-name
                         :initform
                         (common-lisp:error ":collaborationname is required")
                         :type
                         (common-lisp:or collaboration-name common-lisp:null)
                         :accessor
                         struct-shape-membership-summary-collaboration-name
                         :shape "CollaborationName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (create-time :initarg :create-time :initform
                         (common-lisp:error ":createtime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-membership-summary-create-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (update-time :initarg :update-time :initform
                         (common-lisp:error ":updatetime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-membership-summary-update-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or membership-status common-lisp:null)
                         :accessor struct-shape-membership-summary-status
                         :shape "MembershipStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (member-abilities :initarg :member-abilities :initform
                         (common-lisp:error ":memberabilities is required")
                         :type
                         (common-lisp:or member-abilities common-lisp:null)
                         :accessor
                         struct-shape-membership-summary-member-abilities
                         :shape "MemberAbilities" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (payment-configuration :initarg :payment-configuration
                         :initform
                         (common-lisp:error
                          ":paymentconfiguration is required")
                         :type
                         (common-lisp:or membership-payment-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-membership-summary-payment-configuration
                         :shape "MembershipPaymentConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-membership-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'membership-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'membership-summary 'make-membership-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input membership-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input membership-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-arn))
      (common-lisp:list
       (common-lisp:cons "collaborationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-id))
      (common-lisp:list
       (common-lisp:cons "collaborationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'collaboration-creator-account-id))
      (common-lisp:list
       (common-lisp:cons "collaborationCreatorAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'collaboration-creator-display-name))
      (common-lisp:list
       (common-lisp:cons "collaborationCreatorDisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-name))
      (common-lisp:list
       (common-lisp:cons "collaborationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-abilities))
      (common-lisp:list
       (common-lisp:cons "memberAbilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'payment-configuration))
      (common-lisp:list
       (common-lisp:cons "paymentConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input membership-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype membership-summary-list ()
   '(trivial-types:proper-list membership-summary))
 (common-lisp:defun make-membership-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list membership-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype parameter-map () 'common-lisp:hash-table)
 (common-lisp:defun make-parameter-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype parameter-name () 'common-lisp:string)
(common-lisp:deftype parameter-type () 'common-lisp:string)
(common-lisp:deftype parameter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass payment-configuration common-lisp:nil
                       ((query-compute :initarg :query-compute :initform
                         (common-lisp:error ":querycompute is required") :type
                         (common-lisp:or query-compute-payment-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-payment-configuration-query-compute
                         :shape "QueryComputePaymentConfig" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-payment-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'payment-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'payment-configuration 'make-payment-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          payment-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          payment-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-compute))
      (common-lisp:list
       (common-lisp:cons "queryCompute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          payment-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass preview-privacy-impact-input common-lisp:nil
                       ((membership-identifier :initarg :membership-identifier
                         :initform
                         (common-lisp:error
                          ":membershipidentifier is required")
                         :type
                         (common-lisp:or membership-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-preview-privacy-impact-input-membership-identifier
                         :shape "MembershipIdentifier" :location "uri"
                         :location-name "membershipIdentifier")
                        (parameters :initarg :parameters :initform
                         (common-lisp:error ":parameters is required") :type
                         (common-lisp:or
                          preview-privacy-impact-parameters-input
                          common-lisp:null)
                         :accessor
                         struct-shape-preview-privacy-impact-input-parameters
                         :shape "PreviewPrivacyImpactParametersInput" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-preview-privacy-impact-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'preview-privacy-impact-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'preview-privacy-impact-input
                    'make-preview-privacy-impact-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          preview-privacy-impact-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          preview-privacy-impact-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          preview-privacy-impact-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass preview-privacy-impact-output common-lisp:nil
                       ((privacy-impact :initarg :privacy-impact :initform
                         (common-lisp:error ":privacyimpact is required") :type
                         (common-lisp:or privacy-impact common-lisp:null)
                         :accessor
                         struct-shape-preview-privacy-impact-output-privacy-impact
                         :shape "PrivacyImpact" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-preview-privacy-impact-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'preview-privacy-impact-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'preview-privacy-impact-output
                    'make-preview-privacy-impact-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          preview-privacy-impact-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          preview-privacy-impact-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'privacy-impact))
      (common-lisp:list
       (common-lisp:cons "privacyImpact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          preview-privacy-impact-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass preview-privacy-impact-parameters-input common-lisp:nil
                       ((differential-privacy :initarg :differential-privacy
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          differential-privacy-preview-parameters-input
                          common-lisp:null)
                         :accessor
                         struct-shape-preview-privacy-impact-parameters-input-differential-privacy
                         :shape "DifferentialPrivacyPreviewParametersInput"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-preview-privacy-impact-parameters-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'preview-privacy-impact-parameters-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'preview-privacy-impact-parameters-input
                    'make-preview-privacy-impact-parameters-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          preview-privacy-impact-parameters-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          preview-privacy-impact-parameters-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'differential-privacy))
      (common-lisp:list
       (common-lisp:cons "differentialPrivacy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          preview-privacy-impact-parameters-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass privacy-budget common-lisp:nil
                       ((differential-privacy :initarg :differential-privacy
                         :initform common-lisp:nil :type
                         (common-lisp:or differential-privacy-privacy-budget
                                         common-lisp:null)
                         :accessor
                         struct-shape-privacy-budget-differential-privacy
                         :shape "DifferentialPrivacyPrivacyBudget" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-privacy-budget
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'privacy-budget
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'privacy-budget 'make-privacy-budget))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input privacy-budget))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input privacy-budget))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'differential-privacy))
      (common-lisp:list
       (common-lisp:cons "differentialPrivacy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input privacy-budget))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass privacy-budget-summary common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-privacy-budget-summary-id :shape "UUID"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (privacy-budget-template-id :initarg
                         :privacy-budget-template-id :initform
                         (common-lisp:error
                          ":privacybudgettemplateid is required")
                         :type
                         (common-lisp:or privacy-budget-template-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-privacy-budget-summary-privacy-budget-template-id
                         :shape "PrivacyBudgetTemplateIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (privacy-budget-template-arn :initarg
                         :privacy-budget-template-arn :initform
                         (common-lisp:error
                          ":privacybudgettemplatearn is required")
                         :type
                         (common-lisp:or privacy-budget-template-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-privacy-budget-summary-privacy-budget-template-arn
                         :shape "PrivacyBudgetTemplateArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (membership-id :initarg :membership-id :initform
                         (common-lisp:error ":membershipid is required") :type
                         (common-lisp:or membership-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-privacy-budget-summary-membership-id
                         :shape "MembershipIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (membership-arn :initarg :membership-arn :initform
                         (common-lisp:error ":membershiparn is required") :type
                         (common-lisp:or membership-arn common-lisp:null)
                         :accessor
                         struct-shape-privacy-budget-summary-membership-arn
                         :shape "MembershipArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (collaboration-id :initarg :collaboration-id :initform
                         (common-lisp:error ":collaborationid is required")
                         :type (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-privacy-budget-summary-collaboration-id
                         :shape "UUID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (collaboration-arn :initarg :collaboration-arn
                         :initform
                         (common-lisp:error ":collaborationarn is required")
                         :type
                         (common-lisp:or collaboration-arn common-lisp:null)
                         :accessor
                         struct-shape-privacy-budget-summary-collaboration-arn
                         :shape "CollaborationArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or privacy-budget-type common-lisp:null)
                         :accessor struct-shape-privacy-budget-summary-type
                         :shape "PrivacyBudgetType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (create-time :initarg :create-time :initform
                         (common-lisp:error ":createtime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-privacy-budget-summary-create-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (update-time :initarg :update-time :initform
                         (common-lisp:error ":updatetime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-privacy-budget-summary-update-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (budget :initarg :budget :initform
                         (common-lisp:error ":budget is required") :type
                         (common-lisp:or privacy-budget common-lisp:null)
                         :accessor struct-shape-privacy-budget-summary-budget
                         :shape "PrivacyBudget" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-privacy-budget-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'privacy-budget-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'privacy-budget-summary 'make-privacy-budget-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          privacy-budget-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          privacy-budget-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'privacy-budget-template-id))
      (common-lisp:list
       (common-lisp:cons "privacyBudgetTemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'privacy-budget-template-arn))
      (common-lisp:list
       (common-lisp:cons "privacyBudgetTemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-id))
      (common-lisp:list
       (common-lisp:cons "membershipId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-arn))
      (common-lisp:list
       (common-lisp:cons "membershipArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-id))
      (common-lisp:list
       (common-lisp:cons "collaborationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-arn))
      (common-lisp:list
       (common-lisp:cons "collaborationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'budget))
      (common-lisp:list
       (common-lisp:cons "budget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          privacy-budget-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype privacy-budget-summary-list ()
   '(trivial-types:proper-list privacy-budget-summary))
 (common-lisp:defun make-privacy-budget-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list privacy-budget-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass privacy-budget-template common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or privacy-budget-template-identifier
                                         common-lisp:null)
                         :accessor struct-shape-privacy-budget-template-id
                         :shape "PrivacyBudgetTemplateIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or privacy-budget-template-arn
                                         common-lisp:null)
                         :accessor struct-shape-privacy-budget-template-arn
                         :shape "PrivacyBudgetTemplateArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (membership-id :initarg :membership-id :initform
                         (common-lisp:error ":membershipid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-privacy-budget-template-membership-id
                         :shape "UUID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (membership-arn :initarg :membership-arn :initform
                         (common-lisp:error ":membershiparn is required") :type
                         (common-lisp:or membership-arn common-lisp:null)
                         :accessor
                         struct-shape-privacy-budget-template-membership-arn
                         :shape "MembershipArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (collaboration-id :initarg :collaboration-id :initform
                         (common-lisp:error ":collaborationid is required")
                         :type (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-privacy-budget-template-collaboration-id
                         :shape "UUID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (collaboration-arn :initarg :collaboration-arn
                         :initform
                         (common-lisp:error ":collaborationarn is required")
                         :type
                         (common-lisp:or collaboration-arn common-lisp:null)
                         :accessor
                         struct-shape-privacy-budget-template-collaboration-arn
                         :shape "CollaborationArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (create-time :initarg :create-time :initform
                         (common-lisp:error ":createtime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-privacy-budget-template-create-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (update-time :initarg :update-time :initform
                         (common-lisp:error ":updatetime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-privacy-budget-template-update-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (privacy-budget-type :initarg :privacy-budget-type
                         :initform
                         (common-lisp:error ":privacybudgettype is required")
                         :type
                         (common-lisp:or privacy-budget-type common-lisp:null)
                         :accessor
                         struct-shape-privacy-budget-template-privacy-budget-type
                         :shape "PrivacyBudgetType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-refresh :initarg :auto-refresh :initform
                         (common-lisp:error ":autorefresh is required") :type
                         (common-lisp:or privacy-budget-template-auto-refresh
                                         common-lisp:null)
                         :accessor
                         struct-shape-privacy-budget-template-auto-refresh
                         :shape "PrivacyBudgetTemplateAutoRefresh" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         (common-lisp:error ":parameters is required") :type
                         (common-lisp:or
                          privacy-budget-template-parameters-output
                          common-lisp:null)
                         :accessor
                         struct-shape-privacy-budget-template-parameters :shape
                         "PrivacyBudgetTemplateParametersOutput" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-privacy-budget-template
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'privacy-budget-template
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'privacy-budget-template 'make-privacy-budget-template))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          privacy-budget-template))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          privacy-budget-template))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-id))
      (common-lisp:list
       (common-lisp:cons "membershipId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-arn))
      (common-lisp:list
       (common-lisp:cons "membershipArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-id))
      (common-lisp:list
       (common-lisp:cons "collaborationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-arn))
      (common-lisp:list
       (common-lisp:cons "collaborationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'privacy-budget-type))
      (common-lisp:list
       (common-lisp:cons "privacyBudgetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-refresh))
      (common-lisp:list
       (common-lisp:cons "autoRefresh"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          privacy-budget-template))
   common-lisp:nil))
(common-lisp:deftype privacy-budget-template-arn () 'common-lisp:string)
(common-lisp:deftype privacy-budget-template-auto-refresh ()
  'common-lisp:string)
(common-lisp:deftype privacy-budget-template-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass privacy-budget-template-parameters-input common-lisp:nil
                       ((differential-privacy :initarg :differential-privacy
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          differential-privacy-template-parameters-input
                          common-lisp:null)
                         :accessor
                         struct-shape-privacy-budget-template-parameters-input-differential-privacy
                         :shape "DifferentialPrivacyTemplateParametersInput"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-privacy-budget-template-parameters-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'privacy-budget-template-parameters-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'privacy-budget-template-parameters-input
                    'make-privacy-budget-template-parameters-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          privacy-budget-template-parameters-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          privacy-budget-template-parameters-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'differential-privacy))
      (common-lisp:list
       (common-lisp:cons "differentialPrivacy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          privacy-budget-template-parameters-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass privacy-budget-template-parameters-output
                       common-lisp:nil
                       ((differential-privacy :initarg :differential-privacy
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          differential-privacy-template-parameters-output
                          common-lisp:null)
                         :accessor
                         struct-shape-privacy-budget-template-parameters-output-differential-privacy
                         :shape "DifferentialPrivacyTemplateParametersOutput"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-privacy-budget-template-parameters-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'privacy-budget-template-parameters-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'privacy-budget-template-parameters-output
                    'make-privacy-budget-template-parameters-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          privacy-budget-template-parameters-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          privacy-budget-template-parameters-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'differential-privacy))
      (common-lisp:list
       (common-lisp:cons "differentialPrivacy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          privacy-budget-template-parameters-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass privacy-budget-template-summary common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or privacy-budget-template-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-privacy-budget-template-summary-id :shape
                         "PrivacyBudgetTemplateIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or privacy-budget-template-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-privacy-budget-template-summary-arn
                         :shape "PrivacyBudgetTemplateArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (membership-id :initarg :membership-id :initform
                         (common-lisp:error ":membershipid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-privacy-budget-template-summary-membership-id
                         :shape "UUID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (membership-arn :initarg :membership-arn :initform
                         (common-lisp:error ":membershiparn is required") :type
                         (common-lisp:or membership-arn common-lisp:null)
                         :accessor
                         struct-shape-privacy-budget-template-summary-membership-arn
                         :shape "MembershipArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (collaboration-id :initarg :collaboration-id :initform
                         (common-lisp:error ":collaborationid is required")
                         :type (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-privacy-budget-template-summary-collaboration-id
                         :shape "UUID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (collaboration-arn :initarg :collaboration-arn
                         :initform
                         (common-lisp:error ":collaborationarn is required")
                         :type
                         (common-lisp:or collaboration-arn common-lisp:null)
                         :accessor
                         struct-shape-privacy-budget-template-summary-collaboration-arn
                         :shape "CollaborationArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (privacy-budget-type :initarg :privacy-budget-type
                         :initform
                         (common-lisp:error ":privacybudgettype is required")
                         :type
                         (common-lisp:or privacy-budget-type common-lisp:null)
                         :accessor
                         struct-shape-privacy-budget-template-summary-privacy-budget-type
                         :shape "PrivacyBudgetType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (create-time :initarg :create-time :initform
                         (common-lisp:error ":createtime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-privacy-budget-template-summary-create-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (update-time :initarg :update-time :initform
                         (common-lisp:error ":updatetime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-privacy-budget-template-summary-update-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-privacy-budget-template-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'privacy-budget-template-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'privacy-budget-template-summary
                    'make-privacy-budget-template-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          privacy-budget-template-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          privacy-budget-template-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-id))
      (common-lisp:list
       (common-lisp:cons "membershipId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-arn))
      (common-lisp:list
       (common-lisp:cons "membershipArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-id))
      (common-lisp:list
       (common-lisp:cons "collaborationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-arn))
      (common-lisp:list
       (common-lisp:cons "collaborationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'privacy-budget-type))
      (common-lisp:list
       (common-lisp:cons "privacyBudgetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          privacy-budget-template-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype privacy-budget-template-summary-list ()
   '(trivial-types:proper-list privacy-budget-template-summary))
 (common-lisp:defun make-privacy-budget-template-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            privacy-budget-template-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass privacy-budget-template-update-parameters
                       common-lisp:nil
                       ((differential-privacy :initarg :differential-privacy
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          differential-privacy-template-update-parameters
                          common-lisp:null)
                         :accessor
                         struct-shape-privacy-budget-template-update-parameters-differential-privacy
                         :shape "DifferentialPrivacyTemplateUpdateParameters"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-privacy-budget-template-update-parameters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'privacy-budget-template-update-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'privacy-budget-template-update-parameters
                    'make-privacy-budget-template-update-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          privacy-budget-template-update-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          privacy-budget-template-update-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'differential-privacy))
      (common-lisp:list
       (common-lisp:cons "differentialPrivacy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          privacy-budget-template-update-parameters))
   common-lisp:nil))
(common-lisp:deftype privacy-budget-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass privacy-impact common-lisp:nil
                       ((differential-privacy :initarg :differential-privacy
                         :initform common-lisp:nil :type
                         (common-lisp:or differential-privacy-privacy-impact
                                         common-lisp:null)
                         :accessor
                         struct-shape-privacy-impact-differential-privacy
                         :shape "DifferentialPrivacyPrivacyImpact" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-privacy-impact
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'privacy-impact
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'privacy-impact 'make-privacy-impact))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input privacy-impact))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input privacy-impact))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'differential-privacy))
      (common-lisp:list
       (common-lisp:cons "differentialPrivacy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input privacy-impact))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass protected-query common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-protected-query-id :shape "UUID"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (membership-id :initarg :membership-id :initform
                         (common-lisp:error ":membershipid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-protected-query-membership-id :shape
                         "UUID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (membership-arn :initarg :membership-arn :initform
                         (common-lisp:error ":membershiparn is required") :type
                         (common-lisp:or membership-arn common-lisp:null)
                         :accessor struct-shape-protected-query-membership-arn
                         :shape "MembershipArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (create-time :initarg :create-time :initform
                         (common-lisp:error ":createtime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-protected-query-create-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sql-parameters :initarg :sql-parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or protected-query-sqlparameters
                                         common-lisp:null)
                         :accessor struct-shape-protected-query-sql-parameters
                         :shape "ProtectedQuerySQLParameters" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or protected-query-status
                                         common-lisp:null)
                         :accessor struct-shape-protected-query-status :shape
                         "ProtectedQueryStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (result-configuration :initarg :result-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or protected-query-result-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-protected-query-result-configuration
                         :shape "ProtectedQueryResultConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (statistics :initarg :statistics :initform
                         common-lisp:nil :type
                         (common-lisp:or protected-query-statistics
                                         common-lisp:null)
                         :accessor struct-shape-protected-query-statistics
                         :shape "ProtectedQueryStatistics" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (result :initarg :result :initform common-lisp:nil
                         :type
                         (common-lisp:or protected-query-result
                                         common-lisp:null)
                         :accessor struct-shape-protected-query-result :shape
                         "ProtectedQueryResult" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or protected-query-error
                                         common-lisp:null)
                         :accessor struct-shape-protected-query-error :shape
                         "ProtectedQueryError" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (differential-privacy :initarg :differential-privacy
                         :initform common-lisp:nil :type
                         (common-lisp:or differential-privacy-parameters
                                         common-lisp:null)
                         :accessor
                         struct-shape-protected-query-differential-privacy
                         :shape "DifferentialPrivacyParameters" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-protected-query
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'protected-query
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'protected-query 'make-protected-query))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input protected-query))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input protected-query))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-id))
      (common-lisp:list
       (common-lisp:cons "membershipId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-arn))
      (common-lisp:list
       (common-lisp:cons "membershipArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sql-parameters))
      (common-lisp:list
       (common-lisp:cons "sqlParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'result-configuration))
      (common-lisp:list
       (common-lisp:cons "resultConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistics))
      (common-lisp:list
       (common-lisp:cons "statistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result))
      (common-lisp:list
       (common-lisp:cons "result"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'differential-privacy))
      (common-lisp:list
       (common-lisp:cons "differentialPrivacy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input protected-query))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass protected-query-error common-lisp:nil
                       ((message :initarg :message :initform
                         (common-lisp:error ":message is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-protected-query-error-message :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (code :initarg :code :initform
                         (common-lisp:error ":code is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-protected-query-error-code :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-protected-query-error
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'protected-query-error
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'protected-query-error 'make-protected-query-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-error))
   common-lisp:nil))
(common-lisp:deftype protected-query-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype protected-query-member-output-list ()
   '(trivial-types:proper-list protected-query-single-member-output))
 (common-lisp:defun make-protected-query-member-output-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            protected-query-single-member-output))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass protected-query-output common-lisp:nil
                       ((s3 :initarg :s3 :initform common-lisp:nil :type
                         (common-lisp:or protected-query-s3output
                                         common-lisp:null)
                         :accessor struct-shape-protected-query-output-s3
                         :shape "ProtectedQueryS3Output" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (member-list :initarg :member-list :initform
                         common-lisp:nil :type
                         (common-lisp:or protected-query-member-output-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-protected-query-output-member-list :shape
                         "ProtectedQueryMemberOutputList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-protected-query-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'protected-query-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'protected-query-output 'make-protected-query-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3))
      (common-lisp:list
       (common-lisp:cons "s3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-list))
      (common-lisp:list
       (common-lisp:cons "memberList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass protected-query-output-configuration common-lisp:nil
                       ((s3 :initarg :s3 :initform common-lisp:nil :type
                         (common-lisp:or protected-query-s3output-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-protected-query-output-configuration-s3
                         :shape "ProtectedQueryS3OutputConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-protected-query-output-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'protected-query-output-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'protected-query-output-configuration
                    'make-protected-query-output-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-output-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-output-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3))
      (common-lisp:list
       (common-lisp:cons "s3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-output-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass protected-query-result common-lisp:nil
                       ((output :initarg :output :initform
                         (common-lisp:error ":output is required") :type
                         (common-lisp:or protected-query-output
                                         common-lisp:null)
                         :accessor struct-shape-protected-query-result-output
                         :shape "ProtectedQueryOutput" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-protected-query-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'protected-query-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'protected-query-result 'make-protected-query-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output))
      (common-lisp:list
       (common-lisp:cons "output"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass protected-query-result-configuration common-lisp:nil
                       ((output-configuration :initarg :output-configuration
                         :initform
                         (common-lisp:error ":outputconfiguration is required")
                         :type
                         (common-lisp:or protected-query-output-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-protected-query-result-configuration-output-configuration
                         :shape "ProtectedQueryOutputConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-protected-query-result-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'protected-query-result-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'protected-query-result-configuration
                    'make-protected-query-result-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-result-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-result-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-configuration))
      (common-lisp:list
       (common-lisp:cons "outputConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-result-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass protected-query-s3output common-lisp:nil
                       ((location :initarg :location :initform
                         (common-lisp:error ":location is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-protected-query-s3output-location :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-protected-query-s3output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'protected-query-s3output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'protected-query-s3output 'make-protected-query-s3output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-s3output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-s3output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-s3output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass protected-query-s3output-configuration common-lisp:nil
                       ((result-format :initarg :result-format :initform
                         (common-lisp:error ":resultformat is required") :type
                         (common-lisp:or result-format common-lisp:null)
                         :accessor
                         struct-shape-protected-query-s3output-configuration-result-format
                         :shape "ResultFormat" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or
                          protected-query-s3output-configuration-bucket-string
                          common-lisp:null)
                         :accessor
                         struct-shape-protected-query-s3output-configuration-bucket
                         :shape
                         "ProtectedQueryS3OutputConfigurationBucketString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (key-prefix :initarg :key-prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or key-prefix common-lisp:null) :accessor
                         struct-shape-protected-query-s3output-configuration-key-prefix
                         :shape "KeyPrefix" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-protected-query-s3output-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'protected-query-s3output-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'protected-query-s3output-configuration
                    'make-protected-query-s3output-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-s3output-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-s3output-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-format))
      (common-lisp:list
       (common-lisp:cons "resultFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-prefix))
      (common-lisp:list
       (common-lisp:cons "keyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-s3output-configuration))
   common-lisp:nil))
(common-lisp:deftype protected-query-s3output-configuration-bucket-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass protected-query-sqlparameters common-lisp:nil
                       ((query-string :initarg :query-string :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          protected-query-sqlparameters-query-string-string
                          common-lisp:null)
                         :accessor
                         struct-shape-protected-query-sqlparameters-query-string
                         :shape "ProtectedQuerySQLParametersQueryStringString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (analysis-template-arn :initarg :analysis-template-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or analysis-template-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-protected-query-sqlparameters-analysis-template-arn
                         :shape "AnalysisTemplateArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or parameter-map common-lisp:null)
                         :accessor
                         struct-shape-protected-query-sqlparameters-parameters
                         :shape "ParameterMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-protected-query-sqlparameters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'protected-query-sqlparameters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'protected-query-sqlparameters
                    'make-protected-query-sqlparameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-sqlparameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-sqlparameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "queryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'analysis-template-arn))
      (common-lisp:list
       (common-lisp:cons "analysisTemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-sqlparameters))
   common-lisp:nil))
(common-lisp:deftype protected-query-sqlparameters-query-string-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass protected-query-single-member-output common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         (common-lisp:error ":accountid is required") :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-protected-query-single-member-output-account-id
                         :shape "AccountId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-protected-query-single-member-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'protected-query-single-member-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'protected-query-single-member-output
                    'make-protected-query-single-member-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-single-member-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-single-member-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-single-member-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass protected-query-statistics common-lisp:nil
                       ((total-duration-in-millis :initarg
                         :total-duration-in-millis :initform common-lisp:nil
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-protected-query-statistics-total-duration-in-millis
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-protected-query-statistics
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'protected-query-statistics
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'protected-query-statistics
                    'make-protected-query-statistics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-duration-in-millis))
      (common-lisp:list
       (common-lisp:cons "totalDurationInMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-statistics))
   common-lisp:nil))
(common-lisp:deftype protected-query-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass protected-query-summary common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-protected-query-summary-id :shape "UUID"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (membership-id :initarg :membership-id :initform
                         (common-lisp:error ":membershipid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-protected-query-summary-membership-id
                         :shape "UUID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (membership-arn :initarg :membership-arn :initform
                         (common-lisp:error ":membershiparn is required") :type
                         (common-lisp:or membership-arn common-lisp:null)
                         :accessor
                         struct-shape-protected-query-summary-membership-arn
                         :shape "MembershipArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (create-time :initarg :create-time :initform
                         (common-lisp:error ":createtime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-protected-query-summary-create-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or protected-query-status
                                         common-lisp:null)
                         :accessor struct-shape-protected-query-summary-status
                         :shape "ProtectedQueryStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-protected-query-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'protected-query-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'protected-query-summary 'make-protected-query-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-id))
      (common-lisp:list
       (common-lisp:cons "membershipId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-arn))
      (common-lisp:list
       (common-lisp:cons "membershipArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype protected-query-summary-list ()
   '(trivial-types:proper-list protected-query-summary))
 (common-lisp:defun make-protected-query-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list protected-query-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype protected-query-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass query-compute-payment-config common-lisp:nil
                       ((is-responsible :initarg :is-responsible :initform
                         (common-lisp:error ":isresponsible is required") :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-query-compute-payment-config-is-responsible
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-query-compute-payment-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'query-compute-payment-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'query-compute-payment-config
                    'make-query-compute-payment-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          query-compute-payment-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          query-compute-payment-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-responsible))
      (common-lisp:list
       (common-lisp:cons "isResponsible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          query-compute-payment-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype query-tables () '(trivial-types:proper-list table-alias))
 (common-lisp:defun make-query-tables
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list table-alias))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-alias () 'common-lisp:string)
(common-lisp:deftype resource-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (cleanrooms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       resource-not-found-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-id
                    'resource-not-found-exception-resource-type)))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:deftype result-format () 'common-lisp:string)
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:deftype scalar-functions () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype scalar-functions-list ()
   '(trivial-types:proper-list scalar-functions))
 (common-lisp:defun make-scalar-functions-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list scalar-functions))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass schema common-lisp:nil
                       ((columns :initarg :columns :initform
                         (common-lisp:error ":columns is required") :type
                         (common-lisp:or column-list common-lisp:null)
                         :accessor struct-shape-schema-columns :shape
                         "ColumnList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (partition-keys :initarg :partition-keys :initform
                         (common-lisp:error ":partitionkeys is required") :type
                         (common-lisp:or column-list common-lisp:null)
                         :accessor struct-shape-schema-partition-keys :shape
                         "ColumnList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (analysis-rule-types :initarg :analysis-rule-types
                         :initform
                         (common-lisp:error ":analysisruletypes is required")
                         :type
                         (common-lisp:or analysis-rule-type-list
                                         common-lisp:null)
                         :accessor struct-shape-schema-analysis-rule-types
                         :shape "AnalysisRuleTypeList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (analysis-method :initarg :analysis-method :initform
                         common-lisp:nil :type
                         (common-lisp:or analysis-method common-lisp:null)
                         :accessor struct-shape-schema-analysis-method :shape
                         "AnalysisMethod" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creator-account-id :initarg :creator-account-id
                         :initform
                         (common-lisp:error ":creatoraccountid is required")
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor struct-shape-schema-creator-account-id
                         :shape "AccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or table-alias common-lisp:null)
                         :accessor struct-shape-schema-name :shape "TableAlias"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (collaboration-id :initarg :collaboration-id :initform
                         (common-lisp:error ":collaborationid is required")
                         :type (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-schema-collaboration-id :shape "UUID"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (collaboration-arn :initarg :collaboration-arn
                         :initform
                         (common-lisp:error ":collaborationarn is required")
                         :type
                         (common-lisp:or collaboration-arn common-lisp:null)
                         :accessor struct-shape-schema-collaboration-arn :shape
                         "CollaborationArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         (common-lisp:error ":description is required") :type
                         (common-lisp:or table-description common-lisp:null)
                         :accessor struct-shape-schema-description :shape
                         "TableDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (create-time :initarg :create-time :initform
                         (common-lisp:error ":createtime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-schema-create-time :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (update-time :initarg :update-time :initform
                         (common-lisp:error ":updatetime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-schema-update-time :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or schema-type common-lisp:null)
                         :accessor struct-shape-schema-type :shape "SchemaType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-schema
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'schema
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'schema 'make-schema))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input schema))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input schema))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'columns))
      (common-lisp:list
       (common-lisp:cons "columns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-keys))
      (common-lisp:list
       (common-lisp:cons "partitionKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-rule-types))
      (common-lisp:list
       (common-lisp:cons "analysisRuleTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-method))
      (common-lisp:list
       (common-lisp:cons "analysisMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-account-id))
      (common-lisp:list
       (common-lisp:cons "creatorAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-id))
      (common-lisp:list
       (common-lisp:cons "collaborationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-arn))
      (common-lisp:list
       (common-lisp:cons "collaborationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input schema))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype schema-list () '(trivial-types:proper-list schema))
 (common-lisp:defun make-schema-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list schema))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass schema-summary common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or table-alias common-lisp:null)
                         :accessor struct-shape-schema-summary-name :shape
                         "TableAlias" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or schema-type common-lisp:null)
                         :accessor struct-shape-schema-summary-type :shape
                         "SchemaType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creator-account-id :initarg :creator-account-id
                         :initform
                         (common-lisp:error ":creatoraccountid is required")
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         struct-shape-schema-summary-creator-account-id :shape
                         "AccountId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (create-time :initarg :create-time :initform
                         (common-lisp:error ":createtime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-schema-summary-create-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (update-time :initarg :update-time :initform
                         (common-lisp:error ":updatetime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-schema-summary-update-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (collaboration-id :initarg :collaboration-id :initform
                         (common-lisp:error ":collaborationid is required")
                         :type (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-schema-summary-collaboration-id :shape
                         "UUID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (collaboration-arn :initarg :collaboration-arn
                         :initform
                         (common-lisp:error ":collaborationarn is required")
                         :type
                         (common-lisp:or collaboration-arn common-lisp:null)
                         :accessor
                         struct-shape-schema-summary-collaboration-arn :shape
                         "CollaborationArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (analysis-rule-types :initarg :analysis-rule-types
                         :initform
                         (common-lisp:error ":analysisruletypes is required")
                         :type
                         (common-lisp:or analysis-rule-type-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-schema-summary-analysis-rule-types :shape
                         "AnalysisRuleTypeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (analysis-method :initarg :analysis-method :initform
                         common-lisp:nil :type
                         (common-lisp:or analysis-method common-lisp:null)
                         :accessor struct-shape-schema-summary-analysis-method
                         :shape "AnalysisMethod" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-schema-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'schema-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'schema-summary 'make-schema-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input schema-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input schema-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-account-id))
      (common-lisp:list
       (common-lisp:cons "creatorAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-id))
      (common-lisp:list
       (common-lisp:cons "collaborationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-arn))
      (common-lisp:list
       (common-lisp:cons "collaborationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-rule-types))
      (common-lisp:list
       (common-lisp:cons "analysisRuleTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-method))
      (common-lisp:list
       (common-lisp:cons "analysisMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input schema-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype schema-summary-list ()
   '(trivial-types:proper-list schema-summary))
 (common-lisp:defun make-schema-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list schema-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype schema-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (cleanrooms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)
      (quota-name :initarg :quota-name :initform common-lisp:nil :reader
       service-quota-exceeded-exception-quota-name)
      (quota-value :initarg :quota-value :initform common-lisp:nil :reader
       service-quota-exceeded-exception-quota-value)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message
                    'service-quota-exceeded-exception-quota-name
                    'service-quota-exceeded-exception-quota-value)))
(common-lisp:progn
 (common-lisp:defclass start-protected-query-input common-lisp:nil
                       ((type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or protected-query-type common-lisp:null)
                         :accessor
                         struct-shape-start-protected-query-input-type :shape
                         "ProtectedQueryType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (membership-identifier :initarg :membership-identifier
                         :initform
                         (common-lisp:error
                          ":membershipidentifier is required")
                         :type
                         (common-lisp:or membership-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-protected-query-input-membership-identifier
                         :shape "MembershipIdentifier" :location "uri"
                         :location-name "membershipIdentifier")
                        (sql-parameters :initarg :sql-parameters :initform
                         (common-lisp:error ":sqlparameters is required") :type
                         (common-lisp:or protected-query-sqlparameters
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-protected-query-input-sql-parameters
                         :shape "ProtectedQuerySQLParameters" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (result-configuration :initarg :result-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or protected-query-result-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-protected-query-input-result-configuration
                         :shape "ProtectedQueryResultConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-protected-query-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-protected-query-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-protected-query-input
                    'make-start-protected-query-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-protected-query-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-protected-query-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sql-parameters))
      (common-lisp:list
       (common-lisp:cons "sqlParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'result-configuration))
      (common-lisp:list
       (common-lisp:cons "resultConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-protected-query-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-protected-query-output common-lisp:nil
                       ((protected-query :initarg :protected-query :initform
                         (common-lisp:error ":protectedquery is required")
                         :type
                         (common-lisp:or protected-query common-lisp:null)
                         :accessor
                         struct-shape-start-protected-query-output-protected-query
                         :shape "ProtectedQuery" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-protected-query-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-protected-query-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-protected-query-output
                    'make-start-protected-query-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-protected-query-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-protected-query-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protected-query))
      (common-lisp:list
       (common-lisp:cons "protectedQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-protected-query-output))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype table-alias () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype table-alias-list ()
   '(trivial-types:proper-list table-alias))
 (common-lisp:defun make-table-alias-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list table-alias))
   aws-sdk/generator/shape::members))
(common-lisp:deftype table-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass table-reference common-lisp:nil
                       ((glue :initarg :glue :initform common-lisp:nil :type
                         (common-lisp:or glue-table-reference common-lisp:null)
                         :accessor struct-shape-table-reference-glue :shape
                         "GlueTableReference" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-table-reference
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'table-reference
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'table-reference 'make-table-reference))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input table-reference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input table-reference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glue))
      (common-lisp:list
       (common-lisp:cons "glue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input table-reference))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-keys () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-keys
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun make-tag-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass tag-resource-input common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or cleanrooms-arn common-lisp:null)
                         :accessor struct-shape-tag-resource-input-resource-arn
                         :shape "CleanroomsArn" :location "uri" :location-name
                         "resourceArn")
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-tag-resource-input-tags :shape "TagMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-input 'make-tag-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-output 'make-tag-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-output))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype target-protected-query-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (cleanrooms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype uuid () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-input common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or cleanrooms-arn common-lisp:null)
                         :accessor
                         struct-shape-untag-resource-input-resource-arn :shape
                         "CleanroomsArn" :location "uri" :location-name
                         "resourceArn")
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tagkeys is required") :type
                         (common-lisp:or tag-keys common-lisp:null) :accessor
                         struct-shape-untag-resource-input-tag-keys :shape
                         "TagKeys" :location "querystring" :location-name
                         "tagKeys"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-input 'make-untag-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input untag-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-output 'make-untag-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-analysis-template-input common-lisp:nil
                       ((membership-identifier :initarg :membership-identifier
                         :initform
                         (common-lisp:error
                          ":membershipidentifier is required")
                         :type
                         (common-lisp:or membership-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-analysis-template-input-membership-identifier
                         :shape "MembershipIdentifier" :location "uri"
                         :location-name "membershipIdentifier")
                        (analysis-template-identifier :initarg
                         :analysis-template-identifier :initform
                         (common-lisp:error
                          ":analysistemplateidentifier is required")
                         :type
                         (common-lisp:or analysis-template-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-analysis-template-input-analysis-template-identifier
                         :shape "AnalysisTemplateIdentifier" :location "uri"
                         :location-name "analysisTemplateIdentifier")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-description common-lisp:null)
                         :accessor
                         struct-shape-update-analysis-template-input-description
                         :shape "ResourceDescription" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-analysis-template-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-analysis-template-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-analysis-template-input
                    'make-update-analysis-template-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-analysis-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-analysis-template-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-analysis-template-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-analysis-template-output common-lisp:nil
                       ((analysis-template :initarg :analysis-template
                         :initform
                         (common-lisp:error ":analysistemplate is required")
                         :type
                         (common-lisp:or analysis-template common-lisp:null)
                         :accessor
                         struct-shape-update-analysis-template-output-analysis-template
                         :shape "AnalysisTemplate" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-analysis-template-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-analysis-template-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-analysis-template-output
                    'make-update-analysis-template-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-analysis-template-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-analysis-template-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-template))
      (common-lisp:list
       (common-lisp:cons "analysisTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-analysis-template-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-collaboration-input common-lisp:nil
                       ((collaboration-identifier :initarg
                         :collaboration-identifier :initform
                         (common-lisp:error
                          ":collaborationidentifier is required")
                         :type
                         (common-lisp:or collaboration-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-collaboration-input-collaboration-identifier
                         :shape "CollaborationIdentifier" :location "uri"
                         :location-name "collaborationIdentifier")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or collaboration-name common-lisp:null)
                         :accessor struct-shape-update-collaboration-input-name
                         :shape "CollaborationName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or collaboration-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-collaboration-input-description
                         :shape "CollaborationDescription" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-collaboration-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-collaboration-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-collaboration-input
                    'make-update-collaboration-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-collaboration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-collaboration-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-collaboration-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-collaboration-output common-lisp:nil
                       ((collaboration :initarg :collaboration :initform
                         (common-lisp:error ":collaboration is required") :type
                         (common-lisp:or collaboration common-lisp:null)
                         :accessor
                         struct-shape-update-collaboration-output-collaboration
                         :shape "Collaboration" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-collaboration-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-collaboration-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-collaboration-output
                    'make-update-collaboration-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-collaboration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-collaboration-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration))
      (common-lisp:list
       (common-lisp:cons "collaboration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-collaboration-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-configured-audience-model-association-input
                       common-lisp:nil
                       ((configured-audience-model-association-identifier
                         :initarg
                         :configured-audience-model-association-identifier
                         :initform
                         (common-lisp:error
                          ":configuredaudiencemodelassociationidentifier is required")
                         :type
                         (common-lisp:or
                          configured-audience-model-association-identifier
                          common-lisp:null)
                         :accessor
                         struct-shape-update-configured-audience-model-association-input-configured-audience-model-association-identifier
                         :shape "ConfiguredAudienceModelAssociationIdentifier"
                         :location "uri" :location-name
                         "configuredAudienceModelAssociationIdentifier")
                        (membership-identifier :initarg :membership-identifier
                         :initform
                         (common-lisp:error
                          ":membershipidentifier is required")
                         :type
                         (common-lisp:or membership-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-configured-audience-model-association-input-membership-identifier
                         :shape "MembershipIdentifier" :location "uri"
                         :location-name "membershipIdentifier")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-description common-lisp:null)
                         :accessor
                         struct-shape-update-configured-audience-model-association-input-description
                         :shape "ResourceDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or
                          configured-audience-model-association-name
                          common-lisp:null)
                         :accessor
                         struct-shape-update-configured-audience-model-association-input-name
                         :shape "ConfiguredAudienceModelAssociationName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-configured-audience-model-association-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-configured-audience-model-association-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-configured-audience-model-association-input
                    'make-update-configured-audience-model-association-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-audience-model-association-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-audience-model-association-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-audience-model-association-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-configured-audience-model-association-output
                       common-lisp:nil
                       ((configured-audience-model-association :initarg
                         :configured-audience-model-association :initform
                         (common-lisp:error
                          ":configuredaudiencemodelassociation is required")
                         :type
                         (common-lisp:or configured-audience-model-association
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-configured-audience-model-association-output-configured-audience-model-association
                         :shape "ConfiguredAudienceModelAssociation" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-configured-audience-model-association-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-configured-audience-model-association-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-configured-audience-model-association-output
                    'make-update-configured-audience-model-association-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-audience-model-association-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-audience-model-association-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configured-audience-model-association))
      (common-lisp:list
       (common-lisp:cons "configuredAudienceModelAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-audience-model-association-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-configured-table-analysis-rule-input
                       common-lisp:nil
                       ((configured-table-identifier :initarg
                         :configured-table-identifier :initform
                         (common-lisp:error
                          ":configuredtableidentifier is required")
                         :type
                         (common-lisp:or configured-table-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-configured-table-analysis-rule-input-configured-table-identifier
                         :shape "ConfiguredTableIdentifier" :location "uri"
                         :location-name "configuredTableIdentifier")
                        (analysis-rule-type :initarg :analysis-rule-type
                         :initform
                         (common-lisp:error ":analysisruletype is required")
                         :type
                         (common-lisp:or configured-table-analysis-rule-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-configured-table-analysis-rule-input-analysis-rule-type
                         :shape "ConfiguredTableAnalysisRuleType" :location
                         "uri" :location-name "analysisRuleType")
                        (analysis-rule-policy :initarg :analysis-rule-policy
                         :initform
                         (common-lisp:error ":analysisrulepolicy is required")
                         :type
                         (common-lisp:or configured-table-analysis-rule-policy
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-configured-table-analysis-rule-input-analysis-rule-policy
                         :shape "ConfiguredTableAnalysisRulePolicy" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-configured-table-analysis-rule-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-configured-table-analysis-rule-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-configured-table-analysis-rule-input
                    'make-update-configured-table-analysis-rule-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-table-analysis-rule-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-table-analysis-rule-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'analysis-rule-policy))
      (common-lisp:list
       (common-lisp:cons "analysisRulePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-table-analysis-rule-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-configured-table-analysis-rule-output
                       common-lisp:nil
                       ((analysis-rule :initarg :analysis-rule :initform
                         (common-lisp:error ":analysisrule is required") :type
                         (common-lisp:or configured-table-analysis-rule
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-configured-table-analysis-rule-output-analysis-rule
                         :shape "ConfiguredTableAnalysisRule" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-configured-table-analysis-rule-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-configured-table-analysis-rule-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-configured-table-analysis-rule-output
                    'make-update-configured-table-analysis-rule-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-table-analysis-rule-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-table-analysis-rule-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-rule))
      (common-lisp:list
       (common-lisp:cons "analysisRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-table-analysis-rule-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-configured-table-association-input
                       common-lisp:nil
                       ((configured-table-association-identifier :initarg
                         :configured-table-association-identifier :initform
                         (common-lisp:error
                          ":configuredtableassociationidentifier is required")
                         :type
                         (common-lisp:or
                          configured-table-association-identifier
                          common-lisp:null)
                         :accessor
                         struct-shape-update-configured-table-association-input-configured-table-association-identifier
                         :shape "ConfiguredTableAssociationIdentifier"
                         :location "uri" :location-name
                         "configuredTableAssociationIdentifier")
                        (membership-identifier :initarg :membership-identifier
                         :initform
                         (common-lisp:error
                          ":membershipidentifier is required")
                         :type
                         (common-lisp:or membership-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-configured-table-association-input-membership-identifier
                         :shape "MembershipIdentifier" :location "uri"
                         :location-name "membershipIdentifier")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or table-description common-lisp:null)
                         :accessor
                         struct-shape-update-configured-table-association-input-description
                         :shape "TableDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor
                         struct-shape-update-configured-table-association-input-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-configured-table-association-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-configured-table-association-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-configured-table-association-input
                    'make-update-configured-table-association-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-table-association-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-table-association-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-table-association-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-configured-table-association-output
                       common-lisp:nil
                       ((configured-table-association :initarg
                         :configured-table-association :initform
                         (common-lisp:error
                          ":configuredtableassociation is required")
                         :type
                         (common-lisp:or configured-table-association
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-configured-table-association-output-configured-table-association
                         :shape "ConfiguredTableAssociation" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-configured-table-association-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-configured-table-association-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-configured-table-association-output
                    'make-update-configured-table-association-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-table-association-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-table-association-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configured-table-association))
      (common-lisp:list
       (common-lisp:cons "configuredTableAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-table-association-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-configured-table-input common-lisp:nil
                       ((configured-table-identifier :initarg
                         :configured-table-identifier :initform
                         (common-lisp:error
                          ":configuredtableidentifier is required")
                         :type
                         (common-lisp:or configured-table-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-configured-table-input-configured-table-identifier
                         :shape "ConfiguredTableIdentifier" :location "uri"
                         :location-name "configuredTableIdentifier")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or display-name common-lisp:null)
                         :accessor
                         struct-shape-update-configured-table-input-name :shape
                         "DisplayName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or table-description common-lisp:null)
                         :accessor
                         struct-shape-update-configured-table-input-description
                         :shape "TableDescription" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-configured-table-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-configured-table-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-configured-table-input
                    'make-update-configured-table-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-table-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-table-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-table-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-configured-table-output common-lisp:nil
                       ((configured-table :initarg :configured-table :initform
                         (common-lisp:error ":configuredtable is required")
                         :type
                         (common-lisp:or configured-table common-lisp:null)
                         :accessor
                         struct-shape-update-configured-table-output-configured-table
                         :shape "ConfiguredTable" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-configured-table-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-configured-table-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-configured-table-output
                    'make-update-configured-table-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-table-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-table-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configured-table))
      (common-lisp:list
       (common-lisp:cons "configuredTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-table-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-membership-input common-lisp:nil
                       ((membership-identifier :initarg :membership-identifier
                         :initform
                         (common-lisp:error
                          ":membershipidentifier is required")
                         :type
                         (common-lisp:or membership-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-membership-input-membership-identifier
                         :shape "MembershipIdentifier" :location "uri"
                         :location-name "membershipIdentifier")
                        (query-log-status :initarg :query-log-status :initform
                         common-lisp:nil :type
                         (common-lisp:or membership-query-log-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-membership-input-query-log-status
                         :shape "MembershipQueryLogStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (default-result-configuration :initarg
                         :default-result-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          membership-protected-query-result-configuration
                          common-lisp:null)
                         :accessor
                         struct-shape-update-membership-input-default-result-configuration
                         :shape "MembershipProtectedQueryResultConfiguration"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-membership-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-membership-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-membership-input 'make-update-membership-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-membership-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-membership-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-log-status))
      (common-lisp:list
       (common-lisp:cons "queryLogStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-result-configuration))
      (common-lisp:list
       (common-lisp:cons "defaultResultConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-membership-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-membership-output common-lisp:nil
                       ((membership :initarg :membership :initform
                         (common-lisp:error ":membership is required") :type
                         (common-lisp:or membership common-lisp:null) :accessor
                         struct-shape-update-membership-output-membership
                         :shape "Membership" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-membership-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-membership-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-membership-output 'make-update-membership-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-membership-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-membership-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership))
      (common-lisp:list
       (common-lisp:cons "membership"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-membership-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-privacy-budget-template-input common-lisp:nil
                       ((membership-identifier :initarg :membership-identifier
                         :initform
                         (common-lisp:error
                          ":membershipidentifier is required")
                         :type
                         (common-lisp:or membership-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-privacy-budget-template-input-membership-identifier
                         :shape "MembershipIdentifier" :location "uri"
                         :location-name "membershipIdentifier")
                        (privacy-budget-template-identifier :initarg
                         :privacy-budget-template-identifier :initform
                         (common-lisp:error
                          ":privacybudgettemplateidentifier is required")
                         :type
                         (common-lisp:or privacy-budget-template-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-privacy-budget-template-input-privacy-budget-template-identifier
                         :shape "PrivacyBudgetTemplateIdentifier" :location
                         "uri" :location-name
                         "privacyBudgetTemplateIdentifier")
                        (privacy-budget-type :initarg :privacy-budget-type
                         :initform
                         (common-lisp:error ":privacybudgettype is required")
                         :type
                         (common-lisp:or privacy-budget-type common-lisp:null)
                         :accessor
                         struct-shape-update-privacy-budget-template-input-privacy-budget-type
                         :shape "PrivacyBudgetType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          privacy-budget-template-update-parameters
                          common-lisp:null)
                         :accessor
                         struct-shape-update-privacy-budget-template-input-parameters
                         :shape "PrivacyBudgetTemplateUpdateParameters"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-privacy-budget-template-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-privacy-budget-template-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-privacy-budget-template-input
                    'make-update-privacy-budget-template-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-privacy-budget-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-privacy-budget-template-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'privacy-budget-type))
      (common-lisp:list
       (common-lisp:cons "privacyBudgetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-privacy-budget-template-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-privacy-budget-template-output common-lisp:nil
                       ((privacy-budget-template :initarg
                         :privacy-budget-template :initform
                         (common-lisp:error
                          ":privacybudgettemplate is required")
                         :type
                         (common-lisp:or privacy-budget-template
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-privacy-budget-template-output-privacy-budget-template
                         :shape "PrivacyBudgetTemplate" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-privacy-budget-template-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-privacy-budget-template-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-privacy-budget-template-output
                    'make-update-privacy-budget-template-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-privacy-budget-template-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-privacy-budget-template-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'privacy-budget-template))
      (common-lisp:list
       (common-lisp:cons "privacyBudgetTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-privacy-budget-template-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-protected-query-input common-lisp:nil
                       ((membership-identifier :initarg :membership-identifier
                         :initform
                         (common-lisp:error
                          ":membershipidentifier is required")
                         :type
                         (common-lisp:or membership-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-protected-query-input-membership-identifier
                         :shape "MembershipIdentifier" :location "uri"
                         :location-name "membershipIdentifier")
                        (protected-query-identifier :initarg
                         :protected-query-identifier :initform
                         (common-lisp:error
                          ":protectedqueryidentifier is required")
                         :type
                         (common-lisp:or protected-query-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-protected-query-input-protected-query-identifier
                         :shape "ProtectedQueryIdentifier" :location "uri"
                         :location-name "protectedQueryIdentifier")
                        (target-status :initarg :target-status :initform
                         (common-lisp:error ":targetstatus is required") :type
                         (common-lisp:or target-protected-query-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-protected-query-input-target-status
                         :shape "TargetProtectedQueryStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-protected-query-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-protected-query-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-protected-query-input
                    'make-update-protected-query-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-protected-query-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-protected-query-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-status))
      (common-lisp:list
       (common-lisp:cons "targetStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-protected-query-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-protected-query-output common-lisp:nil
                       ((protected-query :initarg :protected-query :initform
                         (common-lisp:error ":protectedquery is required")
                         :type
                         (common-lisp:or protected-query common-lisp:null)
                         :accessor
                         struct-shape-update-protected-query-output-protected-query
                         :shape "ProtectedQuery" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-protected-query-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-protected-query-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-protected-query-output
                    'make-update-protected-query-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-protected-query-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-protected-query-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protected-query))
      (common-lisp:list
       (common-lisp:cons "protectedQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-protected-query-output))
   common-lisp:nil))
(common-lisp:deftype users-noise-per-query () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (cleanrooms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       validation-exception-reason)
      (field-list :initarg :field-list :initform common-lisp:nil :reader
       validation-exception-field-list)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message
                    'validation-exception-reason
                    'validation-exception-field-list)))
(common-lisp:progn
 (common-lisp:defclass validation-exception-field common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-validation-exception-field-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message :initarg :message :initform
                         (common-lisp:error ":message is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-validation-exception-field-message :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-validation-exception-field
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'validation-exception-field
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'validation-exception-field
                    'make-validation-exception-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-exception-field-list ()
   '(trivial-types:proper-list validation-exception-field))
 (common-lisp:defun make-validation-exception-field-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            validation-exception-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype validation-exception-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun batch-get-collaboration-analysis-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collaboration-identifier
                     analysis-template-arns)
   (common-lisp:declare
    (common-lisp:ignorable collaboration-identifier analysis-template-arns))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-get-collaboration-analysis-template-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/collaborations/~A/batch-analysistemplates"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'collaboration-identifier))))
                                                        "BatchGetCollaborationAnalysisTemplate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-get-collaboration-analysis-template))
(common-lisp:progn
 (common-lisp:defun batch-get-schema
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collaboration-identifier names)
   (common-lisp:declare (common-lisp:ignorable collaboration-identifier names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-get-schema-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/collaborations/~A/batch-schema"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'collaboration-identifier))))
                                                        "BatchGetSchema"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-get-schema))
(common-lisp:progn
 (common-lisp:defun create-analysis-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description membership-identifier name
                     format source tags analysis-parameters)
   (common-lisp:declare
    (common-lisp:ignorable description membership-identifier name format source
     tags analysis-parameters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-analysis-template-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/memberships/~A/analysistemplates"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'membership-identifier))))
                                                        "CreateAnalysisTemplate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-analysis-template))
(common-lisp:progn
 (common-lisp:defun create-collaboration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key members name description
                     creator-member-abilities creator-display-name
                     data-encryption-metadata query-log-status tags
                     creator-payment-configuration)
   (common-lisp:declare
    (common-lisp:ignorable members name description creator-member-abilities
     creator-display-name data-encryption-metadata query-log-status tags
     creator-payment-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-collaboration-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/collaborations"
                                                        "CreateCollaboration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-collaboration))
(common-lisp:progn
 (common-lisp:defun create-configured-audience-model-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key membership-identifier
                     configured-audience-model-arn
                     configured-audience-model-association-name
                     manage-resource-policies tags description)
   (common-lisp:declare
    (common-lisp:ignorable membership-identifier configured-audience-model-arn
     configured-audience-model-association-name manage-resource-policies tags
     description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-configured-audience-model-association-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/memberships/~A/configuredaudiencemodelassociations"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'membership-identifier))))
                                                        "CreateConfiguredAudienceModelAssociation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-configured-audience-model-association))
(common-lisp:progn
 (common-lisp:defun create-configured-table
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description table-reference
                     allowed-columns analysis-method tags)
   (common-lisp:declare
    (common-lisp:ignorable name description table-reference allowed-columns
     analysis-method tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-configured-table-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/configuredTables"
                                                        "CreateConfiguredTable"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-configured-table))
(common-lisp:progn
 (common-lisp:defun create-configured-table-analysis-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configured-table-identifier
                     analysis-rule-type analysis-rule-policy)
   (common-lisp:declare
    (common-lisp:ignorable configured-table-identifier analysis-rule-type
     analysis-rule-policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-configured-table-analysis-rule-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/configuredTables/~A/analysisRule"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'configured-table-identifier))))
                                                        "CreateConfiguredTableAnalysisRule"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-configured-table-analysis-rule))
(common-lisp:progn
 (common-lisp:defun create-configured-table-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description membership-identifier
                     configured-table-identifier role-arn tags)
   (common-lisp:declare
    (common-lisp:ignorable name description membership-identifier
     configured-table-identifier role-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-configured-table-association-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/memberships/~A/configuredTableAssociations"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'membership-identifier))))
                                                        "CreateConfiguredTableAssociation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-configured-table-association))
(common-lisp:progn
 (common-lisp:defun create-membership
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collaboration-identifier query-log-status
                     tags default-result-configuration payment-configuration)
   (common-lisp:declare
    (common-lisp:ignorable collaboration-identifier query-log-status tags
     default-result-configuration payment-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-membership-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/memberships"
                                                        "CreateMembership"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-membership))
(common-lisp:progn
 (common-lisp:defun create-privacy-budget-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key membership-identifier auto-refresh
                     privacy-budget-type parameters tags)
   (common-lisp:declare
    (common-lisp:ignorable membership-identifier auto-refresh
     privacy-budget-type parameters tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-privacy-budget-template-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/memberships/~A/privacybudgettemplates"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'membership-identifier))))
                                                        "CreatePrivacyBudgetTemplate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-privacy-budget-template))
(common-lisp:progn
 (common-lisp:defun delete-analysis-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key membership-identifier
                     analysis-template-identifier)
   (common-lisp:declare
    (common-lisp:ignorable membership-identifier analysis-template-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-analysis-template-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/memberships/~A/analysistemplates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'membership-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'analysis-template-identifier))))
                                                        "DeleteAnalysisTemplate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-analysis-template))
(common-lisp:progn
 (common-lisp:defun delete-collaboration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collaboration-identifier)
   (common-lisp:declare (common-lisp:ignorable collaboration-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-collaboration-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/collaborations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'collaboration-identifier))))
                                                        "DeleteCollaboration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-collaboration))
(common-lisp:progn
 (common-lisp:defun delete-configured-audience-model-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key
                     configured-audience-model-association-identifier
                     membership-identifier)
   (common-lisp:declare
    (common-lisp:ignorable configured-audience-model-association-identifier
     membership-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-configured-audience-model-association-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/memberships/~A/configuredaudiencemodelassociations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'membership-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'configured-audience-model-association-identifier))))
                                                        "DeleteConfiguredAudienceModelAssociation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-configured-audience-model-association))
(common-lisp:progn
 (common-lisp:defun delete-configured-table
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configured-table-identifier)
   (common-lisp:declare (common-lisp:ignorable configured-table-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-configured-table-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/configuredTables/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'configured-table-identifier))))
                                                        "DeleteConfiguredTable"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-configured-table))
(common-lisp:progn
 (common-lisp:defun delete-configured-table-analysis-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configured-table-identifier
                     analysis-rule-type)
   (common-lisp:declare
    (common-lisp:ignorable configured-table-identifier analysis-rule-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-configured-table-analysis-rule-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/configuredTables/~A/analysisRule/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'configured-table-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'analysis-rule-type))))
                                                        "DeleteConfiguredTableAnalysisRule"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-configured-table-analysis-rule))
(common-lisp:progn
 (common-lisp:defun delete-configured-table-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configured-table-association-identifier
                     membership-identifier)
   (common-lisp:declare
    (common-lisp:ignorable configured-table-association-identifier
     membership-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-configured-table-association-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/memberships/~A/configuredTableAssociations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'membership-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'configured-table-association-identifier))))
                                                        "DeleteConfiguredTableAssociation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-configured-table-association))
(common-lisp:progn
 (common-lisp:defun delete-member
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collaboration-identifier account-id)
   (common-lisp:declare
    (common-lisp:ignorable collaboration-identifier account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-member-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/collaborations/~A/member/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'collaboration-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'account-id))))
                                                        "DeleteMember"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-member))
(common-lisp:progn
 (common-lisp:defun delete-membership
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key membership-identifier)
   (common-lisp:declare (common-lisp:ignorable membership-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-membership-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/memberships/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'membership-identifier))))
                                                        "DeleteMembership"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-membership))
(common-lisp:progn
 (common-lisp:defun delete-privacy-budget-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key membership-identifier
                     privacy-budget-template-identifier)
   (common-lisp:declare
    (common-lisp:ignorable membership-identifier
     privacy-budget-template-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-privacy-budget-template-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/memberships/~A/privacybudgettemplates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'membership-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'privacy-budget-template-identifier))))
                                                        "DeletePrivacyBudgetTemplate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-privacy-budget-template))
(common-lisp:progn
 (common-lisp:defun get-analysis-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key membership-identifier
                     analysis-template-identifier)
   (common-lisp:declare
    (common-lisp:ignorable membership-identifier analysis-template-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-analysis-template-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/memberships/~A/analysistemplates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'membership-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'analysis-template-identifier))))
                                                        "GetAnalysisTemplate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-analysis-template))
(common-lisp:progn
 (common-lisp:defun get-collaboration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collaboration-identifier)
   (common-lisp:declare (common-lisp:ignorable collaboration-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-collaboration-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/collaborations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'collaboration-identifier))))
                                                        "GetCollaboration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-collaboration))
(common-lisp:progn
 (common-lisp:defun get-collaboration-analysis-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collaboration-identifier
                     analysis-template-arn)
   (common-lisp:declare
    (common-lisp:ignorable collaboration-identifier analysis-template-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-collaboration-analysis-template-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/collaborations/~A/analysistemplates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'collaboration-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'analysis-template-arn))))
                                                        "GetCollaborationAnalysisTemplate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-collaboration-analysis-template))
(common-lisp:progn
 (common-lisp:defun get-collaboration-configured-audience-model-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collaboration-identifier
                     configured-audience-model-association-identifier)
   (common-lisp:declare
    (common-lisp:ignorable collaboration-identifier
     configured-audience-model-association-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-collaboration-configured-audience-model-association-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/collaborations/~A/configuredaudiencemodelassociations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'collaboration-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'configured-audience-model-association-identifier))))
                                                        "GetCollaborationConfiguredAudienceModelAssociation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-collaboration-configured-audience-model-association))
(common-lisp:progn
 (common-lisp:defun get-collaboration-privacy-budget-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collaboration-identifier
                     privacy-budget-template-identifier)
   (common-lisp:declare
    (common-lisp:ignorable collaboration-identifier
     privacy-budget-template-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-collaboration-privacy-budget-template-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/collaborations/~A/privacybudgettemplates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'collaboration-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'privacy-budget-template-identifier))))
                                                        "GetCollaborationPrivacyBudgetTemplate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-collaboration-privacy-budget-template))
(common-lisp:progn
 (common-lisp:defun get-configured-audience-model-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key
                     configured-audience-model-association-identifier
                     membership-identifier)
   (common-lisp:declare
    (common-lisp:ignorable configured-audience-model-association-identifier
     membership-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-configured-audience-model-association-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/memberships/~A/configuredaudiencemodelassociations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'membership-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'configured-audience-model-association-identifier))))
                                                        "GetConfiguredAudienceModelAssociation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-configured-audience-model-association))
(common-lisp:progn
 (common-lisp:defun get-configured-table
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configured-table-identifier)
   (common-lisp:declare (common-lisp:ignorable configured-table-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-configured-table-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/configuredTables/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'configured-table-identifier))))
                                                        "GetConfiguredTable"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-configured-table))
(common-lisp:progn
 (common-lisp:defun get-configured-table-analysis-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configured-table-identifier
                     analysis-rule-type)
   (common-lisp:declare
    (common-lisp:ignorable configured-table-identifier analysis-rule-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-configured-table-analysis-rule-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/configuredTables/~A/analysisRule/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'configured-table-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'analysis-rule-type))))
                                                        "GetConfiguredTableAnalysisRule"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-configured-table-analysis-rule))
(common-lisp:progn
 (common-lisp:defun get-configured-table-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configured-table-association-identifier
                     membership-identifier)
   (common-lisp:declare
    (common-lisp:ignorable configured-table-association-identifier
     membership-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-configured-table-association-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/memberships/~A/configuredTableAssociations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'membership-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'configured-table-association-identifier))))
                                                        "GetConfiguredTableAssociation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-configured-table-association))
(common-lisp:progn
 (common-lisp:defun get-membership
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key membership-identifier)
   (common-lisp:declare (common-lisp:ignorable membership-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-membership-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/memberships/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'membership-identifier))))
                                                        "GetMembership"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-membership))
(common-lisp:progn
 (common-lisp:defun get-privacy-budget-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key membership-identifier
                     privacy-budget-template-identifier)
   (common-lisp:declare
    (common-lisp:ignorable membership-identifier
     privacy-budget-template-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-privacy-budget-template-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/memberships/~A/privacybudgettemplates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'membership-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'privacy-budget-template-identifier))))
                                                        "GetPrivacyBudgetTemplate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-privacy-budget-template))
(common-lisp:progn
 (common-lisp:defun get-protected-query
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key membership-identifier
                     protected-query-identifier)
   (common-lisp:declare
    (common-lisp:ignorable membership-identifier protected-query-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-protected-query-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/memberships/~A/protectedQueries/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'membership-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'protected-query-identifier))))
                                                        "GetProtectedQuery"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-protected-query))
(common-lisp:progn
 (common-lisp:defun get-schema
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collaboration-identifier name)
   (common-lisp:declare (common-lisp:ignorable collaboration-identifier name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-schema-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/collaborations/~A/schemas/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'collaboration-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetSchema"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-schema))
(common-lisp:progn
 (common-lisp:defun get-schema-analysis-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collaboration-identifier name type)
   (common-lisp:declare
    (common-lisp:ignorable collaboration-identifier name type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-schema-analysis-rule-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/collaborations/~A/schemas/~A/analysisRule/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'collaboration-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'type))))
                                                        "GetSchemaAnalysisRule"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-schema-analysis-rule))
(common-lisp:progn
 (common-lisp:defun list-analysis-templates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key membership-identifier next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable membership-identifier next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-analysis-templates-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/memberships/~A/analysistemplates"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'membership-identifier))))
                                                        "ListAnalysisTemplates"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-analysis-templates))
(common-lisp:progn
 (common-lisp:defun list-collaboration-analysis-templates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collaboration-identifier next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable collaboration-identifier next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-collaboration-analysis-templates-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/collaborations/~A/analysistemplates"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'collaboration-identifier))))
                                                        "ListCollaborationAnalysisTemplates"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-collaboration-analysis-templates))
(common-lisp:progn
 (common-lisp:defun list-collaboration-configured-audience-model-associations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collaboration-identifier next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable collaboration-identifier next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-collaboration-configured-audience-model-associations-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/collaborations/~A/configuredaudiencemodelassociations"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'collaboration-identifier))))
                                                        "ListCollaborationConfiguredAudienceModelAssociations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export
  'list-collaboration-configured-audience-model-associations))
(common-lisp:progn
 (common-lisp:defun list-collaboration-privacy-budget-templates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collaboration-identifier next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable collaboration-identifier next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-collaboration-privacy-budget-templates-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/collaborations/~A/privacybudgettemplates"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'collaboration-identifier))))
                                                        "ListCollaborationPrivacyBudgetTemplates"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-collaboration-privacy-budget-templates))
(common-lisp:progn
 (common-lisp:defun list-collaboration-privacy-budgets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collaboration-identifier
                     privacy-budget-type max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable collaboration-identifier privacy-budget-type
     max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-collaboration-privacy-budgets-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/collaborations/~A/privacybudgets"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'collaboration-identifier))))
                                                        "ListCollaborationPrivacyBudgets"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-collaboration-privacy-budgets))
(common-lisp:progn
 (common-lisp:defun list-collaborations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results member-status)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results member-status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-collaborations-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/collaborations"
                                                        "ListCollaborations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-collaborations))
(common-lisp:progn
 (common-lisp:defun list-configured-audience-model-associations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key membership-identifier next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable membership-identifier next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-configured-audience-model-associations-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/memberships/~A/configuredaudiencemodelassociations"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'membership-identifier))))
                                                        "ListConfiguredAudienceModelAssociations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-configured-audience-model-associations))
(common-lisp:progn
 (common-lisp:defun list-configured-table-associations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key membership-identifier next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable membership-identifier next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-configured-table-associations-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/memberships/~A/configuredTableAssociations"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'membership-identifier))))
                                                        "ListConfiguredTableAssociations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-configured-table-associations))
(common-lisp:progn
 (common-lisp:defun list-configured-tables
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-configured-tables-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/configuredTables"
                                                        "ListConfiguredTables"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-configured-tables))
(common-lisp:progn
 (common-lisp:defun list-members
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collaboration-identifier next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable collaboration-identifier next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-members-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/collaborations/~A/members"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'collaboration-identifier))))
                                                        "ListMembers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-members))
(common-lisp:progn
 (common-lisp:defun list-memberships
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results status)
   (common-lisp:declare (common-lisp:ignorable next-token max-results status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-memberships-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/memberships"
                                                        "ListMemberships"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-memberships))
(common-lisp:progn
 (common-lisp:defun list-privacy-budget-templates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key membership-identifier next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable membership-identifier next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-privacy-budget-templates-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/memberships/~A/privacybudgettemplates"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'membership-identifier))))
                                                        "ListPrivacyBudgetTemplates"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-privacy-budget-templates))
(common-lisp:progn
 (common-lisp:defun list-privacy-budgets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key membership-identifier privacy-budget-type
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable membership-identifier privacy-budget-type next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-privacy-budgets-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/memberships/~A/privacybudgets"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'membership-identifier))))
                                                        "ListPrivacyBudgets"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-privacy-budgets))
(common-lisp:progn
 (common-lisp:defun list-protected-queries
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key membership-identifier status next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable membership-identifier status next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-protected-queries-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/memberships/~A/protectedQueries"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'membership-identifier))))
                                                        "ListProtectedQueries"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-protected-queries))
(common-lisp:progn
 (common-lisp:defun list-schemas
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collaboration-identifier schema-type
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable collaboration-identifier schema-type next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-schemas-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/collaborations/~A/schemas"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'collaboration-identifier))))
                                                        "ListSchemas"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-schemas))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun preview-privacy-impact
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key membership-identifier parameters)
   (common-lisp:declare
    (common-lisp:ignorable membership-identifier parameters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-preview-privacy-impact-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/memberships/~A/previewprivacyimpact"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'membership-identifier))))
                                                        "PreviewPrivacyImpact"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'preview-privacy-impact))
(common-lisp:progn
 (common-lisp:defun start-protected-query
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key type membership-identifier sql-parameters
                     result-configuration)
   (common-lisp:declare
    (common-lisp:ignorable type membership-identifier sql-parameters
     result-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-protected-query-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/memberships/~A/protectedQueries"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'membership-identifier))))
                                                        "StartProtectedQuery"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-protected-query))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-analysis-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key membership-identifier
                     analysis-template-identifier description)
   (common-lisp:declare
    (common-lisp:ignorable membership-identifier analysis-template-identifier
     description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-analysis-template-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/memberships/~A/analysistemplates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'membership-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'analysis-template-identifier))))
                                                        "UpdateAnalysisTemplate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-analysis-template))
(common-lisp:progn
 (common-lisp:defun update-collaboration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collaboration-identifier name
                     description)
   (common-lisp:declare
    (common-lisp:ignorable collaboration-identifier name description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-collaboration-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/collaborations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'collaboration-identifier))))
                                                        "UpdateCollaboration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-collaboration))
(common-lisp:progn
 (common-lisp:defun update-configured-audience-model-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key
                     configured-audience-model-association-identifier
                     membership-identifier description name)
   (common-lisp:declare
    (common-lisp:ignorable configured-audience-model-association-identifier
     membership-identifier description name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-configured-audience-model-association-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/memberships/~A/configuredaudiencemodelassociations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'membership-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'configured-audience-model-association-identifier))))
                                                        "UpdateConfiguredAudienceModelAssociation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-configured-audience-model-association))
(common-lisp:progn
 (common-lisp:defun update-configured-table
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configured-table-identifier name
                     description)
   (common-lisp:declare
    (common-lisp:ignorable configured-table-identifier name description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-configured-table-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/configuredTables/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'configured-table-identifier))))
                                                        "UpdateConfiguredTable"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-configured-table))
(common-lisp:progn
 (common-lisp:defun update-configured-table-analysis-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configured-table-identifier
                     analysis-rule-type analysis-rule-policy)
   (common-lisp:declare
    (common-lisp:ignorable configured-table-identifier analysis-rule-type
     analysis-rule-policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-configured-table-analysis-rule-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/configuredTables/~A/analysisRule/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'configured-table-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'analysis-rule-type))))
                                                        "UpdateConfiguredTableAnalysisRule"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-configured-table-analysis-rule))
(common-lisp:progn
 (common-lisp:defun update-configured-table-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configured-table-association-identifier
                     membership-identifier description role-arn)
   (common-lisp:declare
    (common-lisp:ignorable configured-table-association-identifier
     membership-identifier description role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-configured-table-association-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/memberships/~A/configuredTableAssociations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'membership-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'configured-table-association-identifier))))
                                                        "UpdateConfiguredTableAssociation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-configured-table-association))
(common-lisp:progn
 (common-lisp:defun update-membership
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key membership-identifier query-log-status
                     default-result-configuration)
   (common-lisp:declare
    (common-lisp:ignorable membership-identifier query-log-status
     default-result-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-membership-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/memberships/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'membership-identifier))))
                                                        "UpdateMembership"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-membership))
(common-lisp:progn
 (common-lisp:defun update-privacy-budget-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key membership-identifier
                     privacy-budget-template-identifier privacy-budget-type
                     parameters)
   (common-lisp:declare
    (common-lisp:ignorable membership-identifier
     privacy-budget-template-identifier privacy-budget-type parameters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-privacy-budget-template-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/memberships/~A/privacybudgettemplates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'membership-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'privacy-budget-template-identifier))))
                                                        "UpdatePrivacyBudgetTemplate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-privacy-budget-template))
(common-lisp:progn
 (common-lisp:defun update-protected-query
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key membership-identifier
                     protected-query-identifier target-status)
   (common-lisp:declare
    (common-lisp:ignorable membership-identifier protected-query-identifier
     target-status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-protected-query-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/memberships/~A/protectedQueries/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'membership-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'protected-query-identifier))))
                                                        "UpdateProtectedQuery"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-protected-query))
