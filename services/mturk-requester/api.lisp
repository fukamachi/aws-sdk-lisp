;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/mturk-requester/api
  (:use)
  (:nicknames #:aws/mturk-requester)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/mturk-requester/api)
(common-lisp:progn
 (common-lisp:define-condition mturk-requester-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'mturk-requester-error))
(common-lisp:progn
 (common-lisp:defclass mturk-requester-request
                       (aws-sdk/json-request:json-request) common-lisp:nil
                       (:default-initargs :service "mturk-requester"
                        :api-version "2017-01-17" :host-prefix
                        "mturk-requester" :signing-name common-lisp:nil
                        :global-host common-lisp:nil :target-prefix
                        "MTurkRequesterServiceV20170117" :json-version "1.1"))
 (common-lisp:export 'mturk-requester-request))
(common-lisp:defvar *error-map*
  '(("RequestError" . request-error) ("ServiceFault" . service-fault)))
(common-lisp:progn
 (common-lisp:defclass accept-qualification-request-request common-lisp:nil
                       ((qualification-request-id :initarg
                         :qualification-request-id :initform
                         (common-lisp:error
                          ":qualification-request-id is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-accept-qualification-request-request-qualification-request-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (integer-value :initarg :integer-value :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-accept-qualification-request-request-integer-value
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-accept-qualification-request-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'accept-qualification-request-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'accept-qualification-request-request
                    'make-accept-qualification-request-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-qualification-request-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-qualification-request-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'qualification-request-id))
      (common-lisp:list
       (common-lisp:cons "QualificationRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'integer-value))
      (common-lisp:list
       (common-lisp:cons "IntegerValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-qualification-request-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass accept-qualification-request-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-accept-qualification-request-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'accept-qualification-request-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'accept-qualification-request-response
                    'make-accept-qualification-request-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-qualification-request-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-qualification-request-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-qualification-request-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass approve-assignment-request common-lisp:nil
                       ((assignment-id :initarg :assignment-id :initform
                         (common-lisp:error ":assignment-id is required") :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         struct-shape-approve-assignment-request-assignment-id
                         :shape "EntityId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (requester-feedback :initarg :requester-feedback
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-approve-assignment-request-requester-feedback
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (override-rejection :initarg :override-rejection
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-approve-assignment-request-override-rejection
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-approve-assignment-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'approve-assignment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'approve-assignment-request
                    'make-approve-assignment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          approve-assignment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          approve-assignment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assignment-id))
      (common-lisp:list
       (common-lisp:cons "AssignmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'requester-feedback))
      (common-lisp:list
       (common-lisp:cons "RequesterFeedback"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'override-rejection))
      (common-lisp:list
       (common-lisp:cons "OverrideRejection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          approve-assignment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass approve-assignment-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-approve-assignment-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'approve-assignment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'approve-assignment-response
                    'make-approve-assignment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          approve-assignment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          approve-assignment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          approve-assignment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass assignment common-lisp:nil
                       ((assignment-id :initarg :assignment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         struct-shape-assignment-assignment-id :shape
                         "EntityId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (worker-id :initarg :worker-id :initform
                         common-lisp:nil :type
                         (common-lisp:or customer-id common-lisp:null)
                         :accessor struct-shape-assignment-worker-id :shape
                         "CustomerId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (hitid :initarg :hitid :initform common-lisp:nil :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         struct-shape-assignment-hitid :shape "EntityId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (assignment-status :initarg :assignment-status
                         :initform common-lisp:nil :type
                         (common-lisp:or assignment-status common-lisp:null)
                         :accessor struct-shape-assignment-assignment-status
                         :shape "AssignmentStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-approval-time :initarg :auto-approval-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-assignment-auto-approval-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (accept-time :initarg :accept-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-assignment-accept-time :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (submit-time :initarg :submit-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-assignment-submit-time :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (approval-time :initarg :approval-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-assignment-approval-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (rejection-time :initarg :rejection-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-assignment-rejection-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (deadline :initarg :deadline :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor struct-shape-assignment-deadline :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (answer :initarg :answer :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-assignment-answer :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (requester-feedback :initarg :requester-feedback
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-assignment-requester-feedback :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-assignment
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'assignment
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'assignment 'make-assignment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input assignment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input assignment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assignment-id))
      (common-lisp:list
       (common-lisp:cons "AssignmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worker-id))
      (common-lisp:list
       (common-lisp:cons "WorkerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hitid))
      (common-lisp:list
       (common-lisp:cons "HITId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assignment-status))
      (common-lisp:list
       (common-lisp:cons "AssignmentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-approval-time))
      (common-lisp:list
       (common-lisp:cons "AutoApprovalTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-time))
      (common-lisp:list
       (common-lisp:cons "AcceptTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'submit-time))
      (common-lisp:list
       (common-lisp:cons "SubmitTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'approval-time))
      (common-lisp:list
       (common-lisp:cons "ApprovalTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rejection-time))
      (common-lisp:list
       (common-lisp:cons "RejectionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deadline))
      (common-lisp:list
       (common-lisp:cons "Deadline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'answer))
      (common-lisp:list
       (common-lisp:cons "Answer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'requester-feedback))
      (common-lisp:list
       (common-lisp:cons "RequesterFeedback"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input assignment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype assignment-list ()
   '(trivial-types:proper-list assignment))
 (common-lisp:defun make-assignment-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list assignment))
   aws-sdk/generator/shape::members))
(common-lisp:deftype assignment-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype assignment-status-list ()
   '(trivial-types:proper-list assignment-status))
 (common-lisp:defun make-assignment-status-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list assignment-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass associate-qualification-with-worker-request
                       common-lisp:nil
                       ((qualification-type-id :initarg :qualification-type-id
                         :initform
                         (common-lisp:error
                          ":qualification-type-id is required")
                         :type (common-lisp:or entity-id common-lisp:null)
                         :accessor
                         struct-shape-associate-qualification-with-worker-request-qualification-type-id
                         :shape "EntityId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (worker-id :initarg :worker-id :initform
                         (common-lisp:error ":worker-id is required") :type
                         (common-lisp:or customer-id common-lisp:null)
                         :accessor
                         struct-shape-associate-qualification-with-worker-request-worker-id
                         :shape "CustomerId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (integer-value :initarg :integer-value :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-associate-qualification-with-worker-request-integer-value
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (send-notification :initarg :send-notification
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-associate-qualification-with-worker-request-send-notification
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-qualification-with-worker-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-qualification-with-worker-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-qualification-with-worker-request
                    'make-associate-qualification-with-worker-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-qualification-with-worker-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-qualification-with-worker-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'qualification-type-id))
      (common-lisp:list
       (common-lisp:cons "QualificationTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worker-id))
      (common-lisp:list
       (common-lisp:cons "WorkerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'integer-value))
      (common-lisp:list
       (common-lisp:cons "IntegerValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'send-notification))
      (common-lisp:list
       (common-lisp:cons "SendNotification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-qualification-with-worker-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-qualification-with-worker-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-qualification-with-worker-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-qualification-with-worker-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-qualification-with-worker-response
                    'make-associate-qualification-with-worker-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-qualification-with-worker-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-qualification-with-worker-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-qualification-with-worker-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass bonus-payment common-lisp:nil
                       ((worker-id :initarg :worker-id :initform
                         common-lisp:nil :type
                         (common-lisp:or customer-id common-lisp:null)
                         :accessor struct-shape-bonus-payment-worker-id :shape
                         "CustomerId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bonus-amount :initarg :bonus-amount :initform
                         common-lisp:nil :type
                         (common-lisp:or currency-amount common-lisp:null)
                         :accessor struct-shape-bonus-payment-bonus-amount
                         :shape "CurrencyAmount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (assignment-id :initarg :assignment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         struct-shape-bonus-payment-assignment-id :shape
                         "EntityId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (reason :initarg :reason :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-bonus-payment-reason :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (grant-time :initarg :grant-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-bonus-payment-grant-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bonus-payment
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'bonus-payment
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'bonus-payment 'make-bonus-payment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bonus-payment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bonus-payment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worker-id))
      (common-lisp:list
       (common-lisp:cons "WorkerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bonus-amount))
      (common-lisp:list
       (common-lisp:cons "BonusAmount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assignment-id))
      (common-lisp:list
       (common-lisp:cons "AssignmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-time))
      (common-lisp:list
       (common-lisp:cons "GrantTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bonus-payment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype bonus-payment-list ()
   '(trivial-types:proper-list bonus-payment))
 (common-lisp:defun make-bonus-payment-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list bonus-payment))
   aws-sdk/generator/shape::members))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype comparator () 'common-lisp:string)
(common-lisp:deftype country-parameters () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-additional-assignments-for-hitrequest
                       common-lisp:nil
                       ((hitid :initarg :hitid :initform
                         (common-lisp:error ":hitid is required") :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         struct-shape-create-additional-assignments-for-hitrequest-hitid
                         :shape "EntityId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-additional-assignments :initarg
                         :number-of-additional-assignments :initform
                         (common-lisp:error
                          ":number-of-additional-assignments is required")
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-create-additional-assignments-for-hitrequest-number-of-additional-assignments
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unique-request-token :initarg :unique-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor
                         struct-shape-create-additional-assignments-for-hitrequest-unique-request-token
                         :shape "IdempotencyToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-additional-assignments-for-hitrequest
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-additional-assignments-for-hitrequest
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-additional-assignments-for-hitrequest
                    'make-create-additional-assignments-for-hitrequest))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-additional-assignments-for-hitrequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-additional-assignments-for-hitrequest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hitid))
      (common-lisp:list
       (common-lisp:cons "HITId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-additional-assignments))
      (common-lisp:list
       (common-lisp:cons "NumberOfAdditionalAssignments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unique-request-token))
      (common-lisp:list
       (common-lisp:cons "UniqueRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-additional-assignments-for-hitrequest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-additional-assignments-for-hitresponse
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-additional-assignments-for-hitresponse
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-additional-assignments-for-hitresponse
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-additional-assignments-for-hitresponse
                    'make-create-additional-assignments-for-hitresponse))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-additional-assignments-for-hitresponse))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-additional-assignments-for-hitresponse))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-additional-assignments-for-hitresponse))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-hitrequest common-lisp:nil
                       ((max-assignments :initarg :max-assignments :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-create-hitrequest-max-assignments :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (auto-approval-delay-in-seconds :initarg
                         :auto-approval-delay-in-seconds :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-create-hitrequest-auto-approval-delay-in-seconds
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (lifetime-in-seconds :initarg :lifetime-in-seconds
                         :initform
                         (common-lisp:error ":lifetime-in-seconds is required")
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-create-hitrequest-lifetime-in-seconds
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (assignment-duration-in-seconds :initarg
                         :assignment-duration-in-seconds :initform
                         (common-lisp:error
                          ":assignment-duration-in-seconds is required")
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-create-hitrequest-assignment-duration-in-seconds
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (reward :initarg :reward :initform
                         (common-lisp:error ":reward is required") :type
                         (common-lisp:or currency-amount common-lisp:null)
                         :accessor struct-shape-create-hitrequest-reward :shape
                         "CurrencyAmount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (title :initarg :title :initform
                         (common-lisp:error ":title is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-hitrequest-title :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (keywords :initarg :keywords :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-create-hitrequest-keywords
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         (common-lisp:error ":description is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-hitrequest-description :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (question :initarg :question :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-create-hitrequest-question
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (requester-annotation :initarg :requester-annotation
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-hitrequest-requester-annotation
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (qualification-requirements :initarg
                         :qualification-requirements :initform common-lisp:nil
                         :type
                         (common-lisp:or qualification-requirement-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-hitrequest-qualification-requirements
                         :shape "QualificationRequirementList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (unique-request-token :initarg :unique-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor
                         struct-shape-create-hitrequest-unique-request-token
                         :shape "IdempotencyToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (assignment-review-policy :initarg
                         :assignment-review-policy :initform common-lisp:nil
                         :type (common-lisp:or review-policy common-lisp:null)
                         :accessor
                         struct-shape-create-hitrequest-assignment-review-policy
                         :shape "ReviewPolicy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hitreview-policy :initarg :hitreview-policy :initform
                         common-lisp:nil :type
                         (common-lisp:or review-policy common-lisp:null)
                         :accessor
                         struct-shape-create-hitrequest-hitreview-policy :shape
                         "ReviewPolicy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hitlayout-id :initarg :hitlayout-id :initform
                         common-lisp:nil :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         struct-shape-create-hitrequest-hitlayout-id :shape
                         "EntityId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (hitlayout-parameters :initarg :hitlayout-parameters
                         :initform common-lisp:nil :type
                         (common-lisp:or hitlayout-parameter-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-hitrequest-hitlayout-parameters
                         :shape "HITLayoutParameterList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-hitrequest
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-hitrequest
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-hitrequest 'make-create-hitrequest))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-hitrequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-hitrequest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-assignments))
      (common-lisp:list
       (common-lisp:cons "MaxAssignments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-approval-delay-in-seconds))
      (common-lisp:list
       (common-lisp:cons "AutoApprovalDelayInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifetime-in-seconds))
      (common-lisp:list
       (common-lisp:cons "LifetimeInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assignment-duration-in-seconds))
      (common-lisp:list
       (common-lisp:cons "AssignmentDurationInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reward))
      (common-lisp:list
       (common-lisp:cons "Reward"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keywords))
      (common-lisp:list
       (common-lisp:cons "Keywords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question))
      (common-lisp:list
       (common-lisp:cons "Question"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'requester-annotation))
      (common-lisp:list
       (common-lisp:cons "RequesterAnnotation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'qualification-requirements))
      (common-lisp:list
       (common-lisp:cons "QualificationRequirements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unique-request-token))
      (common-lisp:list
       (common-lisp:cons "UniqueRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assignment-review-policy))
      (common-lisp:list
       (common-lisp:cons "AssignmentReviewPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hitreview-policy))
      (common-lisp:list
       (common-lisp:cons "HITReviewPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hitlayout-id))
      (common-lisp:list
       (common-lisp:cons "HITLayoutId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hitlayout-parameters))
      (common-lisp:list
       (common-lisp:cons "HITLayoutParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-hitrequest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-hitresponse common-lisp:nil
                       ((hit :initarg :hit :initform common-lisp:nil :type
                         (common-lisp:or hit common-lisp:null) :accessor
                         struct-shape-create-hitresponse-hit :shape "HIT"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-hitresponse
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-hitresponse
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-hitresponse 'make-create-hitresponse))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-hitresponse))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-hitresponse))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hit))
      (common-lisp:list
       (common-lisp:cons "HIT"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-hitresponse))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-hittype-request common-lisp:nil
                       ((auto-approval-delay-in-seconds :initarg
                         :auto-approval-delay-in-seconds :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-create-hittype-request-auto-approval-delay-in-seconds
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (assignment-duration-in-seconds :initarg
                         :assignment-duration-in-seconds :initform
                         (common-lisp:error
                          ":assignment-duration-in-seconds is required")
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-create-hittype-request-assignment-duration-in-seconds
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (reward :initarg :reward :initform
                         (common-lisp:error ":reward is required") :type
                         (common-lisp:or currency-amount common-lisp:null)
                         :accessor struct-shape-create-hittype-request-reward
                         :shape "CurrencyAmount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (title :initarg :title :initform
                         (common-lisp:error ":title is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-hittype-request-title :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (keywords :initarg :keywords :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-create-hittype-request-keywords
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         (common-lisp:error ":description is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-hittype-request-description :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (qualification-requirements :initarg
                         :qualification-requirements :initform common-lisp:nil
                         :type
                         (common-lisp:or qualification-requirement-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-hittype-request-qualification-requirements
                         :shape "QualificationRequirementList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-hittype-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-hittype-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-hittype-request 'make-create-hittype-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-hittype-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-hittype-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-approval-delay-in-seconds))
      (common-lisp:list
       (common-lisp:cons "AutoApprovalDelayInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assignment-duration-in-seconds))
      (common-lisp:list
       (common-lisp:cons "AssignmentDurationInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reward))
      (common-lisp:list
       (common-lisp:cons "Reward"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keywords))
      (common-lisp:list
       (common-lisp:cons "Keywords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'qualification-requirements))
      (common-lisp:list
       (common-lisp:cons "QualificationRequirements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-hittype-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-hittype-response common-lisp:nil
                       ((hittype-id :initarg :hittype-id :initform
                         common-lisp:nil :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         struct-shape-create-hittype-response-hittype-id :shape
                         "EntityId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-hittype-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-hittype-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-hittype-response 'make-create-hittype-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-hittype-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-hittype-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hittype-id))
      (common-lisp:list
       (common-lisp:cons "HITTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-hittype-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-hitwith-hittype-request common-lisp:nil
                       ((hittype-id :initarg :hittype-id :initform
                         (common-lisp:error ":hittype-id is required") :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         struct-shape-create-hitwith-hittype-request-hittype-id
                         :shape "EntityId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-assignments :initarg :max-assignments :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-create-hitwith-hittype-request-max-assignments
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lifetime-in-seconds :initarg :lifetime-in-seconds
                         :initform
                         (common-lisp:error ":lifetime-in-seconds is required")
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-create-hitwith-hittype-request-lifetime-in-seconds
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (question :initarg :question :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-hitwith-hittype-request-question
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (requester-annotation :initarg :requester-annotation
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-hitwith-hittype-request-requester-annotation
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unique-request-token :initarg :unique-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor
                         struct-shape-create-hitwith-hittype-request-unique-request-token
                         :shape "IdempotencyToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (assignment-review-policy :initarg
                         :assignment-review-policy :initform common-lisp:nil
                         :type (common-lisp:or review-policy common-lisp:null)
                         :accessor
                         struct-shape-create-hitwith-hittype-request-assignment-review-policy
                         :shape "ReviewPolicy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hitreview-policy :initarg :hitreview-policy :initform
                         common-lisp:nil :type
                         (common-lisp:or review-policy common-lisp:null)
                         :accessor
                         struct-shape-create-hitwith-hittype-request-hitreview-policy
                         :shape "ReviewPolicy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hitlayout-id :initarg :hitlayout-id :initform
                         common-lisp:nil :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         struct-shape-create-hitwith-hittype-request-hitlayout-id
                         :shape "EntityId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hitlayout-parameters :initarg :hitlayout-parameters
                         :initform common-lisp:nil :type
                         (common-lisp:or hitlayout-parameter-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-hitwith-hittype-request-hitlayout-parameters
                         :shape "HITLayoutParameterList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-hitwith-hittype-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-hitwith-hittype-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-hitwith-hittype-request
                    'make-create-hitwith-hittype-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-hitwith-hittype-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-hitwith-hittype-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hittype-id))
      (common-lisp:list
       (common-lisp:cons "HITTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-assignments))
      (common-lisp:list
       (common-lisp:cons "MaxAssignments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifetime-in-seconds))
      (common-lisp:list
       (common-lisp:cons "LifetimeInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question))
      (common-lisp:list
       (common-lisp:cons "Question"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'requester-annotation))
      (common-lisp:list
       (common-lisp:cons "RequesterAnnotation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unique-request-token))
      (common-lisp:list
       (common-lisp:cons "UniqueRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assignment-review-policy))
      (common-lisp:list
       (common-lisp:cons "AssignmentReviewPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hitreview-policy))
      (common-lisp:list
       (common-lisp:cons "HITReviewPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hitlayout-id))
      (common-lisp:list
       (common-lisp:cons "HITLayoutId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hitlayout-parameters))
      (common-lisp:list
       (common-lisp:cons "HITLayoutParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-hitwith-hittype-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-hitwith-hittype-response common-lisp:nil
                       ((hit :initarg :hit :initform common-lisp:nil :type
                         (common-lisp:or hit common-lisp:null) :accessor
                         struct-shape-create-hitwith-hittype-response-hit
                         :shape "HIT" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-hitwith-hittype-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-hitwith-hittype-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-hitwith-hittype-response
                    'make-create-hitwith-hittype-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-hitwith-hittype-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-hitwith-hittype-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hit))
      (common-lisp:list
       (common-lisp:cons "HIT"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-hitwith-hittype-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-qualification-type-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-qualification-type-request-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (keywords :initarg :keywords :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-qualification-type-request-keywords
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         (common-lisp:error ":description is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-qualification-type-request-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (qualification-type-status :initarg
                         :qualification-type-status :initform
                         (common-lisp:error
                          ":qualification-type-status is required")
                         :type
                         (common-lisp:or qualification-type-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-qualification-type-request-qualification-type-status
                         :shape "QualificationTypeStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (retry-delay-in-seconds :initarg
                         :retry-delay-in-seconds :initform common-lisp:nil
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-create-qualification-type-request-retry-delay-in-seconds
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (test :initarg :test :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-qualification-type-request-test
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (answer-key :initarg :answer-key :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-qualification-type-request-answer-key
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (test-duration-in-seconds :initarg
                         :test-duration-in-seconds :initform common-lisp:nil
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-create-qualification-type-request-test-duration-in-seconds
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (auto-granted :initarg :auto-granted :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-create-qualification-type-request-auto-granted
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-granted-value :initarg :auto-granted-value
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-create-qualification-type-request-auto-granted-value
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-qualification-type-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-qualification-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-qualification-type-request
                    'make-create-qualification-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-qualification-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-qualification-type-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keywords))
      (common-lisp:list
       (common-lisp:cons "Keywords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'qualification-type-status))
      (common-lisp:list
       (common-lisp:cons "QualificationTypeStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'retry-delay-in-seconds))
      (common-lisp:list
       (common-lisp:cons "RetryDelayInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test))
      (common-lisp:list
       (common-lisp:cons "Test"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'answer-key))
      (common-lisp:list
       (common-lisp:cons "AnswerKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'test-duration-in-seconds))
      (common-lisp:list
       (common-lisp:cons "TestDurationInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-granted))
      (common-lisp:list
       (common-lisp:cons "AutoGranted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-granted-value))
      (common-lisp:list
       (common-lisp:cons "AutoGrantedValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-qualification-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-qualification-type-response common-lisp:nil
                       ((qualification-type :initarg :qualification-type
                         :initform common-lisp:nil :type
                         (common-lisp:or qualification-type common-lisp:null)
                         :accessor
                         struct-shape-create-qualification-type-response-qualification-type
                         :shape "QualificationType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-qualification-type-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-qualification-type-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-qualification-type-response
                    'make-create-qualification-type-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-qualification-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-qualification-type-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'qualification-type))
      (common-lisp:list
       (common-lisp:cons "QualificationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-qualification-type-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-worker-block-request common-lisp:nil
                       ((worker-id :initarg :worker-id :initform
                         (common-lisp:error ":worker-id is required") :type
                         (common-lisp:or customer-id common-lisp:null)
                         :accessor
                         struct-shape-create-worker-block-request-worker-id
                         :shape "CustomerId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reason :initarg :reason :initform
                         (common-lisp:error ":reason is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-worker-block-request-reason :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-worker-block-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-worker-block-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-worker-block-request
                    'make-create-worker-block-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-worker-block-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-worker-block-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worker-id))
      (common-lisp:list
       (common-lisp:cons "WorkerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-worker-block-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-worker-block-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-worker-block-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-worker-block-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-worker-block-response
                    'make-create-worker-block-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-worker-block-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-worker-block-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-worker-block-response))
   common-lisp:nil))
(common-lisp:deftype currency-amount () 'common-lisp:string)
(common-lisp:deftype customer-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype customer-id-list ()
   '(trivial-types:proper-list customer-id))
 (common-lisp:defun make-customer-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list customer-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass delete-hitrequest common-lisp:nil
                       ((hitid :initarg :hitid :initform
                         (common-lisp:error ":hitid is required") :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         struct-shape-delete-hitrequest-hitid :shape "EntityId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-hitrequest
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-hitrequest
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-hitrequest 'make-delete-hitrequest))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-hitrequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-hitrequest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hitid))
      (common-lisp:list
       (common-lisp:cons "HITId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-hitrequest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-hitresponse common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-hitresponse
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-hitresponse
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-hitresponse 'make-delete-hitresponse))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-hitresponse))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-hitresponse))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-hitresponse))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-qualification-type-request common-lisp:nil
                       ((qualification-type-id :initarg :qualification-type-id
                         :initform
                         (common-lisp:error
                          ":qualification-type-id is required")
                         :type (common-lisp:or entity-id common-lisp:null)
                         :accessor
                         struct-shape-delete-qualification-type-request-qualification-type-id
                         :shape "EntityId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-qualification-type-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-qualification-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-qualification-type-request
                    'make-delete-qualification-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-qualification-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-qualification-type-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'qualification-type-id))
      (common-lisp:list
       (common-lisp:cons "QualificationTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-qualification-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-qualification-type-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-qualification-type-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-qualification-type-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-qualification-type-response
                    'make-delete-qualification-type-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-qualification-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-qualification-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-qualification-type-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-worker-block-request common-lisp:nil
                       ((worker-id :initarg :worker-id :initform
                         (common-lisp:error ":worker-id is required") :type
                         (common-lisp:or customer-id common-lisp:null)
                         :accessor
                         struct-shape-delete-worker-block-request-worker-id
                         :shape "CustomerId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reason :initarg :reason :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-worker-block-request-reason :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-worker-block-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-worker-block-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-worker-block-request
                    'make-delete-worker-block-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-worker-block-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-worker-block-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worker-id))
      (common-lisp:list
       (common-lisp:cons "WorkerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-worker-block-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-worker-block-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-worker-block-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-worker-block-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-worker-block-response
                    'make-delete-worker-block-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-worker-block-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-worker-block-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-worker-block-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-qualification-from-worker-request
                       common-lisp:nil
                       ((worker-id :initarg :worker-id :initform
                         (common-lisp:error ":worker-id is required") :type
                         (common-lisp:or customer-id common-lisp:null)
                         :accessor
                         struct-shape-disassociate-qualification-from-worker-request-worker-id
                         :shape "CustomerId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (qualification-type-id :initarg :qualification-type-id
                         :initform
                         (common-lisp:error
                          ":qualification-type-id is required")
                         :type (common-lisp:or entity-id common-lisp:null)
                         :accessor
                         struct-shape-disassociate-qualification-from-worker-request-qualification-type-id
                         :shape "EntityId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reason :initarg :reason :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-disassociate-qualification-from-worker-request-reason
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-qualification-from-worker-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-qualification-from-worker-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-qualification-from-worker-request
                    'make-disassociate-qualification-from-worker-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-qualification-from-worker-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-qualification-from-worker-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worker-id))
      (common-lisp:list
       (common-lisp:cons "WorkerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'qualification-type-id))
      (common-lisp:list
       (common-lisp:cons "QualificationTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-qualification-from-worker-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-qualification-from-worker-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-qualification-from-worker-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-qualification-from-worker-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-qualification-from-worker-response
                    'make-disassociate-qualification-from-worker-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-qualification-from-worker-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-qualification-from-worker-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-qualification-from-worker-response))
   common-lisp:nil))
(common-lisp:deftype entity-id () 'common-lisp:string)
(common-lisp:deftype event-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype event-type-list ()
   '(trivial-types:proper-list event-type))
 (common-lisp:defun make-event-type-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype exception-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-account-balance-request common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-account-balance-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-account-balance-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-account-balance-request
                    'make-get-account-balance-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-account-balance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-account-balance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-account-balance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-account-balance-response common-lisp:nil
                       ((available-balance :initarg :available-balance
                         :initform common-lisp:nil :type
                         (common-lisp:or currency-amount common-lisp:null)
                         :accessor
                         struct-shape-get-account-balance-response-available-balance
                         :shape "CurrencyAmount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (on-hold-balance :initarg :on-hold-balance :initform
                         common-lisp:nil :type
                         (common-lisp:or currency-amount common-lisp:null)
                         :accessor
                         struct-shape-get-account-balance-response-on-hold-balance
                         :shape "CurrencyAmount" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-account-balance-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-account-balance-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-account-balance-response
                    'make-get-account-balance-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-account-balance-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-account-balance-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'available-balance))
      (common-lisp:list
       (common-lisp:cons "AvailableBalance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'on-hold-balance))
      (common-lisp:list
       (common-lisp:cons "OnHoldBalance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-account-balance-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-assignment-request common-lisp:nil
                       ((assignment-id :initarg :assignment-id :initform
                         (common-lisp:error ":assignment-id is required") :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         struct-shape-get-assignment-request-assignment-id
                         :shape "EntityId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-assignment-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-assignment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-assignment-request 'make-get-assignment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-assignment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-assignment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assignment-id))
      (common-lisp:list
       (common-lisp:cons "AssignmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-assignment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-assignment-response common-lisp:nil
                       ((assignment :initarg :assignment :initform
                         common-lisp:nil :type
                         (common-lisp:or assignment common-lisp:null) :accessor
                         struct-shape-get-assignment-response-assignment :shape
                         "Assignment" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (hit :initarg :hit :initform common-lisp:nil :type
                         (common-lisp:or hit common-lisp:null) :accessor
                         struct-shape-get-assignment-response-hit :shape "HIT"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-assignment-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-assignment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-assignment-response 'make-get-assignment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-assignment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-assignment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assignment))
      (common-lisp:list
       (common-lisp:cons "Assignment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hit))
      (common-lisp:list
       (common-lisp:cons "HIT"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-assignment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-file-upload-urlrequest common-lisp:nil
                       ((assignment-id :initarg :assignment-id :initform
                         (common-lisp:error ":assignment-id is required") :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         struct-shape-get-file-upload-urlrequest-assignment-id
                         :shape "EntityId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (question-identifier :initarg :question-identifier
                         :initform
                         (common-lisp:error ":question-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-get-file-upload-urlrequest-question-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-file-upload-urlrequest
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-file-upload-urlrequest
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-file-upload-urlrequest
                    'make-get-file-upload-urlrequest))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-file-upload-urlrequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-file-upload-urlrequest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assignment-id))
      (common-lisp:list
       (common-lisp:cons "AssignmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-identifier))
      (common-lisp:list
       (common-lisp:cons "QuestionIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-file-upload-urlrequest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-file-upload-urlresponse common-lisp:nil
                       ((file-upload-url :initarg :file-upload-url :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-file-upload-urlresponse-file-upload-url
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-file-upload-urlresponse
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-file-upload-urlresponse
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-file-upload-urlresponse
                    'make-get-file-upload-urlresponse))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-file-upload-urlresponse))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-file-upload-urlresponse))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-upload-url))
      (common-lisp:list
       (common-lisp:cons "FileUploadURL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-file-upload-urlresponse))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-hitrequest common-lisp:nil
                       ((hitid :initarg :hitid :initform
                         (common-lisp:error ":hitid is required") :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         struct-shape-get-hitrequest-hitid :shape "EntityId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-hitrequest
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-hitrequest
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'get-hitrequest 'make-get-hitrequest))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-hitrequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-hitrequest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hitid))
      (common-lisp:list
       (common-lisp:cons "HITId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-hitrequest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-hitresponse common-lisp:nil
                       ((hit :initarg :hit :initform common-lisp:nil :type
                         (common-lisp:or hit common-lisp:null) :accessor
                         struct-shape-get-hitresponse-hit :shape "HIT"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-hitresponse
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-hitresponse
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'get-hitresponse 'make-get-hitresponse))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-hitresponse))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-hitresponse))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hit))
      (common-lisp:list
       (common-lisp:cons "HIT"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-hitresponse))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-qualification-score-request common-lisp:nil
                       ((qualification-type-id :initarg :qualification-type-id
                         :initform
                         (common-lisp:error
                          ":qualification-type-id is required")
                         :type (common-lisp:or entity-id common-lisp:null)
                         :accessor
                         struct-shape-get-qualification-score-request-qualification-type-id
                         :shape "EntityId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (worker-id :initarg :worker-id :initform
                         (common-lisp:error ":worker-id is required") :type
                         (common-lisp:or customer-id common-lisp:null)
                         :accessor
                         struct-shape-get-qualification-score-request-worker-id
                         :shape "CustomerId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-qualification-score-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-qualification-score-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-qualification-score-request
                    'make-get-qualification-score-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-qualification-score-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-qualification-score-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'qualification-type-id))
      (common-lisp:list
       (common-lisp:cons "QualificationTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worker-id))
      (common-lisp:list
       (common-lisp:cons "WorkerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-qualification-score-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-qualification-score-response common-lisp:nil
                       ((qualification :initarg :qualification :initform
                         common-lisp:nil :type
                         (common-lisp:or qualification common-lisp:null)
                         :accessor
                         struct-shape-get-qualification-score-response-qualification
                         :shape "Qualification" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-qualification-score-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-qualification-score-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-qualification-score-response
                    'make-get-qualification-score-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-qualification-score-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-qualification-score-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'qualification))
      (common-lisp:list
       (common-lisp:cons "Qualification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-qualification-score-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-qualification-type-request common-lisp:nil
                       ((qualification-type-id :initarg :qualification-type-id
                         :initform
                         (common-lisp:error
                          ":qualification-type-id is required")
                         :type (common-lisp:or entity-id common-lisp:null)
                         :accessor
                         struct-shape-get-qualification-type-request-qualification-type-id
                         :shape "EntityId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-qualification-type-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-qualification-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-qualification-type-request
                    'make-get-qualification-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-qualification-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-qualification-type-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'qualification-type-id))
      (common-lisp:list
       (common-lisp:cons "QualificationTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-qualification-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-qualification-type-response common-lisp:nil
                       ((qualification-type :initarg :qualification-type
                         :initform common-lisp:nil :type
                         (common-lisp:or qualification-type common-lisp:null)
                         :accessor
                         struct-shape-get-qualification-type-response-qualification-type
                         :shape "QualificationType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-qualification-type-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-qualification-type-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-qualification-type-response
                    'make-get-qualification-type-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-qualification-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-qualification-type-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'qualification-type))
      (common-lisp:list
       (common-lisp:cons "QualificationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-qualification-type-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass hit common-lisp:nil
                       ((hitid :initarg :hitid :initform common-lisp:nil :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         struct-shape-hit-hitid :shape "EntityId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (hittype-id :initarg :hittype-id :initform
                         common-lisp:nil :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         struct-shape-hit-hittype-id :shape "EntityId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (hitgroup-id :initarg :hitgroup-id :initform
                         common-lisp:nil :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         struct-shape-hit-hitgroup-id :shape "EntityId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (hitlayout-id :initarg :hitlayout-id :initform
                         common-lisp:nil :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         struct-shape-hit-hitlayout-id :shape "EntityId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-hit-creation-time :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (title :initarg :title :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-hit-title :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-hit-description :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (question :initarg :question :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-hit-question :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (keywords :initarg :keywords :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-hit-keywords :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (hitstatus :initarg :hitstatus :initform
                         common-lisp:nil :type
                         (common-lisp:or hitstatus common-lisp:null) :accessor
                         struct-shape-hit-hitstatus :shape "HITStatus"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-assignments :initarg :max-assignments :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-hit-max-assignments :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (reward :initarg :reward :initform common-lisp:nil
                         :type
                         (common-lisp:or currency-amount common-lisp:null)
                         :accessor struct-shape-hit-reward :shape
                         "CurrencyAmount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-approval-delay-in-seconds :initarg
                         :auto-approval-delay-in-seconds :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-hit-auto-approval-delay-in-seconds :shape
                         "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (expiration :initarg :expiration :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-hit-expiration :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (assignment-duration-in-seconds :initarg
                         :assignment-duration-in-seconds :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-hit-assignment-duration-in-seconds :shape
                         "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (requester-annotation :initarg :requester-annotation
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-hit-requester-annotation :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (qualification-requirements :initarg
                         :qualification-requirements :initform common-lisp:nil
                         :type
                         (common-lisp:or qualification-requirement-list
                                         common-lisp:null)
                         :accessor struct-shape-hit-qualification-requirements
                         :shape "QualificationRequirementList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (hitreview-status :initarg :hitreview-status :initform
                         common-lisp:nil :type
                         (common-lisp:or hitreview-status common-lisp:null)
                         :accessor struct-shape-hit-hitreview-status :shape
                         "HITReviewStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-assignments-pending :initarg
                         :number-of-assignments-pending :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-hit-number-of-assignments-pending :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (number-of-assignments-available :initarg
                         :number-of-assignments-available :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-hit-number-of-assignments-available
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-assignments-completed :initarg
                         :number-of-assignments-completed :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-hit-number-of-assignments-completed
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-hit (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'hit
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'hit 'make-hit))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hit))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hit))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hitid))
      (common-lisp:list
       (common-lisp:cons "HITId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hittype-id))
      (common-lisp:list
       (common-lisp:cons "HITTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hitgroup-id))
      (common-lisp:list
       (common-lisp:cons "HITGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hitlayout-id))
      (common-lisp:list
       (common-lisp:cons "HITLayoutId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question))
      (common-lisp:list
       (common-lisp:cons "Question"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keywords))
      (common-lisp:list
       (common-lisp:cons "Keywords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hitstatus))
      (common-lisp:list
       (common-lisp:cons "HITStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-assignments))
      (common-lisp:list
       (common-lisp:cons "MaxAssignments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reward))
      (common-lisp:list
       (common-lisp:cons "Reward"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-approval-delay-in-seconds))
      (common-lisp:list
       (common-lisp:cons "AutoApprovalDelayInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration))
      (common-lisp:list
       (common-lisp:cons "Expiration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assignment-duration-in-seconds))
      (common-lisp:list
       (common-lisp:cons "AssignmentDurationInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'requester-annotation))
      (common-lisp:list
       (common-lisp:cons "RequesterAnnotation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'qualification-requirements))
      (common-lisp:list
       (common-lisp:cons "QualificationRequirements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hitreview-status))
      (common-lisp:list
       (common-lisp:cons "HITReviewStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-assignments-pending))
      (common-lisp:list
       (common-lisp:cons "NumberOfAssignmentsPending"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-assignments-available))
      (common-lisp:list
       (common-lisp:cons "NumberOfAssignmentsAvailable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-assignments-completed))
      (common-lisp:list
       (common-lisp:cons "NumberOfAssignmentsCompleted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hit))
   common-lisp:nil))
(common-lisp:deftype hitaccess-actions () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass hitlayout-parameter common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-hitlayout-parameter-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-hitlayout-parameter-value :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-hitlayout-parameter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'hitlayout-parameter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'hitlayout-parameter 'make-hitlayout-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hitlayout-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hitlayout-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hitlayout-parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype hitlayout-parameter-list ()
   '(trivial-types:proper-list hitlayout-parameter))
 (common-lisp:defun make-hitlayout-parameter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list hitlayout-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype hitlist () '(trivial-types:proper-list hit))
 (common-lisp:defun make-hitlist
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list hit))
   aws-sdk/generator/shape::members))
(common-lisp:deftype hitreview-status () 'common-lisp:string)
(common-lisp:deftype hitstatus () 'common-lisp:string)
(common-lisp:deftype idempotency-token () 'common-lisp:string)
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype integer-list () '(trivial-types:proper-list integer))
 (common-lisp:defun make-integer-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list integer))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass list-assignments-for-hitrequest common-lisp:nil
                       ((hitid :initarg :hitid :initform
                         (common-lisp:error ":hitid is required") :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         struct-shape-list-assignments-for-hitrequest-hitid
                         :shape "EntityId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-assignments-for-hitrequest-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or result-size common-lisp:null)
                         :accessor
                         struct-shape-list-assignments-for-hitrequest-max-results
                         :shape "ResultSize" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (assignment-statuses :initarg :assignment-statuses
                         :initform common-lisp:nil :type
                         (common-lisp:or assignment-status-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-assignments-for-hitrequest-assignment-statuses
                         :shape "AssignmentStatusList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-assignments-for-hitrequest
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-assignments-for-hitrequest
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-assignments-for-hitrequest
                    'make-list-assignments-for-hitrequest))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-assignments-for-hitrequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-assignments-for-hitrequest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hitid))
      (common-lisp:list
       (common-lisp:cons "HITId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assignment-statuses))
      (common-lisp:list
       (common-lisp:cons "AssignmentStatuses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-assignments-for-hitrequest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-assignments-for-hitresponse common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-assignments-for-hitresponse-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (num-results :initarg :num-results :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-list-assignments-for-hitresponse-num-results
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (assignments :initarg :assignments :initform
                         common-lisp:nil :type
                         (common-lisp:or assignment-list common-lisp:null)
                         :accessor
                         struct-shape-list-assignments-for-hitresponse-assignments
                         :shape "AssignmentList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-assignments-for-hitresponse
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-assignments-for-hitresponse
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-assignments-for-hitresponse
                    'make-list-assignments-for-hitresponse))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-assignments-for-hitresponse))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-assignments-for-hitresponse))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-results))
      (common-lisp:list
       (common-lisp:cons "NumResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assignments))
      (common-lisp:list
       (common-lisp:cons "Assignments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-assignments-for-hitresponse))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-bonus-payments-request common-lisp:nil
                       ((hitid :initarg :hitid :initform common-lisp:nil :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         struct-shape-list-bonus-payments-request-hitid :shape
                         "EntityId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (assignment-id :initarg :assignment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         struct-shape-list-bonus-payments-request-assignment-id
                         :shape "EntityId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-bonus-payments-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or result-size common-lisp:null)
                         :accessor
                         struct-shape-list-bonus-payments-request-max-results
                         :shape "ResultSize" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-bonus-payments-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-bonus-payments-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-bonus-payments-request
                    'make-list-bonus-payments-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-bonus-payments-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-bonus-payments-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hitid))
      (common-lisp:list
       (common-lisp:cons "HITId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assignment-id))
      (common-lisp:list
       (common-lisp:cons "AssignmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-bonus-payments-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-bonus-payments-response common-lisp:nil
                       ((num-results :initarg :num-results :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-list-bonus-payments-response-num-results
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-bonus-payments-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bonus-payments :initarg :bonus-payments :initform
                         common-lisp:nil :type
                         (common-lisp:or bonus-payment-list common-lisp:null)
                         :accessor
                         struct-shape-list-bonus-payments-response-bonus-payments
                         :shape "BonusPaymentList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-bonus-payments-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-bonus-payments-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-bonus-payments-response
                    'make-list-bonus-payments-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-bonus-payments-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-bonus-payments-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-results))
      (common-lisp:list
       (common-lisp:cons "NumResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bonus-payments))
      (common-lisp:list
       (common-lisp:cons "BonusPayments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-bonus-payments-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-hits-for-qualification-type-request common-lisp:nil
                       ((qualification-type-id :initarg :qualification-type-id
                         :initform
                         (common-lisp:error
                          ":qualification-type-id is required")
                         :type (common-lisp:or entity-id common-lisp:null)
                         :accessor
                         struct-shape-list-hits-for-qualification-type-request-qualification-type-id
                         :shape "EntityId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-hits-for-qualification-type-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or result-size common-lisp:null)
                         :accessor
                         struct-shape-list-hits-for-qualification-type-request-max-results
                         :shape "ResultSize" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-hits-for-qualification-type-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-hits-for-qualification-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-hits-for-qualification-type-request
                    'make-list-hits-for-qualification-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-hits-for-qualification-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-hits-for-qualification-type-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'qualification-type-id))
      (common-lisp:list
       (common-lisp:cons "QualificationTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-hits-for-qualification-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-hits-for-qualification-type-response
                       common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-hits-for-qualification-type-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (num-results :initarg :num-results :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-list-hits-for-qualification-type-response-num-results
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hits :initarg :hits :initform common-lisp:nil :type
                         (common-lisp:or hitlist common-lisp:null) :accessor
                         struct-shape-list-hits-for-qualification-type-response-hits
                         :shape "HITList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-hits-for-qualification-type-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-hits-for-qualification-type-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-hits-for-qualification-type-response
                    'make-list-hits-for-qualification-type-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-hits-for-qualification-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-hits-for-qualification-type-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-results))
      (common-lisp:list
       (common-lisp:cons "NumResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hits))
      (common-lisp:list
       (common-lisp:cons "HITs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-hits-for-qualification-type-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-hits-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor struct-shape-list-hits-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or result-size common-lisp:null)
                         :accessor struct-shape-list-hits-request-max-results
                         :shape "ResultSize" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-hits-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-hits-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-hits-request 'make-list-hits-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-hits-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-hits-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-hits-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-hits-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor struct-shape-list-hits-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (num-results :initarg :num-results :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-list-hits-response-num-results :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (hits :initarg :hits :initform common-lisp:nil :type
                         (common-lisp:or hitlist common-lisp:null) :accessor
                         struct-shape-list-hits-response-hits :shape "HITList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-hits-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-hits-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-hits-response 'make-list-hits-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-hits-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-hits-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-results))
      (common-lisp:list
       (common-lisp:cons "NumResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hits))
      (common-lisp:list
       (common-lisp:cons "HITs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-hits-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-qualification-requests-request common-lisp:nil
                       ((qualification-type-id :initarg :qualification-type-id
                         :initform common-lisp:nil :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         struct-shape-list-qualification-requests-request-qualification-type-id
                         :shape "EntityId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-qualification-requests-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or result-size common-lisp:null)
                         :accessor
                         struct-shape-list-qualification-requests-request-max-results
                         :shape "ResultSize" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-qualification-requests-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-qualification-requests-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-qualification-requests-request
                    'make-list-qualification-requests-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-qualification-requests-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-qualification-requests-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'qualification-type-id))
      (common-lisp:list
       (common-lisp:cons "QualificationTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-qualification-requests-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-qualification-requests-response common-lisp:nil
                       ((num-results :initarg :num-results :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-list-qualification-requests-response-num-results
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-qualification-requests-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (qualification-requests :initarg
                         :qualification-requests :initform common-lisp:nil
                         :type
                         (common-lisp:or qualification-request-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-qualification-requests-response-qualification-requests
                         :shape "QualificationRequestList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-qualification-requests-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-qualification-requests-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-qualification-requests-response
                    'make-list-qualification-requests-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-qualification-requests-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-qualification-requests-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-results))
      (common-lisp:list
       (common-lisp:cons "NumResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'qualification-requests))
      (common-lisp:list
       (common-lisp:cons "QualificationRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-qualification-requests-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-qualification-types-request common-lisp:nil
                       ((query :initarg :query :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-qualification-types-request-query
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (must-be-requestable :initarg :must-be-requestable
                         :initform
                         (common-lisp:error ":must-be-requestable is required")
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-list-qualification-types-request-must-be-requestable
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (must-be-owned-by-caller :initarg
                         :must-be-owned-by-caller :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-list-qualification-types-request-must-be-owned-by-caller
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-qualification-types-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or result-size common-lisp:null)
                         :accessor
                         struct-shape-list-qualification-types-request-max-results
                         :shape "ResultSize" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-qualification-types-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-qualification-types-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-qualification-types-request
                    'make-list-qualification-types-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-qualification-types-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-qualification-types-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query))
      (common-lisp:list
       (common-lisp:cons "Query"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'must-be-requestable))
      (common-lisp:list
       (common-lisp:cons "MustBeRequestable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'must-be-owned-by-caller))
      (common-lisp:list
       (common-lisp:cons "MustBeOwnedByCaller"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-qualification-types-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-qualification-types-response common-lisp:nil
                       ((num-results :initarg :num-results :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-list-qualification-types-response-num-results
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-qualification-types-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (qualification-types :initarg :qualification-types
                         :initform common-lisp:nil :type
                         (common-lisp:or qualification-type-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-qualification-types-response-qualification-types
                         :shape "QualificationTypeList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-qualification-types-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-qualification-types-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-qualification-types-response
                    'make-list-qualification-types-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-qualification-types-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-qualification-types-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-results))
      (common-lisp:list
       (common-lisp:cons "NumResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'qualification-types))
      (common-lisp:list
       (common-lisp:cons "QualificationTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-qualification-types-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-review-policy-results-for-hitrequest
                       common-lisp:nil
                       ((hitid :initarg :hitid :initform
                         (common-lisp:error ":hitid is required") :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         struct-shape-list-review-policy-results-for-hitrequest-hitid
                         :shape "EntityId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-levels :initarg :policy-levels :initform
                         common-lisp:nil :type
                         (common-lisp:or review-policy-level-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-review-policy-results-for-hitrequest-policy-levels
                         :shape "ReviewPolicyLevelList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (retrieve-actions :initarg :retrieve-actions :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-list-review-policy-results-for-hitrequest-retrieve-actions
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (retrieve-results :initarg :retrieve-results :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-list-review-policy-results-for-hitrequest-retrieve-results
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-review-policy-results-for-hitrequest-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or result-size common-lisp:null)
                         :accessor
                         struct-shape-list-review-policy-results-for-hitrequest-max-results
                         :shape "ResultSize" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-review-policy-results-for-hitrequest
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-review-policy-results-for-hitrequest
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-review-policy-results-for-hitrequest
                    'make-list-review-policy-results-for-hitrequest))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-review-policy-results-for-hitrequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-review-policy-results-for-hitrequest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hitid))
      (common-lisp:list
       (common-lisp:cons "HITId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-levels))
      (common-lisp:list
       (common-lisp:cons "PolicyLevels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retrieve-actions))
      (common-lisp:list
       (common-lisp:cons "RetrieveActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retrieve-results))
      (common-lisp:list
       (common-lisp:cons "RetrieveResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-review-policy-results-for-hitrequest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-review-policy-results-for-hitresponse
                       common-lisp:nil
                       ((hitid :initarg :hitid :initform common-lisp:nil :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         struct-shape-list-review-policy-results-for-hitresponse-hitid
                         :shape "EntityId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (assignment-review-policy :initarg
                         :assignment-review-policy :initform common-lisp:nil
                         :type (common-lisp:or review-policy common-lisp:null)
                         :accessor
                         struct-shape-list-review-policy-results-for-hitresponse-assignment-review-policy
                         :shape "ReviewPolicy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hitreview-policy :initarg :hitreview-policy :initform
                         common-lisp:nil :type
                         (common-lisp:or review-policy common-lisp:null)
                         :accessor
                         struct-shape-list-review-policy-results-for-hitresponse-hitreview-policy
                         :shape "ReviewPolicy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (assignment-review-report :initarg
                         :assignment-review-report :initform common-lisp:nil
                         :type (common-lisp:or review-report common-lisp:null)
                         :accessor
                         struct-shape-list-review-policy-results-for-hitresponse-assignment-review-report
                         :shape "ReviewReport" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hitreview-report :initarg :hitreview-report :initform
                         common-lisp:nil :type
                         (common-lisp:or review-report common-lisp:null)
                         :accessor
                         struct-shape-list-review-policy-results-for-hitresponse-hitreview-report
                         :shape "ReviewReport" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-review-policy-results-for-hitresponse-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-review-policy-results-for-hitresponse
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-review-policy-results-for-hitresponse
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-review-policy-results-for-hitresponse
                    'make-list-review-policy-results-for-hitresponse))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-review-policy-results-for-hitresponse))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-review-policy-results-for-hitresponse))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hitid))
      (common-lisp:list
       (common-lisp:cons "HITId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assignment-review-policy))
      (common-lisp:list
       (common-lisp:cons "AssignmentReviewPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hitreview-policy))
      (common-lisp:list
       (common-lisp:cons "HITReviewPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assignment-review-report))
      (common-lisp:list
       (common-lisp:cons "AssignmentReviewReport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hitreview-report))
      (common-lisp:list
       (common-lisp:cons "HITReviewReport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-review-policy-results-for-hitresponse))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-reviewable-hits-request common-lisp:nil
                       ((hittype-id :initarg :hittype-id :initform
                         common-lisp:nil :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         struct-shape-list-reviewable-hits-request-hittype-id
                         :shape "EntityId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or reviewable-hitstatus common-lisp:null)
                         :accessor
                         struct-shape-list-reviewable-hits-request-status
                         :shape "ReviewableHITStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-reviewable-hits-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or result-size common-lisp:null)
                         :accessor
                         struct-shape-list-reviewable-hits-request-max-results
                         :shape "ResultSize" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-reviewable-hits-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-reviewable-hits-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-reviewable-hits-request
                    'make-list-reviewable-hits-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-reviewable-hits-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-reviewable-hits-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hittype-id))
      (common-lisp:list
       (common-lisp:cons "HITTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-reviewable-hits-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-reviewable-hits-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-reviewable-hits-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (num-results :initarg :num-results :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-list-reviewable-hits-response-num-results
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hits :initarg :hits :initform common-lisp:nil :type
                         (common-lisp:or hitlist common-lisp:null) :accessor
                         struct-shape-list-reviewable-hits-response-hits :shape
                         "HITList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-reviewable-hits-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-reviewable-hits-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-reviewable-hits-response
                    'make-list-reviewable-hits-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-reviewable-hits-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-reviewable-hits-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-results))
      (common-lisp:list
       (common-lisp:cons "NumResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hits))
      (common-lisp:list
       (common-lisp:cons "HITs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-reviewable-hits-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-worker-blocks-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-worker-blocks-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or result-size common-lisp:null)
                         :accessor
                         struct-shape-list-worker-blocks-request-max-results
                         :shape "ResultSize" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-worker-blocks-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-worker-blocks-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-worker-blocks-request
                    'make-list-worker-blocks-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-worker-blocks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-worker-blocks-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-worker-blocks-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-worker-blocks-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-worker-blocks-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (num-results :initarg :num-results :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-list-worker-blocks-response-num-results
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (worker-blocks :initarg :worker-blocks :initform
                         common-lisp:nil :type
                         (common-lisp:or worker-block-list common-lisp:null)
                         :accessor
                         struct-shape-list-worker-blocks-response-worker-blocks
                         :shape "WorkerBlockList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-worker-blocks-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-worker-blocks-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-worker-blocks-response
                    'make-list-worker-blocks-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-worker-blocks-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-worker-blocks-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-results))
      (common-lisp:list
       (common-lisp:cons "NumResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worker-blocks))
      (common-lisp:list
       (common-lisp:cons "WorkerBlocks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-worker-blocks-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-workers-with-qualification-type-request
                       common-lisp:nil
                       ((qualification-type-id :initarg :qualification-type-id
                         :initform
                         (common-lisp:error
                          ":qualification-type-id is required")
                         :type (common-lisp:or entity-id common-lisp:null)
                         :accessor
                         struct-shape-list-workers-with-qualification-type-request-qualification-type-id
                         :shape "EntityId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or qualification-status common-lisp:null)
                         :accessor
                         struct-shape-list-workers-with-qualification-type-request-status
                         :shape "QualificationStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-workers-with-qualification-type-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or result-size common-lisp:null)
                         :accessor
                         struct-shape-list-workers-with-qualification-type-request-max-results
                         :shape "ResultSize" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-workers-with-qualification-type-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-workers-with-qualification-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-workers-with-qualification-type-request
                    'make-list-workers-with-qualification-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-workers-with-qualification-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-workers-with-qualification-type-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'qualification-type-id))
      (common-lisp:list
       (common-lisp:cons "QualificationTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-workers-with-qualification-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-workers-with-qualification-type-response
                       common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-workers-with-qualification-type-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (num-results :initarg :num-results :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-list-workers-with-qualification-type-response-num-results
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (qualifications :initarg :qualifications :initform
                         common-lisp:nil :type
                         (common-lisp:or qualification-list common-lisp:null)
                         :accessor
                         struct-shape-list-workers-with-qualification-type-response-qualifications
                         :shape "QualificationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-workers-with-qualification-type-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-workers-with-qualification-type-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-workers-with-qualification-type-response
                    'make-list-workers-with-qualification-type-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-workers-with-qualification-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-workers-with-qualification-type-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-results))
      (common-lisp:list
       (common-lisp:cons "NumResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'qualifications))
      (common-lisp:list
       (common-lisp:cons "Qualifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-workers-with-qualification-type-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass locale common-lisp:nil
                       ((country :initarg :country :initform
                         (common-lisp:error ":country is required") :type
                         (common-lisp:or country-parameters common-lisp:null)
                         :accessor struct-shape-locale-country :shape
                         "CountryParameters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subdivision :initarg :subdivision :initform
                         common-lisp:nil :type
                         (common-lisp:or country-parameters common-lisp:null)
                         :accessor struct-shape-locale-subdivision :shape
                         "CountryParameters" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-locale
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'locale
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'locale 'make-locale))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input locale))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input locale))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'country))
      (common-lisp:list
       (common-lisp:cons "Country"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subdivision))
      (common-lisp:list
       (common-lisp:cons "Subdivision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input locale))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype locale-list () '(trivial-types:proper-list locale))
 (common-lisp:defun make-locale-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list locale))
   aws-sdk/generator/shape::members))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass notification-specification common-lisp:nil
                       ((destination :initarg :destination :initform
                         (common-lisp:error ":destination is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-notification-specification-destination
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transport :initarg :transport :initform
                         (common-lisp:error ":transport is required") :type
                         (common-lisp:or notification-transport
                                         common-lisp:null)
                         :accessor
                         struct-shape-notification-specification-transport
                         :shape "NotificationTransport" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (version :initarg :version :initform
                         (common-lisp:error ":version is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-notification-specification-version :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (event-types :initarg :event-types :initform
                         (common-lisp:error ":event-types is required") :type
                         (common-lisp:or event-type-list common-lisp:null)
                         :accessor
                         struct-shape-notification-specification-event-types
                         :shape "EventTypeList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-notification-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'notification-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'notification-specification
                    'make-notification-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notification-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notification-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transport))
      (common-lisp:list
       (common-lisp:cons "Transport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-types))
      (common-lisp:list
       (common-lisp:cons "EventTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notification-specification))
   common-lisp:nil))
(common-lisp:deftype notification-transport () 'common-lisp:string)
(common-lisp:deftype notify-workers-failure-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass notify-workers-failure-status common-lisp:nil
                       ((notify-workers-failure-code :initarg
                         :notify-workers-failure-code :initform common-lisp:nil
                         :type
                         (common-lisp:or notify-workers-failure-code
                                         common-lisp:null)
                         :accessor
                         struct-shape-notify-workers-failure-status-notify-workers-failure-code
                         :shape "NotifyWorkersFailureCode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (notify-workers-failure-message :initarg
                         :notify-workers-failure-message :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-notify-workers-failure-status-notify-workers-failure-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (worker-id :initarg :worker-id :initform
                         common-lisp:nil :type
                         (common-lisp:or customer-id common-lisp:null)
                         :accessor
                         struct-shape-notify-workers-failure-status-worker-id
                         :shape "CustomerId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-notify-workers-failure-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'notify-workers-failure-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'notify-workers-failure-status
                    'make-notify-workers-failure-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notify-workers-failure-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notify-workers-failure-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notify-workers-failure-code))
      (common-lisp:list
       (common-lisp:cons "NotifyWorkersFailureCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notify-workers-failure-message))
      (common-lisp:list
       (common-lisp:cons "NotifyWorkersFailureMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worker-id))
      (common-lisp:list
       (common-lisp:cons "WorkerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notify-workers-failure-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype notify-workers-failure-status-list ()
   '(trivial-types:proper-list notify-workers-failure-status))
 (common-lisp:defun make-notify-workers-failure-status-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            notify-workers-failure-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass notify-workers-request common-lisp:nil
                       ((subject :initarg :subject :initform
                         (common-lisp:error ":subject is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-notify-workers-request-subject :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message-text :initarg :message-text :initform
                         (common-lisp:error ":message-text is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-notify-workers-request-message-text
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (worker-ids :initarg :worker-ids :initform
                         (common-lisp:error ":worker-ids is required") :type
                         (common-lisp:or customer-id-list common-lisp:null)
                         :accessor
                         struct-shape-notify-workers-request-worker-ids :shape
                         "CustomerIdList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-notify-workers-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'notify-workers-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'notify-workers-request 'make-notify-workers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notify-workers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notify-workers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subject))
      (common-lisp:list
       (common-lisp:cons "Subject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-text))
      (common-lisp:list
       (common-lisp:cons "MessageText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worker-ids))
      (common-lisp:list
       (common-lisp:cons "WorkerIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notify-workers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass notify-workers-response common-lisp:nil
                       ((notify-workers-failure-statuses :initarg
                         :notify-workers-failure-statuses :initform
                         common-lisp:nil :type
                         (common-lisp:or notify-workers-failure-status-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-notify-workers-response-notify-workers-failure-statuses
                         :shape "NotifyWorkersFailureStatusList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-notify-workers-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'notify-workers-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'notify-workers-response 'make-notify-workers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notify-workers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notify-workers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notify-workers-failure-statuses))
      (common-lisp:list
       (common-lisp:cons "NotifyWorkersFailureStatuses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notify-workers-response))
   common-lisp:nil))
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass parameter-map-entry common-lisp:nil
                       ((key :initarg :key :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-parameter-map-entry-key :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (values :initarg :values :initform common-lisp:nil
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-parameter-map-entry-values
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-parameter-map-entry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'parameter-map-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'parameter-map-entry 'make-parameter-map-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input parameter-map-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input parameter-map-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input parameter-map-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype parameter-map-entry-list ()
   '(trivial-types:proper-list parameter-map-entry))
 (common-lisp:defun make-parameter-map-entry-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parameter-map-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass policy-parameter common-lisp:nil
                       ((key :initarg :key :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-policy-parameter-key :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (values :initarg :values :initform common-lisp:nil
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-policy-parameter-values :shape
                         "StringList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (map-entries :initarg :map-entries :initform
                         common-lisp:nil :type
                         (common-lisp:or parameter-map-entry-list
                                         common-lisp:null)
                         :accessor struct-shape-policy-parameter-map-entries
                         :shape "ParameterMapEntryList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-policy-parameter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'policy-parameter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'policy-parameter 'make-policy-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policy-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policy-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'map-entries))
      (common-lisp:list
       (common-lisp:cons "MapEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policy-parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype policy-parameter-list ()
   '(trivial-types:proper-list policy-parameter))
 (common-lisp:defun make-policy-parameter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass qualification common-lisp:nil
                       ((qualification-type-id :initarg :qualification-type-id
                         :initform common-lisp:nil :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         struct-shape-qualification-qualification-type-id
                         :shape "EntityId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (worker-id :initarg :worker-id :initform
                         common-lisp:nil :type
                         (common-lisp:or customer-id common-lisp:null)
                         :accessor struct-shape-qualification-worker-id :shape
                         "CustomerId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (grant-time :initarg :grant-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-qualification-grant-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (integer-value :initarg :integer-value :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-qualification-integer-value :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (locale-value :initarg :locale-value :initform
                         common-lisp:nil :type
                         (common-lisp:or locale common-lisp:null) :accessor
                         struct-shape-qualification-locale-value :shape
                         "Locale" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or qualification-status common-lisp:null)
                         :accessor struct-shape-qualification-status :shape
                         "QualificationStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-qualification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'qualification
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'qualification 'make-qualification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input qualification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input qualification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'qualification-type-id))
      (common-lisp:list
       (common-lisp:cons "QualificationTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worker-id))
      (common-lisp:list
       (common-lisp:cons "WorkerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-time))
      (common-lisp:list
       (common-lisp:cons "GrantTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'integer-value))
      (common-lisp:list
       (common-lisp:cons "IntegerValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-value))
      (common-lisp:list
       (common-lisp:cons "LocaleValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input qualification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype qualification-list ()
   '(trivial-types:proper-list qualification))
 (common-lisp:defun make-qualification-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list qualification))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass qualification-request common-lisp:nil
                       ((qualification-request-id :initarg
                         :qualification-request-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-qualification-request-qualification-request-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (qualification-type-id :initarg :qualification-type-id
                         :initform common-lisp:nil :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         struct-shape-qualification-request-qualification-type-id
                         :shape "EntityId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (worker-id :initarg :worker-id :initform
                         common-lisp:nil :type
                         (common-lisp:or customer-id common-lisp:null)
                         :accessor struct-shape-qualification-request-worker-id
                         :shape "CustomerId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (test :initarg :test :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-qualification-request-test :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (answer :initarg :answer :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-qualification-request-answer
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (submit-time :initarg :submit-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-qualification-request-submit-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-qualification-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'qualification-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'qualification-request 'make-qualification-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          qualification-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          qualification-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'qualification-request-id))
      (common-lisp:list
       (common-lisp:cons "QualificationRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'qualification-type-id))
      (common-lisp:list
       (common-lisp:cons "QualificationTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worker-id))
      (common-lisp:list
       (common-lisp:cons "WorkerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test))
      (common-lisp:list
       (common-lisp:cons "Test"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'answer))
      (common-lisp:list
       (common-lisp:cons "Answer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'submit-time))
      (common-lisp:list
       (common-lisp:cons "SubmitTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          qualification-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype qualification-request-list ()
   '(trivial-types:proper-list qualification-request))
 (common-lisp:defun make-qualification-request-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list qualification-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass qualification-requirement common-lisp:nil
                       ((qualification-type-id :initarg :qualification-type-id
                         :initform
                         (common-lisp:error
                          ":qualification-type-id is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-qualification-requirement-qualification-type-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (comparator :initarg :comparator :initform
                         (common-lisp:error ":comparator is required") :type
                         (common-lisp:or comparator common-lisp:null) :accessor
                         struct-shape-qualification-requirement-comparator
                         :shape "Comparator" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (integer-values :initarg :integer-values :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-list common-lisp:null)
                         :accessor
                         struct-shape-qualification-requirement-integer-values
                         :shape "IntegerList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (locale-values :initarg :locale-values :initform
                         common-lisp:nil :type
                         (common-lisp:or locale-list common-lisp:null)
                         :accessor
                         struct-shape-qualification-requirement-locale-values
                         :shape "LocaleList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (required-to-preview :initarg :required-to-preview
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-qualification-requirement-required-to-preview
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (actions-guarded :initarg :actions-guarded :initform
                         common-lisp:nil :type
                         (common-lisp:or hitaccess-actions common-lisp:null)
                         :accessor
                         struct-shape-qualification-requirement-actions-guarded
                         :shape "HITAccessActions" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-qualification-requirement
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'qualification-requirement
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'qualification-requirement
                    'make-qualification-requirement))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          qualification-requirement))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          qualification-requirement))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'qualification-type-id))
      (common-lisp:list
       (common-lisp:cons "QualificationTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparator))
      (common-lisp:list
       (common-lisp:cons "Comparator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'integer-values))
      (common-lisp:list
       (common-lisp:cons "IntegerValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-values))
      (common-lisp:list
       (common-lisp:cons "LocaleValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'required-to-preview))
      (common-lisp:list
       (common-lisp:cons "RequiredToPreview"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions-guarded))
      (common-lisp:list
       (common-lisp:cons "ActionsGuarded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          qualification-requirement))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype qualification-requirement-list ()
   '(trivial-types:proper-list qualification-requirement))
 (common-lisp:defun make-qualification-requirement-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            qualification-requirement))
   aws-sdk/generator/shape::members))
(common-lisp:deftype qualification-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass qualification-type common-lisp:nil
                       ((qualification-type-id :initarg :qualification-type-id
                         :initform common-lisp:nil :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         struct-shape-qualification-type-qualification-type-id
                         :shape "EntityId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-qualification-type-creation-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-qualification-type-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-qualification-type-description :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (keywords :initarg :keywords :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-qualification-type-keywords
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (qualification-type-status :initarg
                         :qualification-type-status :initform common-lisp:nil
                         :type
                         (common-lisp:or qualification-type-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-qualification-type-qualification-type-status
                         :shape "QualificationTypeStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (test :initarg :test :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-qualification-type-test :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (test-duration-in-seconds :initarg
                         :test-duration-in-seconds :initform common-lisp:nil
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-qualification-type-test-duration-in-seconds
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (answer-key :initarg :answer-key :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-qualification-type-answer-key :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (retry-delay-in-seconds :initarg
                         :retry-delay-in-seconds :initform common-lisp:nil
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-qualification-type-retry-delay-in-seconds
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (is-requestable :initarg :is-requestable :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-qualification-type-is-requestable :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (auto-granted :initarg :auto-granted :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-qualification-type-auto-granted :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (auto-granted-value :initarg :auto-granted-value
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-qualification-type-auto-granted-value
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-qualification-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'qualification-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'qualification-type 'make-qualification-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input qualification-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input qualification-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'qualification-type-id))
      (common-lisp:list
       (common-lisp:cons "QualificationTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keywords))
      (common-lisp:list
       (common-lisp:cons "Keywords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'qualification-type-status))
      (common-lisp:list
       (common-lisp:cons "QualificationTypeStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test))
      (common-lisp:list
       (common-lisp:cons "Test"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'test-duration-in-seconds))
      (common-lisp:list
       (common-lisp:cons "TestDurationInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'answer-key))
      (common-lisp:list
       (common-lisp:cons "AnswerKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'retry-delay-in-seconds))
      (common-lisp:list
       (common-lisp:cons "RetryDelayInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-requestable))
      (common-lisp:list
       (common-lisp:cons "IsRequestable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-granted))
      (common-lisp:list
       (common-lisp:cons "AutoGranted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-granted-value))
      (common-lisp:list
       (common-lisp:cons "AutoGrantedValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input qualification-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype qualification-type-list ()
   '(trivial-types:proper-list qualification-type))
 (common-lisp:defun make-qualification-type-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list qualification-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype qualification-type-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass reject-assignment-request common-lisp:nil
                       ((assignment-id :initarg :assignment-id :initform
                         (common-lisp:error ":assignment-id is required") :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         struct-shape-reject-assignment-request-assignment-id
                         :shape "EntityId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (requester-feedback :initarg :requester-feedback
                         :initform
                         (common-lisp:error ":requester-feedback is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-reject-assignment-request-requester-feedback
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reject-assignment-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reject-assignment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reject-assignment-request
                    'make-reject-assignment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reject-assignment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reject-assignment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assignment-id))
      (common-lisp:list
       (common-lisp:cons "AssignmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'requester-feedback))
      (common-lisp:list
       (common-lisp:cons "RequesterFeedback"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reject-assignment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reject-assignment-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reject-assignment-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reject-assignment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reject-assignment-response
                    'make-reject-assignment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reject-assignment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reject-assignment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reject-assignment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reject-qualification-request-request common-lisp:nil
                       ((qualification-request-id :initarg
                         :qualification-request-id :initform
                         (common-lisp:error
                          ":qualification-request-id is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-reject-qualification-request-request-qualification-request-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reason :initarg :reason :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-reject-qualification-request-request-reason
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reject-qualification-request-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'reject-qualification-request-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reject-qualification-request-request
                    'make-reject-qualification-request-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reject-qualification-request-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reject-qualification-request-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'qualification-request-id))
      (common-lisp:list
       (common-lisp:cons "QualificationRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reject-qualification-request-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reject-qualification-request-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reject-qualification-request-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'reject-qualification-request-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reject-qualification-request-response
                    'make-reject-qualification-request-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reject-qualification-request-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reject-qualification-request-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reject-qualification-request-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition request-error
     (mturk-requester-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       request-error-message)
      (turk-error-code :initarg :turk-error-code :initform common-lisp:nil
       :reader request-error-turk-error-code)))
 (common-lisp:export
  (common-lisp:list 'request-error 'request-error-message
                    'request-error-turk-error-code)))
(common-lisp:deftype result-size () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass review-action-detail common-lisp:nil
                       ((action-id :initarg :action-id :initform
                         common-lisp:nil :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         struct-shape-review-action-detail-action-id :shape
                         "EntityId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (action-name :initarg :action-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-review-action-detail-action-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (target-id :initarg :target-id :initform
                         common-lisp:nil :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         struct-shape-review-action-detail-target-id :shape
                         "EntityId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (target-type :initarg :target-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-review-action-detail-target-type :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or review-action-status common-lisp:null)
                         :accessor struct-shape-review-action-detail-status
                         :shape "ReviewActionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (complete-time :initarg :complete-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-review-action-detail-complete-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (result :initarg :result :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-review-action-detail-result
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-code :initarg :error-code :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-review-action-detail-error-code :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-review-action-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'review-action-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'review-action-detail 'make-review-action-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input review-action-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input review-action-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-id))
      (common-lisp:list
       (common-lisp:cons "ActionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-name))
      (common-lisp:list
       (common-lisp:cons "ActionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-id))
      (common-lisp:list
       (common-lisp:cons "TargetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-type))
      (common-lisp:list
       (common-lisp:cons "TargetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'complete-time))
      (common-lisp:list
       (common-lisp:cons "CompleteTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result))
      (common-lisp:list
       (common-lisp:cons "Result"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input review-action-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype review-action-detail-list ()
   '(trivial-types:proper-list review-action-detail))
 (common-lisp:defun make-review-action-detail-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list review-action-detail))
   aws-sdk/generator/shape::members))
(common-lisp:deftype review-action-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass review-policy common-lisp:nil
                       ((policy-name :initarg :policy-name :initform
                         (common-lisp:error ":policy-name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-review-policy-policy-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-parameter-list
                                         common-lisp:null)
                         :accessor struct-shape-review-policy-parameters :shape
                         "PolicyParameterList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-review-policy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'review-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'review-policy 'make-review-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input review-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input review-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input review-policy))
   common-lisp:nil))
(common-lisp:deftype review-policy-level () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype review-policy-level-list ()
   '(trivial-types:proper-list review-policy-level))
 (common-lisp:defun make-review-policy-level-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list review-policy-level))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass review-report common-lisp:nil
                       ((review-results :initarg :review-results :initform
                         common-lisp:nil :type
                         (common-lisp:or review-result-detail-list
                                         common-lisp:null)
                         :accessor struct-shape-review-report-review-results
                         :shape "ReviewResultDetailList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (review-actions :initarg :review-actions :initform
                         common-lisp:nil :type
                         (common-lisp:or review-action-detail-list
                                         common-lisp:null)
                         :accessor struct-shape-review-report-review-actions
                         :shape "ReviewActionDetailList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-review-report
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'review-report
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'review-report 'make-review-report))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input review-report))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input review-report))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'review-results))
      (common-lisp:list
       (common-lisp:cons "ReviewResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'review-actions))
      (common-lisp:list
       (common-lisp:cons "ReviewActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input review-report))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass review-result-detail common-lisp:nil
                       ((action-id :initarg :action-id :initform
                         common-lisp:nil :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         struct-shape-review-result-detail-action-id :shape
                         "EntityId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (subject-id :initarg :subject-id :initform
                         common-lisp:nil :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         struct-shape-review-result-detail-subject-id :shape
                         "EntityId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (subject-type :initarg :subject-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-review-result-detail-subject-type :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (question-id :initarg :question-id :initform
                         common-lisp:nil :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         struct-shape-review-result-detail-question-id :shape
                         "EntityId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (key :initarg :key :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-review-result-detail-key :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-review-result-detail-value :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-review-result-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'review-result-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'review-result-detail 'make-review-result-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input review-result-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input review-result-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-id))
      (common-lisp:list
       (common-lisp:cons "ActionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subject-id))
      (common-lisp:list
       (common-lisp:cons "SubjectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subject-type))
      (common-lisp:list
       (common-lisp:cons "SubjectType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-id))
      (common-lisp:list
       (common-lisp:cons "QuestionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input review-result-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype review-result-detail-list ()
   '(trivial-types:proper-list review-result-detail))
 (common-lisp:defun make-review-result-detail-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list review-result-detail))
   aws-sdk/generator/shape::members))
(common-lisp:deftype reviewable-hitstatus () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass send-bonus-request common-lisp:nil
                       ((worker-id :initarg :worker-id :initform
                         (common-lisp:error ":worker-id is required") :type
                         (common-lisp:or customer-id common-lisp:null)
                         :accessor struct-shape-send-bonus-request-worker-id
                         :shape "CustomerId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bonus-amount :initarg :bonus-amount :initform
                         (common-lisp:error ":bonus-amount is required") :type
                         (common-lisp:or currency-amount common-lisp:null)
                         :accessor struct-shape-send-bonus-request-bonus-amount
                         :shape "CurrencyAmount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (assignment-id :initarg :assignment-id :initform
                         (common-lisp:error ":assignment-id is required") :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         struct-shape-send-bonus-request-assignment-id :shape
                         "EntityId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (reason :initarg :reason :initform
                         (common-lisp:error ":reason is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-send-bonus-request-reason :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (unique-request-token :initarg :unique-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor
                         struct-shape-send-bonus-request-unique-request-token
                         :shape "IdempotencyToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-send-bonus-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'send-bonus-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'send-bonus-request 'make-send-bonus-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input send-bonus-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input send-bonus-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worker-id))
      (common-lisp:list
       (common-lisp:cons "WorkerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bonus-amount))
      (common-lisp:list
       (common-lisp:cons "BonusAmount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assignment-id))
      (common-lisp:list
       (common-lisp:cons "AssignmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unique-request-token))
      (common-lisp:list
       (common-lisp:cons "UniqueRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input send-bonus-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass send-bonus-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-send-bonus-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'send-bonus-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'send-bonus-response 'make-send-bonus-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input send-bonus-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input send-bonus-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input send-bonus-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass send-test-event-notification-request common-lisp:nil
                       ((notification :initarg :notification :initform
                         (common-lisp:error ":notification is required") :type
                         (common-lisp:or notification-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-send-test-event-notification-request-notification
                         :shape "NotificationSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (test-event-type :initarg :test-event-type :initform
                         (common-lisp:error ":test-event-type is required")
                         :type (common-lisp:or event-type common-lisp:null)
                         :accessor
                         struct-shape-send-test-event-notification-request-test-event-type
                         :shape "EventType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-send-test-event-notification-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'send-test-event-notification-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'send-test-event-notification-request
                    'make-send-test-event-notification-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-test-event-notification-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-test-event-notification-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification))
      (common-lisp:list
       (common-lisp:cons "Notification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-event-type))
      (common-lisp:list
       (common-lisp:cons "TestEventType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-test-event-notification-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass send-test-event-notification-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-send-test-event-notification-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'send-test-event-notification-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'send-test-event-notification-response
                    'make-send-test-event-notification-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-test-event-notification-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-test-event-notification-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-test-event-notification-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition service-fault
     (mturk-requester-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-fault-message)
      (turk-error-code :initarg :turk-error-code :initform common-lisp:nil
       :reader service-fault-turk-error-code)))
 (common-lisp:export
  (common-lisp:list 'service-fault 'service-fault-message
                    'service-fault-turk-error-code)))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-string-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype turk-error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass update-expiration-for-hitrequest common-lisp:nil
                       ((hitid :initarg :hitid :initform
                         (common-lisp:error ":hitid is required") :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         struct-shape-update-expiration-for-hitrequest-hitid
                         :shape "EntityId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (expire-at :initarg :expire-at :initform
                         (common-lisp:error ":expire-at is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-update-expiration-for-hitrequest-expire-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-expiration-for-hitrequest
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-expiration-for-hitrequest
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-expiration-for-hitrequest
                    'make-update-expiration-for-hitrequest))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-expiration-for-hitrequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-expiration-for-hitrequest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hitid))
      (common-lisp:list
       (common-lisp:cons "HITId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expire-at))
      (common-lisp:list
       (common-lisp:cons "ExpireAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-expiration-for-hitrequest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-expiration-for-hitresponse common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-expiration-for-hitresponse
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-expiration-for-hitresponse
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-expiration-for-hitresponse
                    'make-update-expiration-for-hitresponse))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-expiration-for-hitresponse))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-expiration-for-hitresponse))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-expiration-for-hitresponse))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-hitreview-status-request common-lisp:nil
                       ((hitid :initarg :hitid :initform
                         (common-lisp:error ":hitid is required") :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         struct-shape-update-hitreview-status-request-hitid
                         :shape "EntityId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (revert :initarg :revert :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-update-hitreview-status-request-revert
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-hitreview-status-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-hitreview-status-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-hitreview-status-request
                    'make-update-hitreview-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-hitreview-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-hitreview-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hitid))
      (common-lisp:list
       (common-lisp:cons "HITId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revert))
      (common-lisp:list
       (common-lisp:cons "Revert"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-hitreview-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-hitreview-status-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-hitreview-status-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-hitreview-status-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-hitreview-status-response
                    'make-update-hitreview-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-hitreview-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-hitreview-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-hitreview-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-hittype-of-hitrequest common-lisp:nil
                       ((hitid :initarg :hitid :initform
                         (common-lisp:error ":hitid is required") :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         struct-shape-update-hittype-of-hitrequest-hitid :shape
                         "EntityId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (hittype-id :initarg :hittype-id :initform
                         (common-lisp:error ":hittype-id is required") :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         struct-shape-update-hittype-of-hitrequest-hittype-id
                         :shape "EntityId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-hittype-of-hitrequest
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-hittype-of-hitrequest
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-hittype-of-hitrequest
                    'make-update-hittype-of-hitrequest))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-hittype-of-hitrequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-hittype-of-hitrequest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hitid))
      (common-lisp:list
       (common-lisp:cons "HITId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hittype-id))
      (common-lisp:list
       (common-lisp:cons "HITTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-hittype-of-hitrequest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-hittype-of-hitresponse common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-hittype-of-hitresponse
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-hittype-of-hitresponse
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-hittype-of-hitresponse
                    'make-update-hittype-of-hitresponse))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-hittype-of-hitresponse))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-hittype-of-hitresponse))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-hittype-of-hitresponse))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-notification-settings-request common-lisp:nil
                       ((hittype-id :initarg :hittype-id :initform
                         (common-lisp:error ":hittype-id is required") :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         struct-shape-update-notification-settings-request-hittype-id
                         :shape "EntityId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notification :initarg :notification :initform
                         common-lisp:nil :type
                         (common-lisp:or notification-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-notification-settings-request-notification
                         :shape "NotificationSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (active :initarg :active :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-update-notification-settings-request-active
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-notification-settings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-notification-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-notification-settings-request
                    'make-update-notification-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-notification-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-notification-settings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hittype-id))
      (common-lisp:list
       (common-lisp:cons "HITTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification))
      (common-lisp:list
       (common-lisp:cons "Notification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active))
      (common-lisp:list
       (common-lisp:cons "Active"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-notification-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-notification-settings-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-notification-settings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-notification-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-notification-settings-response
                    'make-update-notification-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-notification-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-notification-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-notification-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-qualification-type-request common-lisp:nil
                       ((qualification-type-id :initarg :qualification-type-id
                         :initform
                         (common-lisp:error
                          ":qualification-type-id is required")
                         :type (common-lisp:or entity-id common-lisp:null)
                         :accessor
                         struct-shape-update-qualification-type-request-qualification-type-id
                         :shape "EntityId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-qualification-type-request-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (qualification-type-status :initarg
                         :qualification-type-status :initform common-lisp:nil
                         :type
                         (common-lisp:or qualification-type-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-qualification-type-request-qualification-type-status
                         :shape "QualificationTypeStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (test :initarg :test :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-qualification-type-request-test
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (answer-key :initarg :answer-key :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-qualification-type-request-answer-key
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (test-duration-in-seconds :initarg
                         :test-duration-in-seconds :initform common-lisp:nil
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-update-qualification-type-request-test-duration-in-seconds
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (retry-delay-in-seconds :initarg
                         :retry-delay-in-seconds :initform common-lisp:nil
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-update-qualification-type-request-retry-delay-in-seconds
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (auto-granted :initarg :auto-granted :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-update-qualification-type-request-auto-granted
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-granted-value :initarg :auto-granted-value
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-update-qualification-type-request-auto-granted-value
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-qualification-type-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-qualification-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-qualification-type-request
                    'make-update-qualification-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-qualification-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-qualification-type-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'qualification-type-id))
      (common-lisp:list
       (common-lisp:cons "QualificationTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'qualification-type-status))
      (common-lisp:list
       (common-lisp:cons "QualificationTypeStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test))
      (common-lisp:list
       (common-lisp:cons "Test"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'answer-key))
      (common-lisp:list
       (common-lisp:cons "AnswerKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'test-duration-in-seconds))
      (common-lisp:list
       (common-lisp:cons "TestDurationInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'retry-delay-in-seconds))
      (common-lisp:list
       (common-lisp:cons "RetryDelayInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-granted))
      (common-lisp:list
       (common-lisp:cons "AutoGranted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-granted-value))
      (common-lisp:list
       (common-lisp:cons "AutoGrantedValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-qualification-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-qualification-type-response common-lisp:nil
                       ((qualification-type :initarg :qualification-type
                         :initform common-lisp:nil :type
                         (common-lisp:or qualification-type common-lisp:null)
                         :accessor
                         struct-shape-update-qualification-type-response-qualification-type
                         :shape "QualificationType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-qualification-type-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-qualification-type-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-qualification-type-response
                    'make-update-qualification-type-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-qualification-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-qualification-type-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'qualification-type))
      (common-lisp:list
       (common-lisp:cons "QualificationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-qualification-type-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass worker-block common-lisp:nil
                       ((worker-id :initarg :worker-id :initform
                         common-lisp:nil :type
                         (common-lisp:or customer-id common-lisp:null)
                         :accessor struct-shape-worker-block-worker-id :shape
                         "CustomerId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (reason :initarg :reason :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-worker-block-reason :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-worker-block
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'worker-block
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'worker-block 'make-worker-block))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input worker-block))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input worker-block))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worker-id))
      (common-lisp:list
       (common-lisp:cons "WorkerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input worker-block))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype worker-block-list ()
   '(trivial-types:proper-list worker-block))
 (common-lisp:defun make-worker-block-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list worker-block))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defun accept-qualification-request
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key qualification-request-id integer-value)
   (common-lisp:declare
    (common-lisp:ignorable qualification-request-id integer-value))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-accept-qualification-request-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'mturk-requester-request aws-sdk/generator/operation::input "POST" "/"
        "AcceptQualificationRequest"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'accept-qualification-request))
(common-lisp:progn
 (common-lisp:defun approve-assignment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assignment-id requester-feedback
                     override-rejection)
   (common-lisp:declare
    (common-lisp:ignorable assignment-id requester-feedback
     override-rejection))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-approve-assignment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'mturk-requester-request aws-sdk/generator/operation::input "POST" "/"
        "ApproveAssignment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'approve-assignment))
(common-lisp:progn
 (common-lisp:defun associate-qualification-with-worker
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key qualification-type-id worker-id
                     integer-value send-notification)
   (common-lisp:declare
    (common-lisp:ignorable qualification-type-id worker-id integer-value
     send-notification))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-qualification-with-worker-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'mturk-requester-request aws-sdk/generator/operation::input "POST" "/"
        "AssociateQualificationWithWorker"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'associate-qualification-with-worker))
(common-lisp:progn
 (common-lisp:defun create-additional-assignments-for-hit
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hitid number-of-additional-assignments
                     unique-request-token)
   (common-lisp:declare
    (common-lisp:ignorable hitid number-of-additional-assignments
     unique-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-additional-assignments-for-hitrequest
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'mturk-requester-request aws-sdk/generator/operation::input "POST" "/"
        "CreateAdditionalAssignmentsForHIT"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-additional-assignments-for-hit))
(common-lisp:progn
 (common-lisp:defun create-hit
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-assignments
                     auto-approval-delay-in-seconds lifetime-in-seconds
                     assignment-duration-in-seconds reward title keywords
                     description question requester-annotation
                     qualification-requirements unique-request-token
                     assignment-review-policy hitreview-policy hitlayout-id
                     hitlayout-parameters)
   (common-lisp:declare
    (common-lisp:ignorable max-assignments auto-approval-delay-in-seconds
     lifetime-in-seconds assignment-duration-in-seconds reward title keywords
     description question requester-annotation qualification-requirements
     unique-request-token assignment-review-policy hitreview-policy
     hitlayout-id hitlayout-parameters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-hitrequest
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'mturk-requester-request aws-sdk/generator/operation::input "POST" "/"
        "CreateHIT"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-hit))
(common-lisp:progn
 (common-lisp:defun create-hittype
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-approval-delay-in-seconds
                     assignment-duration-in-seconds reward title keywords
                     description qualification-requirements)
   (common-lisp:declare
    (common-lisp:ignorable auto-approval-delay-in-seconds
     assignment-duration-in-seconds reward title keywords description
     qualification-requirements))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-hittype-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'mturk-requester-request aws-sdk/generator/operation::input "POST" "/"
        "CreateHITType"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-hittype))
(common-lisp:progn
 (common-lisp:defun create-hitwith-hittype
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hittype-id max-assignments
                     lifetime-in-seconds question requester-annotation
                     unique-request-token assignment-review-policy
                     hitreview-policy hitlayout-id hitlayout-parameters)
   (common-lisp:declare
    (common-lisp:ignorable hittype-id max-assignments lifetime-in-seconds
     question requester-annotation unique-request-token
     assignment-review-policy hitreview-policy hitlayout-id
     hitlayout-parameters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-hitwith-hittype-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'mturk-requester-request aws-sdk/generator/operation::input "POST" "/"
        "CreateHITWithHITType"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-hitwith-hittype))
(common-lisp:progn
 (common-lisp:defun create-qualification-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name keywords description
                     qualification-type-status retry-delay-in-seconds test
                     answer-key test-duration-in-seconds auto-granted
                     auto-granted-value)
   (common-lisp:declare
    (common-lisp:ignorable name keywords description qualification-type-status
     retry-delay-in-seconds test answer-key test-duration-in-seconds
     auto-granted auto-granted-value))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-qualification-type-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'mturk-requester-request aws-sdk/generator/operation::input "POST" "/"
        "CreateQualificationType"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-qualification-type))
(common-lisp:progn
 (common-lisp:defun create-worker-block
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key worker-id reason)
   (common-lisp:declare (common-lisp:ignorable worker-id reason))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-worker-block-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'mturk-requester-request aws-sdk/generator/operation::input "POST" "/"
        "CreateWorkerBlock"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-worker-block))
(common-lisp:progn
 (common-lisp:defun delete-hit
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hitid)
   (common-lisp:declare (common-lisp:ignorable hitid))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-hitrequest
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'mturk-requester-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteHIT"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-hit))
(common-lisp:progn
 (common-lisp:defun delete-qualification-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key qualification-type-id)
   (common-lisp:declare (common-lisp:ignorable qualification-type-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-qualification-type-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'mturk-requester-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteQualificationType"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-qualification-type))
(common-lisp:progn
 (common-lisp:defun delete-worker-block
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key worker-id reason)
   (common-lisp:declare (common-lisp:ignorable worker-id reason))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-worker-block-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'mturk-requester-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteWorkerBlock"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-worker-block))
(common-lisp:progn
 (common-lisp:defun disassociate-qualification-from-worker
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key worker-id qualification-type-id reason)
   (common-lisp:declare
    (common-lisp:ignorable worker-id qualification-type-id reason))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-qualification-from-worker-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'mturk-requester-request aws-sdk/generator/operation::input "POST" "/"
        "DisassociateQualificationFromWorker"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disassociate-qualification-from-worker))
(common-lisp:progn
 (common-lisp:defun get-account-balance ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'mturk-requester-request :method "POST" :path
                                "/" :operation "GetAccountBalance"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-account-balance))
(common-lisp:progn
 (common-lisp:defun get-assignment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assignment-id)
   (common-lisp:declare (common-lisp:ignorable assignment-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-assignment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'mturk-requester-request aws-sdk/generator/operation::input "POST" "/"
        "GetAssignment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-assignment))
(common-lisp:progn
 (common-lisp:defun get-file-upload-url
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assignment-id question-identifier)
   (common-lisp:declare
    (common-lisp:ignorable assignment-id question-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-file-upload-urlrequest
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'mturk-requester-request aws-sdk/generator/operation::input "POST" "/"
        "GetFileUploadURL"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-file-upload-url))
(common-lisp:progn
 (common-lisp:defun get-hit
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hitid)
   (common-lisp:declare (common-lisp:ignorable hitid))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-hitrequest
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'mturk-requester-request aws-sdk/generator/operation::input "POST" "/"
        "GetHIT"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-hit))
(common-lisp:progn
 (common-lisp:defun get-qualification-score
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key qualification-type-id worker-id)
   (common-lisp:declare
    (common-lisp:ignorable qualification-type-id worker-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-qualification-score-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'mturk-requester-request aws-sdk/generator/operation::input "POST" "/"
        "GetQualificationScore"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-qualification-score))
(common-lisp:progn
 (common-lisp:defun get-qualification-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key qualification-type-id)
   (common-lisp:declare (common-lisp:ignorable qualification-type-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-qualification-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'mturk-requester-request aws-sdk/generator/operation::input "POST" "/"
        "GetQualificationType"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-qualification-type))
(common-lisp:progn
 (common-lisp:defun list-assignments-for-hit
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hitid next-token max-results
                     assignment-statuses)
   (common-lisp:declare
    (common-lisp:ignorable hitid next-token max-results assignment-statuses))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-assignments-for-hitrequest
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'mturk-requester-request aws-sdk/generator/operation::input "POST" "/"
        "ListAssignmentsForHIT"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-assignments-for-hit))
(common-lisp:progn
 (common-lisp:defun list-bonus-payments
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hitid assignment-id next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable hitid assignment-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-bonus-payments-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'mturk-requester-request aws-sdk/generator/operation::input "POST" "/"
        "ListBonusPayments"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-bonus-payments))
(common-lisp:progn
 (common-lisp:defun list-hits
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-hits-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'mturk-requester-request aws-sdk/generator/operation::input "POST" "/"
        "ListHITs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-hits))
(common-lisp:progn
 (common-lisp:defun list-hits-for-qualification-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key qualification-type-id next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable qualification-type-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-hits-for-qualification-type-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'mturk-requester-request aws-sdk/generator/operation::input "POST" "/"
        "ListHITsForQualificationType"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-hits-for-qualification-type))
(common-lisp:progn
 (common-lisp:defun list-qualification-requests
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key qualification-type-id next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable qualification-type-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-qualification-requests-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'mturk-requester-request aws-sdk/generator/operation::input "POST" "/"
        "ListQualificationRequests"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-qualification-requests))
(common-lisp:progn
 (common-lisp:defun list-qualification-types
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key query must-be-requestable
                     must-be-owned-by-caller next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable query must-be-requestable must-be-owned-by-caller
     next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-qualification-types-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'mturk-requester-request aws-sdk/generator/operation::input "POST" "/"
        "ListQualificationTypes"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-qualification-types))
(common-lisp:progn
 (common-lisp:defun list-review-policy-results-for-hit
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hitid policy-levels retrieve-actions
                     retrieve-results next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable hitid policy-levels retrieve-actions
     retrieve-results next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-review-policy-results-for-hitrequest
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'mturk-requester-request aws-sdk/generator/operation::input "POST" "/"
        "ListReviewPolicyResultsForHIT"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-review-policy-results-for-hit))
(common-lisp:progn
 (common-lisp:defun list-reviewable-hits
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hittype-id status next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable hittype-id status next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-reviewable-hits-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'mturk-requester-request aws-sdk/generator/operation::input "POST" "/"
        "ListReviewableHITs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-reviewable-hits))
(common-lisp:progn
 (common-lisp:defun list-worker-blocks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-worker-blocks-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'mturk-requester-request aws-sdk/generator/operation::input "POST" "/"
        "ListWorkerBlocks"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-worker-blocks))
(common-lisp:progn
 (common-lisp:defun list-workers-with-qualification-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key qualification-type-id status next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable qualification-type-id status next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-workers-with-qualification-type-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'mturk-requester-request aws-sdk/generator/operation::input "POST" "/"
        "ListWorkersWithQualificationType"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-workers-with-qualification-type))
(common-lisp:progn
 (common-lisp:defun notify-workers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subject message-text worker-ids)
   (common-lisp:declare
    (common-lisp:ignorable subject message-text worker-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-notify-workers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'mturk-requester-request aws-sdk/generator/operation::input "POST" "/"
        "NotifyWorkers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'notify-workers))
(common-lisp:progn
 (common-lisp:defun reject-assignment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assignment-id requester-feedback)
   (common-lisp:declare
    (common-lisp:ignorable assignment-id requester-feedback))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reject-assignment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'mturk-requester-request aws-sdk/generator/operation::input "POST" "/"
        "RejectAssignment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'reject-assignment))
(common-lisp:progn
 (common-lisp:defun reject-qualification-request
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key qualification-request-id reason)
   (common-lisp:declare
    (common-lisp:ignorable qualification-request-id reason))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-reject-qualification-request-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'mturk-requester-request aws-sdk/generator/operation::input "POST" "/"
        "RejectQualificationRequest"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'reject-qualification-request))
(common-lisp:progn
 (common-lisp:defun send-bonus
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key worker-id bonus-amount assignment-id
                     reason unique-request-token)
   (common-lisp:declare
    (common-lisp:ignorable worker-id bonus-amount assignment-id reason
     unique-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-send-bonus-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'mturk-requester-request aws-sdk/generator/operation::input "POST" "/"
        "SendBonus"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'send-bonus))
(common-lisp:progn
 (common-lisp:defun send-test-event-notification
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key notification test-event-type)
   (common-lisp:declare (common-lisp:ignorable notification test-event-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-send-test-event-notification-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'mturk-requester-request aws-sdk/generator/operation::input "POST" "/"
        "SendTestEventNotification"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'send-test-event-notification))
(common-lisp:progn
 (common-lisp:defun update-expiration-for-hit
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hitid expire-at)
   (common-lisp:declare (common-lisp:ignorable hitid expire-at))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-expiration-for-hitrequest
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'mturk-requester-request aws-sdk/generator/operation::input "POST" "/"
        "UpdateExpirationForHIT"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-expiration-for-hit))
(common-lisp:progn
 (common-lisp:defun update-hitreview-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hitid revert)
   (common-lisp:declare (common-lisp:ignorable hitid revert))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-hitreview-status-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'mturk-requester-request aws-sdk/generator/operation::input "POST" "/"
        "UpdateHITReviewStatus"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-hitreview-status))
(common-lisp:progn
 (common-lisp:defun update-hittype-of-hit
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hitid hittype-id)
   (common-lisp:declare (common-lisp:ignorable hitid hittype-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-hittype-of-hitrequest
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'mturk-requester-request aws-sdk/generator/operation::input "POST" "/"
        "UpdateHITTypeOfHIT"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-hittype-of-hit))
(common-lisp:progn
 (common-lisp:defun update-notification-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hittype-id notification active)
   (common-lisp:declare (common-lisp:ignorable hittype-id notification active))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-notification-settings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'mturk-requester-request aws-sdk/generator/operation::input "POST" "/"
        "UpdateNotificationSettings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-notification-settings))
(common-lisp:progn
 (common-lisp:defun update-qualification-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key qualification-type-id description
                     qualification-type-status test answer-key
                     test-duration-in-seconds retry-delay-in-seconds
                     auto-granted auto-granted-value)
   (common-lisp:declare
    (common-lisp:ignorable qualification-type-id description
     qualification-type-status test answer-key test-duration-in-seconds
     retry-delay-in-seconds auto-granted auto-granted-value))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-qualification-type-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'mturk-requester-request aws-sdk/generator/operation::input "POST" "/"
        "UpdateQualificationType"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-qualification-type))
