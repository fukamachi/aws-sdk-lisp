;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/managedblockchain/api
  (:use)
  (:nicknames #:aws/managedblockchain)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/managedblockchain/api)
(common-lisp:progn
 (common-lisp:define-condition managedblockchain-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'managedblockchain-error))
(common-lisp:progn
 (common-lisp:defclass managedblockchain-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "managedblockchain"
                        :api-version "2018-09-24" :host-prefix
                        "managedblockchain" :signing-name "managedblockchain"
                        :global-host common-lisp:nil))
 (common-lisp:export 'managedblockchain-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("IllegalActionException" . illegal-action-exception)
    ("InternalServiceErrorException" . internal-service-error-exception)
    ("InvalidRequestException" . invalid-request-exception)
    ("ResourceAlreadyExistsException" . resource-already-exists-exception)
    ("ResourceLimitExceededException" . resource-limit-exceeded-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ResourceNotReadyException" . resource-not-ready-exception)
    ("ThrottlingException" . throttling-exception)
    ("TooManyTagsException" . too-many-tags-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (managedblockchain-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defclass accessor common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor struct-shape-accessor-id :shape
                         "ResourceIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or accessor-type common-lisp:null)
                         :accessor struct-shape-accessor-type :shape
                         "AccessorType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (billing-token :initarg :billing-token :initform
                         common-lisp:nil :type
                         (common-lisp:or accessor-billing-token-string
                                         common-lisp:null)
                         :accessor struct-shape-accessor-billing-token :shape
                         "AccessorBillingTokenString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or accessor-status common-lisp:null)
                         :accessor struct-shape-accessor-status :shape
                         "AccessorStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-accessor-creation-date :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn-string common-lisp:null) :accessor
                         struct-shape-accessor-arn :shape "ArnString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or output-tag-map common-lisp:null)
                         :accessor struct-shape-accessor-tags :shape
                         "OutputTagMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (network-type :initarg :network-type :initform
                         common-lisp:nil :type
                         (common-lisp:or accessor-network-type
                                         common-lisp:null)
                         :accessor struct-shape-accessor-network-type :shape
                         "AccessorNetworkType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-accessor
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'accessor
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'accessor 'make-accessor))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input accessor))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input accessor))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'billing-token))
      (common-lisp:list
       (common-lisp:cons "BillingToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-type))
      (common-lisp:list
       (common-lisp:cons "NetworkType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input accessor))
   common-lisp:nil))
(common-lisp:deftype accessor-billing-token-string () 'common-lisp:string)
(common-lisp:deftype accessor-list-max-results () 'common-lisp:integer)
(common-lisp:deftype accessor-network-type () 'common-lisp:string)
(common-lisp:deftype accessor-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass accessor-summary common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor struct-shape-accessor-summary-id :shape
                         "ResourceIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or accessor-type common-lisp:null)
                         :accessor struct-shape-accessor-summary-type :shape
                         "AccessorType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or accessor-status common-lisp:null)
                         :accessor struct-shape-accessor-summary-status :shape
                         "AccessorStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-accessor-summary-creation-date :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn-string common-lisp:null) :accessor
                         struct-shape-accessor-summary-arn :shape "ArnString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (network-type :initarg :network-type :initform
                         common-lisp:nil :type
                         (common-lisp:or accessor-network-type
                                         common-lisp:null)
                         :accessor struct-shape-accessor-summary-network-type
                         :shape "AccessorNetworkType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-accessor-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'accessor-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'accessor-summary 'make-accessor-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input accessor-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input accessor-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-type))
      (common-lisp:list
       (common-lisp:cons "NetworkType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input accessor-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype accessor-summary-list ()
   '(trivial-types:proper-list accessor-summary))
 (common-lisp:defun make-accessor-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list accessor-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype accessor-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass approval-threshold-policy common-lisp:nil
                       ((threshold-percentage :initarg :threshold-percentage
                         :initform common-lisp:nil :type
                         (common-lisp:or threshold-percentage-int
                                         common-lisp:null)
                         :accessor
                         struct-shape-approval-threshold-policy-threshold-percentage
                         :shape "ThresholdPercentageInt" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (proposal-duration-in-hours :initarg
                         :proposal-duration-in-hours :initform common-lisp:nil
                         :type
                         (common-lisp:or proposal-duration-int
                                         common-lisp:null)
                         :accessor
                         struct-shape-approval-threshold-policy-proposal-duration-in-hours
                         :shape "ProposalDurationInt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (threshold-comparator :initarg :threshold-comparator
                         :initform common-lisp:nil :type
                         (common-lisp:or threshold-comparator common-lisp:null)
                         :accessor
                         struct-shape-approval-threshold-policy-threshold-comparator
                         :shape "ThresholdComparator" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-approval-threshold-policy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'approval-threshold-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'approval-threshold-policy
                    'make-approval-threshold-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          approval-threshold-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          approval-threshold-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'threshold-percentage))
      (common-lisp:list
       (common-lisp:cons "ThresholdPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'proposal-duration-in-hours))
      (common-lisp:list
       (common-lisp:cons "ProposalDurationInHours"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'threshold-comparator))
      (common-lisp:list
       (common-lisp:cons "ThresholdComparator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          approval-threshold-policy))
   common-lisp:nil))
(common-lisp:deftype arn-string () 'common-lisp:string)
(common-lisp:deftype availability-zone-string () 'common-lisp:string)
(common-lisp:deftype client-request-token-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-accessor-input common-lisp:nil
                       ((client-request-token :initarg :client-request-token
                         :initform
                         (common-lisp:error
                          ":client-request-token is required")
                         :type
                         (common-lisp:or client-request-token-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-accessor-input-client-request-token
                         :shape "ClientRequestTokenString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (accessor-type :initarg :accessor-type :initform
                         (common-lisp:error ":accessor-type is required") :type
                         (common-lisp:or accessor-type common-lisp:null)
                         :accessor
                         struct-shape-create-accessor-input-accessor-type
                         :shape "AccessorType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or input-tag-map common-lisp:null)
                         :accessor struct-shape-create-accessor-input-tags
                         :shape "InputTagMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (network-type :initarg :network-type :initform
                         common-lisp:nil :type
                         (common-lisp:or accessor-network-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-accessor-input-network-type :shape
                         "AccessorNetworkType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-accessor-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-accessor-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-accessor-input 'make-create-accessor-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-accessor-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-accessor-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accessor-type))
      (common-lisp:list
       (common-lisp:cons "AccessorType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-type))
      (common-lisp:list
       (common-lisp:cons "NetworkType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-accessor-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-accessor-output common-lisp:nil
                       ((accessor-id :initarg :accessor-id :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor
                         struct-shape-create-accessor-output-accessor-id :shape
                         "ResourceIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (billing-token :initarg :billing-token :initform
                         common-lisp:nil :type
                         (common-lisp:or accessor-billing-token-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-accessor-output-billing-token
                         :shape "AccessorBillingTokenString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (network-type :initarg :network-type :initform
                         common-lisp:nil :type
                         (common-lisp:or accessor-network-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-accessor-output-network-type
                         :shape "AccessorNetworkType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-accessor-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-accessor-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-accessor-output 'make-create-accessor-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-accessor-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-accessor-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accessor-id))
      (common-lisp:list
       (common-lisp:cons "AccessorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'billing-token))
      (common-lisp:list
       (common-lisp:cons "BillingToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-type))
      (common-lisp:list
       (common-lisp:cons "NetworkType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-accessor-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-member-input common-lisp:nil
                       ((client-request-token :initarg :client-request-token
                         :initform
                         (common-lisp:error
                          ":client-request-token is required")
                         :type
                         (common-lisp:or client-request-token-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-member-input-client-request-token
                         :shape "ClientRequestTokenString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (invitation-id :initarg :invitation-id :initform
                         (common-lisp:error ":invitation-id is required") :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor
                         struct-shape-create-member-input-invitation-id :shape
                         "ResourceIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (network-id :initarg :network-id :initform
                         (common-lisp:error ":network-id is required") :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor struct-shape-create-member-input-network-id
                         :shape "ResourceIdString" :location "uri"
                         :location-name "networkId")
                        (member-configuration :initarg :member-configuration
                         :initform
                         (common-lisp:error
                          ":member-configuration is required")
                         :type
                         (common-lisp:or member-configuration common-lisp:null)
                         :accessor
                         struct-shape-create-member-input-member-configuration
                         :shape "MemberConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-member-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-member-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-member-input 'make-create-member-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-member-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-member-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invitation-id))
      (common-lisp:list
       (common-lisp:cons "InvitationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'member-configuration))
      (common-lisp:list
       (common-lisp:cons "MemberConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-member-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-member-output common-lisp:nil
                       ((member-id :initarg :member-id :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor struct-shape-create-member-output-member-id
                         :shape "ResourceIdString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-member-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-member-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-member-output 'make-create-member-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-member-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-member-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-id))
      (common-lisp:list
       (common-lisp:cons "MemberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-member-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-network-input common-lisp:nil
                       ((client-request-token :initarg :client-request-token
                         :initform
                         (common-lisp:error
                          ":client-request-token is required")
                         :type
                         (common-lisp:or client-request-token-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-network-input-client-request-token
                         :shape "ClientRequestTokenString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-create-network-input-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor
                         struct-shape-create-network-input-description :shape
                         "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (framework :initarg :framework :initform
                         (common-lisp:error ":framework is required") :type
                         (common-lisp:or framework common-lisp:null) :accessor
                         struct-shape-create-network-input-framework :shape
                         "Framework" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (framework-version :initarg :framework-version
                         :initform
                         (common-lisp:error ":framework-version is required")
                         :type
                         (common-lisp:or framework-version-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-network-input-framework-version
                         :shape "FrameworkVersionString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (framework-configuration :initarg
                         :framework-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or network-framework-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-network-input-framework-configuration
                         :shape "NetworkFrameworkConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (voting-policy :initarg :voting-policy :initform
                         (common-lisp:error ":voting-policy is required") :type
                         (common-lisp:or voting-policy common-lisp:null)
                         :accessor
                         struct-shape-create-network-input-voting-policy :shape
                         "VotingPolicy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (member-configuration :initarg :member-configuration
                         :initform
                         (common-lisp:error
                          ":member-configuration is required")
                         :type
                         (common-lisp:or member-configuration common-lisp:null)
                         :accessor
                         struct-shape-create-network-input-member-configuration
                         :shape "MemberConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or input-tag-map common-lisp:null)
                         :accessor struct-shape-create-network-input-tags
                         :shape "InputTagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-network-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-network-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-network-input 'make-create-network-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-network-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-network-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framework))
      (common-lisp:list
       (common-lisp:cons "Framework"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framework-version))
      (common-lisp:list
       (common-lisp:cons "FrameworkVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'framework-configuration))
      (common-lisp:list
       (common-lisp:cons "FrameworkConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'voting-policy))
      (common-lisp:list
       (common-lisp:cons "VotingPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'member-configuration))
      (common-lisp:list
       (common-lisp:cons "MemberConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-network-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-network-output common-lisp:nil
                       ((network-id :initarg :network-id :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor
                         struct-shape-create-network-output-network-id :shape
                         "ResourceIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (member-id :initarg :member-id :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor struct-shape-create-network-output-member-id
                         :shape "ResourceIdString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-network-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-network-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-network-output 'make-create-network-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-network-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-network-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-id))
      (common-lisp:list
       (common-lisp:cons "NetworkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-id))
      (common-lisp:list
       (common-lisp:cons "MemberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-network-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-node-input common-lisp:nil
                       ((client-request-token :initarg :client-request-token
                         :initform
                         (common-lisp:error
                          ":client-request-token is required")
                         :type
                         (common-lisp:or client-request-token-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-node-input-client-request-token
                         :shape "ClientRequestTokenString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (network-id :initarg :network-id :initform
                         (common-lisp:error ":network-id is required") :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor struct-shape-create-node-input-network-id
                         :shape "ResourceIdString" :location "uri"
                         :location-name "networkId")
                        (member-id :initarg :member-id :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor struct-shape-create-node-input-member-id
                         :shape "ResourceIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (node-configuration :initarg :node-configuration
                         :initform
                         (common-lisp:error ":node-configuration is required")
                         :type
                         (common-lisp:or node-configuration common-lisp:null)
                         :accessor
                         struct-shape-create-node-input-node-configuration
                         :shape "NodeConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or input-tag-map common-lisp:null)
                         :accessor struct-shape-create-node-input-tags :shape
                         "InputTagMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-node-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-node-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-node-input 'make-create-node-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-node-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-node-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-id))
      (common-lisp:list
       (common-lisp:cons "MemberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-configuration))
      (common-lisp:list
       (common-lisp:cons "NodeConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-node-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-node-output common-lisp:nil
                       ((node-id :initarg :node-id :initform common-lisp:nil
                         :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor struct-shape-create-node-output-node-id
                         :shape "ResourceIdString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-node-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-node-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-node-output 'make-create-node-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-node-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-node-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-id))
      (common-lisp:list
       (common-lisp:cons "NodeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-node-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-proposal-input common-lisp:nil
                       ((client-request-token :initarg :client-request-token
                         :initform
                         (common-lisp:error
                          ":client-request-token is required")
                         :type
                         (common-lisp:or client-request-token-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-proposal-input-client-request-token
                         :shape "ClientRequestTokenString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (network-id :initarg :network-id :initform
                         (common-lisp:error ":network-id is required") :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor
                         struct-shape-create-proposal-input-network-id :shape
                         "ResourceIdString" :location "uri" :location-name
                         "networkId")
                        (member-id :initarg :member-id :initform
                         (common-lisp:error ":member-id is required") :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor struct-shape-create-proposal-input-member-id
                         :shape "ResourceIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (actions :initarg :actions :initform
                         (common-lisp:error ":actions is required") :type
                         (common-lisp:or proposal-actions common-lisp:null)
                         :accessor struct-shape-create-proposal-input-actions
                         :shape "ProposalActions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor
                         struct-shape-create-proposal-input-description :shape
                         "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or input-tag-map common-lisp:null)
                         :accessor struct-shape-create-proposal-input-tags
                         :shape "InputTagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-proposal-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-proposal-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-proposal-input 'make-create-proposal-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-proposal-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-proposal-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-id))
      (common-lisp:list
       (common-lisp:cons "MemberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-proposal-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-proposal-output common-lisp:nil
                       ((proposal-id :initarg :proposal-id :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor
                         struct-shape-create-proposal-output-proposal-id :shape
                         "ResourceIdString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-proposal-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-proposal-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-proposal-output 'make-create-proposal-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-proposal-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-proposal-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'proposal-id))
      (common-lisp:list
       (common-lisp:cons "ProposalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-proposal-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-accessor-input common-lisp:nil
                       ((accessor-id :initarg :accessor-id :initform
                         (common-lisp:error ":accessor-id is required") :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor
                         struct-shape-delete-accessor-input-accessor-id :shape
                         "ResourceIdString" :location "uri" :location-name
                         "AccessorId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-accessor-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-accessor-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-accessor-input 'make-delete-accessor-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-accessor-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-accessor-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-accessor-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-accessor-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-accessor-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-accessor-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-accessor-output 'make-delete-accessor-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-accessor-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-accessor-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-accessor-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-member-input common-lisp:nil
                       ((network-id :initarg :network-id :initform
                         (common-lisp:error ":network-id is required") :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor struct-shape-delete-member-input-network-id
                         :shape "ResourceIdString" :location "uri"
                         :location-name "networkId")
                        (member-id :initarg :member-id :initform
                         (common-lisp:error ":member-id is required") :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor struct-shape-delete-member-input-member-id
                         :shape "ResourceIdString" :location "uri"
                         :location-name "memberId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-member-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-member-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-member-input 'make-delete-member-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-member-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-member-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-member-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-member-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-member-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-member-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-member-output 'make-delete-member-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-member-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-member-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-member-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-node-input common-lisp:nil
                       ((network-id :initarg :network-id :initform
                         (common-lisp:error ":network-id is required") :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor struct-shape-delete-node-input-network-id
                         :shape "ResourceIdString" :location "uri"
                         :location-name "networkId")
                        (member-id :initarg :member-id :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor struct-shape-delete-node-input-member-id
                         :shape "ResourceIdString" :location "querystring"
                         :location-name "memberId")
                        (node-id :initarg :node-id :initform
                         (common-lisp:error ":node-id is required") :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor struct-shape-delete-node-input-node-id
                         :shape "ResourceIdString" :location "uri"
                         :location-name "nodeId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-node-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-node-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-node-input 'make-delete-node-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-node-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-node-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-node-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-node-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-node-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-node-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-node-output 'make-delete-node-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-node-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-node-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-node-output))
   common-lisp:nil))
(common-lisp:deftype description-string () 'common-lisp:string)
(common-lisp:deftype edition () 'common-lisp:string)
(common-lisp:deftype enabled () 'common-lisp:boolean)
(common-lisp:deftype exception-message () 'common-lisp:string)
(common-lisp:deftype framework () 'common-lisp:string)
(common-lisp:deftype framework-version-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-accessor-input common-lisp:nil
                       ((accessor-id :initarg :accessor-id :initform
                         (common-lisp:error ":accessor-id is required") :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor struct-shape-get-accessor-input-accessor-id
                         :shape "ResourceIdString" :location "uri"
                         :location-name "AccessorId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-accessor-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-accessor-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-accessor-input 'make-get-accessor-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-accessor-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-accessor-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-accessor-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-accessor-output common-lisp:nil
                       ((accessor :initarg :accessor :initform common-lisp:nil
                         :type (common-lisp:or accessor common-lisp:null)
                         :accessor struct-shape-get-accessor-output-accessor
                         :shape "Accessor" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-accessor-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-accessor-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-accessor-output 'make-get-accessor-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-accessor-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-accessor-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accessor))
      (common-lisp:list
       (common-lisp:cons "Accessor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-accessor-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-member-input common-lisp:nil
                       ((network-id :initarg :network-id :initform
                         (common-lisp:error ":network-id is required") :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor struct-shape-get-member-input-network-id
                         :shape "ResourceIdString" :location "uri"
                         :location-name "networkId")
                        (member-id :initarg :member-id :initform
                         (common-lisp:error ":member-id is required") :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor struct-shape-get-member-input-member-id
                         :shape "ResourceIdString" :location "uri"
                         :location-name "memberId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-member-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-member-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-member-input 'make-get-member-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-member-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-member-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-member-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-member-output common-lisp:nil
                       ((member :initarg :member :initform common-lisp:nil
                         :type (common-lisp:or member common-lisp:null)
                         :accessor struct-shape-get-member-output-member :shape
                         "Member" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-member-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-member-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-member-output 'make-get-member-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-member-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-member-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member))
      (common-lisp:list
       (common-lisp:cons "Member"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-member-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-network-input common-lisp:nil
                       ((network-id :initarg :network-id :initform
                         (common-lisp:error ":network-id is required") :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor struct-shape-get-network-input-network-id
                         :shape "ResourceIdString" :location "uri"
                         :location-name "networkId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-network-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-network-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-network-input 'make-get-network-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-network-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-network-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-network-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-network-output common-lisp:nil
                       ((network :initarg :network :initform common-lisp:nil
                         :type (common-lisp:or network common-lisp:null)
                         :accessor struct-shape-get-network-output-network
                         :shape "Network" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-network-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-network-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-network-output 'make-get-network-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-network-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-network-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network))
      (common-lisp:list
       (common-lisp:cons "Network"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-network-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-node-input common-lisp:nil
                       ((network-id :initarg :network-id :initform
                         (common-lisp:error ":network-id is required") :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor struct-shape-get-node-input-network-id
                         :shape "ResourceIdString" :location "uri"
                         :location-name "networkId")
                        (member-id :initarg :member-id :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor struct-shape-get-node-input-member-id :shape
                         "ResourceIdString" :location "querystring"
                         :location-name "memberId")
                        (node-id :initarg :node-id :initform
                         (common-lisp:error ":node-id is required") :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor struct-shape-get-node-input-node-id :shape
                         "ResourceIdString" :location "uri" :location-name
                         "nodeId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-node-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-node-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'get-node-input 'make-get-node-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-node-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-node-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-node-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-node-output common-lisp:nil
                       ((node :initarg :node :initform common-lisp:nil :type
                         (common-lisp:or node common-lisp:null) :accessor
                         struct-shape-get-node-output-node :shape "Node"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-node-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-node-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'get-node-output 'make-get-node-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-node-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-node-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node))
      (common-lisp:list
       (common-lisp:cons "Node"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-node-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-proposal-input common-lisp:nil
                       ((network-id :initarg :network-id :initform
                         (common-lisp:error ":network-id is required") :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor struct-shape-get-proposal-input-network-id
                         :shape "ResourceIdString" :location "uri"
                         :location-name "networkId")
                        (proposal-id :initarg :proposal-id :initform
                         (common-lisp:error ":proposal-id is required") :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor struct-shape-get-proposal-input-proposal-id
                         :shape "ResourceIdString" :location "uri"
                         :location-name "proposalId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-proposal-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-proposal-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-proposal-input 'make-get-proposal-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-proposal-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-proposal-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-proposal-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-proposal-output common-lisp:nil
                       ((proposal :initarg :proposal :initform common-lisp:nil
                         :type (common-lisp:or proposal common-lisp:null)
                         :accessor struct-shape-get-proposal-output-proposal
                         :shape "Proposal" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-proposal-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-proposal-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-proposal-output 'make-get-proposal-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-proposal-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-proposal-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'proposal))
      (common-lisp:list
       (common-lisp:cons "Proposal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-proposal-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition illegal-action-exception
     (managedblockchain-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       illegal-action-exception-message)))
 (common-lisp:export
  (common-lisp:list 'illegal-action-exception
                    'illegal-action-exception-message)))
(common-lisp:progn
 (common-lisp:deftype input-tag-map () 'common-lisp:hash-table)
 (common-lisp:defun make-input-tag-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype instance-type-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition internal-service-error-exception
     (managedblockchain-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'internal-service-error-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-request-exception
     (managedblockchain-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-request-exception
                    'invalid-request-exception-message)))
(common-lisp:progn
 (common-lisp:defclass invitation common-lisp:nil
                       ((invitation-id :initarg :invitation-id :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor struct-shape-invitation-invitation-id :shape
                         "ResourceIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-invitation-creation-date :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (expiration-date :initarg :expiration-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-invitation-expiration-date :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or invitation-status common-lisp:null)
                         :accessor struct-shape-invitation-status :shape
                         "InvitationStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (network-summary :initarg :network-summary :initform
                         common-lisp:nil :type
                         (common-lisp:or network-summary common-lisp:null)
                         :accessor struct-shape-invitation-network-summary
                         :shape "NetworkSummary" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn-string common-lisp:null) :accessor
                         struct-shape-invitation-arn :shape "ArnString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-invitation
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'invitation
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'invitation 'make-invitation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input invitation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input invitation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invitation-id))
      (common-lisp:list
       (common-lisp:cons "InvitationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-date))
      (common-lisp:list
       (common-lisp:cons "ExpirationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-summary))
      (common-lisp:list
       (common-lisp:cons "NetworkSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input invitation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype invitation-list ()
   '(trivial-types:proper-list invitation))
 (common-lisp:defun make-invitation-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list invitation))
   aws-sdk/generator/shape::members))
(common-lisp:deftype invitation-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass invite-action common-lisp:nil
                       ((principal :initarg :principal :initform
                         (common-lisp:error ":principal is required") :type
                         (common-lisp:or principal-string common-lisp:null)
                         :accessor struct-shape-invite-action-principal :shape
                         "PrincipalString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-invite-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'invite-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'invite-action 'make-invite-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input invite-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input invite-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:list
       (common-lisp:cons "Principal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input invite-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype invite-action-list ()
   '(trivial-types:proper-list invite-action))
 (common-lisp:defun make-invite-action-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list invite-action))
   aws-sdk/generator/shape::members))
(common-lisp:deftype is-owned () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass list-accessors-input common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or accessor-list-max-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-accessors-input-max-results :shape
                         "AccessorListMaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor struct-shape-list-accessors-input-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (network-type :initarg :network-type :initform
                         common-lisp:nil :type
                         (common-lisp:or accessor-network-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-accessors-input-network-type :shape
                         "AccessorNetworkType" :location "querystring"
                         :location-name "networkType"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-accessors-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-accessors-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-accessors-input 'make-list-accessors-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-accessors-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-accessors-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-accessors-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-accessors-output common-lisp:nil
                       ((accessors :initarg :accessors :initform
                         common-lisp:nil :type
                         (common-lisp:or accessor-summary-list
                                         common-lisp:null)
                         :accessor struct-shape-list-accessors-output-accessors
                         :shape "AccessorSummaryList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-accessors-output-next-token :shape
                         "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-accessors-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-accessors-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-accessors-output 'make-list-accessors-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-accessors-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-accessors-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accessors))
      (common-lisp:list
       (common-lisp:cons "Accessors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-accessors-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-invitations-input common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or proposal-list-max-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-invitations-input-max-results :shape
                         "ProposalListMaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-invitations-input-next-token :shape
                         "PaginationToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-invitations-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-invitations-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-invitations-input 'make-list-invitations-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-invitations-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-invitations-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-invitations-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-invitations-output common-lisp:nil
                       ((invitations :initarg :invitations :initform
                         common-lisp:nil :type
                         (common-lisp:or invitation-list common-lisp:null)
                         :accessor
                         struct-shape-list-invitations-output-invitations
                         :shape "InvitationList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-invitations-output-next-token :shape
                         "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-invitations-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-invitations-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-invitations-output 'make-list-invitations-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-invitations-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-invitations-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invitations))
      (common-lisp:list
       (common-lisp:cons "Invitations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-invitations-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-members-input common-lisp:nil
                       ((network-id :initarg :network-id :initform
                         (common-lisp:error ":network-id is required") :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor struct-shape-list-members-input-network-id
                         :shape "ResourceIdString" :location "uri"
                         :location-name "networkId")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-members-input-name :shape "String"
                         :location "querystring" :location-name "name")
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or member-status common-lisp:null)
                         :accessor struct-shape-list-members-input-status
                         :shape "MemberStatus" :location "querystring"
                         :location-name "status")
                        (is-owned :initarg :is-owned :initform common-lisp:nil
                         :type (common-lisp:or is-owned common-lisp:null)
                         :accessor struct-shape-list-members-input-is-owned
                         :shape "IsOwned" :location "querystring"
                         :location-name "isOwned")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or member-list-max-results
                                         common-lisp:null)
                         :accessor struct-shape-list-members-input-max-results
                         :shape "MemberListMaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor struct-shape-list-members-input-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-members-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-members-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-members-input 'make-list-members-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-members-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-members-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-members-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-members-output common-lisp:nil
                       ((members :initarg :members :initform common-lisp:nil
                         :type
                         (common-lisp:or member-summary-list common-lisp:null)
                         :accessor struct-shape-list-members-output-members
                         :shape "MemberSummaryList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor struct-shape-list-members-output-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-members-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-members-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-members-output 'make-list-members-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-members-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-members-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'members))
      (common-lisp:list
       (common-lisp:cons "Members"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-members-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-networks-input common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-networks-input-name :shape "String"
                         :location "querystring" :location-name "name")
                        (framework :initarg :framework :initform
                         common-lisp:nil :type
                         (common-lisp:or framework common-lisp:null) :accessor
                         struct-shape-list-networks-input-framework :shape
                         "Framework" :location "querystring" :location-name
                         "framework")
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or network-status common-lisp:null)
                         :accessor struct-shape-list-networks-input-status
                         :shape "NetworkStatus" :location "querystring"
                         :location-name "status")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or network-list-max-results
                                         common-lisp:null)
                         :accessor struct-shape-list-networks-input-max-results
                         :shape "NetworkListMaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor struct-shape-list-networks-input-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-networks-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-networks-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-networks-input 'make-list-networks-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-networks-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-networks-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-networks-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-networks-output common-lisp:nil
                       ((networks :initarg :networks :initform common-lisp:nil
                         :type
                         (common-lisp:or network-summary-list common-lisp:null)
                         :accessor struct-shape-list-networks-output-networks
                         :shape "NetworkSummaryList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor struct-shape-list-networks-output-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-networks-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-networks-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-networks-output 'make-list-networks-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-networks-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-networks-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'networks))
      (common-lisp:list
       (common-lisp:cons "Networks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-networks-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-nodes-input common-lisp:nil
                       ((network-id :initarg :network-id :initform
                         (common-lisp:error ":network-id is required") :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor struct-shape-list-nodes-input-network-id
                         :shape "ResourceIdString" :location "uri"
                         :location-name "networkId")
                        (member-id :initarg :member-id :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor struct-shape-list-nodes-input-member-id
                         :shape "ResourceIdString" :location "querystring"
                         :location-name "memberId")
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or node-status common-lisp:null)
                         :accessor struct-shape-list-nodes-input-status :shape
                         "NodeStatus" :location "querystring" :location-name
                         "status")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or node-list-max-results
                                         common-lisp:null)
                         :accessor struct-shape-list-nodes-input-max-results
                         :shape "NodeListMaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor struct-shape-list-nodes-input-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-nodes-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-nodes-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-nodes-input 'make-list-nodes-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-nodes-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-nodes-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-nodes-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-nodes-output common-lisp:nil
                       ((nodes :initarg :nodes :initform common-lisp:nil :type
                         (common-lisp:or node-summary-list common-lisp:null)
                         :accessor struct-shape-list-nodes-output-nodes :shape
                         "NodeSummaryList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor struct-shape-list-nodes-output-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-nodes-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-nodes-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-nodes-output 'make-list-nodes-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-nodes-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-nodes-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nodes))
      (common-lisp:list
       (common-lisp:cons "Nodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-nodes-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-proposal-votes-input common-lisp:nil
                       ((network-id :initarg :network-id :initform
                         (common-lisp:error ":network-id is required") :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor
                         struct-shape-list-proposal-votes-input-network-id
                         :shape "ResourceIdString" :location "uri"
                         :location-name "networkId")
                        (proposal-id :initarg :proposal-id :initform
                         (common-lisp:error ":proposal-id is required") :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor
                         struct-shape-list-proposal-votes-input-proposal-id
                         :shape "ResourceIdString" :location "uri"
                         :location-name "proposalId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or proposal-list-max-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-proposal-votes-input-max-results
                         :shape "ProposalListMaxResults" :location
                         "querystring" :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-proposal-votes-input-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-proposal-votes-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-proposal-votes-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-proposal-votes-input
                    'make-list-proposal-votes-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-proposal-votes-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-proposal-votes-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-proposal-votes-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-proposal-votes-output common-lisp:nil
                       ((proposal-votes :initarg :proposal-votes :initform
                         common-lisp:nil :type
                         (common-lisp:or proposal-vote-list common-lisp:null)
                         :accessor
                         struct-shape-list-proposal-votes-output-proposal-votes
                         :shape "ProposalVoteList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-proposal-votes-output-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-proposal-votes-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-proposal-votes-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-proposal-votes-output
                    'make-list-proposal-votes-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-proposal-votes-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-proposal-votes-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'proposal-votes))
      (common-lisp:list
       (common-lisp:cons "ProposalVotes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-proposal-votes-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-proposals-input common-lisp:nil
                       ((network-id :initarg :network-id :initform
                         (common-lisp:error ":network-id is required") :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor struct-shape-list-proposals-input-network-id
                         :shape "ResourceIdString" :location "uri"
                         :location-name "networkId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or proposal-list-max-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-proposals-input-max-results :shape
                         "ProposalListMaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor struct-shape-list-proposals-input-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-proposals-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-proposals-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-proposals-input 'make-list-proposals-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-proposals-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-proposals-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-proposals-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-proposals-output common-lisp:nil
                       ((proposals :initarg :proposals :initform
                         common-lisp:nil :type
                         (common-lisp:or proposal-summary-list
                                         common-lisp:null)
                         :accessor struct-shape-list-proposals-output-proposals
                         :shape "ProposalSummaryList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-proposals-output-next-token :shape
                         "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-proposals-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-proposals-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-proposals-output 'make-list-proposals-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-proposals-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-proposals-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'proposals))
      (common-lisp:list
       (common-lisp:cons "Proposals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-proposals-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or arn-string common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-request-resource-arn
                         :shape "ArnString" :location "uri" :location-name
                         "resourceArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or output-tag-map common-lisp:null)
                         :accessor
                         struct-shape-list-tags-for-resource-response-tags
                         :shape "OutputTagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass log-configuration common-lisp:nil
                       ((enabled :initarg :enabled :initform common-lisp:nil
                         :type (common-lisp:or enabled common-lisp:null)
                         :accessor struct-shape-log-configuration-enabled
                         :shape "Enabled" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-log-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'log-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'log-configuration 'make-log-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input log-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input log-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input log-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass log-configurations common-lisp:nil
                       ((cloudwatch :initarg :cloudwatch :initform
                         common-lisp:nil :type
                         (common-lisp:or log-configuration common-lisp:null)
                         :accessor struct-shape-log-configurations-cloudwatch
                         :shape "LogConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-log-configurations
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'log-configurations
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'log-configurations 'make-log-configurations))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input log-configurations))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input log-configurations))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cloudwatch))
      (common-lisp:list
       (common-lisp:cons "Cloudwatch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input log-configurations))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass member common-lisp:nil
                       ((network-id :initarg :network-id :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor struct-shape-member-network-id :shape
                         "ResourceIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor struct-shape-member-id :shape
                         "ResourceIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or network-member-name-string
                                         common-lisp:null)
                         :accessor struct-shape-member-name :shape
                         "NetworkMemberNameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor struct-shape-member-description :shape
                         "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (framework-attributes :initarg :framework-attributes
                         :initform common-lisp:nil :type
                         (common-lisp:or member-framework-attributes
                                         common-lisp:null)
                         :accessor struct-shape-member-framework-attributes
                         :shape "MemberFrameworkAttributes" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (log-publishing-configuration :initarg
                         :log-publishing-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or member-log-publishing-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-member-log-publishing-configuration
                         :shape "MemberLogPublishingConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or member-status common-lisp:null)
                         :accessor struct-shape-member-status :shape
                         "MemberStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-member-creation-date :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or output-tag-map common-lisp:null)
                         :accessor struct-shape-member-tags :shape
                         "OutputTagMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn-string common-lisp:null) :accessor
                         struct-shape-member-arn :shape "ArnString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (kms-key-arn :initarg :kms-key-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-member-kms-key-arn :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-member
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'member
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'member 'make-member))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input member))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input member))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-id))
      (common-lisp:list
       (common-lisp:cons "NetworkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'framework-attributes))
      (common-lisp:list
       (common-lisp:cons "FrameworkAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-publishing-configuration))
      (common-lisp:list
       (common-lisp:cons "LogPublishingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input member))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass member-configuration common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or network-member-name-string
                                         common-lisp:null)
                         :accessor struct-shape-member-configuration-name
                         :shape "NetworkMemberNameString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor
                         struct-shape-member-configuration-description :shape
                         "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (framework-configuration :initarg
                         :framework-configuration :initform
                         (common-lisp:error
                          ":framework-configuration is required")
                         :type
                         (common-lisp:or member-framework-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-member-configuration-framework-configuration
                         :shape "MemberFrameworkConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (log-publishing-configuration :initarg
                         :log-publishing-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or member-log-publishing-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-member-configuration-log-publishing-configuration
                         :shape "MemberLogPublishingConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or input-tag-map common-lisp:null)
                         :accessor struct-shape-member-configuration-tags
                         :shape "InputTagMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-arn :initarg :kms-key-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn-string common-lisp:null) :accessor
                         struct-shape-member-configuration-kms-key-arn :shape
                         "ArnString" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-member-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'member-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'member-configuration 'make-member-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input member-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input member-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'framework-configuration))
      (common-lisp:list
       (common-lisp:cons "FrameworkConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-publishing-configuration))
      (common-lisp:list
       (common-lisp:cons "LogPublishingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input member-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass member-fabric-attributes common-lisp:nil
                       ((admin-username :initarg :admin-username :initform
                         common-lisp:nil :type
                         (common-lisp:or username-string common-lisp:null)
                         :accessor
                         struct-shape-member-fabric-attributes-admin-username
                         :shape "UsernameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ca-endpoint :initarg :ca-endpoint :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-member-fabric-attributes-ca-endpoint
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-member-fabric-attributes
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'member-fabric-attributes
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'member-fabric-attributes 'make-member-fabric-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          member-fabric-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          member-fabric-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-username))
      (common-lisp:list
       (common-lisp:cons "AdminUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ca-endpoint))
      (common-lisp:list
       (common-lisp:cons "CaEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          member-fabric-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass member-fabric-configuration common-lisp:nil
                       ((admin-username :initarg :admin-username :initform
                         (common-lisp:error ":admin-username is required")
                         :type
                         (common-lisp:or username-string common-lisp:null)
                         :accessor
                         struct-shape-member-fabric-configuration-admin-username
                         :shape "UsernameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (admin-password :initarg :admin-password :initform
                         (common-lisp:error ":admin-password is required")
                         :type
                         (common-lisp:or password-string common-lisp:null)
                         :accessor
                         struct-shape-member-fabric-configuration-admin-password
                         :shape "PasswordString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-member-fabric-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'member-fabric-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'member-fabric-configuration
                    'make-member-fabric-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          member-fabric-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          member-fabric-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-username))
      (common-lisp:list
       (common-lisp:cons "AdminUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-password))
      (common-lisp:list
       (common-lisp:cons "AdminPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          member-fabric-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass member-fabric-log-publishing-configuration
                       common-lisp:nil
                       ((ca-logs :initarg :ca-logs :initform common-lisp:nil
                         :type
                         (common-lisp:or log-configurations common-lisp:null)
                         :accessor
                         struct-shape-member-fabric-log-publishing-configuration-ca-logs
                         :shape "LogConfigurations" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-member-fabric-log-publishing-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'member-fabric-log-publishing-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'member-fabric-log-publishing-configuration
                    'make-member-fabric-log-publishing-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          member-fabric-log-publishing-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          member-fabric-log-publishing-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ca-logs))
      (common-lisp:list
       (common-lisp:cons "CaLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          member-fabric-log-publishing-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass member-framework-attributes common-lisp:nil
                       ((fabric :initarg :fabric :initform common-lisp:nil
                         :type
                         (common-lisp:or member-fabric-attributes
                                         common-lisp:null)
                         :accessor
                         struct-shape-member-framework-attributes-fabric :shape
                         "MemberFabricAttributes" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-member-framework-attributes
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'member-framework-attributes
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'member-framework-attributes
                    'make-member-framework-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          member-framework-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          member-framework-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fabric))
      (common-lisp:list
       (common-lisp:cons "Fabric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          member-framework-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass member-framework-configuration common-lisp:nil
                       ((fabric :initarg :fabric :initform common-lisp:nil
                         :type
                         (common-lisp:or member-fabric-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-member-framework-configuration-fabric
                         :shape "MemberFabricConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-member-framework-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'member-framework-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'member-framework-configuration
                    'make-member-framework-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          member-framework-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          member-framework-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fabric))
      (common-lisp:list
       (common-lisp:cons "Fabric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          member-framework-configuration))
   common-lisp:nil))
(common-lisp:deftype member-list-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass member-log-publishing-configuration common-lisp:nil
                       ((fabric :initarg :fabric :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          member-fabric-log-publishing-configuration
                          common-lisp:null)
                         :accessor
                         struct-shape-member-log-publishing-configuration-fabric
                         :shape "MemberFabricLogPublishingConfiguration"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-member-log-publishing-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'member-log-publishing-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'member-log-publishing-configuration
                    'make-member-log-publishing-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          member-log-publishing-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          member-log-publishing-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fabric))
      (common-lisp:list
       (common-lisp:cons "Fabric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          member-log-publishing-configuration))
   common-lisp:nil))
(common-lisp:deftype member-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass member-summary common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor struct-shape-member-summary-id :shape
                         "ResourceIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or network-member-name-string
                                         common-lisp:null)
                         :accessor struct-shape-member-summary-name :shape
                         "NetworkMemberNameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor struct-shape-member-summary-description
                         :shape "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or member-status common-lisp:null)
                         :accessor struct-shape-member-summary-status :shape
                         "MemberStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-member-summary-creation-date :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (is-owned :initarg :is-owned :initform common-lisp:nil
                         :type (common-lisp:or is-owned common-lisp:null)
                         :accessor struct-shape-member-summary-is-owned :shape
                         "IsOwned" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn-string common-lisp:null) :accessor
                         struct-shape-member-summary-arn :shape "ArnString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-member-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'member-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'member-summary 'make-member-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input member-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input member-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-owned))
      (common-lisp:list
       (common-lisp:cons "IsOwned"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input member-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype member-summary-list ()
   '(trivial-types:proper-list member-summary))
 (common-lisp:defun make-member-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list member-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype name-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass network common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor struct-shape-network-id :shape
                         "ResourceIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-network-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor struct-shape-network-description :shape
                         "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (framework :initarg :framework :initform
                         common-lisp:nil :type
                         (common-lisp:or framework common-lisp:null) :accessor
                         struct-shape-network-framework :shape "Framework"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (framework-version :initarg :framework-version
                         :initform common-lisp:nil :type
                         (common-lisp:or framework-version-string
                                         common-lisp:null)
                         :accessor struct-shape-network-framework-version
                         :shape "FrameworkVersionString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (framework-attributes :initarg :framework-attributes
                         :initform common-lisp:nil :type
                         (common-lisp:or network-framework-attributes
                                         common-lisp:null)
                         :accessor struct-shape-network-framework-attributes
                         :shape "NetworkFrameworkAttributes" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (vpc-endpoint-service-name :initarg
                         :vpc-endpoint-service-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-network-vpc-endpoint-service-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (voting-policy :initarg :voting-policy :initform
                         common-lisp:nil :type
                         (common-lisp:or voting-policy common-lisp:null)
                         :accessor struct-shape-network-voting-policy :shape
                         "VotingPolicy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or network-status common-lisp:null)
                         :accessor struct-shape-network-status :shape
                         "NetworkStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-network-creation-date :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or output-tag-map common-lisp:null)
                         :accessor struct-shape-network-tags :shape
                         "OutputTagMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn-string common-lisp:null) :accessor
                         struct-shape-network-arn :shape "ArnString" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-network
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'network
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'network 'make-network))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input network))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input network))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framework))
      (common-lisp:list
       (common-lisp:cons "Framework"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framework-version))
      (common-lisp:list
       (common-lisp:cons "FrameworkVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'framework-attributes))
      (common-lisp:list
       (common-lisp:cons "FrameworkAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-endpoint-service-name))
      (common-lisp:list
       (common-lisp:cons "VpcEndpointServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'voting-policy))
      (common-lisp:list
       (common-lisp:cons "VotingPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input network))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass network-ethereum-attributes common-lisp:nil
                       ((chain-id :initarg :chain-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-network-ethereum-attributes-chain-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-network-ethereum-attributes
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'network-ethereum-attributes
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'network-ethereum-attributes
                    'make-network-ethereum-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-ethereum-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-ethereum-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chain-id))
      (common-lisp:list
       (common-lisp:cons "ChainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-ethereum-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass network-fabric-attributes common-lisp:nil
                       ((ordering-service-endpoint :initarg
                         :ordering-service-endpoint :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-network-fabric-attributes-ordering-service-endpoint
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (edition :initarg :edition :initform common-lisp:nil
                         :type (common-lisp:or edition common-lisp:null)
                         :accessor
                         struct-shape-network-fabric-attributes-edition :shape
                         "Edition" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-network-fabric-attributes
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'network-fabric-attributes
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'network-fabric-attributes
                    'make-network-fabric-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-fabric-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-fabric-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ordering-service-endpoint))
      (common-lisp:list
       (common-lisp:cons "OrderingServiceEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'edition))
      (common-lisp:list
       (common-lisp:cons "Edition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-fabric-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass network-fabric-configuration common-lisp:nil
                       ((edition :initarg :edition :initform
                         (common-lisp:error ":edition is required") :type
                         (common-lisp:or edition common-lisp:null) :accessor
                         struct-shape-network-fabric-configuration-edition
                         :shape "Edition" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-network-fabric-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'network-fabric-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'network-fabric-configuration
                    'make-network-fabric-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-fabric-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-fabric-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'edition))
      (common-lisp:list
       (common-lisp:cons "Edition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-fabric-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass network-framework-attributes common-lisp:nil
                       ((fabric :initarg :fabric :initform common-lisp:nil
                         :type
                         (common-lisp:or network-fabric-attributes
                                         common-lisp:null)
                         :accessor
                         struct-shape-network-framework-attributes-fabric
                         :shape "NetworkFabricAttributes" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ethereum :initarg :ethereum :initform common-lisp:nil
                         :type
                         (common-lisp:or network-ethereum-attributes
                                         common-lisp:null)
                         :accessor
                         struct-shape-network-framework-attributes-ethereum
                         :shape "NetworkEthereumAttributes" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-network-framework-attributes
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'network-framework-attributes
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'network-framework-attributes
                    'make-network-framework-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-framework-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-framework-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fabric))
      (common-lisp:list
       (common-lisp:cons "Fabric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ethereum))
      (common-lisp:list
       (common-lisp:cons "Ethereum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-framework-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass network-framework-configuration common-lisp:nil
                       ((fabric :initarg :fabric :initform common-lisp:nil
                         :type
                         (common-lisp:or network-fabric-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-network-framework-configuration-fabric
                         :shape "NetworkFabricConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-network-framework-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'network-framework-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'network-framework-configuration
                    'make-network-framework-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-framework-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-framework-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fabric))
      (common-lisp:list
       (common-lisp:cons "Fabric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-framework-configuration))
   common-lisp:nil))
(common-lisp:deftype network-list-max-results () 'common-lisp:integer)
(common-lisp:deftype network-member-name-string () 'common-lisp:string)
(common-lisp:deftype network-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass network-summary common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor struct-shape-network-summary-id :shape
                         "ResourceIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-network-summary-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor struct-shape-network-summary-description
                         :shape "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (framework :initarg :framework :initform
                         common-lisp:nil :type
                         (common-lisp:or framework common-lisp:null) :accessor
                         struct-shape-network-summary-framework :shape
                         "Framework" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (framework-version :initarg :framework-version
                         :initform common-lisp:nil :type
                         (common-lisp:or framework-version-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-network-summary-framework-version :shape
                         "FrameworkVersionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or network-status common-lisp:null)
                         :accessor struct-shape-network-summary-status :shape
                         "NetworkStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-network-summary-creation-date :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn-string common-lisp:null) :accessor
                         struct-shape-network-summary-arn :shape "ArnString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-network-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'network-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'network-summary 'make-network-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input network-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input network-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framework))
      (common-lisp:list
       (common-lisp:cons "Framework"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framework-version))
      (common-lisp:list
       (common-lisp:cons "FrameworkVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input network-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype network-summary-list ()
   '(trivial-types:proper-list network-summary))
 (common-lisp:defun make-network-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list network-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass node common-lisp:nil
                       ((network-id :initarg :network-id :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor struct-shape-node-network-id :shape
                         "ResourceIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (member-id :initarg :member-id :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor struct-shape-node-member-id :shape
                         "ResourceIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor struct-shape-node-id :shape
                         "ResourceIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-type :initarg :instance-type :initform
                         common-lisp:nil :type
                         (common-lisp:or instance-type-string common-lisp:null)
                         :accessor struct-shape-node-instance-type :shape
                         "InstanceTypeString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (availability-zone :initarg :availability-zone
                         :initform common-lisp:nil :type
                         (common-lisp:or availability-zone-string
                                         common-lisp:null)
                         :accessor struct-shape-node-availability-zone :shape
                         "AvailabilityZoneString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (framework-attributes :initarg :framework-attributes
                         :initform common-lisp:nil :type
                         (common-lisp:or node-framework-attributes
                                         common-lisp:null)
                         :accessor struct-shape-node-framework-attributes
                         :shape "NodeFrameworkAttributes" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (log-publishing-configuration :initarg
                         :log-publishing-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or node-log-publishing-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-node-log-publishing-configuration :shape
                         "NodeLogPublishingConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (state-db :initarg :state-db :initform common-lisp:nil
                         :type (common-lisp:or state-dbtype common-lisp:null)
                         :accessor struct-shape-node-state-db :shape
                         "StateDBType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or node-status common-lisp:null)
                         :accessor struct-shape-node-status :shape "NodeStatus"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-node-creation-date :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or output-tag-map common-lisp:null)
                         :accessor struct-shape-node-tags :shape "OutputTagMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn-string common-lisp:null) :accessor
                         struct-shape-node-arn :shape "ArnString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (kms-key-arn :initarg :kms-key-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-node-kms-key-arn :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-node (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'node
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'node 'make-node))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input node))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input node))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-id))
      (common-lisp:list
       (common-lisp:cons "NetworkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-id))
      (common-lisp:list
       (common-lisp:cons "MemberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'framework-attributes))
      (common-lisp:list
       (common-lisp:cons "FrameworkAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-publishing-configuration))
      (common-lisp:list
       (common-lisp:cons "LogPublishingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-db))
      (common-lisp:list
       (common-lisp:cons "StateDB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input node))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass node-configuration common-lisp:nil
                       ((instance-type :initarg :instance-type :initform
                         (common-lisp:error ":instance-type is required") :type
                         (common-lisp:or instance-type-string common-lisp:null)
                         :accessor
                         struct-shape-node-configuration-instance-type :shape
                         "InstanceTypeString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (availability-zone :initarg :availability-zone
                         :initform common-lisp:nil :type
                         (common-lisp:or availability-zone-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-node-configuration-availability-zone
                         :shape "AvailabilityZoneString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (log-publishing-configuration :initarg
                         :log-publishing-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or node-log-publishing-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-node-configuration-log-publishing-configuration
                         :shape "NodeLogPublishingConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (state-db :initarg :state-db :initform common-lisp:nil
                         :type (common-lisp:or state-dbtype common-lisp:null)
                         :accessor struct-shape-node-configuration-state-db
                         :shape "StateDBType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-node-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'node-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'node-configuration 'make-node-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input node-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input node-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-publishing-configuration))
      (common-lisp:list
       (common-lisp:cons "LogPublishingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-db))
      (common-lisp:list
       (common-lisp:cons "StateDB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input node-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass node-ethereum-attributes common-lisp:nil
                       ((http-endpoint :initarg :http-endpoint :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-node-ethereum-attributes-http-endpoint
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (web-socket-endpoint :initarg :web-socket-endpoint
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-node-ethereum-attributes-web-socket-endpoint
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-node-ethereum-attributes
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'node-ethereum-attributes
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'node-ethereum-attributes 'make-node-ethereum-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          node-ethereum-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          node-ethereum-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-endpoint))
      (common-lisp:list
       (common-lisp:cons "HttpEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web-socket-endpoint))
      (common-lisp:list
       (common-lisp:cons "WebSocketEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          node-ethereum-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass node-fabric-attributes common-lisp:nil
                       ((peer-endpoint :initarg :peer-endpoint :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-node-fabric-attributes-peer-endpoint
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (peer-event-endpoint :initarg :peer-event-endpoint
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-node-fabric-attributes-peer-event-endpoint
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-node-fabric-attributes
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'node-fabric-attributes
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'node-fabric-attributes 'make-node-fabric-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          node-fabric-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          node-fabric-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'peer-endpoint))
      (common-lisp:list
       (common-lisp:cons "PeerEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'peer-event-endpoint))
      (common-lisp:list
       (common-lisp:cons "PeerEventEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          node-fabric-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass node-fabric-log-publishing-configuration common-lisp:nil
                       ((chaincode-logs :initarg :chaincode-logs :initform
                         common-lisp:nil :type
                         (common-lisp:or log-configurations common-lisp:null)
                         :accessor
                         struct-shape-node-fabric-log-publishing-configuration-chaincode-logs
                         :shape "LogConfigurations" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (peer-logs :initarg :peer-logs :initform
                         common-lisp:nil :type
                         (common-lisp:or log-configurations common-lisp:null)
                         :accessor
                         struct-shape-node-fabric-log-publishing-configuration-peer-logs
                         :shape "LogConfigurations" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-node-fabric-log-publishing-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'node-fabric-log-publishing-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'node-fabric-log-publishing-configuration
                    'make-node-fabric-log-publishing-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          node-fabric-log-publishing-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          node-fabric-log-publishing-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chaincode-logs))
      (common-lisp:list
       (common-lisp:cons "ChaincodeLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'peer-logs))
      (common-lisp:list
       (common-lisp:cons "PeerLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          node-fabric-log-publishing-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass node-framework-attributes common-lisp:nil
                       ((fabric :initarg :fabric :initform common-lisp:nil
                         :type
                         (common-lisp:or node-fabric-attributes
                                         common-lisp:null)
                         :accessor
                         struct-shape-node-framework-attributes-fabric :shape
                         "NodeFabricAttributes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ethereum :initarg :ethereum :initform common-lisp:nil
                         :type
                         (common-lisp:or node-ethereum-attributes
                                         common-lisp:null)
                         :accessor
                         struct-shape-node-framework-attributes-ethereum :shape
                         "NodeEthereumAttributes" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-node-framework-attributes
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'node-framework-attributes
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'node-framework-attributes
                    'make-node-framework-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          node-framework-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          node-framework-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fabric))
      (common-lisp:list
       (common-lisp:cons "Fabric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ethereum))
      (common-lisp:list
       (common-lisp:cons "Ethereum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          node-framework-attributes))
   common-lisp:nil))
(common-lisp:deftype node-list-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass node-log-publishing-configuration common-lisp:nil
                       ((fabric :initarg :fabric :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          node-fabric-log-publishing-configuration
                          common-lisp:null)
                         :accessor
                         struct-shape-node-log-publishing-configuration-fabric
                         :shape "NodeFabricLogPublishingConfiguration"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-node-log-publishing-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'node-log-publishing-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'node-log-publishing-configuration
                    'make-node-log-publishing-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          node-log-publishing-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          node-log-publishing-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fabric))
      (common-lisp:list
       (common-lisp:cons "Fabric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          node-log-publishing-configuration))
   common-lisp:nil))
(common-lisp:deftype node-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass node-summary common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor struct-shape-node-summary-id :shape
                         "ResourceIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or node-status common-lisp:null)
                         :accessor struct-shape-node-summary-status :shape
                         "NodeStatus" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-node-summary-creation-date :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (availability-zone :initarg :availability-zone
                         :initform common-lisp:nil :type
                         (common-lisp:or availability-zone-string
                                         common-lisp:null)
                         :accessor struct-shape-node-summary-availability-zone
                         :shape "AvailabilityZoneString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (instance-type :initarg :instance-type :initform
                         common-lisp:nil :type
                         (common-lisp:or instance-type-string common-lisp:null)
                         :accessor struct-shape-node-summary-instance-type
                         :shape "InstanceTypeString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn-string common-lisp:null) :accessor
                         struct-shape-node-summary-arn :shape "ArnString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-node-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'node-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'node-summary 'make-node-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input node-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input node-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input node-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype node-summary-list ()
   '(trivial-types:proper-list node-summary))
 (common-lisp:defun make-node-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list node-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype output-tag-map () 'common-lisp:hash-table)
 (common-lisp:defun make-output-tag-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:deftype password-string () 'common-lisp:string)
(common-lisp:deftype principal-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass proposal common-lisp:nil
                       ((proposal-id :initarg :proposal-id :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor struct-shape-proposal-proposal-id :shape
                         "ResourceIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (network-id :initarg :network-id :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor struct-shape-proposal-network-id :shape
                         "ResourceIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor struct-shape-proposal-description :shape
                         "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (actions :initarg :actions :initform common-lisp:nil
                         :type
                         (common-lisp:or proposal-actions common-lisp:null)
                         :accessor struct-shape-proposal-actions :shape
                         "ProposalActions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (proposed-by-member-id :initarg :proposed-by-member-id
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor struct-shape-proposal-proposed-by-member-id
                         :shape "ResourceIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (proposed-by-member-name :initarg
                         :proposed-by-member-name :initform common-lisp:nil
                         :type
                         (common-lisp:or network-member-name-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-proposal-proposed-by-member-name :shape
                         "NetworkMemberNameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or proposal-status common-lisp:null)
                         :accessor struct-shape-proposal-status :shape
                         "ProposalStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-proposal-creation-date :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (expiration-date :initarg :expiration-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-proposal-expiration-date :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (yes-vote-count :initarg :yes-vote-count :initform
                         common-lisp:nil :type
                         (common-lisp:or vote-count common-lisp:null) :accessor
                         struct-shape-proposal-yes-vote-count :shape
                         "VoteCount" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (no-vote-count :initarg :no-vote-count :initform
                         common-lisp:nil :type
                         (common-lisp:or vote-count common-lisp:null) :accessor
                         struct-shape-proposal-no-vote-count :shape "VoteCount"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (outstanding-vote-count :initarg
                         :outstanding-vote-count :initform common-lisp:nil
                         :type (common-lisp:or vote-count common-lisp:null)
                         :accessor struct-shape-proposal-outstanding-vote-count
                         :shape "VoteCount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or output-tag-map common-lisp:null)
                         :accessor struct-shape-proposal-tags :shape
                         "OutputTagMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn-string common-lisp:null) :accessor
                         struct-shape-proposal-arn :shape "ArnString" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-proposal
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'proposal
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'proposal 'make-proposal))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input proposal))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input proposal))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'proposal-id))
      (common-lisp:list
       (common-lisp:cons "ProposalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-id))
      (common-lisp:list
       (common-lisp:cons "NetworkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'proposed-by-member-id))
      (common-lisp:list
       (common-lisp:cons "ProposedByMemberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'proposed-by-member-name))
      (common-lisp:list
       (common-lisp:cons "ProposedByMemberName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-date))
      (common-lisp:list
       (common-lisp:cons "ExpirationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'yes-vote-count))
      (common-lisp:list
       (common-lisp:cons "YesVoteCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'no-vote-count))
      (common-lisp:list
       (common-lisp:cons "NoVoteCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'outstanding-vote-count))
      (common-lisp:list
       (common-lisp:cons "OutstandingVoteCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input proposal))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass proposal-actions common-lisp:nil
                       ((invitations :initarg :invitations :initform
                         common-lisp:nil :type
                         (common-lisp:or invite-action-list common-lisp:null)
                         :accessor struct-shape-proposal-actions-invitations
                         :shape "InviteActionList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (removals :initarg :removals :initform common-lisp:nil
                         :type
                         (common-lisp:or remove-action-list common-lisp:null)
                         :accessor struct-shape-proposal-actions-removals
                         :shape "RemoveActionList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-proposal-actions
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'proposal-actions
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'proposal-actions 'make-proposal-actions))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input proposal-actions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input proposal-actions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invitations))
      (common-lisp:list
       (common-lisp:cons "Invitations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'removals))
      (common-lisp:list
       (common-lisp:cons "Removals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input proposal-actions))
   common-lisp:nil))
(common-lisp:deftype proposal-duration-int () 'common-lisp:integer)
(common-lisp:deftype proposal-list-max-results () 'common-lisp:integer)
(common-lisp:deftype proposal-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass proposal-summary common-lisp:nil
                       ((proposal-id :initarg :proposal-id :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor struct-shape-proposal-summary-proposal-id
                         :shape "ResourceIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor struct-shape-proposal-summary-description
                         :shape "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (proposed-by-member-id :initarg :proposed-by-member-id
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor
                         struct-shape-proposal-summary-proposed-by-member-id
                         :shape "ResourceIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (proposed-by-member-name :initarg
                         :proposed-by-member-name :initform common-lisp:nil
                         :type
                         (common-lisp:or network-member-name-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-proposal-summary-proposed-by-member-name
                         :shape "NetworkMemberNameString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or proposal-status common-lisp:null)
                         :accessor struct-shape-proposal-summary-status :shape
                         "ProposalStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-proposal-summary-creation-date :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (expiration-date :initarg :expiration-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-proposal-summary-expiration-date :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn-string common-lisp:null) :accessor
                         struct-shape-proposal-summary-arn :shape "ArnString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-proposal-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'proposal-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'proposal-summary 'make-proposal-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input proposal-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input proposal-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'proposal-id))
      (common-lisp:list
       (common-lisp:cons "ProposalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'proposed-by-member-id))
      (common-lisp:list
       (common-lisp:cons "ProposedByMemberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'proposed-by-member-name))
      (common-lisp:list
       (common-lisp:cons "ProposedByMemberName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-date))
      (common-lisp:list
       (common-lisp:cons "ExpirationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input proposal-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype proposal-summary-list ()
   '(trivial-types:proper-list proposal-summary))
 (common-lisp:defun make-proposal-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list proposal-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype proposal-vote-list ()
   '(trivial-types:proper-list vote-summary))
 (common-lisp:defun make-proposal-vote-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vote-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass reject-invitation-input common-lisp:nil
                       ((invitation-id :initarg :invitation-id :initform
                         (common-lisp:error ":invitation-id is required") :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor
                         struct-shape-reject-invitation-input-invitation-id
                         :shape "ResourceIdString" :location "uri"
                         :location-name "invitationId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reject-invitation-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reject-invitation-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reject-invitation-input 'make-reject-invitation-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reject-invitation-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reject-invitation-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reject-invitation-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reject-invitation-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reject-invitation-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reject-invitation-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reject-invitation-output 'make-reject-invitation-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reject-invitation-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reject-invitation-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reject-invitation-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-action common-lisp:nil
                       ((member-id :initarg :member-id :initform
                         (common-lisp:error ":member-id is required") :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor struct-shape-remove-action-member-id :shape
                         "ResourceIdString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'remove-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'remove-action 'make-remove-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input remove-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input remove-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-id))
      (common-lisp:list
       (common-lisp:cons "MemberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input remove-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype remove-action-list ()
   '(trivial-types:proper-list remove-action))
 (common-lisp:defun make-remove-action-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list remove-action))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition resource-already-exists-exception
     (managedblockchain-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-already-exists-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-already-exists-exception
                    'resource-already-exists-exception-message)))
(common-lisp:deftype resource-id-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-limit-exceeded-exception
     (managedblockchain-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-limit-exceeded-exception
                    'resource-limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (managedblockchain-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-name :initarg :resource-name :initform common-lisp:nil :reader
       resource-not-found-exception-resource-name)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-name)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-ready-exception
     (managedblockchain-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-ready-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-ready-exception
                    'resource-not-ready-exception-message)))
(common-lisp:deftype state-dbtype () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or arn-string common-lisp:null) :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "ArnString" :location "uri" :location-name
                         "resourceArn")
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or input-tag-map common-lisp:null)
                         :accessor struct-shape-tag-resource-request-tags
                         :shape "InputTagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype threshold-comparator () 'common-lisp:string)
(common-lisp:deftype threshold-percentage-int () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (managedblockchain-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'throttling-exception)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition too-many-tags-exception
     (managedblockchain-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-tags-exception-message)
      (resource-name :initarg :resource-name :initform common-lisp:nil :reader
       too-many-tags-exception-resource-name)))
 (common-lisp:export
  (common-lisp:list 'too-many-tags-exception 'too-many-tags-exception-message
                    'too-many-tags-exception-resource-name)))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or arn-string common-lisp:null) :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "ArnString" :location "uri" :location-name
                         "resourceArn")
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tag-keys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-untag-resource-request-tag-keys
                         :shape "TagKeyList" :location "querystring"
                         :location-name "tagKeys"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-member-input common-lisp:nil
                       ((network-id :initarg :network-id :initform
                         (common-lisp:error ":network-id is required") :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor struct-shape-update-member-input-network-id
                         :shape "ResourceIdString" :location "uri"
                         :location-name "networkId")
                        (member-id :initarg :member-id :initform
                         (common-lisp:error ":member-id is required") :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor struct-shape-update-member-input-member-id
                         :shape "ResourceIdString" :location "uri"
                         :location-name "memberId")
                        (log-publishing-configuration :initarg
                         :log-publishing-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or member-log-publishing-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-member-input-log-publishing-configuration
                         :shape "MemberLogPublishingConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-member-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-member-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-member-input 'make-update-member-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-member-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-member-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-publishing-configuration))
      (common-lisp:list
       (common-lisp:cons "LogPublishingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-member-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-member-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-member-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-member-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-member-output 'make-update-member-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-member-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-member-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-member-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-node-input common-lisp:nil
                       ((network-id :initarg :network-id :initform
                         (common-lisp:error ":network-id is required") :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor struct-shape-update-node-input-network-id
                         :shape "ResourceIdString" :location "uri"
                         :location-name "networkId")
                        (member-id :initarg :member-id :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor struct-shape-update-node-input-member-id
                         :shape "ResourceIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (node-id :initarg :node-id :initform
                         (common-lisp:error ":node-id is required") :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor struct-shape-update-node-input-node-id
                         :shape "ResourceIdString" :location "uri"
                         :location-name "nodeId")
                        (log-publishing-configuration :initarg
                         :log-publishing-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or node-log-publishing-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-node-input-log-publishing-configuration
                         :shape "NodeLogPublishingConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-node-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-node-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-node-input 'make-update-node-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-node-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-node-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-id))
      (common-lisp:list
       (common-lisp:cons "MemberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-publishing-configuration))
      (common-lisp:list
       (common-lisp:cons "LogPublishingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-node-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-node-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-node-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-node-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-node-output 'make-update-node-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-node-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-node-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-node-output))
   common-lisp:nil))
(common-lisp:deftype username-string () 'common-lisp:string)
(common-lisp:deftype vote-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass vote-on-proposal-input common-lisp:nil
                       ((network-id :initarg :network-id :initform
                         (common-lisp:error ":network-id is required") :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor
                         struct-shape-vote-on-proposal-input-network-id :shape
                         "ResourceIdString" :location "uri" :location-name
                         "networkId")
                        (proposal-id :initarg :proposal-id :initform
                         (common-lisp:error ":proposal-id is required") :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor
                         struct-shape-vote-on-proposal-input-proposal-id :shape
                         "ResourceIdString" :location "uri" :location-name
                         "proposalId")
                        (voter-member-id :initarg :voter-member-id :initform
                         (common-lisp:error ":voter-member-id is required")
                         :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor
                         struct-shape-vote-on-proposal-input-voter-member-id
                         :shape "ResourceIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vote :initarg :vote :initform
                         (common-lisp:error ":vote is required") :type
                         (common-lisp:or vote-value common-lisp:null) :accessor
                         struct-shape-vote-on-proposal-input-vote :shape
                         "VoteValue" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-vote-on-proposal-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'vote-on-proposal-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'vote-on-proposal-input 'make-vote-on-proposal-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vote-on-proposal-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vote-on-proposal-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'voter-member-id))
      (common-lisp:list
       (common-lisp:cons "VoterMemberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vote))
      (common-lisp:list
       (common-lisp:cons "Vote"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vote-on-proposal-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass vote-on-proposal-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-vote-on-proposal-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'vote-on-proposal-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'vote-on-proposal-output 'make-vote-on-proposal-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vote-on-proposal-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vote-on-proposal-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vote-on-proposal-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass vote-summary common-lisp:nil
                       ((vote :initarg :vote :initform common-lisp:nil :type
                         (common-lisp:or vote-value common-lisp:null) :accessor
                         struct-shape-vote-summary-vote :shape "VoteValue"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (member-name :initarg :member-name :initform
                         common-lisp:nil :type
                         (common-lisp:or network-member-name-string
                                         common-lisp:null)
                         :accessor struct-shape-vote-summary-member-name :shape
                         "NetworkMemberNameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (member-id :initarg :member-id :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-id-string common-lisp:null)
                         :accessor struct-shape-vote-summary-member-id :shape
                         "ResourceIdString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-vote-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'vote-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'vote-summary 'make-vote-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vote-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vote-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vote))
      (common-lisp:list
       (common-lisp:cons "Vote"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-name))
      (common-lisp:list
       (common-lisp:cons "MemberName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-id))
      (common-lisp:list
       (common-lisp:cons "MemberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vote-summary))
   common-lisp:nil))
(common-lisp:deftype vote-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass voting-policy common-lisp:nil
                       ((approval-threshold-policy :initarg
                         :approval-threshold-policy :initform common-lisp:nil
                         :type
                         (common-lisp:or approval-threshold-policy
                                         common-lisp:null)
                         :accessor
                         struct-shape-voting-policy-approval-threshold-policy
                         :shape "ApprovalThresholdPolicy" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-voting-policy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'voting-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'voting-policy 'make-voting-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input voting-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input voting-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'approval-threshold-policy))
      (common-lisp:list
       (common-lisp:cons "ApprovalThresholdPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input voting-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun create-accessor
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-request-token accessor-type tags
                     network-type)
   (common-lisp:declare
    (common-lisp:ignorable client-request-token accessor-type tags
     network-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-accessor-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-request aws-sdk/generator/operation::input "POST"
        "/accessors" "CreateAccessor"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-accessor))
(common-lisp:progn
 (common-lisp:defun create-member
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-request-token invitation-id
                     network-id member-configuration)
   (common-lisp:declare
    (common-lisp:ignorable client-request-token invitation-id network-id
     member-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-member-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/networks/~A/members"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'network-id))))
        "CreateMember"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-member))
(common-lisp:progn
 (common-lisp:defun create-network
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-request-token name description
                     framework framework-version framework-configuration
                     voting-policy member-configuration tags)
   (common-lisp:declare
    (common-lisp:ignorable client-request-token name description framework
     framework-version framework-configuration voting-policy
     member-configuration tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-network-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-request aws-sdk/generator/operation::input "POST"
        "/networks" "CreateNetwork"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-network))
(common-lisp:progn
 (common-lisp:defun create-node
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-request-token network-id member-id
                     node-configuration tags)
   (common-lisp:declare
    (common-lisp:ignorable client-request-token network-id member-id
     node-configuration tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-node-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/networks/~A/nodes"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'network-id))))
        "CreateNode"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-node))
(common-lisp:progn
 (common-lisp:defun create-proposal
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-request-token network-id member-id
                     actions description tags)
   (common-lisp:declare
    (common-lisp:ignorable client-request-token network-id member-id actions
     description tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-proposal-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/networks/~A/proposals"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'network-id))))
        "CreateProposal"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-proposal))
(common-lisp:progn
 (common-lisp:defun delete-accessor
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accessor-id)
   (common-lisp:declare (common-lisp:ignorable accessor-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-accessor-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/accessors/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'accessor-id))))
        "DeleteAccessor"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-accessor))
(common-lisp:progn
 (common-lisp:defun delete-member
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key network-id member-id)
   (common-lisp:declare (common-lisp:ignorable network-id member-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-member-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/networks/~A/members/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'network-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'member-id))))
        "DeleteMember"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-member))
(common-lisp:progn
 (common-lisp:defun delete-node
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key network-id member-id node-id)
   (common-lisp:declare (common-lisp:ignorable network-id member-id node-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-node-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/networks/~A/nodes/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'network-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'node-id))))
        "DeleteNode"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-node))
(common-lisp:progn
 (common-lisp:defun get-accessor
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accessor-id)
   (common-lisp:declare (common-lisp:ignorable accessor-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-accessor-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/accessors/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'accessor-id))))
        "GetAccessor"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-accessor))
(common-lisp:progn
 (common-lisp:defun get-member
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key network-id member-id)
   (common-lisp:declare (common-lisp:ignorable network-id member-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-member-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/networks/~A/members/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'network-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'member-id))))
        "GetMember"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-member))
(common-lisp:progn
 (common-lisp:defun get-network
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key network-id)
   (common-lisp:declare (common-lisp:ignorable network-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-network-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/networks/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'network-id))))
        "GetNetwork"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-network))
(common-lisp:progn
 (common-lisp:defun get-node
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key network-id member-id node-id)
   (common-lisp:declare (common-lisp:ignorable network-id member-id node-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-node-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/networks/~A/nodes/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'network-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'node-id))))
        "GetNode"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-node))
(common-lisp:progn
 (common-lisp:defun get-proposal
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key network-id proposal-id)
   (common-lisp:declare (common-lisp:ignorable network-id proposal-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-proposal-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/networks/~A/proposals/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'network-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'proposal-id))))
        "GetProposal"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-proposal))
(common-lisp:progn
 (common-lisp:defun list-accessors
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token network-type)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token network-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-accessors-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-request aws-sdk/generator/operation::input "GET"
        "/accessors" "ListAccessors"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-accessors))
(common-lisp:progn
 (common-lisp:defun list-invitations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-invitations-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-request aws-sdk/generator/operation::input "GET"
        "/invitations" "ListInvitations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-invitations))
(common-lisp:progn
 (common-lisp:defun list-members
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key network-id name status is-owned
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable network-id name status is-owned max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-members-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/networks/~A/members"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'network-id))))
        "ListMembers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-members))
(common-lisp:progn
 (common-lisp:defun list-networks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name framework status max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable name framework status max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-networks-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-request aws-sdk/generator/operation::input "GET"
        "/networks" "ListNetworks"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-networks))
(common-lisp:progn
 (common-lisp:defun list-nodes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key network-id member-id status max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable network-id member-id status max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-nodes-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/networks/~A/nodes"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'network-id))))
        "ListNodes"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-nodes))
(common-lisp:progn
 (common-lisp:defun list-proposal-votes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key network-id proposal-id max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable network-id proposal-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-proposal-votes-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/networks/~A/proposals/~A/votes"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'network-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'proposal-id))))
        "ListProposalVotes"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-proposal-votes))
(common-lisp:progn
 (common-lisp:defun list-proposals
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key network-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable network-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-proposals-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/networks/~A/proposals"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'network-id))))
        "ListProposals"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-proposals))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'resource-arn))))
        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun reject-invitation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key invitation-id)
   (common-lisp:declare (common-lisp:ignorable invitation-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reject-invitation-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/invitations/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'invitation-id))))
        "RejectInvitation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'reject-invitation))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'resource-arn))))
        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'resource-arn))))
        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-member
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key network-id member-id
                     log-publishing-configuration)
   (common-lisp:declare
    (common-lisp:ignorable network-id member-id log-publishing-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-member-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-request aws-sdk/generator/operation::input "PATCH"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/networks/~A/members/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'network-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'member-id))))
        "UpdateMember"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-member))
(common-lisp:progn
 (common-lisp:defun update-node
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key network-id member-id node-id
                     log-publishing-configuration)
   (common-lisp:declare
    (common-lisp:ignorable network-id member-id node-id
     log-publishing-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-node-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-request aws-sdk/generator/operation::input "PATCH"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/networks/~A/nodes/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'network-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'node-id))))
        "UpdateNode"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-node))
(common-lisp:progn
 (common-lisp:defun vote-on-proposal
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key network-id proposal-id voter-member-id
                     vote)
   (common-lisp:declare
    (common-lisp:ignorable network-id proposal-id voter-member-id vote))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-vote-on-proposal-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/networks/~A/proposals/~A/votes"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'network-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'proposal-id))))
        "VoteOnProposal"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'vote-on-proposal))
