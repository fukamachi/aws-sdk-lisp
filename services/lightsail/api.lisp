;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/lightsail/api
  (:use)
  (:nicknames #:aws/lightsail)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/lightsail/api)
(common-lisp:progn
 (common-lisp:define-condition lightsail-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'lightsail-error))
(common-lisp:progn
 (common-lisp:defclass lightsail-request (aws-sdk/json-request:json-request)
                       common-lisp:nil
                       (:default-initargs :service "lightsail" :api-version
                        "2016-11-28" :host-prefix "lightsail" :signing-name
                        common-lisp:nil :global-host common-lisp:nil
                        :target-prefix "Lightsail_20161128" :json-version
                        "1.1"))
 (common-lisp:export 'lightsail-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("AccountSetupInProgressException" . account-setup-in-progress-exception)
    ("InvalidInputException" . invalid-input-exception)
    ("NotFoundException" . not-found-exception)
    ("OperationFailureException" . operation-failure-exception)
    ("ServiceException" . service-exception)
    ("UnauthenticatedException" . unauthenticated-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (lightsail-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       access-denied-exception-code)
      (docs :initarg :docs :initform common-lisp:nil :reader
       access-denied-exception-docs)
      (message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)
      (tip :initarg :tip :initform common-lisp:nil :reader
       access-denied-exception-tip)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-code
                    'access-denied-exception-docs
                    'access-denied-exception-message
                    'access-denied-exception-tip)))
(common-lisp:deftype access-direction () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass access-key common-lisp:nil
                       ((access-key-id :initarg :access-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or iamaccess-key-id common-lisp:null)
                         :accessor struct-shape-access-key-access-key-id :shape
                         "IAMAccessKeyId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (secret-access-key :initarg :secret-access-key
                         :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-access-key-secret-access-key
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or status-type common-lisp:null)
                         :accessor struct-shape-access-key-status :shape
                         "StatusType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-access-key-created-at :shape "IsoDate"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-used :initarg :last-used :initform
                         common-lisp:nil :type
                         (common-lisp:or access-key-last-used common-lisp:null)
                         :accessor struct-shape-access-key-last-used :shape
                         "AccessKeyLastUsed" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-access-key
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'access-key
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'access-key 'make-access-key))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input access-key))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input access-key))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-key-id))
      (common-lisp:list
       (common-lisp:cons "accessKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-access-key))
      (common-lisp:list
       (common-lisp:cons "secretAccessKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-used))
      (common-lisp:list
       (common-lisp:cons "lastUsed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input access-key))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass access-key-last-used common-lisp:nil
                       ((last-used-date :initarg :last-used-date :initform
                         common-lisp:nil :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-access-key-last-used-last-used-date
                         :shape "IsoDate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (region :initarg :region :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-access-key-last-used-region
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-name :initarg :service-name :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-access-key-last-used-service-name :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-access-key-last-used
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'access-key-last-used
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'access-key-last-used 'make-access-key-last-used))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input access-key-last-used))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input access-key-last-used))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-used-date))
      (common-lisp:list
       (common-lisp:cons "lastUsedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input access-key-last-used))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype access-key-list ()
   '(trivial-types:proper-list access-key))
 (common-lisp:defun make-access-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list access-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype access-receiver-list ()
   '(trivial-types:proper-list resource-receiving-access))
 (common-lisp:defun make-access-receiver-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            resource-receiving-access))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass access-rules common-lisp:nil
                       ((get-object :initarg :get-object :initform
                         common-lisp:nil :type
                         (common-lisp:or access-type common-lisp:null)
                         :accessor struct-shape-access-rules-get-object :shape
                         "AccessType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (allow-public-overrides :initarg
                         :allow-public-overrides :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         struct-shape-access-rules-allow-public-overrides
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-access-rules
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'access-rules
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'access-rules 'make-access-rules))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input access-rules))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input access-rules))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'get-object))
      (common-lisp:list
       (common-lisp:cons "getObject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-public-overrides))
      (common-lisp:list
       (common-lisp:cons "allowPublicOverrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input access-rules))
   common-lisp:nil))
(common-lisp:deftype access-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass account-level-bpa-sync common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or account-level-bpa-sync-status
                                         common-lisp:null)
                         :accessor struct-shape-account-level-bpa-sync-status
                         :shape "AccountLevelBpaSyncStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-synced-at :initarg :last-synced-at :initform
                         common-lisp:nil :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-account-level-bpa-sync-last-synced-at
                         :shape "IsoDate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type
                         (common-lisp:or bpastatus-message common-lisp:null)
                         :accessor struct-shape-account-level-bpa-sync-message
                         :shape "BPAStatusMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bpa-impacts-lightsail :initarg :bpa-impacts-lightsail
                         :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         struct-shape-account-level-bpa-sync-bpa-impacts-lightsail
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-account-level-bpa-sync
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'account-level-bpa-sync
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'account-level-bpa-sync 'make-account-level-bpa-sync))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          account-level-bpa-sync))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          account-level-bpa-sync))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-synced-at))
      (common-lisp:list
       (common-lisp:cons "lastSyncedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bpa-impacts-lightsail))
      (common-lisp:list
       (common-lisp:cons "bpaImpactsLightsail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          account-level-bpa-sync))
   common-lisp:nil))
(common-lisp:deftype account-level-bpa-sync-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition account-setup-in-progress-exception
     (lightsail-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       account-setup-in-progress-exception-code)
      (docs :initarg :docs :initform common-lisp:nil :reader
       account-setup-in-progress-exception-docs)
      (message :initarg :message :initform common-lisp:nil :reader
       account-setup-in-progress-exception-message)
      (tip :initarg :tip :initform common-lisp:nil :reader
       account-setup-in-progress-exception-tip)))
 (common-lisp:export
  (common-lisp:list 'account-setup-in-progress-exception
                    'account-setup-in-progress-exception-code
                    'account-setup-in-progress-exception-docs
                    'account-setup-in-progress-exception-message
                    'account-setup-in-progress-exception-tip)))
(common-lisp:progn
 (common-lisp:defclass add-on common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-add-on-name :shape "string"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-add-on-status :shape "string"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (snapshot-time-of-day :initarg :snapshot-time-of-day
                         :initform common-lisp:nil :type
                         (common-lisp:or time-of-day common-lisp:null)
                         :accessor struct-shape-add-on-snapshot-time-of-day
                         :shape "TimeOfDay" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-snapshot-time-of-day :initarg
                         :next-snapshot-time-of-day :initform common-lisp:nil
                         :type (common-lisp:or time-of-day common-lisp:null)
                         :accessor
                         struct-shape-add-on-next-snapshot-time-of-day :shape
                         "TimeOfDay" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (threshold :initarg :threshold :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-add-on-threshold :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (duration :initarg :duration :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-add-on-duration :shape "string"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-on
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'add-on
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'add-on 'make-add-on))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input add-on))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input add-on))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-time-of-day))
      (common-lisp:list
       (common-lisp:cons "snapshotTimeOfDay"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'next-snapshot-time-of-day))
      (common-lisp:list
       (common-lisp:cons "nextSnapshotTimeOfDay"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threshold))
      (common-lisp:list
       (common-lisp:cons "threshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input add-on))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype add-on-list () '(trivial-types:proper-list add-on))
 (common-lisp:defun make-add-on-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list add-on))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass add-on-request common-lisp:nil
                       ((add-on-type :initarg :add-on-type :initform
                         (common-lisp:error ":addontype is required") :type
                         (common-lisp:or add-on-type common-lisp:null)
                         :accessor struct-shape-add-on-request-add-on-type
                         :shape "AddOnType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-snapshot-add-on-request :initarg
                         :auto-snapshot-add-on-request :initform
                         common-lisp:nil :type
                         (common-lisp:or auto-snapshot-add-on-request
                                         common-lisp:null)
                         :accessor
                         struct-shape-add-on-request-auto-snapshot-add-on-request
                         :shape "AutoSnapshotAddOnRequest" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (stop-instance-on-idle-request :initarg
                         :stop-instance-on-idle-request :initform
                         common-lisp:nil :type
                         (common-lisp:or stop-instance-on-idle-request
                                         common-lisp:null)
                         :accessor
                         struct-shape-add-on-request-stop-instance-on-idle-request
                         :shape "StopInstanceOnIdleRequest" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-on-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'add-on-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'add-on-request 'make-add-on-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input add-on-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input add-on-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'add-on-type))
      (common-lisp:list
       (common-lisp:cons "addOnType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-snapshot-add-on-request))
      (common-lisp:list
       (common-lisp:cons "autoSnapshotAddOnRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stop-instance-on-idle-request))
      (common-lisp:list
       (common-lisp:cons "stopInstanceOnIdleRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input add-on-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype add-on-request-list ()
   '(trivial-types:proper-list add-on-request))
 (common-lisp:defun make-add-on-request-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list add-on-request))
   aws-sdk/generator/shape::members))
(common-lisp:deftype add-on-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass alarm common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-alarm-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-alarm-arn :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-alarm-created-at :shape "IsoDate"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (location :initarg :location :initform common-lisp:nil
                         :type
                         (common-lisp:or resource-location common-lisp:null)
                         :accessor struct-shape-alarm-location :shape
                         "ResourceLocation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor struct-shape-alarm-resource-type :shape
                         "ResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (support-code :initarg :support-code :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-alarm-support-code :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (monitored-resource-info :initarg
                         :monitored-resource-info :initform common-lisp:nil
                         :type
                         (common-lisp:or monitored-resource-info
                                         common-lisp:null)
                         :accessor struct-shape-alarm-monitored-resource-info
                         :shape "MonitoredResourceInfo" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (comparison-operator :initarg :comparison-operator
                         :initform common-lisp:nil :type
                         (common-lisp:or comparison-operator common-lisp:null)
                         :accessor struct-shape-alarm-comparison-operator
                         :shape "ComparisonOperator" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (evaluation-periods :initarg :evaluation-periods
                         :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor struct-shape-alarm-evaluation-periods :shape
                         "integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (period :initarg :period :initform common-lisp:nil
                         :type (common-lisp:or metric-period common-lisp:null)
                         :accessor struct-shape-alarm-period :shape
                         "MetricPeriod" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (threshold :initarg :threshold :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:double-float
                                         common-lisp:null)
                         :accessor struct-shape-alarm-threshold :shape "double"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (datapoints-to-alarm :initarg :datapoints-to-alarm
                         :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor struct-shape-alarm-datapoints-to-alarm
                         :shape "integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (treat-missing-data :initarg :treat-missing-data
                         :initform common-lisp:nil :type
                         (common-lisp:or treat-missing-data common-lisp:null)
                         :accessor struct-shape-alarm-treat-missing-data :shape
                         "TreatMissingData" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (statistic :initarg :statistic :initform
                         common-lisp:nil :type
                         (common-lisp:or metric-statistic common-lisp:null)
                         :accessor struct-shape-alarm-statistic :shape
                         "MetricStatistic" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metric-name :initarg :metric-name :initform
                         common-lisp:nil :type
                         (common-lisp:or metric-name common-lisp:null)
                         :accessor struct-shape-alarm-metric-name :shape
                         "MetricName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or alarm-state common-lisp:null)
                         :accessor struct-shape-alarm-state :shape "AlarmState"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (unit :initarg :unit :initform common-lisp:nil :type
                         (common-lisp:or metric-unit common-lisp:null)
                         :accessor struct-shape-alarm-unit :shape "MetricUnit"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (contact-protocols :initarg :contact-protocols
                         :initform common-lisp:nil :type
                         (common-lisp:or contact-protocols-list
                                         common-lisp:null)
                         :accessor struct-shape-alarm-contact-protocols :shape
                         "ContactProtocolsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notification-triggers :initarg :notification-triggers
                         :initform common-lisp:nil :type
                         (common-lisp:or notification-trigger-list
                                         common-lisp:null)
                         :accessor struct-shape-alarm-notification-triggers
                         :shape "NotificationTriggerList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (notification-enabled :initarg :notification-enabled
                         :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor struct-shape-alarm-notification-enabled
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-alarm
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'alarm
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'alarm 'make-alarm))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input alarm))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input alarm))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'support-code))
      (common-lisp:list
       (common-lisp:cons "supportCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitored-resource-info))
      (common-lisp:list
       (common-lisp:cons "monitoredResourceInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparison-operator))
      (common-lisp:list
       (common-lisp:cons "comparisonOperator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-periods))
      (common-lisp:list
       (common-lisp:cons "evaluationPeriods"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'period))
      (common-lisp:list
       (common-lisp:cons "period"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threshold))
      (common-lisp:list
       (common-lisp:cons "threshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datapoints-to-alarm))
      (common-lisp:list
       (common-lisp:cons "datapointsToAlarm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'treat-missing-data))
      (common-lisp:list
       (common-lisp:cons "treatMissingData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistic))
      (common-lisp:list
       (common-lisp:cons "statistic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "metricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-protocols))
      (common-lisp:list
       (common-lisp:cons "contactProtocols"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-triggers))
      (common-lisp:list
       (common-lisp:cons "notificationTriggers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-enabled))
      (common-lisp:list
       (common-lisp:cons "notificationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input alarm))
   common-lisp:nil))
(common-lisp:deftype alarm-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype alarms-list () '(trivial-types:proper-list alarm))
 (common-lisp:defun make-alarms-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list alarm))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass allocate-static-ip-request common-lisp:nil
                       ((static-ip-name :initarg :static-ip-name :initform
                         (common-lisp:error ":staticipname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-allocate-static-ip-request-static-ip-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-allocate-static-ip-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'allocate-static-ip-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'allocate-static-ip-request
                    'make-allocate-static-ip-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          allocate-static-ip-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          allocate-static-ip-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'static-ip-name))
      (common-lisp:list
       (common-lisp:cons "staticIpName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          allocate-static-ip-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass allocate-static-ip-result common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor
                         struct-shape-allocate-static-ip-result-operations
                         :shape "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-allocate-static-ip-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'allocate-static-ip-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'allocate-static-ip-result
                    'make-allocate-static-ip-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          allocate-static-ip-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          allocate-static-ip-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          allocate-static-ip-result))
   common-lisp:nil))
(common-lisp:deftype app-category () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype app-category-list ()
   '(trivial-types:proper-list app-category))
 (common-lisp:defun make-app-category-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list app-category))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass attach-certificate-to-distribution-request
                       common-lisp:nil
                       ((distribution-name :initarg :distribution-name
                         :initform
                         (common-lisp:error ":distributionname is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-attach-certificate-to-distribution-request-distribution-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-name :initarg :certificate-name :initform
                         (common-lisp:error ":certificatename is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-attach-certificate-to-distribution-request-certificate-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-attach-certificate-to-distribution-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'attach-certificate-to-distribution-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'attach-certificate-to-distribution-request
                    'make-attach-certificate-to-distribution-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-certificate-to-distribution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-certificate-to-distribution-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distribution-name))
      (common-lisp:list
       (common-lisp:cons "distributionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-name))
      (common-lisp:list
       (common-lisp:cons "certificateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-certificate-to-distribution-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass attach-certificate-to-distribution-result
                       common-lisp:nil
                       ((operation :initarg :operation :initform
                         common-lisp:nil :type
                         (common-lisp:or operation common-lisp:null) :accessor
                         struct-shape-attach-certificate-to-distribution-result-operation
                         :shape "Operation" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-attach-certificate-to-distribution-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'attach-certificate-to-distribution-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'attach-certificate-to-distribution-result
                    'make-attach-certificate-to-distribution-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-certificate-to-distribution-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-certificate-to-distribution-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-certificate-to-distribution-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass attach-disk-request common-lisp:nil
                       ((disk-name :initarg :disk-name :initform
                         (common-lisp:error ":diskname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-attach-disk-request-disk-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-name :initarg :instance-name :initform
                         (common-lisp:error ":instancename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-attach-disk-request-instance-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (disk-path :initarg :disk-path :initform
                         (common-lisp:error ":diskpath is required") :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-attach-disk-request-disk-path
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-mounting :initarg :auto-mounting :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         struct-shape-attach-disk-request-auto-mounting :shape
                         "boolean" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-attach-disk-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'attach-disk-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'attach-disk-request 'make-attach-disk-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attach-disk-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attach-disk-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disk-name))
      (common-lisp:list
       (common-lisp:cons "diskName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-name))
      (common-lisp:list
       (common-lisp:cons "instanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disk-path))
      (common-lisp:list
       (common-lisp:cons "diskPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-mounting))
      (common-lisp:list
       (common-lisp:cons "autoMounting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attach-disk-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass attach-disk-result common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor struct-shape-attach-disk-result-operations
                         :shape "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-attach-disk-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'attach-disk-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'attach-disk-result 'make-attach-disk-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attach-disk-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attach-disk-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attach-disk-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass attach-instances-to-load-balancer-request
                       common-lisp:nil
                       ((load-balancer-name :initarg :load-balancer-name
                         :initform
                         (common-lisp:error ":loadbalancername is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-attach-instances-to-load-balancer-request-load-balancer-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-names :initarg :instance-names :initform
                         (common-lisp:error ":instancenames is required") :type
                         (common-lisp:or resource-name-list common-lisp:null)
                         :accessor
                         struct-shape-attach-instances-to-load-balancer-request-instance-names
                         :shape "ResourceNameList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-attach-instances-to-load-balancer-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'attach-instances-to-load-balancer-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'attach-instances-to-load-balancer-request
                    'make-attach-instances-to-load-balancer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-instances-to-load-balancer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-instances-to-load-balancer-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "loadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-names))
      (common-lisp:list
       (common-lisp:cons "instanceNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-instances-to-load-balancer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass attach-instances-to-load-balancer-result common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor
                         struct-shape-attach-instances-to-load-balancer-result-operations
                         :shape "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-attach-instances-to-load-balancer-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'attach-instances-to-load-balancer-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'attach-instances-to-load-balancer-result
                    'make-attach-instances-to-load-balancer-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-instances-to-load-balancer-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-instances-to-load-balancer-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-instances-to-load-balancer-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass attach-load-balancer-tls-certificate-request
                       common-lisp:nil
                       ((load-balancer-name :initarg :load-balancer-name
                         :initform
                         (common-lisp:error ":loadbalancername is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-attach-load-balancer-tls-certificate-request-load-balancer-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-name :initarg :certificate-name :initform
                         (common-lisp:error ":certificatename is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-attach-load-balancer-tls-certificate-request-certificate-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-attach-load-balancer-tls-certificate-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'attach-load-balancer-tls-certificate-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'attach-load-balancer-tls-certificate-request
                    'make-attach-load-balancer-tls-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-load-balancer-tls-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-load-balancer-tls-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "loadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-name))
      (common-lisp:list
       (common-lisp:cons "certificateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-load-balancer-tls-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass attach-load-balancer-tls-certificate-result
                       common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor
                         struct-shape-attach-load-balancer-tls-certificate-result-operations
                         :shape "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-attach-load-balancer-tls-certificate-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'attach-load-balancer-tls-certificate-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'attach-load-balancer-tls-certificate-result
                    'make-attach-load-balancer-tls-certificate-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-load-balancer-tls-certificate-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-load-balancer-tls-certificate-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-load-balancer-tls-certificate-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass attach-static-ip-request common-lisp:nil
                       ((static-ip-name :initarg :static-ip-name :initform
                         (common-lisp:error ":staticipname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-attach-static-ip-request-static-ip-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-name :initarg :instance-name :initform
                         (common-lisp:error ":instancename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-attach-static-ip-request-instance-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-attach-static-ip-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'attach-static-ip-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'attach-static-ip-request 'make-attach-static-ip-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-static-ip-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-static-ip-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'static-ip-name))
      (common-lisp:list
       (common-lisp:cons "staticIpName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-name))
      (common-lisp:list
       (common-lisp:cons "instanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-static-ip-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass attach-static-ip-result common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor
                         struct-shape-attach-static-ip-result-operations :shape
                         "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-attach-static-ip-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'attach-static-ip-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'attach-static-ip-result 'make-attach-static-ip-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-static-ip-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-static-ip-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-static-ip-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass attached-disk common-lisp:nil
                       ((path :initarg :path :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-attached-disk-path :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (size-in-gb :initarg :size-in-gb :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor struct-shape-attached-disk-size-in-gb :shape
                         "integer" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-attached-disk
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'attached-disk
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'attached-disk 'make-attached-disk))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attached-disk))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attached-disk))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-in-gb))
      (common-lisp:list
       (common-lisp:cons "sizeInGb"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attached-disk))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype attached-disk-list ()
   '(trivial-types:proper-list attached-disk))
 (common-lisp:defun make-attached-disk-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attached-disk))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype attached-disk-map () 'common-lisp:hash-table)
 (common-lisp:defun make-attached-disk-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype auto-mount-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass auto-snapshot-add-on-request common-lisp:nil
                       ((snapshot-time-of-day :initarg :snapshot-time-of-day
                         :initform common-lisp:nil :type
                         (common-lisp:or time-of-day common-lisp:null)
                         :accessor
                         struct-shape-auto-snapshot-add-on-request-snapshot-time-of-day
                         :shape "TimeOfDay" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-auto-snapshot-add-on-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'auto-snapshot-add-on-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'auto-snapshot-add-on-request
                    'make-auto-snapshot-add-on-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          auto-snapshot-add-on-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          auto-snapshot-add-on-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-time-of-day))
      (common-lisp:list
       (common-lisp:cons "snapshotTimeOfDay"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          auto-snapshot-add-on-request))
   common-lisp:nil))
(common-lisp:deftype auto-snapshot-date () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass auto-snapshot-details common-lisp:nil
                       ((date :initarg :date :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-auto-snapshot-details-date
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-auto-snapshot-details-created-at :shape
                         "IsoDate" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or auto-snapshot-status common-lisp:null)
                         :accessor struct-shape-auto-snapshot-details-status
                         :shape "AutoSnapshotStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (from-attached-disks :initarg :from-attached-disks
                         :initform common-lisp:nil :type
                         (common-lisp:or attached-disk-list common-lisp:null)
                         :accessor
                         struct-shape-auto-snapshot-details-from-attached-disks
                         :shape "AttachedDiskList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-auto-snapshot-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'auto-snapshot-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'auto-snapshot-details 'make-auto-snapshot-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          auto-snapshot-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          auto-snapshot-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date))
      (common-lisp:list
       (common-lisp:cons "date"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-attached-disks))
      (common-lisp:list
       (common-lisp:cons "fromAttachedDisks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          auto-snapshot-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype auto-snapshot-details-list ()
   '(trivial-types:proper-list auto-snapshot-details))
 (common-lisp:defun make-auto-snapshot-details-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list auto-snapshot-details))
   aws-sdk/generator/shape::members))
(common-lisp:deftype auto-snapshot-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass availability-zone common-lisp:nil
                       ((zone-name :initarg :zone-name :initform
                         common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-availability-zone-zone-name
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-availability-zone-state :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-availability-zone
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'availability-zone
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'availability-zone 'make-availability-zone))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input availability-zone))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input availability-zone))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'zone-name))
      (common-lisp:list
       (common-lisp:cons "zoneName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input availability-zone))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype availability-zone-list ()
   '(trivial-types:proper-list availability-zone))
 (common-lisp:defun make-availability-zone-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list availability-zone))
   aws-sdk/generator/shape::members))
(common-lisp:deftype bpastatus-message () 'common-lisp:string)
(common-lisp:deftype base64 () 'common-lisp:string)
(common-lisp:deftype behavior-enum () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass blueprint common-lisp:nil
                       ((blueprint-id :initarg :blueprint-id :initform
                         common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-blueprint-blueprint-id :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-blueprint-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group :initarg :group :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-blueprint-group :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or blueprint-type common-lisp:null)
                         :accessor struct-shape-blueprint-type :shape
                         "BlueprintType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-blueprint-description :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (is-active :initarg :is-active :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor struct-shape-blueprint-is-active :shape
                         "boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (min-power :initarg :min-power :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor struct-shape-blueprint-min-power :shape
                         "integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (version :initarg :version :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-blueprint-version :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (version-code :initarg :version-code :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-blueprint-version-code :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (product-url :initarg :product-url :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-blueprint-product-url :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (license-url :initarg :license-url :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-blueprint-license-url :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (platform :initarg :platform :initform common-lisp:nil
                         :type
                         (common-lisp:or instance-platform common-lisp:null)
                         :accessor struct-shape-blueprint-platform :shape
                         "InstancePlatform" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (app-category :initarg :app-category :initform
                         common-lisp:nil :type
                         (common-lisp:or app-category common-lisp:null)
                         :accessor struct-shape-blueprint-app-category :shape
                         "AppCategory" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-blueprint
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'blueprint
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'blueprint 'make-blueprint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input blueprint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input blueprint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blueprint-id))
      (common-lisp:list
       (common-lisp:cons "blueprintId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group))
      (common-lisp:list
       (common-lisp:cons "group"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-active))
      (common-lisp:list
       (common-lisp:cons "isActive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-power))
      (common-lisp:list
       (common-lisp:cons "minPower"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-code))
      (common-lisp:list
       (common-lisp:cons "versionCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-url))
      (common-lisp:list
       (common-lisp:cons "productUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-url))
      (common-lisp:list
       (common-lisp:cons "licenseUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-category))
      (common-lisp:list
       (common-lisp:cons "appCategory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input blueprint))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype blueprint-list () '(trivial-types:proper-list blueprint))
 (common-lisp:defun make-blueprint-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list blueprint))
   aws-sdk/generator/shape::members))
(common-lisp:deftype blueprint-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass bucket common-lisp:nil
                       ((resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-bucket-resource-type :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (access-rules :initarg :access-rules :initform
                         common-lisp:nil :type
                         (common-lisp:or access-rules common-lisp:null)
                         :accessor struct-shape-bucket-access-rules :shape
                         "AccessRules" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-bucket-arn :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bundle-id :initarg :bundle-id :initform
                         common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-bucket-bundle-id :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-bucket-created-at :shape "IsoDate"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (url :initarg :url :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-bucket-url :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (location :initarg :location :initform common-lisp:nil
                         :type
                         (common-lisp:or resource-location common-lisp:null)
                         :accessor struct-shape-bucket-location :shape
                         "ResourceLocation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor struct-shape-bucket-name :shape "BucketName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (support-code :initarg :support-code :initform
                         common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-bucket-support-code :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-bucket-tags :shape "TagList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (object-versioning :initarg :object-versioning
                         :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-bucket-object-versioning :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (able-to-update-bundle :initarg :able-to-update-bundle
                         :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor struct-shape-bucket-able-to-update-bundle
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (readonly-access-accounts :initarg
                         :readonly-access-accounts :initform common-lisp:nil
                         :type
                         (common-lisp:or partner-id-list common-lisp:null)
                         :accessor struct-shape-bucket-readonly-access-accounts
                         :shape "PartnerIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resources-receiving-access :initarg
                         :resources-receiving-access :initform common-lisp:nil
                         :type
                         (common-lisp:or access-receiver-list common-lisp:null)
                         :accessor
                         struct-shape-bucket-resources-receiving-access :shape
                         "AccessReceiverList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or bucket-state common-lisp:null)
                         :accessor struct-shape-bucket-state :shape
                         "BucketState" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (access-log-config :initarg :access-log-config
                         :initform common-lisp:nil :type
                         (common-lisp:or bucket-access-log-config
                                         common-lisp:null)
                         :accessor struct-shape-bucket-access-log-config :shape
                         "BucketAccessLogConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bucket
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'bucket
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'bucket 'make-bucket))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bucket))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bucket))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-rules))
      (common-lisp:list
       (common-lisp:cons "accessRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-id))
      (common-lisp:list
       (common-lisp:cons "bundleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'support-code))
      (common-lisp:list
       (common-lisp:cons "supportCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-versioning))
      (common-lisp:list
       (common-lisp:cons "objectVersioning"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'able-to-update-bundle))
      (common-lisp:list
       (common-lisp:cons "ableToUpdateBundle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'readonly-access-accounts))
      (common-lisp:list
       (common-lisp:cons "readonlyAccessAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resources-receiving-access))
      (common-lisp:list
       (common-lisp:cons "resourcesReceivingAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-log-config))
      (common-lisp:list
       (common-lisp:cons "accessLogConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bucket))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass bucket-access-log-config common-lisp:nil
                       ((enabled :initarg :enabled :initform
                         (common-lisp:error ":enabled is required") :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         struct-shape-bucket-access-log-config-enabled :shape
                         "boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (destination :initarg :destination :initform
                         common-lisp:nil :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-bucket-access-log-config-destination
                         :shape "BucketName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (prefix :initarg :prefix :initform common-lisp:nil
                         :type
                         (common-lisp:or bucket-access-log-prefix
                                         common-lisp:null)
                         :accessor struct-shape-bucket-access-log-config-prefix
                         :shape "BucketAccessLogPrefix" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bucket-access-log-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'bucket-access-log-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'bucket-access-log-config 'make-bucket-access-log-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bucket-access-log-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bucket-access-log-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bucket-access-log-config))
   common-lisp:nil))
(common-lisp:deftype bucket-access-log-prefix () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass bucket-bundle common-lisp:nil
                       ((bundle-id :initarg :bundle-id :initform
                         common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-bucket-bundle-bundle-id :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-bucket-bundle-name :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (price :initarg :price :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:single-float
                                         common-lisp:null)
                         :accessor struct-shape-bucket-bundle-price :shape
                         "float" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (storage-per-month-in-gb :initarg
                         :storage-per-month-in-gb :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor
                         struct-shape-bucket-bundle-storage-per-month-in-gb
                         :shape "integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transfer-per-month-in-gb :initarg
                         :transfer-per-month-in-gb :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor
                         struct-shape-bucket-bundle-transfer-per-month-in-gb
                         :shape "integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-active :initarg :is-active :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor struct-shape-bucket-bundle-is-active :shape
                         "boolean" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bucket-bundle
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'bucket-bundle
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'bucket-bundle 'make-bucket-bundle))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bucket-bundle))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bucket-bundle))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-id))
      (common-lisp:list
       (common-lisp:cons "bundleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'price))
      (common-lisp:list
       (common-lisp:cons "price"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'storage-per-month-in-gb))
      (common-lisp:list
       (common-lisp:cons "storagePerMonthInGb"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transfer-per-month-in-gb))
      (common-lisp:list
       (common-lisp:cons "transferPerMonthInGb"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-active))
      (common-lisp:list
       (common-lisp:cons "isActive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bucket-bundle))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype bucket-bundle-list ()
   '(trivial-types:proper-list bucket-bundle))
 (common-lisp:defun make-bucket-bundle-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list bucket-bundle))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype bucket-list () '(trivial-types:proper-list bucket))
 (common-lisp:defun make-bucket-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list bucket))
   aws-sdk/generator/shape::members))
(common-lisp:deftype bucket-metric-name () 'common-lisp:string)
(common-lisp:deftype bucket-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass bucket-state common-lisp:nil
                       ((code :initarg :code :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-bucket-state-code :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-bucket-state-message :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bucket-state
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'bucket-state
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'bucket-state 'make-bucket-state))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bucket-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bucket-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bucket-state))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass bundle common-lisp:nil
                       ((price :initarg :price :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:single-float
                                         common-lisp:null)
                         :accessor struct-shape-bundle-price :shape "float"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cpu-count :initarg :cpu-count :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor struct-shape-bundle-cpu-count :shape
                         "integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (disk-size-in-gb :initarg :disk-size-in-gb :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor struct-shape-bundle-disk-size-in-gb :shape
                         "integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bundle-id :initarg :bundle-id :initform
                         common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-bundle-bundle-id :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-type :initarg :instance-type :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-bundle-instance-type :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (is-active :initarg :is-active :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor struct-shape-bundle-is-active :shape
                         "boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-bundle-name :shape "string"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (power :initarg :power :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor struct-shape-bundle-power :shape "integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ram-size-in-gb :initarg :ram-size-in-gb :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:single-float
                                         common-lisp:null)
                         :accessor struct-shape-bundle-ram-size-in-gb :shape
                         "float" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (transfer-per-month-in-gb :initarg
                         :transfer-per-month-in-gb :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor struct-shape-bundle-transfer-per-month-in-gb
                         :shape "integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (supported-platforms :initarg :supported-platforms
                         :initform common-lisp:nil :type
                         (common-lisp:or instance-platform-list
                                         common-lisp:null)
                         :accessor struct-shape-bundle-supported-platforms
                         :shape "InstancePlatformList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (supported-app-categories :initarg
                         :supported-app-categories :initform common-lisp:nil
                         :type
                         (common-lisp:or app-category-list common-lisp:null)
                         :accessor struct-shape-bundle-supported-app-categories
                         :shape "AppCategoryList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (public-ipv4address-count :initarg
                         :public-ipv4address-count :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor struct-shape-bundle-public-ipv4address-count
                         :shape "integer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bundle
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'bundle
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'bundle 'make-bundle))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bundle))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bundle))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'price))
      (common-lisp:list
       (common-lisp:cons "price"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpu-count))
      (common-lisp:list
       (common-lisp:cons "cpuCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disk-size-in-gb))
      (common-lisp:list
       (common-lisp:cons "diskSizeInGb"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-id))
      (common-lisp:list
       (common-lisp:cons "bundleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "instanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-active))
      (common-lisp:list
       (common-lisp:cons "isActive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'power))
      (common-lisp:list
       (common-lisp:cons "power"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ram-size-in-gb))
      (common-lisp:list
       (common-lisp:cons "ramSizeInGb"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transfer-per-month-in-gb))
      (common-lisp:list
       (common-lisp:cons "transferPerMonthInGb"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'supported-platforms))
      (common-lisp:list
       (common-lisp:cons "supportedPlatforms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-app-categories))
      (common-lisp:list
       (common-lisp:cons "supportedAppCategories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'public-ipv4address-count))
      (common-lisp:list
       (common-lisp:cons "publicIpv4AddressCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bundle))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype bundle-list () '(trivial-types:proper-list bundle))
 (common-lisp:defun make-bundle-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list bundle))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass cache-behavior common-lisp:nil
                       ((behavior :initarg :behavior :initform common-lisp:nil
                         :type (common-lisp:or behavior-enum common-lisp:null)
                         :accessor struct-shape-cache-behavior-behavior :shape
                         "BehaviorEnum" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cache-behavior
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cache-behavior
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'cache-behavior 'make-cache-behavior))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cache-behavior))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cache-behavior))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'behavior))
      (common-lisp:list
       (common-lisp:cons "behavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cache-behavior))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cache-behavior-list ()
   '(trivial-types:proper-list cache-behavior-per-path))
 (common-lisp:defun make-cache-behavior-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cache-behavior-per-path))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass cache-behavior-per-path common-lisp:nil
                       ((path :initarg :path :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-cache-behavior-per-path-path
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (behavior :initarg :behavior :initform common-lisp:nil
                         :type (common-lisp:or behavior-enum common-lisp:null)
                         :accessor
                         struct-shape-cache-behavior-per-path-behavior :shape
                         "BehaviorEnum" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cache-behavior-per-path
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cache-behavior-per-path
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cache-behavior-per-path 'make-cache-behavior-per-path))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cache-behavior-per-path))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cache-behavior-per-path))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'behavior))
      (common-lisp:list
       (common-lisp:cons "behavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cache-behavior-per-path))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cache-settings common-lisp:nil
                       ((default-ttl :initarg :default-ttl :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor struct-shape-cache-settings-default-ttl
                         :shape "long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (minimum-ttl :initarg :minimum-ttl :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor struct-shape-cache-settings-minimum-ttl
                         :shape "long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (maximum-ttl :initarg :maximum-ttl :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor struct-shape-cache-settings-maximum-ttl
                         :shape "long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (allowed-httpmethods :initarg :allowed-httpmethods
                         :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-cache-settings-allowed-httpmethods :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cached-httpmethods :initarg :cached-httpmethods
                         :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-cache-settings-cached-httpmethods :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (forwarded-cookies :initarg :forwarded-cookies
                         :initform common-lisp:nil :type
                         (common-lisp:or cookie-object common-lisp:null)
                         :accessor
                         struct-shape-cache-settings-forwarded-cookies :shape
                         "CookieObject" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (forwarded-headers :initarg :forwarded-headers
                         :initform common-lisp:nil :type
                         (common-lisp:or header-object common-lisp:null)
                         :accessor
                         struct-shape-cache-settings-forwarded-headers :shape
                         "HeaderObject" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (forwarded-query-strings :initarg
                         :forwarded-query-strings :initform common-lisp:nil
                         :type
                         (common-lisp:or query-string-object common-lisp:null)
                         :accessor
                         struct-shape-cache-settings-forwarded-query-strings
                         :shape "QueryStringObject" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cache-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cache-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'cache-settings 'make-cache-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cache-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cache-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-ttl))
      (common-lisp:list
       (common-lisp:cons "defaultTTL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimum-ttl))
      (common-lisp:list
       (common-lisp:cons "minimumTTL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-ttl))
      (common-lisp:list
       (common-lisp:cons "maximumTTL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-httpmethods))
      (common-lisp:list
       (common-lisp:cons "allowedHTTPMethods"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cached-httpmethods))
      (common-lisp:list
       (common-lisp:cons "cachedHTTPMethods"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forwarded-cookies))
      (common-lisp:list
       (common-lisp:cons "forwardedCookies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forwarded-headers))
      (common-lisp:list
       (common-lisp:cons "forwardedHeaders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'forwarded-query-strings))
      (common-lisp:list
       (common-lisp:cons "forwardedQueryStrings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cache-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass certificate common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-certificate-arn :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or certificate-name common-lisp:null)
                         :accessor struct-shape-certificate-name :shape
                         "CertificateName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-name :initarg :domain-name :initform
                         common-lisp:nil :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor struct-shape-certificate-domain-name :shape
                         "DomainName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or certificate-status common-lisp:null)
                         :accessor struct-shape-certificate-status :shape
                         "CertificateStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (serial-number :initarg :serial-number :initform
                         common-lisp:nil :type
                         (common-lisp:or serial-number common-lisp:null)
                         :accessor struct-shape-certificate-serial-number
                         :shape "SerialNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subject-alternative-names :initarg
                         :subject-alternative-names :initform common-lisp:nil
                         :type
                         (common-lisp:or subject-alternative-name-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-certificate-subject-alternative-names
                         :shape "SubjectAlternativeNameList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (domain-validation-records :initarg
                         :domain-validation-records :initform common-lisp:nil
                         :type
                         (common-lisp:or domain-validation-record-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-certificate-domain-validation-records
                         :shape "DomainValidationRecordList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (request-failure-reason :initarg
                         :request-failure-reason :initform common-lisp:nil
                         :type
                         (common-lisp:or request-failure-reason
                                         common-lisp:null)
                         :accessor
                         struct-shape-certificate-request-failure-reason :shape
                         "RequestFailureReason" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (in-use-resource-count :initarg :in-use-resource-count
                         :initform common-lisp:nil :type
                         (common-lisp:or in-use-resource-count
                                         common-lisp:null)
                         :accessor
                         struct-shape-certificate-in-use-resource-count :shape
                         "InUseResourceCount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key-algorithm :initarg :key-algorithm :initform
                         common-lisp:nil :type
                         (common-lisp:or key-algorithm common-lisp:null)
                         :accessor struct-shape-certificate-key-algorithm
                         :shape "KeyAlgorithm" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-certificate-created-at :shape "IsoDate"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (issued-at :initarg :issued-at :initform
                         common-lisp:nil :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-certificate-issued-at :shape "IsoDate"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (issuer-ca :initarg :issuer-ca :initform
                         common-lisp:nil :type
                         (common-lisp:or issuer-ca common-lisp:null) :accessor
                         struct-shape-certificate-issuer-ca :shape "IssuerCA"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (not-before :initarg :not-before :initform
                         common-lisp:nil :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-certificate-not-before :shape "IsoDate"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (not-after :initarg :not-after :initform
                         common-lisp:nil :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-certificate-not-after :shape "IsoDate"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (eligible-to-renew :initarg :eligible-to-renew
                         :initform common-lisp:nil :type
                         (common-lisp:or eligible-to-renew common-lisp:null)
                         :accessor struct-shape-certificate-eligible-to-renew
                         :shape "EligibleToRenew" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (renewal-summary :initarg :renewal-summary :initform
                         common-lisp:nil :type
                         (common-lisp:or renewal-summary common-lisp:null)
                         :accessor struct-shape-certificate-renewal-summary
                         :shape "RenewalSummary" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (revoked-at :initarg :revoked-at :initform
                         common-lisp:nil :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-certificate-revoked-at :shape "IsoDate"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (revocation-reason :initarg :revocation-reason
                         :initform common-lisp:nil :type
                         (common-lisp:or revocation-reason common-lisp:null)
                         :accessor struct-shape-certificate-revocation-reason
                         :shape "RevocationReason" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-certificate-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (support-code :initarg :support-code :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-certificate-support-code :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-certificate
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'certificate
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'certificate 'make-certificate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "domainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serial-number))
      (common-lisp:list
       (common-lisp:cons "serialNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subject-alternative-names))
      (common-lisp:list
       (common-lisp:cons "subjectAlternativeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-validation-records))
      (common-lisp:list
       (common-lisp:cons "domainValidationRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'request-failure-reason))
      (common-lisp:list
       (common-lisp:cons "requestFailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'in-use-resource-count))
      (common-lisp:list
       (common-lisp:cons "inUseResourceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-algorithm))
      (common-lisp:list
       (common-lisp:cons "keyAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issued-at))
      (common-lisp:list
       (common-lisp:cons "issuedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issuer-ca))
      (common-lisp:list
       (common-lisp:cons "issuerCA"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-before))
      (common-lisp:list
       (common-lisp:cons "notBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-after))
      (common-lisp:list
       (common-lisp:cons "notAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eligible-to-renew))
      (common-lisp:list
       (common-lisp:cons "eligibleToRenew"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'renewal-summary))
      (common-lisp:list
       (common-lisp:cons "renewalSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revoked-at))
      (common-lisp:list
       (common-lisp:cons "revokedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revocation-reason))
      (common-lisp:list
       (common-lisp:cons "revocationReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'support-code))
      (common-lisp:list
       (common-lisp:cons "supportCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input certificate))
   common-lisp:nil))
(common-lisp:deftype certificate-domain-validation-status ()
  'common-lisp:string)
(common-lisp:deftype certificate-name () 'common-lisp:string)
(common-lisp:deftype certificate-provider () 'common-lisp:string)
(common-lisp:deftype certificate-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype certificate-status-list ()
   '(trivial-types:proper-list certificate-status))
 (common-lisp:defun make-certificate-status-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list certificate-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass certificate-summary common-lisp:nil
                       ((certificate-arn :initarg :certificate-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-certificate-summary-certificate-arn
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-name :initarg :certificate-name :initform
                         common-lisp:nil :type
                         (common-lisp:or certificate-name common-lisp:null)
                         :accessor
                         struct-shape-certificate-summary-certificate-name
                         :shape "CertificateName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-name :initarg :domain-name :initform
                         common-lisp:nil :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor struct-shape-certificate-summary-domain-name
                         :shape "DomainName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-detail :initarg :certificate-detail
                         :initform common-lisp:nil :type
                         (common-lisp:or certificate common-lisp:null)
                         :accessor
                         struct-shape-certificate-summary-certificate-detail
                         :shape "Certificate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-certificate-summary-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-certificate-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'certificate-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'certificate-summary 'make-certificate-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input certificate-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input certificate-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "certificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-name))
      (common-lisp:list
       (common-lisp:cons "certificateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "domainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-detail))
      (common-lisp:list
       (common-lisp:cons "certificateDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input certificate-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype certificate-summary-list ()
   '(trivial-types:proper-list certificate-summary))
 (common-lisp:defun make-certificate-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list certificate-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass close-instance-public-ports-request common-lisp:nil
                       ((port-info :initarg :port-info :initform
                         (common-lisp:error ":portinfo is required") :type
                         (common-lisp:or port-info common-lisp:null) :accessor
                         struct-shape-close-instance-public-ports-request-port-info
                         :shape "PortInfo" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-name :initarg :instance-name :initform
                         (common-lisp:error ":instancename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-close-instance-public-ports-request-instance-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-close-instance-public-ports-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'close-instance-public-ports-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'close-instance-public-ports-request
                    'make-close-instance-public-ports-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          close-instance-public-ports-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          close-instance-public-ports-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-info))
      (common-lisp:list
       (common-lisp:cons "portInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-name))
      (common-lisp:list
       (common-lisp:cons "instanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          close-instance-public-ports-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass close-instance-public-ports-result common-lisp:nil
                       ((operation :initarg :operation :initform
                         common-lisp:nil :type
                         (common-lisp:or operation common-lisp:null) :accessor
                         struct-shape-close-instance-public-ports-result-operation
                         :shape "Operation" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-close-instance-public-ports-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'close-instance-public-ports-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'close-instance-public-ports-result
                    'make-close-instance-public-ports-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          close-instance-public-ports-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          close-instance-public-ports-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          close-instance-public-ports-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cloud-formation-stack-record common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-cloud-formation-stack-record-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-cloud-formation-stack-record-arn :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-cloud-formation-stack-record-created-at
                         :shape "IsoDate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (location :initarg :location :initform common-lisp:nil
                         :type
                         (common-lisp:or resource-location common-lisp:null)
                         :accessor
                         struct-shape-cloud-formation-stack-record-location
                         :shape "ResourceLocation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor
                         struct-shape-cloud-formation-stack-record-resource-type
                         :shape "ResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or record-state common-lisp:null)
                         :accessor
                         struct-shape-cloud-formation-stack-record-state :shape
                         "RecordState" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source-info :initarg :source-info :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          cloud-formation-stack-record-source-info-list
                          common-lisp:null)
                         :accessor
                         struct-shape-cloud-formation-stack-record-source-info
                         :shape "CloudFormationStackRecordSourceInfoList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (destination-info :initarg :destination-info :initform
                         common-lisp:nil :type
                         (common-lisp:or destination-info common-lisp:null)
                         :accessor
                         struct-shape-cloud-formation-stack-record-destination-info
                         :shape "DestinationInfo" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cloud-formation-stack-record
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cloud-formation-stack-record
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cloud-formation-stack-record
                    'make-cloud-formation-stack-record))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-formation-stack-record))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-formation-stack-record))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-info))
      (common-lisp:list
       (common-lisp:cons "sourceInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-info))
      (common-lisp:list
       (common-lisp:cons "destinationInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-formation-stack-record))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cloud-formation-stack-record-list ()
   '(trivial-types:proper-list cloud-formation-stack-record))
 (common-lisp:defun make-cloud-formation-stack-record-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cloud-formation-stack-record))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass cloud-formation-stack-record-source-info common-lisp:nil
                       ((resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          cloud-formation-stack-record-source-type
                          common-lisp:null)
                         :accessor
                         struct-shape-cloud-formation-stack-record-source-info-resource-type
                         :shape "CloudFormationStackRecordSourceType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-cloud-formation-stack-record-source-info-name
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-cloud-formation-stack-record-source-info-arn
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cloud-formation-stack-record-source-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cloud-formation-stack-record-source-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cloud-formation-stack-record-source-info
                    'make-cloud-formation-stack-record-source-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-formation-stack-record-source-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-formation-stack-record-source-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-formation-stack-record-source-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cloud-formation-stack-record-source-info-list ()
   '(trivial-types:proper-list cloud-formation-stack-record-source-info))
 (common-lisp:defun make-cloud-formation-stack-record-source-info-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cloud-formation-stack-record-source-info))
   aws-sdk/generator/shape::members))
(common-lisp:deftype cloud-formation-stack-record-source-type ()
  'common-lisp:string)
(common-lisp:deftype comparison-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass contact-method common-lisp:nil
                       ((contact-endpoint :initarg :contact-endpoint :initform
                         common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-contact-method-contact-endpoint
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or contact-method-status
                                         common-lisp:null)
                         :accessor struct-shape-contact-method-status :shape
                         "ContactMethodStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (protocol :initarg :protocol :initform common-lisp:nil
                         :type
                         (common-lisp:or contact-protocol common-lisp:null)
                         :accessor struct-shape-contact-method-protocol :shape
                         "ContactProtocol" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-contact-method-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-contact-method-arn :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-contact-method-created-at :shape
                         "IsoDate" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (location :initarg :location :initform common-lisp:nil
                         :type
                         (common-lisp:or resource-location common-lisp:null)
                         :accessor struct-shape-contact-method-location :shape
                         "ResourceLocation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor struct-shape-contact-method-resource-type
                         :shape "ResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (support-code :initarg :support-code :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-contact-method-support-code
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-contact-method
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'contact-method
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'contact-method 'make-contact-method))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input contact-method))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input contact-method))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-endpoint))
      (common-lisp:list
       (common-lisp:cons "contactEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'support-code))
      (common-lisp:list
       (common-lisp:cons "supportCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input contact-method))
   common-lisp:nil))
(common-lisp:deftype contact-method-status () 'common-lisp:string)
(common-lisp:deftype contact-method-verification-protocol ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype contact-methods-list ()
   '(trivial-types:proper-list contact-method))
 (common-lisp:defun make-contact-methods-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list contact-method))
   aws-sdk/generator/shape::members))
(common-lisp:deftype contact-protocol () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype contact-protocols-list ()
   '(trivial-types:proper-list contact-protocol))
 (common-lisp:defun make-contact-protocols-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list contact-protocol))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass container common-lisp:nil
                       ((image :initarg :image :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-container-image :shape "string"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (command :initarg :command :initform common-lisp:nil
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-container-command :shape
                         "StringList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (environment :initarg :environment :initform
                         common-lisp:nil :type
                         (common-lisp:or environment common-lisp:null)
                         :accessor struct-shape-container-environment :shape
                         "Environment" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ports :initarg :ports :initform common-lisp:nil :type
                         (common-lisp:or port-map common-lisp:null) :accessor
                         struct-shape-container-ports :shape "PortMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-container
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'container
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'container 'make-container))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input container))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input container))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image))
      (common-lisp:list
       (common-lisp:cons "image"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'command))
      (common-lisp:list
       (common-lisp:cons "command"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ports))
      (common-lisp:list
       (common-lisp:cons "ports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input container))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass container-image common-lisp:nil
                       ((image :initarg :image :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-container-image-image :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (digest :initarg :digest :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-container-image-digest :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-container-image-created-at :shape
                         "IsoDate" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-container-image
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'container-image
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'container-image 'make-container-image))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input container-image))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input container-image))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image))
      (common-lisp:list
       (common-lisp:cons "image"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'digest))
      (common-lisp:list
       (common-lisp:cons "digest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input container-image))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype container-image-list ()
   '(trivial-types:proper-list container-image))
 (common-lisp:defun make-container-image-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list container-image))
   aws-sdk/generator/shape::members))
(common-lisp:deftype container-label () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype container-map () 'common-lisp:hash-table)
 (common-lisp:defun make-container-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype container-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass container-service common-lisp:nil
                       ((container-service-name :initarg
                         :container-service-name :initform common-lisp:nil
                         :type
                         (common-lisp:or container-service-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-container-service-container-service-name
                         :shape "ContainerServiceName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-container-service-arn :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-container-service-created-at :shape
                         "IsoDate" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (location :initarg :location :initform common-lisp:nil
                         :type
                         (common-lisp:or resource-location common-lisp:null)
                         :accessor struct-shape-container-service-location
                         :shape "ResourceLocation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor struct-shape-container-service-resource-type
                         :shape "ResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-container-service-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (power :initarg :power :initform common-lisp:nil :type
                         (common-lisp:or container-service-power-name
                                         common-lisp:null)
                         :accessor struct-shape-container-service-power :shape
                         "ContainerServicePowerName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (power-id :initarg :power-id :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-container-service-power-id
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or container-service-state
                                         common-lisp:null)
                         :accessor struct-shape-container-service-state :shape
                         "ContainerServiceState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state-detail :initarg :state-detail :initform
                         common-lisp:nil :type
                         (common-lisp:or container-service-state-detail
                                         common-lisp:null)
                         :accessor struct-shape-container-service-state-detail
                         :shape "ContainerServiceStateDetail" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (scale :initarg :scale :initform common-lisp:nil :type
                         (common-lisp:or container-service-scale
                                         common-lisp:null)
                         :accessor struct-shape-container-service-scale :shape
                         "ContainerServiceScale" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (current-deployment :initarg :current-deployment
                         :initform common-lisp:nil :type
                         (common-lisp:or container-service-deployment
                                         common-lisp:null)
                         :accessor
                         struct-shape-container-service-current-deployment
                         :shape "ContainerServiceDeployment" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-deployment :initarg :next-deployment :initform
                         common-lisp:nil :type
                         (common-lisp:or container-service-deployment
                                         common-lisp:null)
                         :accessor
                         struct-shape-container-service-next-deployment :shape
                         "ContainerServiceDeployment" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-disabled :initarg :is-disabled :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor struct-shape-container-service-is-disabled
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (principal-arn :initarg :principal-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-container-service-principal-arn
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (private-domain-name :initarg :private-domain-name
                         :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-container-service-private-domain-name
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (public-domain-names :initarg :public-domain-names
                         :initform common-lisp:nil :type
                         (common-lisp:or container-service-public-domains
                                         common-lisp:null)
                         :accessor
                         struct-shape-container-service-public-domain-names
                         :shape "ContainerServicePublicDomains" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (url :initarg :url :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-container-service-url :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (private-registry-access :initarg
                         :private-registry-access :initform common-lisp:nil
                         :type
                         (common-lisp:or private-registry-access
                                         common-lisp:null)
                         :accessor
                         struct-shape-container-service-private-registry-access
                         :shape "PrivateRegistryAccess" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-container-service
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'container-service
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'container-service 'make-container-service))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input container-service))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input container-service))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'container-service-name))
      (common-lisp:list
       (common-lisp:cons "containerServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'power))
      (common-lisp:list
       (common-lisp:cons "power"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'power-id))
      (common-lisp:list
       (common-lisp:cons "powerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-detail))
      (common-lisp:list
       (common-lisp:cons "stateDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scale))
      (common-lisp:list
       (common-lisp:cons "scale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-deployment))
      (common-lisp:list
       (common-lisp:cons "currentDeployment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-deployment))
      (common-lisp:list
       (common-lisp:cons "nextDeployment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-disabled))
      (common-lisp:list
       (common-lisp:cons "isDisabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-arn))
      (common-lisp:list
       (common-lisp:cons "principalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-domain-name))
      (common-lisp:list
       (common-lisp:cons "privateDomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-domain-names))
      (common-lisp:list
       (common-lisp:cons "publicDomainNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'private-registry-access))
      (common-lisp:list
       (common-lisp:cons "privateRegistryAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input container-service))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass container-service-deployment common-lisp:nil
                       ((version :initarg :version :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor
                         struct-shape-container-service-deployment-version
                         :shape "integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or container-service-deployment-state
                                         common-lisp:null)
                         :accessor
                         struct-shape-container-service-deployment-state :shape
                         "ContainerServiceDeploymentState" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (containers :initarg :containers :initform
                         common-lisp:nil :type
                         (common-lisp:or container-map common-lisp:null)
                         :accessor
                         struct-shape-container-service-deployment-containers
                         :shape "ContainerMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (public-endpoint :initarg :public-endpoint :initform
                         common-lisp:nil :type
                         (common-lisp:or container-service-endpoint
                                         common-lisp:null)
                         :accessor
                         struct-shape-container-service-deployment-public-endpoint
                         :shape "ContainerServiceEndpoint" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-container-service-deployment-created-at
                         :shape "IsoDate" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-container-service-deployment
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'container-service-deployment
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'container-service-deployment
                    'make-container-service-deployment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          container-service-deployment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          container-service-deployment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'containers))
      (common-lisp:list
       (common-lisp:cons "containers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-endpoint))
      (common-lisp:list
       (common-lisp:cons "publicEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          container-service-deployment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype container-service-deployment-list ()
   '(trivial-types:proper-list container-service-deployment))
 (common-lisp:defun make-container-service-deployment-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            container-service-deployment))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass container-service-deployment-request common-lisp:nil
                       ((containers :initarg :containers :initform
                         common-lisp:nil :type
                         (common-lisp:or container-map common-lisp:null)
                         :accessor
                         struct-shape-container-service-deployment-request-containers
                         :shape "ContainerMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (public-endpoint :initarg :public-endpoint :initform
                         common-lisp:nil :type
                         (common-lisp:or endpoint-request common-lisp:null)
                         :accessor
                         struct-shape-container-service-deployment-request-public-endpoint
                         :shape "EndpointRequest" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-container-service-deployment-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'container-service-deployment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'container-service-deployment-request
                    'make-container-service-deployment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          container-service-deployment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          container-service-deployment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'containers))
      (common-lisp:list
       (common-lisp:cons "containers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-endpoint))
      (common-lisp:list
       (common-lisp:cons "publicEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          container-service-deployment-request))
   common-lisp:nil))
(common-lisp:deftype container-service-deployment-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass container-service-ecrimage-puller-role common-lisp:nil
                       ((is-active :initarg :is-active :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         struct-shape-container-service-ecrimage-puller-role-is-active
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (principal-arn :initarg :principal-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-container-service-ecrimage-puller-role-principal-arn
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-container-service-ecrimage-puller-role
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'container-service-ecrimage-puller-role
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'container-service-ecrimage-puller-role
                    'make-container-service-ecrimage-puller-role))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          container-service-ecrimage-puller-role))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          container-service-ecrimage-puller-role))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-active))
      (common-lisp:list
       (common-lisp:cons "isActive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-arn))
      (common-lisp:list
       (common-lisp:cons "principalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          container-service-ecrimage-puller-role))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass container-service-ecrimage-puller-role-request
                       common-lisp:nil
                       ((is-active :initarg :is-active :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         struct-shape-container-service-ecrimage-puller-role-request-is-active
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-container-service-ecrimage-puller-role-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'container-service-ecrimage-puller-role-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'container-service-ecrimage-puller-role-request
                    'make-container-service-ecrimage-puller-role-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          container-service-ecrimage-puller-role-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          container-service-ecrimage-puller-role-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-active))
      (common-lisp:list
       (common-lisp:cons "isActive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          container-service-ecrimage-puller-role-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass container-service-endpoint common-lisp:nil
                       ((container-name :initarg :container-name :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-container-service-endpoint-container-name
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (container-port :initarg :container-port :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor
                         struct-shape-container-service-endpoint-container-port
                         :shape "integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (health-check :initarg :health-check :initform
                         common-lisp:nil :type
                         (common-lisp:or container-service-health-check-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-container-service-endpoint-health-check
                         :shape "ContainerServiceHealthCheckConfig" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-container-service-endpoint
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'container-service-endpoint
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'container-service-endpoint
                    'make-container-service-endpoint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          container-service-endpoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          container-service-endpoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-name))
      (common-lisp:list
       (common-lisp:cons "containerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-port))
      (common-lisp:list
       (common-lisp:cons "containerPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check))
      (common-lisp:list
       (common-lisp:cons "healthCheck"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          container-service-endpoint))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass container-service-health-check-config common-lisp:nil
                       ((healthy-threshold :initarg :healthy-threshold
                         :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor
                         struct-shape-container-service-health-check-config-healthy-threshold
                         :shape "integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unhealthy-threshold :initarg :unhealthy-threshold
                         :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor
                         struct-shape-container-service-health-check-config-unhealthy-threshold
                         :shape "integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timeout-seconds :initarg :timeout-seconds :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor
                         struct-shape-container-service-health-check-config-timeout-seconds
                         :shape "integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (interval-seconds :initarg :interval-seconds :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor
                         struct-shape-container-service-health-check-config-interval-seconds
                         :shape "integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (path :initarg :path :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-container-service-health-check-config-path
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (success-codes :initarg :success-codes :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-container-service-health-check-config-success-codes
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-container-service-health-check-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'container-service-health-check-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'container-service-health-check-config
                    'make-container-service-health-check-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          container-service-health-check-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          container-service-health-check-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'healthy-threshold))
      (common-lisp:list
       (common-lisp:cons "healthyThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unhealthy-threshold))
      (common-lisp:list
       (common-lisp:cons "unhealthyThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-seconds))
      (common-lisp:list
       (common-lisp:cons "timeoutSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval-seconds))
      (common-lisp:list
       (common-lisp:cons "intervalSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'success-codes))
      (common-lisp:list
       (common-lisp:cons "successCodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          container-service-health-check-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype container-service-list ()
   '(trivial-types:proper-list container-service))
 (common-lisp:defun make-container-service-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list container-service))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass container-service-log-event common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-container-service-log-event-created-at
                         :shape "IsoDate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-container-service-log-event-message
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-container-service-log-event
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'container-service-log-event
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'container-service-log-event
                    'make-container-service-log-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          container-service-log-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          container-service-log-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          container-service-log-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype container-service-log-event-list ()
   '(trivial-types:proper-list container-service-log-event))
 (common-lisp:defun make-container-service-log-event-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            container-service-log-event))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype container-service-metadata-entry ()
   'common-lisp:hash-table)
 (common-lisp:defun make-container-service-metadata-entry
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype container-service-metadata-entry-list ()
   '(trivial-types:proper-list container-service-metadata-entry))
 (common-lisp:defun make-container-service-metadata-entry-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            container-service-metadata-entry))
   aws-sdk/generator/shape::members))
(common-lisp:deftype container-service-metric-name () 'common-lisp:string)
(common-lisp:deftype container-service-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass container-service-power common-lisp:nil
                       ((power-id :initarg :power-id :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-container-service-power-power-id :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (price :initarg :price :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:single-float
                                         common-lisp:null)
                         :accessor struct-shape-container-service-power-price
                         :shape "float" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cpu-count :initarg :cpu-count :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:single-float
                                         common-lisp:null)
                         :accessor
                         struct-shape-container-service-power-cpu-count :shape
                         "float" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ram-size-in-gb :initarg :ram-size-in-gb :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:single-float
                                         common-lisp:null)
                         :accessor
                         struct-shape-container-service-power-ram-size-in-gb
                         :shape "float" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-container-service-power-name
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-active :initarg :is-active :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         struct-shape-container-service-power-is-active :shape
                         "boolean" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-container-service-power
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'container-service-power
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'container-service-power 'make-container-service-power))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          container-service-power))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          container-service-power))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'power-id))
      (common-lisp:list
       (common-lisp:cons "powerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'price))
      (common-lisp:list
       (common-lisp:cons "price"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpu-count))
      (common-lisp:list
       (common-lisp:cons "cpuCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ram-size-in-gb))
      (common-lisp:list
       (common-lisp:cons "ramSizeInGb"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-active))
      (common-lisp:list
       (common-lisp:cons "isActive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          container-service-power))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype container-service-power-list ()
   '(trivial-types:proper-list container-service-power))
 (common-lisp:defun make-container-service-power-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list container-service-power))
   aws-sdk/generator/shape::members))
(common-lisp:deftype container-service-power-name () 'common-lisp:string)
(common-lisp:deftype container-service-protocol () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype container-service-public-domains ()
   'common-lisp:hash-table)
 (common-lisp:defun make-container-service-public-domains
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype container-service-public-domains-list ()
   '(trivial-types:proper-list common-lisp:string))
 (common-lisp:defun make-container-service-public-domains-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list common-lisp:string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass container-service-registry-login common-lisp:nil
                       ((username :initarg :username :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-container-service-registry-login-username
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (password :initarg :password :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-container-service-registry-login-password
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (expires-at :initarg :expires-at :initform
                         common-lisp:nil :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-container-service-registry-login-expires-at
                         :shape "IsoDate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (registry :initarg :registry :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-container-service-registry-login-registry
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-container-service-registry-login
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'container-service-registry-login
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'container-service-registry-login
                    'make-container-service-registry-login))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          container-service-registry-login))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          container-service-registry-login))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires-at))
      (common-lisp:list
       (common-lisp:cons "expiresAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry))
      (common-lisp:list
       (common-lisp:cons "registry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          container-service-registry-login))
   common-lisp:nil))
(common-lisp:deftype container-service-scale () 'common-lisp:integer)
(common-lisp:deftype container-service-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass container-service-state-detail common-lisp:nil
                       ((code :initarg :code :initform common-lisp:nil :type
                         (common-lisp:or container-service-state-detail-code
                                         common-lisp:null)
                         :accessor
                         struct-shape-container-service-state-detail-code
                         :shape "ContainerServiceStateDetailCode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-container-service-state-detail-message
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-container-service-state-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'container-service-state-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'container-service-state-detail
                    'make-container-service-state-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          container-service-state-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          container-service-state-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          container-service-state-detail))
   common-lisp:nil))
(common-lisp:deftype container-service-state-detail-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass container-services-list-result common-lisp:nil
                       ((container-services :initarg :container-services
                         :initform common-lisp:nil :type
                         (common-lisp:or container-service-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-container-services-list-result-container-services
                         :shape "ContainerServiceList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-container-services-list-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'container-services-list-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'container-services-list-result
                    'make-container-services-list-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          container-services-list-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          container-services-list-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-services))
      (common-lisp:list
       (common-lisp:cons "containerServices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          container-services-list-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cookie-object common-lisp:nil
                       ((option :initarg :option :initform common-lisp:nil
                         :type (common-lisp:or forward-values common-lisp:null)
                         :accessor struct-shape-cookie-object-option :shape
                         "ForwardValues" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cookies-allow-list :initarg :cookies-allow-list
                         :initform common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-cookie-object-cookies-allow-list :shape
                         "StringList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cookie-object
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cookie-object
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'cookie-object 'make-cookie-object))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cookie-object))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cookie-object))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option))
      (common-lisp:list
       (common-lisp:cons "option"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cookies-allow-list))
      (common-lisp:list
       (common-lisp:cons "cookiesAllowList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cookie-object))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass copy-snapshot-request common-lisp:nil
                       ((source-snapshot-name :initarg :source-snapshot-name
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-copy-snapshot-request-source-snapshot-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-resource-name :initarg :source-resource-name
                         :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-copy-snapshot-request-source-resource-name
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (restore-date :initarg :restore-date :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-copy-snapshot-request-restore-date :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (use-latest-restorable-auto-snapshot :initarg
                         :use-latest-restorable-auto-snapshot :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         struct-shape-copy-snapshot-request-use-latest-restorable-auto-snapshot
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-snapshot-name :initarg :target-snapshot-name
                         :initform
                         (common-lisp:error ":targetsnapshotname is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-copy-snapshot-request-target-snapshot-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-region :initarg :source-region :initform
                         (common-lisp:error ":sourceregion is required") :type
                         (common-lisp:or region-name common-lisp:null)
                         :accessor
                         struct-shape-copy-snapshot-request-source-region
                         :shape "RegionName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-copy-snapshot-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'copy-snapshot-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'copy-snapshot-request 'make-copy-snapshot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-snapshot-name))
      (common-lisp:list
       (common-lisp:cons "sourceSnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-resource-name))
      (common-lisp:list
       (common-lisp:cons "sourceResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore-date))
      (common-lisp:list
       (common-lisp:cons "restoreDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-latest-restorable-auto-snapshot))
      (common-lisp:list
       (common-lisp:cons "useLatestRestorableAutoSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-snapshot-name))
      (common-lisp:list
       (common-lisp:cons "targetSnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-region))
      (common-lisp:list
       (common-lisp:cons "sourceRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass copy-snapshot-result common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor struct-shape-copy-snapshot-result-operations
                         :shape "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-copy-snapshot-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'copy-snapshot-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'copy-snapshot-result 'make-copy-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input copy-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input copy-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input copy-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cost-estimate common-lisp:nil
                       ((usage-type :initarg :usage-type :initform
                         common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-cost-estimate-usage-type :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (results-by-time :initarg :results-by-time :initform
                         common-lisp:nil :type
                         (common-lisp:or estimates-by-time common-lisp:null)
                         :accessor struct-shape-cost-estimate-results-by-time
                         :shape "EstimatesByTime" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cost-estimate
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cost-estimate
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'cost-estimate 'make-cost-estimate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cost-estimate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cost-estimate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-type))
      (common-lisp:list
       (common-lisp:cons "usageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results-by-time))
      (common-lisp:list
       (common-lisp:cons "resultsByTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cost-estimate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cost-estimates ()
   '(trivial-types:proper-list cost-estimate))
 (common-lisp:defun make-cost-estimates
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cost-estimate))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass create-bucket-access-key-request common-lisp:nil
                       ((bucket-name :initarg :bucket-name :initform
                         (common-lisp:error ":bucketname is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-create-bucket-access-key-request-bucket-name
                         :shape "BucketName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-bucket-access-key-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-bucket-access-key-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-bucket-access-key-request
                    'make-create-bucket-access-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-bucket-access-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-bucket-access-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "bucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-bucket-access-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-bucket-access-key-result common-lisp:nil
                       ((access-key :initarg :access-key :initform
                         common-lisp:nil :type
                         (common-lisp:or access-key common-lisp:null) :accessor
                         struct-shape-create-bucket-access-key-result-access-key
                         :shape "AccessKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor
                         struct-shape-create-bucket-access-key-result-operations
                         :shape "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-bucket-access-key-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-bucket-access-key-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-bucket-access-key-result
                    'make-create-bucket-access-key-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-bucket-access-key-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-bucket-access-key-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-key))
      (common-lisp:list
       (common-lisp:cons "accessKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-bucket-access-key-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-bucket-request common-lisp:nil
                       ((bucket-name :initarg :bucket-name :initform
                         (common-lisp:error ":bucketname is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-create-bucket-request-bucket-name :shape
                         "BucketName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bundle-id :initarg :bundle-id :initform
                         (common-lisp:error ":bundleid is required") :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-create-bucket-request-bundle-id
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-bucket-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (enable-object-versioning :initarg
                         :enable-object-versioning :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         struct-shape-create-bucket-request-enable-object-versioning
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-bucket-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-bucket-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-bucket-request 'make-create-bucket-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-bucket-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-bucket-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "bucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-id))
      (common-lisp:list
       (common-lisp:cons "bundleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-object-versioning))
      (common-lisp:list
       (common-lisp:cons "enableObjectVersioning"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-bucket-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-bucket-result common-lisp:nil
                       ((bucket :initarg :bucket :initform common-lisp:nil
                         :type (common-lisp:or bucket common-lisp:null)
                         :accessor struct-shape-create-bucket-result-bucket
                         :shape "Bucket" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor struct-shape-create-bucket-result-operations
                         :shape "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-bucket-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-bucket-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-bucket-result 'make-create-bucket-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-bucket-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-bucket-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-bucket-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-certificate-request common-lisp:nil
                       ((certificate-name :initarg :certificate-name :initform
                         (common-lisp:error ":certificatename is required")
                         :type
                         (common-lisp:or certificate-name common-lisp:null)
                         :accessor
                         struct-shape-create-certificate-request-certificate-name
                         :shape "CertificateName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domainname is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-create-certificate-request-domain-name
                         :shape "DomainName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subject-alternative-names :initarg
                         :subject-alternative-names :initform common-lisp:nil
                         :type
                         (common-lisp:or subject-alternative-name-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-certificate-request-subject-alternative-names
                         :shape "SubjectAlternativeNameList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-certificate-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-certificate-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-certificate-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-certificate-request
                    'make-create-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-name))
      (common-lisp:list
       (common-lisp:cons "certificateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "domainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subject-alternative-names))
      (common-lisp:list
       (common-lisp:cons "subjectAlternativeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-certificate-result common-lisp:nil
                       ((certificate :initarg :certificate :initform
                         common-lisp:nil :type
                         (common-lisp:or certificate-summary common-lisp:null)
                         :accessor
                         struct-shape-create-certificate-result-certificate
                         :shape "CertificateSummary" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor
                         struct-shape-create-certificate-result-operations
                         :shape "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-certificate-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-certificate-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-certificate-result
                    'make-create-certificate-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-certificate-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-certificate-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate))
      (common-lisp:list
       (common-lisp:cons "certificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-certificate-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-cloud-formation-stack-request common-lisp:nil
                       ((instances :initarg :instances :initform
                         (common-lisp:error ":instances is required") :type
                         (common-lisp:or instance-entry-list common-lisp:null)
                         :accessor
                         struct-shape-create-cloud-formation-stack-request-instances
                         :shape "InstanceEntryList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-cloud-formation-stack-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-cloud-formation-stack-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-cloud-formation-stack-request
                    'make-create-cloud-formation-stack-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cloud-formation-stack-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cloud-formation-stack-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instances))
      (common-lisp:list
       (common-lisp:cons "instances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cloud-formation-stack-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-cloud-formation-stack-result common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor
                         struct-shape-create-cloud-formation-stack-result-operations
                         :shape "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-cloud-formation-stack-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-cloud-formation-stack-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-cloud-formation-stack-result
                    'make-create-cloud-formation-stack-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cloud-formation-stack-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cloud-formation-stack-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cloud-formation-stack-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-contact-method-request common-lisp:nil
                       ((protocol :initarg :protocol :initform
                         (common-lisp:error ":protocol is required") :type
                         (common-lisp:or contact-protocol common-lisp:null)
                         :accessor
                         struct-shape-create-contact-method-request-protocol
                         :shape "ContactProtocol" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (contact-endpoint :initarg :contact-endpoint :initform
                         (common-lisp:error ":contactendpoint is required")
                         :type (common-lisp:or string-max256 common-lisp:null)
                         :accessor
                         struct-shape-create-contact-method-request-contact-endpoint
                         :shape "StringMax256" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-contact-method-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-contact-method-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-contact-method-request
                    'make-create-contact-method-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-contact-method-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-contact-method-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-endpoint))
      (common-lisp:list
       (common-lisp:cons "contactEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-contact-method-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-contact-method-result common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor
                         struct-shape-create-contact-method-result-operations
                         :shape "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-contact-method-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-contact-method-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-contact-method-result
                    'make-create-contact-method-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-contact-method-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-contact-method-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-contact-method-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-container-service-deployment-request
                       common-lisp:nil
                       ((service-name :initarg :service-name :initform
                         (common-lisp:error ":servicename is required") :type
                         (common-lisp:or container-service-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-container-service-deployment-request-service-name
                         :shape "ContainerServiceName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (containers :initarg :containers :initform
                         common-lisp:nil :type
                         (common-lisp:or container-map common-lisp:null)
                         :accessor
                         struct-shape-create-container-service-deployment-request-containers
                         :shape "ContainerMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (public-endpoint :initarg :public-endpoint :initform
                         common-lisp:nil :type
                         (common-lisp:or endpoint-request common-lisp:null)
                         :accessor
                         struct-shape-create-container-service-deployment-request-public-endpoint
                         :shape "EndpointRequest" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-container-service-deployment-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-container-service-deployment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-container-service-deployment-request
                    'make-create-container-service-deployment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-container-service-deployment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-container-service-deployment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'containers))
      (common-lisp:list
       (common-lisp:cons "containers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-endpoint))
      (common-lisp:list
       (common-lisp:cons "publicEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-container-service-deployment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-container-service-deployment-result
                       common-lisp:nil
                       ((container-service :initarg :container-service
                         :initform common-lisp:nil :type
                         (common-lisp:or container-service common-lisp:null)
                         :accessor
                         struct-shape-create-container-service-deployment-result-container-service
                         :shape "ContainerService" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-container-service-deployment-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-container-service-deployment-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-container-service-deployment-result
                    'make-create-container-service-deployment-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-container-service-deployment-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-container-service-deployment-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-service))
      (common-lisp:list
       (common-lisp:cons "containerService"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-container-service-deployment-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-container-service-registry-login-request
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-container-service-registry-login-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-container-service-registry-login-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-container-service-registry-login-request
                    'make-create-container-service-registry-login-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-container-service-registry-login-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-container-service-registry-login-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-container-service-registry-login-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-container-service-registry-login-result
                       common-lisp:nil
                       ((registry-login :initarg :registry-login :initform
                         common-lisp:nil :type
                         (common-lisp:or container-service-registry-login
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-container-service-registry-login-result-registry-login
                         :shape "ContainerServiceRegistryLogin" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-container-service-registry-login-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-container-service-registry-login-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-container-service-registry-login-result
                    'make-create-container-service-registry-login-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-container-service-registry-login-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-container-service-registry-login-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-login))
      (common-lisp:list
       (common-lisp:cons "registryLogin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-container-service-registry-login-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-container-service-request common-lisp:nil
                       ((service-name :initarg :service-name :initform
                         (common-lisp:error ":servicename is required") :type
                         (common-lisp:or container-service-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-container-service-request-service-name
                         :shape "ContainerServiceName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (power :initarg :power :initform
                         (common-lisp:error ":power is required") :type
                         (common-lisp:or container-service-power-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-container-service-request-power
                         :shape "ContainerServicePowerName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (scale :initarg :scale :initform
                         (common-lisp:error ":scale is required") :type
                         (common-lisp:or container-service-scale
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-container-service-request-scale
                         :shape "ContainerServiceScale" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-container-service-request-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (public-domain-names :initarg :public-domain-names
                         :initform common-lisp:nil :type
                         (common-lisp:or container-service-public-domains
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-container-service-request-public-domain-names
                         :shape "ContainerServicePublicDomains" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (deployment :initarg :deployment :initform
                         common-lisp:nil :type
                         (common-lisp:or container-service-deployment-request
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-container-service-request-deployment
                         :shape "ContainerServiceDeploymentRequest" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (private-registry-access :initarg
                         :private-registry-access :initform common-lisp:nil
                         :type
                         (common-lisp:or private-registry-access-request
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-container-service-request-private-registry-access
                         :shape "PrivateRegistryAccessRequest" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-container-service-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-container-service-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-container-service-request
                    'make-create-container-service-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-container-service-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-container-service-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'power))
      (common-lisp:list
       (common-lisp:cons "power"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scale))
      (common-lisp:list
       (common-lisp:cons "scale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-domain-names))
      (common-lisp:list
       (common-lisp:cons "publicDomainNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment))
      (common-lisp:list
       (common-lisp:cons "deployment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'private-registry-access))
      (common-lisp:list
       (common-lisp:cons "privateRegistryAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-container-service-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-container-service-result common-lisp:nil
                       ((container-service :initarg :container-service
                         :initform common-lisp:nil :type
                         (common-lisp:or container-service common-lisp:null)
                         :accessor
                         struct-shape-create-container-service-result-container-service
                         :shape "ContainerService" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-container-service-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-container-service-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-container-service-result
                    'make-create-container-service-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-container-service-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-container-service-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-service))
      (common-lisp:list
       (common-lisp:cons "containerService"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-container-service-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-disk-from-snapshot-request common-lisp:nil
                       ((disk-name :initarg :disk-name :initform
                         (common-lisp:error ":diskname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-disk-from-snapshot-request-disk-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (disk-snapshot-name :initarg :disk-snapshot-name
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-disk-from-snapshot-request-disk-snapshot-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (availability-zone :initarg :availability-zone
                         :initform
                         (common-lisp:error ":availabilityzone is required")
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-create-disk-from-snapshot-request-availability-zone
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (size-in-gb :initarg :size-in-gb :initform
                         (common-lisp:error ":sizeingb is required") :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor
                         struct-shape-create-disk-from-snapshot-request-size-in-gb
                         :shape "integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-disk-from-snapshot-request-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (add-ons :initarg :add-ons :initform common-lisp:nil
                         :type
                         (common-lisp:or add-on-request-list common-lisp:null)
                         :accessor
                         struct-shape-create-disk-from-snapshot-request-add-ons
                         :shape "AddOnRequestList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-disk-name :initarg :source-disk-name :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-create-disk-from-snapshot-request-source-disk-name
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (restore-date :initarg :restore-date :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-create-disk-from-snapshot-request-restore-date
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (use-latest-restorable-auto-snapshot :initarg
                         :use-latest-restorable-auto-snapshot :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         struct-shape-create-disk-from-snapshot-request-use-latest-restorable-auto-snapshot
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-disk-from-snapshot-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-disk-from-snapshot-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-disk-from-snapshot-request
                    'make-create-disk-from-snapshot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-disk-from-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-disk-from-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disk-name))
      (common-lisp:list
       (common-lisp:cons "diskName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disk-snapshot-name))
      (common-lisp:list
       (common-lisp:cons "diskSnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "availabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-in-gb))
      (common-lisp:list
       (common-lisp:cons "sizeInGb"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'add-ons))
      (common-lisp:list
       (common-lisp:cons "addOns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-disk-name))
      (common-lisp:list
       (common-lisp:cons "sourceDiskName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore-date))
      (common-lisp:list
       (common-lisp:cons "restoreDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-latest-restorable-auto-snapshot))
      (common-lisp:list
       (common-lisp:cons "useLatestRestorableAutoSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-disk-from-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-disk-from-snapshot-result common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor
                         struct-shape-create-disk-from-snapshot-result-operations
                         :shape "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-disk-from-snapshot-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-disk-from-snapshot-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-disk-from-snapshot-result
                    'make-create-disk-from-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-disk-from-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-disk-from-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-disk-from-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-disk-request common-lisp:nil
                       ((disk-name :initarg :disk-name :initform
                         (common-lisp:error ":diskname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-create-disk-request-disk-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (availability-zone :initarg :availability-zone
                         :initform
                         (common-lisp:error ":availabilityzone is required")
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-create-disk-request-availability-zone
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (size-in-gb :initarg :size-in-gb :initform
                         (common-lisp:error ":sizeingb is required") :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor struct-shape-create-disk-request-size-in-gb
                         :shape "integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-disk-request-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (add-ons :initarg :add-ons :initform common-lisp:nil
                         :type
                         (common-lisp:or add-on-request-list common-lisp:null)
                         :accessor struct-shape-create-disk-request-add-ons
                         :shape "AddOnRequestList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-disk-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-disk-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-disk-request 'make-create-disk-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-disk-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-disk-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disk-name))
      (common-lisp:list
       (common-lisp:cons "diskName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "availabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-in-gb))
      (common-lisp:list
       (common-lisp:cons "sizeInGb"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'add-ons))
      (common-lisp:list
       (common-lisp:cons "addOns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-disk-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-disk-result common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor struct-shape-create-disk-result-operations
                         :shape "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-disk-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-disk-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-disk-result 'make-create-disk-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-disk-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-disk-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-disk-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-disk-snapshot-request common-lisp:nil
                       ((disk-name :initarg :disk-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-disk-snapshot-request-disk-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (disk-snapshot-name :initarg :disk-snapshot-name
                         :initform
                         (common-lisp:error ":disksnapshotname is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-disk-snapshot-request-disk-snapshot-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-name :initarg :instance-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-disk-snapshot-request-instance-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-disk-snapshot-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-disk-snapshot-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-disk-snapshot-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-disk-snapshot-request
                    'make-create-disk-snapshot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-disk-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-disk-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disk-name))
      (common-lisp:list
       (common-lisp:cons "diskName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disk-snapshot-name))
      (common-lisp:list
       (common-lisp:cons "diskSnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-name))
      (common-lisp:list
       (common-lisp:cons "instanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-disk-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-disk-snapshot-result common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor
                         struct-shape-create-disk-snapshot-result-operations
                         :shape "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-disk-snapshot-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-disk-snapshot-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-disk-snapshot-result
                    'make-create-disk-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-disk-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-disk-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-disk-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-distribution-request common-lisp:nil
                       ((distribution-name :initarg :distribution-name
                         :initform
                         (common-lisp:error ":distributionname is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-distribution-request-distribution-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (origin :initarg :origin :initform
                         (common-lisp:error ":origin is required") :type
                         (common-lisp:or input-origin common-lisp:null)
                         :accessor
                         struct-shape-create-distribution-request-origin :shape
                         "InputOrigin" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (default-cache-behavior :initarg
                         :default-cache-behavior :initform
                         (common-lisp:error
                          ":defaultcachebehavior is required")
                         :type (common-lisp:or cache-behavior common-lisp:null)
                         :accessor
                         struct-shape-create-distribution-request-default-cache-behavior
                         :shape "CacheBehavior" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-behavior-settings :initarg
                         :cache-behavior-settings :initform common-lisp:nil
                         :type (common-lisp:or cache-settings common-lisp:null)
                         :accessor
                         struct-shape-create-distribution-request-cache-behavior-settings
                         :shape "CacheSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-behaviors :initarg :cache-behaviors :initform
                         common-lisp:nil :type
                         (common-lisp:or cache-behavior-list common-lisp:null)
                         :accessor
                         struct-shape-create-distribution-request-cache-behaviors
                         :shape "CacheBehaviorList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bundle-id :initarg :bundle-id :initform
                         (common-lisp:error ":bundleid is required") :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-create-distribution-request-bundle-id
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ip-address-type :initarg :ip-address-type :initform
                         common-lisp:nil :type
                         (common-lisp:or ip-address-type common-lisp:null)
                         :accessor
                         struct-shape-create-distribution-request-ip-address-type
                         :shape "IpAddressType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-distribution-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-distribution-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-distribution-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-distribution-request
                    'make-create-distribution-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-distribution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-distribution-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distribution-name))
      (common-lisp:list
       (common-lisp:cons "distributionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin))
      (common-lisp:list
       (common-lisp:cons "origin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-cache-behavior))
      (common-lisp:list
       (common-lisp:cons "defaultCacheBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-behavior-settings))
      (common-lisp:list
       (common-lisp:cons "cacheBehaviorSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-behaviors))
      (common-lisp:list
       (common-lisp:cons "cacheBehaviors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-id))
      (common-lisp:list
       (common-lisp:cons "bundleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-type))
      (common-lisp:list
       (common-lisp:cons "ipAddressType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-distribution-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-distribution-result common-lisp:nil
                       ((distribution :initarg :distribution :initform
                         common-lisp:nil :type
                         (common-lisp:or lightsail-distribution
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-distribution-result-distribution
                         :shape "LightsailDistribution" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (operation :initarg :operation :initform
                         common-lisp:nil :type
                         (common-lisp:or operation common-lisp:null) :accessor
                         struct-shape-create-distribution-result-operation
                         :shape "Operation" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-distribution-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-distribution-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-distribution-result
                    'make-create-distribution-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-distribution-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-distribution-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distribution))
      (common-lisp:list
       (common-lisp:cons "distribution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-distribution-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-domain-entry-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domainname is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-create-domain-entry-request-domain-name
                         :shape "DomainName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-entry :initarg :domain-entry :initform
                         (common-lisp:error ":domainentry is required") :type
                         (common-lisp:or domain-entry common-lisp:null)
                         :accessor
                         struct-shape-create-domain-entry-request-domain-entry
                         :shape "DomainEntry" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-domain-entry-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-domain-entry-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-domain-entry-request
                    'make-create-domain-entry-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-entry-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-entry-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "domainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-entry))
      (common-lisp:list
       (common-lisp:cons "domainEntry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-entry-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-domain-entry-result common-lisp:nil
                       ((operation :initarg :operation :initform
                         common-lisp:nil :type
                         (common-lisp:or operation common-lisp:null) :accessor
                         struct-shape-create-domain-entry-result-operation
                         :shape "Operation" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-domain-entry-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-domain-entry-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-domain-entry-result
                    'make-create-domain-entry-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-entry-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-entry-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-entry-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-domain-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domainname is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-create-domain-request-domain-name :shape
                         "DomainName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-domain-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-domain-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-domain-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-domain-request 'make-create-domain-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "domainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-domain-result common-lisp:nil
                       ((operation :initarg :operation :initform
                         common-lisp:nil :type
                         (common-lisp:or operation common-lisp:null) :accessor
                         struct-shape-create-domain-result-operation :shape
                         "Operation" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-domain-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-domain-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-domain-result 'make-create-domain-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-domain-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-domain-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-domain-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-guisession-access-details-request common-lisp:nil
                       ((resource-name :initarg :resource-name :initform
                         (common-lisp:error ":resourcename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-guisession-access-details-request-resource-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-guisession-access-details-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-guisession-access-details-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-guisession-access-details-request
                    'make-create-guisession-access-details-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-guisession-access-details-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-guisession-access-details-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "resourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-guisession-access-details-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-guisession-access-details-result common-lisp:nil
                       ((resource-name :initarg :resource-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-guisession-access-details-result-resource-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or status common-lisp:null)
                         :accessor
                         struct-shape-create-guisession-access-details-result-status
                         :shape "Status" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (percentage-complete :initarg :percentage-complete
                         :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor
                         struct-shape-create-guisession-access-details-result-percentage-complete
                         :shape "integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failure-reason :initarg :failure-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-create-guisession-access-details-result-failure-reason
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sessions :initarg :sessions :initform common-lisp:nil
                         :type (common-lisp:or sessions common-lisp:null)
                         :accessor
                         struct-shape-create-guisession-access-details-result-sessions
                         :shape "Sessions" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-guisession-access-details-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-guisession-access-details-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-guisession-access-details-result
                    'make-create-guisession-access-details-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-guisession-access-details-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-guisession-access-details-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "resourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percentage-complete))
      (common-lisp:list
       (common-lisp:cons "percentageComplete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "failureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sessions))
      (common-lisp:list
       (common-lisp:cons "sessions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-guisession-access-details-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-instance-snapshot-request common-lisp:nil
                       ((instance-snapshot-name :initarg
                         :instance-snapshot-name :initform
                         (common-lisp:error
                          ":instancesnapshotname is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-instance-snapshot-request-instance-snapshot-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-name :initarg :instance-name :initform
                         (common-lisp:error ":instancename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-instance-snapshot-request-instance-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-instance-snapshot-request-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-instance-snapshot-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-instance-snapshot-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-instance-snapshot-request
                    'make-create-instance-snapshot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-instance-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-instance-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-snapshot-name))
      (common-lisp:list
       (common-lisp:cons "instanceSnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-name))
      (common-lisp:list
       (common-lisp:cons "instanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-instance-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-instance-snapshot-result common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor
                         struct-shape-create-instance-snapshot-result-operations
                         :shape "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-instance-snapshot-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-instance-snapshot-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-instance-snapshot-result
                    'make-create-instance-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-instance-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-instance-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-instance-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-instances-from-snapshot-request common-lisp:nil
                       ((instance-names :initarg :instance-names :initform
                         (common-lisp:error ":instancenames is required") :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-create-instances-from-snapshot-request-instance-names
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attached-disk-mapping :initarg :attached-disk-mapping
                         :initform common-lisp:nil :type
                         (common-lisp:or attached-disk-map common-lisp:null)
                         :accessor
                         struct-shape-create-instances-from-snapshot-request-attached-disk-mapping
                         :shape "AttachedDiskMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (availability-zone :initarg :availability-zone
                         :initform
                         (common-lisp:error ":availabilityzone is required")
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-create-instances-from-snapshot-request-availability-zone
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-snapshot-name :initarg
                         :instance-snapshot-name :initform common-lisp:nil
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-instances-from-snapshot-request-instance-snapshot-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bundle-id :initarg :bundle-id :initform
                         (common-lisp:error ":bundleid is required") :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-create-instances-from-snapshot-request-bundle-id
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-data :initarg :user-data :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-create-instances-from-snapshot-request-user-data
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key-pair-name :initarg :key-pair-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-instances-from-snapshot-request-key-pair-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-instances-from-snapshot-request-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (add-ons :initarg :add-ons :initform common-lisp:nil
                         :type
                         (common-lisp:or add-on-request-list common-lisp:null)
                         :accessor
                         struct-shape-create-instances-from-snapshot-request-add-ons
                         :shape "AddOnRequestList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ip-address-type :initarg :ip-address-type :initform
                         common-lisp:nil :type
                         (common-lisp:or ip-address-type common-lisp:null)
                         :accessor
                         struct-shape-create-instances-from-snapshot-request-ip-address-type
                         :shape "IpAddressType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-instance-name :initarg :source-instance-name
                         :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-create-instances-from-snapshot-request-source-instance-name
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (restore-date :initarg :restore-date :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-create-instances-from-snapshot-request-restore-date
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (use-latest-restorable-auto-snapshot :initarg
                         :use-latest-restorable-auto-snapshot :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         struct-shape-create-instances-from-snapshot-request-use-latest-restorable-auto-snapshot
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-instances-from-snapshot-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-instances-from-snapshot-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-instances-from-snapshot-request
                    'make-create-instances-from-snapshot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-instances-from-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-instances-from-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-names))
      (common-lisp:list
       (common-lisp:cons "instanceNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attached-disk-mapping))
      (common-lisp:list
       (common-lisp:cons "attachedDiskMapping"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "availabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-snapshot-name))
      (common-lisp:list
       (common-lisp:cons "instanceSnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-id))
      (common-lisp:list
       (common-lisp:cons "bundleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-data))
      (common-lisp:list
       (common-lisp:cons "userData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-pair-name))
      (common-lisp:list
       (common-lisp:cons "keyPairName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'add-ons))
      (common-lisp:list
       (common-lisp:cons "addOns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-type))
      (common-lisp:list
       (common-lisp:cons "ipAddressType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-instance-name))
      (common-lisp:list
       (common-lisp:cons "sourceInstanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore-date))
      (common-lisp:list
       (common-lisp:cons "restoreDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-latest-restorable-auto-snapshot))
      (common-lisp:list
       (common-lisp:cons "useLatestRestorableAutoSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-instances-from-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-instances-from-snapshot-result common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor
                         struct-shape-create-instances-from-snapshot-result-operations
                         :shape "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-instances-from-snapshot-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-instances-from-snapshot-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-instances-from-snapshot-result
                    'make-create-instances-from-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-instances-from-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-instances-from-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-instances-from-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-instances-request common-lisp:nil
                       ((instance-names :initarg :instance-names :initform
                         (common-lisp:error ":instancenames is required") :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-create-instances-request-instance-names
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (availability-zone :initarg :availability-zone
                         :initform
                         (common-lisp:error ":availabilityzone is required")
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-create-instances-request-availability-zone
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-image-name :initarg :custom-image-name
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-instances-request-custom-image-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (blueprint-id :initarg :blueprint-id :initform
                         (common-lisp:error ":blueprintid is required") :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-create-instances-request-blueprint-id
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bundle-id :initarg :bundle-id :initform
                         (common-lisp:error ":bundleid is required") :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-create-instances-request-bundle-id :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-data :initarg :user-data :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-create-instances-request-user-data :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (key-pair-name :initarg :key-pair-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-instances-request-key-pair-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-instances-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (add-ons :initarg :add-ons :initform common-lisp:nil
                         :type
                         (common-lisp:or add-on-request-list common-lisp:null)
                         :accessor
                         struct-shape-create-instances-request-add-ons :shape
                         "AddOnRequestList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ip-address-type :initarg :ip-address-type :initform
                         common-lisp:nil :type
                         (common-lisp:or ip-address-type common-lisp:null)
                         :accessor
                         struct-shape-create-instances-request-ip-address-type
                         :shape "IpAddressType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-instances-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-instances-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-instances-request 'make-create-instances-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-instances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-instances-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-names))
      (common-lisp:list
       (common-lisp:cons "instanceNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "availabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-image-name))
      (common-lisp:list
       (common-lisp:cons "customImageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blueprint-id))
      (common-lisp:list
       (common-lisp:cons "blueprintId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-id))
      (common-lisp:list
       (common-lisp:cons "bundleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-data))
      (common-lisp:list
       (common-lisp:cons "userData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-pair-name))
      (common-lisp:list
       (common-lisp:cons "keyPairName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'add-ons))
      (common-lisp:list
       (common-lisp:cons "addOns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-type))
      (common-lisp:list
       (common-lisp:cons "ipAddressType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-instances-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-instances-result common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor
                         struct-shape-create-instances-result-operations :shape
                         "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-instances-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-instances-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-instances-result 'make-create-instances-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-instances-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-instances-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-instances-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-key-pair-request common-lisp:nil
                       ((key-pair-name :initarg :key-pair-name :initform
                         (common-lisp:error ":keypairname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-key-pair-request-key-pair-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-key-pair-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-key-pair-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-key-pair-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-key-pair-request 'make-create-key-pair-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-key-pair-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-key-pair-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-pair-name))
      (common-lisp:list
       (common-lisp:cons "keyPairName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-key-pair-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-key-pair-result common-lisp:nil
                       ((key-pair :initarg :key-pair :initform common-lisp:nil
                         :type (common-lisp:or key-pair common-lisp:null)
                         :accessor struct-shape-create-key-pair-result-key-pair
                         :shape "KeyPair" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (public-key-base64 :initarg :public-key-base64
                         :initform common-lisp:nil :type
                         (common-lisp:or base64 common-lisp:null) :accessor
                         struct-shape-create-key-pair-result-public-key-base64
                         :shape "Base64" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (private-key-base64 :initarg :private-key-base64
                         :initform common-lisp:nil :type
                         (common-lisp:or base64 common-lisp:null) :accessor
                         struct-shape-create-key-pair-result-private-key-base64
                         :shape "Base64" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (operation :initarg :operation :initform
                         common-lisp:nil :type
                         (common-lisp:or operation common-lisp:null) :accessor
                         struct-shape-create-key-pair-result-operation :shape
                         "Operation" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-key-pair-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-key-pair-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-key-pair-result 'make-create-key-pair-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-key-pair-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-key-pair-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-pair))
      (common-lisp:list
       (common-lisp:cons "keyPair"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-key-base64))
      (common-lisp:list
       (common-lisp:cons "publicKeyBase64"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-key-base64))
      (common-lisp:list
       (common-lisp:cons "privateKeyBase64"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-key-pair-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-load-balancer-request common-lisp:nil
                       ((load-balancer-name :initarg :load-balancer-name
                         :initform
                         (common-lisp:error ":loadbalancername is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-load-balancer-request-load-balancer-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-port :initarg :instance-port :initform
                         (common-lisp:error ":instanceport is required") :type
                         (common-lisp:or port common-lisp:null) :accessor
                         struct-shape-create-load-balancer-request-instance-port
                         :shape "Port" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (health-check-path :initarg :health-check-path
                         :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-create-load-balancer-request-health-check-path
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-name :initarg :certificate-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-load-balancer-request-certificate-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-domain-name :initarg
                         :certificate-domain-name :initform common-lisp:nil
                         :type (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-create-load-balancer-request-certificate-domain-name
                         :shape "DomainName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-alternative-names :initarg
                         :certificate-alternative-names :initform
                         common-lisp:nil :type
                         (common-lisp:or domain-name-list common-lisp:null)
                         :accessor
                         struct-shape-create-load-balancer-request-certificate-alternative-names
                         :shape "DomainNameList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-load-balancer-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ip-address-type :initarg :ip-address-type :initform
                         common-lisp:nil :type
                         (common-lisp:or ip-address-type common-lisp:null)
                         :accessor
                         struct-shape-create-load-balancer-request-ip-address-type
                         :shape "IpAddressType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tls-policy-name :initarg :tls-policy-name :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-create-load-balancer-request-tls-policy-name
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-load-balancer-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-load-balancer-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-load-balancer-request
                    'make-create-load-balancer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "loadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-port))
      (common-lisp:list
       (common-lisp:cons "instancePort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check-path))
      (common-lisp:list
       (common-lisp:cons "healthCheckPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-name))
      (common-lisp:list
       (common-lisp:cons "certificateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-domain-name))
      (common-lisp:list
       (common-lisp:cons "certificateDomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-alternative-names))
      (common-lisp:list
       (common-lisp:cons "certificateAlternativeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-type))
      (common-lisp:list
       (common-lisp:cons "ipAddressType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tls-policy-name))
      (common-lisp:list
       (common-lisp:cons "tlsPolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-load-balancer-result common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor
                         struct-shape-create-load-balancer-result-operations
                         :shape "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-load-balancer-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-load-balancer-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-load-balancer-result
                    'make-create-load-balancer-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-load-balancer-tls-certificate-request
                       common-lisp:nil
                       ((load-balancer-name :initarg :load-balancer-name
                         :initform
                         (common-lisp:error ":loadbalancername is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-load-balancer-tls-certificate-request-load-balancer-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-name :initarg :certificate-name :initform
                         (common-lisp:error ":certificatename is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-load-balancer-tls-certificate-request-certificate-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-domain-name :initarg
                         :certificate-domain-name :initform
                         (common-lisp:error
                          ":certificatedomainname is required")
                         :type (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-create-load-balancer-tls-certificate-request-certificate-domain-name
                         :shape "DomainName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-alternative-names :initarg
                         :certificate-alternative-names :initform
                         common-lisp:nil :type
                         (common-lisp:or domain-name-list common-lisp:null)
                         :accessor
                         struct-shape-create-load-balancer-tls-certificate-request-certificate-alternative-names
                         :shape "DomainNameList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-load-balancer-tls-certificate-request-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-load-balancer-tls-certificate-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-load-balancer-tls-certificate-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-load-balancer-tls-certificate-request
                    'make-create-load-balancer-tls-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-tls-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-tls-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "loadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-name))
      (common-lisp:list
       (common-lisp:cons "certificateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-domain-name))
      (common-lisp:list
       (common-lisp:cons "certificateDomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-alternative-names))
      (common-lisp:list
       (common-lisp:cons "certificateAlternativeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-tls-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-load-balancer-tls-certificate-result
                       common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor
                         struct-shape-create-load-balancer-tls-certificate-result-operations
                         :shape "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-load-balancer-tls-certificate-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-load-balancer-tls-certificate-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-load-balancer-tls-certificate-result
                    'make-create-load-balancer-tls-certificate-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-tls-certificate-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-tls-certificate-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-tls-certificate-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-relational-database-from-snapshot-request
                       common-lisp:nil
                       ((relational-database-name :initarg
                         :relational-database-name :initform
                         (common-lisp:error
                          ":relationaldatabasename is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-relational-database-from-snapshot-request-relational-database-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (availability-zone :initarg :availability-zone
                         :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-create-relational-database-from-snapshot-request-availability-zone
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (publicly-accessible :initarg :publicly-accessible
                         :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         struct-shape-create-relational-database-from-snapshot-request-publicly-accessible
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (relational-database-snapshot-name :initarg
                         :relational-database-snapshot-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-relational-database-from-snapshot-request-relational-database-snapshot-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (relational-database-bundle-id :initarg
                         :relational-database-bundle-id :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-create-relational-database-from-snapshot-request-relational-database-bundle-id
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-relational-database-name :initarg
                         :source-relational-database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-relational-database-from-snapshot-request-source-relational-database-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (restore-time :initarg :restore-time :initform
                         common-lisp:nil :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-create-relational-database-from-snapshot-request-restore-time
                         :shape "IsoDate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (use-latest-restorable-time :initarg
                         :use-latest-restorable-time :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         struct-shape-create-relational-database-from-snapshot-request-use-latest-restorable-time
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-relational-database-from-snapshot-request-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-relational-database-from-snapshot-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-relational-database-from-snapshot-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-relational-database-from-snapshot-request
                    'make-create-relational-database-from-snapshot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-relational-database-from-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-relational-database-from-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-name))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "availabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "publiclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-snapshot-name))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseSnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-bundle-id))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseBundleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-relational-database-name))
      (common-lisp:list
       (common-lisp:cons "sourceRelationalDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore-time))
      (common-lisp:list
       (common-lisp:cons "restoreTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-latest-restorable-time))
      (common-lisp:list
       (common-lisp:cons "useLatestRestorableTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-relational-database-from-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-relational-database-from-snapshot-result
                       common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor
                         struct-shape-create-relational-database-from-snapshot-result-operations
                         :shape "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-relational-database-from-snapshot-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-relational-database-from-snapshot-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-relational-database-from-snapshot-result
                    'make-create-relational-database-from-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-relational-database-from-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-relational-database-from-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-relational-database-from-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-relational-database-request common-lisp:nil
                       ((relational-database-name :initarg
                         :relational-database-name :initform
                         (common-lisp:error
                          ":relationaldatabasename is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-relational-database-request-relational-database-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (availability-zone :initarg :availability-zone
                         :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-create-relational-database-request-availability-zone
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (relational-database-blueprint-id :initarg
                         :relational-database-blueprint-id :initform
                         (common-lisp:error
                          ":relationaldatabaseblueprintid is required")
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-create-relational-database-request-relational-database-blueprint-id
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (relational-database-bundle-id :initarg
                         :relational-database-bundle-id :initform
                         (common-lisp:error
                          ":relationaldatabasebundleid is required")
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-create-relational-database-request-relational-database-bundle-id
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (master-database-name :initarg :master-database-name
                         :initform
                         (common-lisp:error ":masterdatabasename is required")
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-create-relational-database-request-master-database-name
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (master-username :initarg :master-username :initform
                         (common-lisp:error ":masterusername is required")
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-create-relational-database-request-master-username
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (master-user-password :initarg :master-user-password
                         :initform common-lisp:nil :type
                         (common-lisp:or sensitive-string common-lisp:null)
                         :accessor
                         struct-shape-create-relational-database-request-master-user-password
                         :shape "SensitiveString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (preferred-backup-window :initarg
                         :preferred-backup-window :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-create-relational-database-request-preferred-backup-window
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (preferred-maintenance-window :initarg
                         :preferred-maintenance-window :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-create-relational-database-request-preferred-maintenance-window
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (publicly-accessible :initarg :publicly-accessible
                         :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         struct-shape-create-relational-database-request-publicly-accessible
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-relational-database-request-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-relational-database-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-relational-database-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-relational-database-request
                    'make-create-relational-database-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-relational-database-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-relational-database-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-name))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "availabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-blueprint-id))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseBlueprintId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-bundle-id))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseBundleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-database-name))
      (common-lisp:list
       (common-lisp:cons "masterDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-username))
      (common-lisp:list
       (common-lisp:cons "masterUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-password))
      (common-lisp:list
       (common-lisp:cons "masterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-backup-window))
      (common-lisp:list
       (common-lisp:cons "preferredBackupWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "preferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "publiclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-relational-database-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-relational-database-result common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor
                         struct-shape-create-relational-database-result-operations
                         :shape "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-relational-database-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-relational-database-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-relational-database-result
                    'make-create-relational-database-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-relational-database-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-relational-database-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-relational-database-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-relational-database-snapshot-request
                       common-lisp:nil
                       ((relational-database-name :initarg
                         :relational-database-name :initform
                         (common-lisp:error
                          ":relationaldatabasename is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-relational-database-snapshot-request-relational-database-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (relational-database-snapshot-name :initarg
                         :relational-database-snapshot-name :initform
                         (common-lisp:error
                          ":relationaldatabasesnapshotname is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-relational-database-snapshot-request-relational-database-snapshot-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-relational-database-snapshot-request-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-relational-database-snapshot-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-relational-database-snapshot-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-relational-database-snapshot-request
                    'make-create-relational-database-snapshot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-relational-database-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-relational-database-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-name))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-snapshot-name))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseSnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-relational-database-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-relational-database-snapshot-result
                       common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor
                         struct-shape-create-relational-database-snapshot-result-operations
                         :shape "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-relational-database-snapshot-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-relational-database-snapshot-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-relational-database-snapshot-result
                    'make-create-relational-database-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-relational-database-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-relational-database-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-relational-database-snapshot-result))
   common-lisp:nil))
(common-lisp:deftype currency () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-alarm-request common-lisp:nil
                       ((alarm-name :initarg :alarm-name :initform
                         (common-lisp:error ":alarmname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-delete-alarm-request-alarm-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-alarm-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-alarm-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-alarm-request 'make-delete-alarm-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-alarm-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-alarm-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarm-name))
      (common-lisp:list
       (common-lisp:cons "alarmName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-alarm-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-alarm-result common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor struct-shape-delete-alarm-result-operations
                         :shape "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-alarm-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-alarm-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-alarm-result 'make-delete-alarm-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-alarm-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-alarm-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-alarm-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-auto-snapshot-request common-lisp:nil
                       ((resource-name :initarg :resource-name :initform
                         (common-lisp:error ":resourcename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-delete-auto-snapshot-request-resource-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (date :initarg :date :initform
                         (common-lisp:error ":date is required") :type
                         (common-lisp:or auto-snapshot-date common-lisp:null)
                         :accessor
                         struct-shape-delete-auto-snapshot-request-date :shape
                         "AutoSnapshotDate" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-auto-snapshot-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-auto-snapshot-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-auto-snapshot-request
                    'make-delete-auto-snapshot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-auto-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-auto-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "resourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date))
      (common-lisp:list
       (common-lisp:cons "date"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-auto-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-auto-snapshot-result common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor
                         struct-shape-delete-auto-snapshot-result-operations
                         :shape "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-auto-snapshot-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-auto-snapshot-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-auto-snapshot-result
                    'make-delete-auto-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-auto-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-auto-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-auto-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bucket-access-key-request common-lisp:nil
                       ((bucket-name :initarg :bucket-name :initform
                         (common-lisp:error ":bucketname is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-delete-bucket-access-key-request-bucket-name
                         :shape "BucketName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (access-key-id :initarg :access-key-id :initform
                         (common-lisp:error ":accesskeyid is required") :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-delete-bucket-access-key-request-access-key-id
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-bucket-access-key-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-bucket-access-key-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-bucket-access-key-request
                    'make-delete-bucket-access-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-access-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-access-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "bucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-key-id))
      (common-lisp:list
       (common-lisp:cons "accessKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-access-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bucket-access-key-result common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor
                         struct-shape-delete-bucket-access-key-result-operations
                         :shape "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-bucket-access-key-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-bucket-access-key-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-bucket-access-key-result
                    'make-delete-bucket-access-key-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-access-key-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-access-key-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-access-key-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bucket-request common-lisp:nil
                       ((bucket-name :initarg :bucket-name :initform
                         (common-lisp:error ":bucketname is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-delete-bucket-request-bucket-name :shape
                         "BucketName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (force-delete :initarg :force-delete :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         struct-shape-delete-bucket-request-force-delete :shape
                         "boolean" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-bucket-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-bucket-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-bucket-request 'make-delete-bucket-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "bucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force-delete))
      (common-lisp:list
       (common-lisp:cons "forceDelete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bucket-result common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor struct-shape-delete-bucket-result-operations
                         :shape "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-bucket-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-bucket-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-bucket-result 'make-delete-bucket-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-bucket-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-bucket-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-bucket-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-certificate-request common-lisp:nil
                       ((certificate-name :initarg :certificate-name :initform
                         (common-lisp:error ":certificatename is required")
                         :type
                         (common-lisp:or certificate-name common-lisp:null)
                         :accessor
                         struct-shape-delete-certificate-request-certificate-name
                         :shape "CertificateName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-certificate-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-certificate-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-certificate-request
                    'make-delete-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-name))
      (common-lisp:list
       (common-lisp:cons "certificateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-certificate-result common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor
                         struct-shape-delete-certificate-result-operations
                         :shape "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-certificate-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-certificate-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-certificate-result
                    'make-delete-certificate-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-certificate-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-certificate-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-certificate-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-contact-method-request common-lisp:nil
                       ((protocol :initarg :protocol :initform
                         (common-lisp:error ":protocol is required") :type
                         (common-lisp:or contact-protocol common-lisp:null)
                         :accessor
                         struct-shape-delete-contact-method-request-protocol
                         :shape "ContactProtocol" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-contact-method-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-contact-method-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-contact-method-request
                    'make-delete-contact-method-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-contact-method-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-contact-method-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-contact-method-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-contact-method-result common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor
                         struct-shape-delete-contact-method-result-operations
                         :shape "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-contact-method-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-contact-method-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-contact-method-result
                    'make-delete-contact-method-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-contact-method-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-contact-method-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-contact-method-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-container-image-request common-lisp:nil
                       ((service-name :initarg :service-name :initform
                         (common-lisp:error ":servicename is required") :type
                         (common-lisp:or container-service-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-container-image-request-service-name
                         :shape "ContainerServiceName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (image :initarg :image :initform
                         (common-lisp:error ":image is required") :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-delete-container-image-request-image
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-container-image-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-container-image-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-container-image-request
                    'make-delete-container-image-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-container-image-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-container-image-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image))
      (common-lisp:list
       (common-lisp:cons "image"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-container-image-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-container-image-result common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-container-image-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-container-image-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-container-image-result
                    'make-delete-container-image-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-container-image-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-container-image-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-container-image-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-container-service-request common-lisp:nil
                       ((service-name :initarg :service-name :initform
                         (common-lisp:error ":servicename is required") :type
                         (common-lisp:or container-service-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-container-service-request-service-name
                         :shape "ContainerServiceName" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-container-service-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-container-service-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-container-service-request
                    'make-delete-container-service-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-container-service-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-container-service-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-container-service-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-container-service-result common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-container-service-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-container-service-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-container-service-result
                    'make-delete-container-service-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-container-service-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-container-service-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-container-service-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-disk-request common-lisp:nil
                       ((disk-name :initarg :disk-name :initform
                         (common-lisp:error ":diskname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-delete-disk-request-disk-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (force-delete-add-ons :initarg :force-delete-add-ons
                         :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         struct-shape-delete-disk-request-force-delete-add-ons
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-disk-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-disk-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-disk-request 'make-delete-disk-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-disk-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-disk-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disk-name))
      (common-lisp:list
       (common-lisp:cons "diskName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'force-delete-add-ons))
      (common-lisp:list
       (common-lisp:cons "forceDeleteAddOns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-disk-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-disk-result common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor struct-shape-delete-disk-result-operations
                         :shape "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-disk-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-disk-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-disk-result 'make-delete-disk-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-disk-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-disk-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-disk-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-disk-snapshot-request common-lisp:nil
                       ((disk-snapshot-name :initarg :disk-snapshot-name
                         :initform
                         (common-lisp:error ":disksnapshotname is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-delete-disk-snapshot-request-disk-snapshot-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-disk-snapshot-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-disk-snapshot-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-disk-snapshot-request
                    'make-delete-disk-snapshot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-disk-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-disk-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disk-snapshot-name))
      (common-lisp:list
       (common-lisp:cons "diskSnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-disk-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-disk-snapshot-result common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor
                         struct-shape-delete-disk-snapshot-result-operations
                         :shape "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-disk-snapshot-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-disk-snapshot-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-disk-snapshot-result
                    'make-delete-disk-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-disk-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-disk-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-disk-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-distribution-request common-lisp:nil
                       ((distribution-name :initarg :distribution-name
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-delete-distribution-request-distribution-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-distribution-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-distribution-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-distribution-request
                    'make-delete-distribution-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-distribution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-distribution-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distribution-name))
      (common-lisp:list
       (common-lisp:cons "distributionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-distribution-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-distribution-result common-lisp:nil
                       ((operation :initarg :operation :initform
                         common-lisp:nil :type
                         (common-lisp:or operation common-lisp:null) :accessor
                         struct-shape-delete-distribution-result-operation
                         :shape "Operation" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-distribution-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-distribution-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-distribution-result
                    'make-delete-distribution-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-distribution-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-distribution-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-distribution-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-domain-entry-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domainname is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-delete-domain-entry-request-domain-name
                         :shape "DomainName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-entry :initarg :domain-entry :initform
                         (common-lisp:error ":domainentry is required") :type
                         (common-lisp:or domain-entry common-lisp:null)
                         :accessor
                         struct-shape-delete-domain-entry-request-domain-entry
                         :shape "DomainEntry" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-domain-entry-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-domain-entry-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-domain-entry-request
                    'make-delete-domain-entry-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-entry-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-entry-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "domainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-entry))
      (common-lisp:list
       (common-lisp:cons "domainEntry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-entry-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-domain-entry-result common-lisp:nil
                       ((operation :initarg :operation :initform
                         common-lisp:nil :type
                         (common-lisp:or operation common-lisp:null) :accessor
                         struct-shape-delete-domain-entry-result-operation
                         :shape "Operation" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-domain-entry-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-domain-entry-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-domain-entry-result
                    'make-delete-domain-entry-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-entry-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-entry-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-entry-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-domain-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domainname is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-delete-domain-request-domain-name :shape
                         "DomainName" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-domain-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-domain-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-domain-request 'make-delete-domain-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "domainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-domain-result common-lisp:nil
                       ((operation :initarg :operation :initform
                         common-lisp:nil :type
                         (common-lisp:or operation common-lisp:null) :accessor
                         struct-shape-delete-domain-result-operation :shape
                         "Operation" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-domain-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-domain-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-domain-result 'make-delete-domain-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-domain-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-domain-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-domain-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-instance-request common-lisp:nil
                       ((instance-name :initarg :instance-name :initform
                         (common-lisp:error ":instancename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-delete-instance-request-instance-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (force-delete-add-ons :initarg :force-delete-add-ons
                         :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         struct-shape-delete-instance-request-force-delete-add-ons
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-instance-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-instance-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-instance-request 'make-delete-instance-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-instance-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-name))
      (common-lisp:list
       (common-lisp:cons "instanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'force-delete-add-ons))
      (common-lisp:list
       (common-lisp:cons "forceDeleteAddOns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-instance-result common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor
                         struct-shape-delete-instance-result-operations :shape
                         "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-instance-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-instance-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-instance-result 'make-delete-instance-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-instance-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-instance-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-instance-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-instance-snapshot-request common-lisp:nil
                       ((instance-snapshot-name :initarg
                         :instance-snapshot-name :initform
                         (common-lisp:error
                          ":instancesnapshotname is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-delete-instance-snapshot-request-instance-snapshot-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-instance-snapshot-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-instance-snapshot-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-instance-snapshot-request
                    'make-delete-instance-snapshot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-instance-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-instance-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-snapshot-name))
      (common-lisp:list
       (common-lisp:cons "instanceSnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-instance-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-instance-snapshot-result common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor
                         struct-shape-delete-instance-snapshot-result-operations
                         :shape "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-instance-snapshot-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-instance-snapshot-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-instance-snapshot-result
                    'make-delete-instance-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-instance-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-instance-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-instance-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-key-pair-request common-lisp:nil
                       ((key-pair-name :initarg :key-pair-name :initform
                         (common-lisp:error ":keypairname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-delete-key-pair-request-key-pair-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (expected-fingerprint :initarg :expected-fingerprint
                         :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-delete-key-pair-request-expected-fingerprint
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-key-pair-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-key-pair-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-key-pair-request 'make-delete-key-pair-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-key-pair-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-key-pair-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-pair-name))
      (common-lisp:list
       (common-lisp:cons "keyPairName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-fingerprint))
      (common-lisp:list
       (common-lisp:cons "expectedFingerprint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-key-pair-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-key-pair-result common-lisp:nil
                       ((operation :initarg :operation :initform
                         common-lisp:nil :type
                         (common-lisp:or operation common-lisp:null) :accessor
                         struct-shape-delete-key-pair-result-operation :shape
                         "Operation" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-key-pair-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-key-pair-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-key-pair-result 'make-delete-key-pair-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-key-pair-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-key-pair-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-key-pair-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-known-host-keys-request common-lisp:nil
                       ((instance-name :initarg :instance-name :initform
                         (common-lisp:error ":instancename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-delete-known-host-keys-request-instance-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-known-host-keys-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-known-host-keys-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-known-host-keys-request
                    'make-delete-known-host-keys-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-known-host-keys-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-known-host-keys-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-name))
      (common-lisp:list
       (common-lisp:cons "instanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-known-host-keys-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-known-host-keys-result common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor
                         struct-shape-delete-known-host-keys-result-operations
                         :shape "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-known-host-keys-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-known-host-keys-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-known-host-keys-result
                    'make-delete-known-host-keys-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-known-host-keys-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-known-host-keys-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-known-host-keys-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-load-balancer-request common-lisp:nil
                       ((load-balancer-name :initarg :load-balancer-name
                         :initform
                         (common-lisp:error ":loadbalancername is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-delete-load-balancer-request-load-balancer-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-load-balancer-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-load-balancer-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-load-balancer-request
                    'make-delete-load-balancer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "loadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-load-balancer-result common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor
                         struct-shape-delete-load-balancer-result-operations
                         :shape "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-load-balancer-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-load-balancer-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-load-balancer-result
                    'make-delete-load-balancer-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-load-balancer-tls-certificate-request
                       common-lisp:nil
                       ((load-balancer-name :initarg :load-balancer-name
                         :initform
                         (common-lisp:error ":loadbalancername is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-delete-load-balancer-tls-certificate-request-load-balancer-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-name :initarg :certificate-name :initform
                         (common-lisp:error ":certificatename is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-delete-load-balancer-tls-certificate-request-certificate-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (force :initarg :force :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         struct-shape-delete-load-balancer-tls-certificate-request-force
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-load-balancer-tls-certificate-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-load-balancer-tls-certificate-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-load-balancer-tls-certificate-request
                    'make-delete-load-balancer-tls-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-tls-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-tls-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "loadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-name))
      (common-lisp:list
       (common-lisp:cons "certificateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force))
      (common-lisp:list
       (common-lisp:cons "force"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-tls-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-load-balancer-tls-certificate-result
                       common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor
                         struct-shape-delete-load-balancer-tls-certificate-result-operations
                         :shape "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-load-balancer-tls-certificate-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-load-balancer-tls-certificate-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-load-balancer-tls-certificate-result
                    'make-delete-load-balancer-tls-certificate-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-tls-certificate-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-tls-certificate-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-tls-certificate-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-relational-database-request common-lisp:nil
                       ((relational-database-name :initarg
                         :relational-database-name :initform
                         (common-lisp:error
                          ":relationaldatabasename is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-delete-relational-database-request-relational-database-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (skip-final-snapshot :initarg :skip-final-snapshot
                         :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         struct-shape-delete-relational-database-request-skip-final-snapshot
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (final-relational-database-snapshot-name :initarg
                         :final-relational-database-snapshot-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-delete-relational-database-request-final-relational-database-snapshot-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-relational-database-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-relational-database-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-relational-database-request
                    'make-delete-relational-database-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-relational-database-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-relational-database-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-name))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skip-final-snapshot))
      (common-lisp:list
       (common-lisp:cons "skipFinalSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'final-relational-database-snapshot-name))
      (common-lisp:list
       (common-lisp:cons "finalRelationalDatabaseSnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-relational-database-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-relational-database-result common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor
                         struct-shape-delete-relational-database-result-operations
                         :shape "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-relational-database-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-relational-database-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-relational-database-result
                    'make-delete-relational-database-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-relational-database-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-relational-database-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-relational-database-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-relational-database-snapshot-request
                       common-lisp:nil
                       ((relational-database-snapshot-name :initarg
                         :relational-database-snapshot-name :initform
                         (common-lisp:error
                          ":relationaldatabasesnapshotname is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-delete-relational-database-snapshot-request-relational-database-snapshot-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-relational-database-snapshot-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-relational-database-snapshot-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-relational-database-snapshot-request
                    'make-delete-relational-database-snapshot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-relational-database-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-relational-database-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-snapshot-name))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseSnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-relational-database-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-relational-database-snapshot-result
                       common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor
                         struct-shape-delete-relational-database-snapshot-result-operations
                         :shape "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-relational-database-snapshot-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-relational-database-snapshot-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-relational-database-snapshot-result
                    'make-delete-relational-database-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-relational-database-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-relational-database-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-relational-database-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass destination-info common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-destination-info-id :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service :initarg :service :initform common-lisp:nil
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-destination-info-service :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-destination-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'destination-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'destination-info 'make-destination-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input destination-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input destination-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input destination-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detach-certificate-from-distribution-request
                       common-lisp:nil
                       ((distribution-name :initarg :distribution-name
                         :initform
                         (common-lisp:error ":distributionname is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-detach-certificate-from-distribution-request-distribution-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detach-certificate-from-distribution-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'detach-certificate-from-distribution-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'detach-certificate-from-distribution-request
                    'make-detach-certificate-from-distribution-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-certificate-from-distribution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-certificate-from-distribution-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distribution-name))
      (common-lisp:list
       (common-lisp:cons "distributionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-certificate-from-distribution-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detach-certificate-from-distribution-result
                       common-lisp:nil
                       ((operation :initarg :operation :initform
                         common-lisp:nil :type
                         (common-lisp:or operation common-lisp:null) :accessor
                         struct-shape-detach-certificate-from-distribution-result-operation
                         :shape "Operation" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detach-certificate-from-distribution-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'detach-certificate-from-distribution-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'detach-certificate-from-distribution-result
                    'make-detach-certificate-from-distribution-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-certificate-from-distribution-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-certificate-from-distribution-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-certificate-from-distribution-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detach-disk-request common-lisp:nil
                       ((disk-name :initarg :disk-name :initform
                         (common-lisp:error ":diskname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-detach-disk-request-disk-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detach-disk-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'detach-disk-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'detach-disk-request 'make-detach-disk-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input detach-disk-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input detach-disk-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disk-name))
      (common-lisp:list
       (common-lisp:cons "diskName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input detach-disk-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detach-disk-result common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor struct-shape-detach-disk-result-operations
                         :shape "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detach-disk-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'detach-disk-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'detach-disk-result 'make-detach-disk-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input detach-disk-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input detach-disk-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input detach-disk-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detach-instances-from-load-balancer-request
                       common-lisp:nil
                       ((load-balancer-name :initarg :load-balancer-name
                         :initform
                         (common-lisp:error ":loadbalancername is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-detach-instances-from-load-balancer-request-load-balancer-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-names :initarg :instance-names :initform
                         (common-lisp:error ":instancenames is required") :type
                         (common-lisp:or resource-name-list common-lisp:null)
                         :accessor
                         struct-shape-detach-instances-from-load-balancer-request-instance-names
                         :shape "ResourceNameList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detach-instances-from-load-balancer-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'detach-instances-from-load-balancer-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'detach-instances-from-load-balancer-request
                    'make-detach-instances-from-load-balancer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-instances-from-load-balancer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-instances-from-load-balancer-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "loadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-names))
      (common-lisp:list
       (common-lisp:cons "instanceNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-instances-from-load-balancer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detach-instances-from-load-balancer-result
                       common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor
                         struct-shape-detach-instances-from-load-balancer-result-operations
                         :shape "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detach-instances-from-load-balancer-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'detach-instances-from-load-balancer-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'detach-instances-from-load-balancer-result
                    'make-detach-instances-from-load-balancer-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-instances-from-load-balancer-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-instances-from-load-balancer-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-instances-from-load-balancer-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detach-static-ip-request common-lisp:nil
                       ((static-ip-name :initarg :static-ip-name :initform
                         (common-lisp:error ":staticipname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-detach-static-ip-request-static-ip-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detach-static-ip-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'detach-static-ip-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'detach-static-ip-request 'make-detach-static-ip-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-static-ip-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-static-ip-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'static-ip-name))
      (common-lisp:list
       (common-lisp:cons "staticIpName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-static-ip-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detach-static-ip-result common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor
                         struct-shape-detach-static-ip-result-operations :shape
                         "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detach-static-ip-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'detach-static-ip-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'detach-static-ip-result 'make-detach-static-ip-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-static-ip-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-static-ip-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-static-ip-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disable-add-on-request common-lisp:nil
                       ((add-on-type :initarg :add-on-type :initform
                         (common-lisp:error ":addontype is required") :type
                         (common-lisp:or add-on-type common-lisp:null)
                         :accessor
                         struct-shape-disable-add-on-request-add-on-type :shape
                         "AddOnType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-name :initarg :resource-name :initform
                         (common-lisp:error ":resourcename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-disable-add-on-request-resource-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disable-add-on-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'disable-add-on-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disable-add-on-request 'make-disable-add-on-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-add-on-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-add-on-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'add-on-type))
      (common-lisp:list
       (common-lisp:cons "addOnType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "resourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-add-on-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disable-add-on-result common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor
                         struct-shape-disable-add-on-result-operations :shape
                         "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disable-add-on-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'disable-add-on-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disable-add-on-result 'make-disable-add-on-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-add-on-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-add-on-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-add-on-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disk common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-disk-name :shape "ResourceName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-disk-arn :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (support-code :initarg :support-code :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-disk-support-code :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-disk-created-at :shape "IsoDate"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (location :initarg :location :initform common-lisp:nil
                         :type
                         (common-lisp:or resource-location common-lisp:null)
                         :accessor struct-shape-disk-location :shape
                         "ResourceLocation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor struct-shape-disk-resource-type :shape
                         "ResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-disk-tags :shape "TagList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (add-ons :initarg :add-ons :initform common-lisp:nil
                         :type (common-lisp:or add-on-list common-lisp:null)
                         :accessor struct-shape-disk-add-ons :shape "AddOnList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (size-in-gb :initarg :size-in-gb :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor struct-shape-disk-size-in-gb :shape
                         "integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (is-system-disk :initarg :is-system-disk :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor struct-shape-disk-is-system-disk :shape
                         "boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (iops :initarg :iops :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor struct-shape-disk-iops :shape "integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (path :initarg :path :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-disk-path :shape "string"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or disk-state common-lisp:null) :accessor
                         struct-shape-disk-state :shape "DiskState" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (attached-to :initarg :attached-to :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-disk-attached-to :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-attached :initarg :is-attached :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor struct-shape-disk-is-attached :shape
                         "boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (attachment-state :initarg :attachment-state :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-disk-attachment-state :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (gb-in-use :initarg :gb-in-use :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor struct-shape-disk-gb-in-use :shape "integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (auto-mount-status :initarg :auto-mount-status
                         :initform common-lisp:nil :type
                         (common-lisp:or auto-mount-status common-lisp:null)
                         :accessor struct-shape-disk-auto-mount-status :shape
                         "AutoMountStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disk (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'disk
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'disk 'make-disk))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input disk))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input disk))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'support-code))
      (common-lisp:list
       (common-lisp:cons "supportCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'add-ons))
      (common-lisp:list
       (common-lisp:cons "addOns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-in-gb))
      (common-lisp:list
       (common-lisp:cons "sizeInGb"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-system-disk))
      (common-lisp:list
       (common-lisp:cons "isSystemDisk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attached-to))
      (common-lisp:list
       (common-lisp:cons "attachedTo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-attached))
      (common-lisp:list
       (common-lisp:cons "isAttached"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment-state))
      (common-lisp:list
       (common-lisp:cons "attachmentState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gb-in-use))
      (common-lisp:list
       (common-lisp:cons "gbInUse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-mount-status))
      (common-lisp:list
       (common-lisp:cons "autoMountStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input disk))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disk-info common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-disk-info-name :shape "string"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (path :initarg :path :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-disk-info-path :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (size-in-gb :initarg :size-in-gb :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor struct-shape-disk-info-size-in-gb :shape
                         "integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (is-system-disk :initarg :is-system-disk :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor struct-shape-disk-info-is-system-disk :shape
                         "boolean" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disk-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'disk-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'disk-info 'make-disk-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input disk-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input disk-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-in-gb))
      (common-lisp:list
       (common-lisp:cons "sizeInGb"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-system-disk))
      (common-lisp:list
       (common-lisp:cons "isSystemDisk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input disk-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype disk-info-list () '(trivial-types:proper-list disk-info))
 (common-lisp:defun make-disk-info-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list disk-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype disk-list () '(trivial-types:proper-list disk))
 (common-lisp:defun make-disk-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list disk))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass disk-map common-lisp:nil
                       ((original-disk-path :initarg :original-disk-path
                         :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-disk-map-original-disk-path
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (new-disk-name :initarg :new-disk-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-disk-map-new-disk-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disk-map
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'disk-map
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'disk-map 'make-disk-map))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input disk-map))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input disk-map))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'original-disk-path))
      (common-lisp:list
       (common-lisp:cons "originalDiskPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-disk-name))
      (common-lisp:list
       (common-lisp:cons "newDiskName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input disk-map))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype disk-map-list () '(trivial-types:proper-list disk-map))
 (common-lisp:defun make-disk-map-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list disk-map))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass disk-snapshot common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-disk-snapshot-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-disk-snapshot-arn :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (support-code :initarg :support-code :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-disk-snapshot-support-code
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-disk-snapshot-created-at :shape "IsoDate"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (location :initarg :location :initform common-lisp:nil
                         :type
                         (common-lisp:or resource-location common-lisp:null)
                         :accessor struct-shape-disk-snapshot-location :shape
                         "ResourceLocation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor struct-shape-disk-snapshot-resource-type
                         :shape "ResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-disk-snapshot-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (size-in-gb :initarg :size-in-gb :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor struct-shape-disk-snapshot-size-in-gb :shape
                         "integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or disk-snapshot-state common-lisp:null)
                         :accessor struct-shape-disk-snapshot-state :shape
                         "DiskSnapshotState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (progress :initarg :progress :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-disk-snapshot-progress :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (from-disk-name :initarg :from-disk-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-disk-snapshot-from-disk-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (from-disk-arn :initarg :from-disk-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-disk-snapshot-from-disk-arn
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (from-instance-name :initarg :from-instance-name
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-disk-snapshot-from-instance-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (from-instance-arn :initarg :from-instance-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-disk-snapshot-from-instance-arn
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-from-auto-snapshot :initarg :is-from-auto-snapshot
                         :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         struct-shape-disk-snapshot-is-from-auto-snapshot
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disk-snapshot
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'disk-snapshot
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'disk-snapshot 'make-disk-snapshot))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input disk-snapshot))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input disk-snapshot))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'support-code))
      (common-lisp:list
       (common-lisp:cons "supportCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-in-gb))
      (common-lisp:list
       (common-lisp:cons "sizeInGb"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'progress))
      (common-lisp:list
       (common-lisp:cons "progress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-disk-name))
      (common-lisp:list
       (common-lisp:cons "fromDiskName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-disk-arn))
      (common-lisp:list
       (common-lisp:cons "fromDiskArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-instance-name))
      (common-lisp:list
       (common-lisp:cons "fromInstanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-instance-arn))
      (common-lisp:list
       (common-lisp:cons "fromInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-from-auto-snapshot))
      (common-lisp:list
       (common-lisp:cons "isFromAutoSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input disk-snapshot))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disk-snapshot-info common-lisp:nil
                       ((size-in-gb :initarg :size-in-gb :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor struct-shape-disk-snapshot-info-size-in-gb
                         :shape "integer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disk-snapshot-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'disk-snapshot-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disk-snapshot-info 'make-disk-snapshot-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input disk-snapshot-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input disk-snapshot-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-in-gb))
      (common-lisp:list
       (common-lisp:cons "sizeInGb"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input disk-snapshot-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype disk-snapshot-list ()
   '(trivial-types:proper-list disk-snapshot))
 (common-lisp:defun make-disk-snapshot-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list disk-snapshot))
   aws-sdk/generator/shape::members))
(common-lisp:deftype disk-snapshot-state () 'common-lisp:string)
(common-lisp:deftype disk-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass distribution-bundle common-lisp:nil
                       ((bundle-id :initarg :bundle-id :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-distribution-bundle-bundle-id
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-distribution-bundle-name :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (price :initarg :price :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:single-float
                                         common-lisp:null)
                         :accessor struct-shape-distribution-bundle-price
                         :shape "float" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transfer-per-month-in-gb :initarg
                         :transfer-per-month-in-gb :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor
                         struct-shape-distribution-bundle-transfer-per-month-in-gb
                         :shape "integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-active :initarg :is-active :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor struct-shape-distribution-bundle-is-active
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-distribution-bundle
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'distribution-bundle
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'distribution-bundle 'make-distribution-bundle))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input distribution-bundle))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input distribution-bundle))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-id))
      (common-lisp:list
       (common-lisp:cons "bundleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'price))
      (common-lisp:list
       (common-lisp:cons "price"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transfer-per-month-in-gb))
      (common-lisp:list
       (common-lisp:cons "transferPerMonthInGb"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-active))
      (common-lisp:list
       (common-lisp:cons "isActive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input distribution-bundle))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype distribution-bundle-list ()
   '(trivial-types:proper-list distribution-bundle))
 (common-lisp:defun make-distribution-bundle-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list distribution-bundle))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype distribution-list ()
   '(trivial-types:proper-list lightsail-distribution))
 (common-lisp:defun make-distribution-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lightsail-distribution))
   aws-sdk/generator/shape::members))
(common-lisp:deftype distribution-metric-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass dns-record-creation-state common-lisp:nil
                       ((code :initarg :code :initform common-lisp:nil :type
                         (common-lisp:or dns-record-creation-state-code
                                         common-lisp:null)
                         :accessor struct-shape-dns-record-creation-state-code
                         :shape "DnsRecordCreationStateCode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-dns-record-creation-state-message :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dns-record-creation-state
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dns-record-creation-state
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dns-record-creation-state
                    'make-dns-record-creation-state))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dns-record-creation-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dns-record-creation-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dns-record-creation-state))
   common-lisp:nil))
(common-lisp:deftype dns-record-creation-state-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass domain common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-domain-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-domain-arn :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (support-code :initarg :support-code :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-domain-support-code :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-domain-created-at :shape "IsoDate"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (location :initarg :location :initform common-lisp:nil
                         :type
                         (common-lisp:or resource-location common-lisp:null)
                         :accessor struct-shape-domain-location :shape
                         "ResourceLocation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor struct-shape-domain-resource-type :shape
                         "ResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-domain-tags :shape "TagList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (domain-entries :initarg :domain-entries :initform
                         common-lisp:nil :type
                         (common-lisp:or domain-entry-list common-lisp:null)
                         :accessor struct-shape-domain-domain-entries :shape
                         "DomainEntryList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (registered-domain-delegation-info :initarg
                         :registered-domain-delegation-info :initform
                         common-lisp:nil :type
                         (common-lisp:or registered-domain-delegation-info
                                         common-lisp:null)
                         :accessor
                         struct-shape-domain-registered-domain-delegation-info
                         :shape "RegisteredDomainDelegationInfo" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-domain
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'domain
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'domain 'make-domain))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input domain))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input domain))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'support-code))
      (common-lisp:list
       (common-lisp:cons "supportCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-entries))
      (common-lisp:list
       (common-lisp:cons "domainEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'registered-domain-delegation-info))
      (common-lisp:list
       (common-lisp:cons "registeredDomainDelegationInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input domain))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass domain-entry common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-domain-entry-id :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor struct-shape-domain-entry-name :shape
                         "DomainName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (target :initarg :target :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-domain-entry-target :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (is-alias :initarg :is-alias :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor struct-shape-domain-entry-is-alias :shape
                         "boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or domain-entry-type common-lisp:null)
                         :accessor struct-shape-domain-entry-type :shape
                         "DomainEntryType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (options :initarg :options :initform common-lisp:nil
                         :type
                         (common-lisp:or domain-entry-options common-lisp:null)
                         :accessor struct-shape-domain-entry-options :shape
                         "DomainEntryOptions" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-domain-entry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'domain-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'domain-entry 'make-domain-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input domain-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input domain-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-alias))
      (common-lisp:list
       (common-lisp:cons "isAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input domain-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype domain-entry-list ()
   '(trivial-types:proper-list domain-entry))
 (common-lisp:defun make-domain-entry-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list domain-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype domain-entry-options () 'common-lisp:hash-table)
 (common-lisp:defun make-domain-entry-options
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype domain-entry-options-keys () 'common-lisp:string)
(common-lisp:deftype domain-entry-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype domain-list () '(trivial-types:proper-list domain))
 (common-lisp:defun make-domain-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list domain))
   aws-sdk/generator/shape::members))
(common-lisp:deftype domain-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype domain-name-list ()
   '(trivial-types:proper-list domain-name))
 (common-lisp:defun make-domain-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list domain-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass domain-validation-record common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         common-lisp:nil :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-domain-validation-record-domain-name
                         :shape "DomainName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-record :initarg :resource-record :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-record common-lisp:null)
                         :accessor
                         struct-shape-domain-validation-record-resource-record
                         :shape "ResourceRecord" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dns-record-creation-state :initarg
                         :dns-record-creation-state :initform common-lisp:nil
                         :type
                         (common-lisp:or dns-record-creation-state
                                         common-lisp:null)
                         :accessor
                         struct-shape-domain-validation-record-dns-record-creation-state
                         :shape "DnsRecordCreationState" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (validation-status :initarg :validation-status
                         :initform common-lisp:nil :type
                         (common-lisp:or certificate-domain-validation-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-domain-validation-record-validation-status
                         :shape "CertificateDomainValidationStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-domain-validation-record
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'domain-validation-record
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'domain-validation-record 'make-domain-validation-record))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          domain-validation-record))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          domain-validation-record))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "domainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-record))
      (common-lisp:list
       (common-lisp:cons "resourceRecord"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dns-record-creation-state))
      (common-lisp:list
       (common-lisp:cons "dnsRecordCreationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-status))
      (common-lisp:list
       (common-lisp:cons "validationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          domain-validation-record))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype domain-validation-record-list ()
   '(trivial-types:proper-list domain-validation-record))
 (common-lisp:defun make-domain-validation-record-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            domain-validation-record))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass download-default-key-pair-request common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-download-default-key-pair-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'download-default-key-pair-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'download-default-key-pair-request
                    'make-download-default-key-pair-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          download-default-key-pair-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          download-default-key-pair-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          download-default-key-pair-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass download-default-key-pair-result common-lisp:nil
                       ((public-key-base64 :initarg :public-key-base64
                         :initform common-lisp:nil :type
                         (common-lisp:or base64 common-lisp:null) :accessor
                         struct-shape-download-default-key-pair-result-public-key-base64
                         :shape "Base64" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (private-key-base64 :initarg :private-key-base64
                         :initform common-lisp:nil :type
                         (common-lisp:or base64 common-lisp:null) :accessor
                         struct-shape-download-default-key-pair-result-private-key-base64
                         :shape "Base64" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-download-default-key-pair-result-created-at
                         :shape "IsoDate" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-download-default-key-pair-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'download-default-key-pair-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'download-default-key-pair-result
                    'make-download-default-key-pair-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          download-default-key-pair-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          download-default-key-pair-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-key-base64))
      (common-lisp:list
       (common-lisp:cons "publicKeyBase64"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-key-base64))
      (common-lisp:list
       (common-lisp:cons "privateKeyBase64"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          download-default-key-pair-result))
   common-lisp:nil))
(common-lisp:deftype eligible-to-renew () 'common-lisp:string)
(common-lisp:deftype email-address () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass enable-add-on-request common-lisp:nil
                       ((resource-name :initarg :resource-name :initform
                         (common-lisp:error ":resourcename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-enable-add-on-request-resource-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (add-on-request :initarg :add-on-request :initform
                         (common-lisp:error ":addonrequest is required") :type
                         (common-lisp:or add-on-request common-lisp:null)
                         :accessor
                         struct-shape-enable-add-on-request-add-on-request
                         :shape "AddOnRequest" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-enable-add-on-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'enable-add-on-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'enable-add-on-request 'make-enable-add-on-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-add-on-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-add-on-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "resourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'add-on-request))
      (common-lisp:list
       (common-lisp:cons "addOnRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-add-on-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass enable-add-on-result common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor struct-shape-enable-add-on-result-operations
                         :shape "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-enable-add-on-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'enable-add-on-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'enable-add-on-result 'make-enable-add-on-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input enable-add-on-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input enable-add-on-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input enable-add-on-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass endpoint-request common-lisp:nil
                       ((container-name :initarg :container-name :initform
                         (common-lisp:error ":containername is required") :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-endpoint-request-container-name
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (container-port :initarg :container-port :initform
                         (common-lisp:error ":containerport is required") :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor struct-shape-endpoint-request-container-port
                         :shape "integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (health-check :initarg :health-check :initform
                         common-lisp:nil :type
                         (common-lisp:or container-service-health-check-config
                                         common-lisp:null)
                         :accessor struct-shape-endpoint-request-health-check
                         :shape "ContainerServiceHealthCheckConfig" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-endpoint-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'endpoint-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'endpoint-request 'make-endpoint-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input endpoint-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-name))
      (common-lisp:list
       (common-lisp:cons "containerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-port))
      (common-lisp:list
       (common-lisp:cons "containerPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check))
      (common-lisp:list
       (common-lisp:cons "healthCheck"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input endpoint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype environment () 'common-lisp:hash-table)
 (common-lisp:defun make-environment (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass estimate-by-time common-lisp:nil
                       ((usage-cost :initarg :usage-cost :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:double-float
                                         common-lisp:null)
                         :accessor struct-shape-estimate-by-time-usage-cost
                         :shape "double" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pricing-unit :initarg :pricing-unit :initform
                         common-lisp:nil :type
                         (common-lisp:or pricing-unit common-lisp:null)
                         :accessor struct-shape-estimate-by-time-pricing-unit
                         :shape "PricingUnit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unit :initarg :unit :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:double-float
                                         common-lisp:null)
                         :accessor struct-shape-estimate-by-time-unit :shape
                         "double" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (currency :initarg :currency :initform common-lisp:nil
                         :type (common-lisp:or currency common-lisp:null)
                         :accessor struct-shape-estimate-by-time-currency
                         :shape "Currency" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (time-period :initarg :time-period :initform
                         common-lisp:nil :type
                         (common-lisp:or time-period common-lisp:null)
                         :accessor struct-shape-estimate-by-time-time-period
                         :shape "TimePeriod" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-estimate-by-time
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'estimate-by-time
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'estimate-by-time 'make-estimate-by-time))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input estimate-by-time))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input estimate-by-time))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-cost))
      (common-lisp:list
       (common-lisp:cons "usageCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pricing-unit))
      (common-lisp:list
       (common-lisp:cons "pricingUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency))
      (common-lisp:list
       (common-lisp:cons "currency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-period))
      (common-lisp:list
       (common-lisp:cons "timePeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input estimate-by-time))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype estimates-by-time ()
   '(trivial-types:proper-list estimate-by-time))
 (common-lisp:defun make-estimates-by-time
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list estimate-by-time))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass export-snapshot-record common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-export-snapshot-record-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-export-snapshot-record-arn
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-export-snapshot-record-created-at :shape
                         "IsoDate" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (location :initarg :location :initform common-lisp:nil
                         :type
                         (common-lisp:or resource-location common-lisp:null)
                         :accessor struct-shape-export-snapshot-record-location
                         :shape "ResourceLocation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor
                         struct-shape-export-snapshot-record-resource-type
                         :shape "ResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or record-state common-lisp:null)
                         :accessor struct-shape-export-snapshot-record-state
                         :shape "RecordState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-info :initarg :source-info :initform
                         common-lisp:nil :type
                         (common-lisp:or export-snapshot-record-source-info
                                         common-lisp:null)
                         :accessor
                         struct-shape-export-snapshot-record-source-info :shape
                         "ExportSnapshotRecordSourceInfo" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (destination-info :initarg :destination-info :initform
                         common-lisp:nil :type
                         (common-lisp:or destination-info common-lisp:null)
                         :accessor
                         struct-shape-export-snapshot-record-destination-info
                         :shape "DestinationInfo" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-export-snapshot-record
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'export-snapshot-record
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'export-snapshot-record 'make-export-snapshot-record))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-snapshot-record))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-snapshot-record))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-info))
      (common-lisp:list
       (common-lisp:cons "sourceInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-info))
      (common-lisp:list
       (common-lisp:cons "destinationInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-snapshot-record))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype export-snapshot-record-list ()
   '(trivial-types:proper-list export-snapshot-record))
 (common-lisp:defun make-export-snapshot-record-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list export-snapshot-record))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass export-snapshot-record-source-info common-lisp:nil
                       ((resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or export-snapshot-record-source-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-export-snapshot-record-source-info-resource-type
                         :shape "ExportSnapshotRecordSourceType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-export-snapshot-record-source-info-created-at
                         :shape "IsoDate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-export-snapshot-record-source-info-name
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-export-snapshot-record-source-info-arn
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (from-resource-name :initarg :from-resource-name
                         :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-export-snapshot-record-source-info-from-resource-name
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (from-resource-arn :initarg :from-resource-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-export-snapshot-record-source-info-from-resource-arn
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-snapshot-info :initarg
                         :instance-snapshot-info :initform common-lisp:nil
                         :type
                         (common-lisp:or instance-snapshot-info
                                         common-lisp:null)
                         :accessor
                         struct-shape-export-snapshot-record-source-info-instance-snapshot-info
                         :shape "InstanceSnapshotInfo" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (disk-snapshot-info :initarg :disk-snapshot-info
                         :initform common-lisp:nil :type
                         (common-lisp:or disk-snapshot-info common-lisp:null)
                         :accessor
                         struct-shape-export-snapshot-record-source-info-disk-snapshot-info
                         :shape "DiskSnapshotInfo" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-export-snapshot-record-source-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'export-snapshot-record-source-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'export-snapshot-record-source-info
                    'make-export-snapshot-record-source-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-snapshot-record-source-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-snapshot-record-source-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-resource-name))
      (common-lisp:list
       (common-lisp:cons "fromResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-resource-arn))
      (common-lisp:list
       (common-lisp:cons "fromResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-snapshot-info))
      (common-lisp:list
       (common-lisp:cons "instanceSnapshotInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disk-snapshot-info))
      (common-lisp:list
       (common-lisp:cons "diskSnapshotInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-snapshot-record-source-info))
   common-lisp:nil))
(common-lisp:deftype export-snapshot-record-source-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass export-snapshot-request common-lisp:nil
                       ((source-snapshot-name :initarg :source-snapshot-name
                         :initform
                         (common-lisp:error ":sourcesnapshotname is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-export-snapshot-request-source-snapshot-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-export-snapshot-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'export-snapshot-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'export-snapshot-request 'make-export-snapshot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-snapshot-name))
      (common-lisp:list
       (common-lisp:cons "sourceSnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass export-snapshot-result common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor
                         struct-shape-export-snapshot-result-operations :shape
                         "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-export-snapshot-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'export-snapshot-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'export-snapshot-result 'make-export-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-snapshot-result))
   common-lisp:nil))
(common-lisp:deftype forward-values () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-active-names-request common-lisp:nil
                       ((page-token :initarg :page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-active-names-request-page-token
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-active-names-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-active-names-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-active-names-request 'make-get-active-names-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-active-names-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-active-names-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "pageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-active-names-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-active-names-result common-lisp:nil
                       ((active-names :initarg :active-names :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-get-active-names-result-active-names
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-page-token :initarg :next-page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-active-names-result-next-page-token
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-active-names-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-active-names-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-active-names-result 'make-get-active-names-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-active-names-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-active-names-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active-names))
      (common-lisp:list
       (common-lisp:cons "activeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-active-names-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-alarms-request common-lisp:nil
                       ((alarm-name :initarg :alarm-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-get-alarms-request-alarm-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (page-token :initarg :page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-get-alarms-request-page-token
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (monitored-resource-name :initarg
                         :monitored-resource-name :initform common-lisp:nil
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-get-alarms-request-monitored-resource-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-alarms-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-alarms-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-alarms-request 'make-get-alarms-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-alarms-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-alarms-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarm-name))
      (common-lisp:list
       (common-lisp:cons "alarmName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "pageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitored-resource-name))
      (common-lisp:list
       (common-lisp:cons "monitoredResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-alarms-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-alarms-result common-lisp:nil
                       ((alarms :initarg :alarms :initform common-lisp:nil
                         :type (common-lisp:or alarms-list common-lisp:null)
                         :accessor struct-shape-get-alarms-result-alarms :shape
                         "AlarmsList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-page-token :initarg :next-page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-alarms-result-next-page-token :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-alarms-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-alarms-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-alarms-result 'make-get-alarms-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-alarms-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-alarms-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarms))
      (common-lisp:list
       (common-lisp:cons "alarms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-alarms-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-auto-snapshots-request common-lisp:nil
                       ((resource-name :initarg :resource-name :initform
                         (common-lisp:error ":resourcename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-get-auto-snapshots-request-resource-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-auto-snapshots-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-auto-snapshots-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-auto-snapshots-request
                    'make-get-auto-snapshots-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-auto-snapshots-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-auto-snapshots-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "resourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-auto-snapshots-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-auto-snapshots-result common-lisp:nil
                       ((resource-name :initarg :resource-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-get-auto-snapshots-result-resource-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor
                         struct-shape-get-auto-snapshots-result-resource-type
                         :shape "ResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-snapshots :initarg :auto-snapshots :initform
                         common-lisp:nil :type
                         (common-lisp:or auto-snapshot-details-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-auto-snapshots-result-auto-snapshots
                         :shape "AutoSnapshotDetailsList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-auto-snapshots-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-auto-snapshots-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-auto-snapshots-result
                    'make-get-auto-snapshots-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-auto-snapshots-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-auto-snapshots-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "resourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-snapshots))
      (common-lisp:list
       (common-lisp:cons "autoSnapshots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-auto-snapshots-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-blueprints-request common-lisp:nil
                       ((include-inactive :initarg :include-inactive :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         struct-shape-get-blueprints-request-include-inactive
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (page-token :initarg :page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-blueprints-request-page-token :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (app-category :initarg :app-category :initform
                         common-lisp:nil :type
                         (common-lisp:or app-category common-lisp:null)
                         :accessor
                         struct-shape-get-blueprints-request-app-category
                         :shape "AppCategory" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-blueprints-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-blueprints-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-blueprints-request 'make-get-blueprints-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-blueprints-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-blueprints-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-inactive))
      (common-lisp:list
       (common-lisp:cons "includeInactive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "pageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-category))
      (common-lisp:list
       (common-lisp:cons "appCategory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-blueprints-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-blueprints-result common-lisp:nil
                       ((blueprints :initarg :blueprints :initform
                         common-lisp:nil :type
                         (common-lisp:or blueprint-list common-lisp:null)
                         :accessor
                         struct-shape-get-blueprints-result-blueprints :shape
                         "BlueprintList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-page-token :initarg :next-page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-blueprints-result-next-page-token
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-blueprints-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-blueprints-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-blueprints-result 'make-get-blueprints-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-blueprints-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-blueprints-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blueprints))
      (common-lisp:list
       (common-lisp:cons "blueprints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-blueprints-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-access-keys-request common-lisp:nil
                       ((bucket-name :initarg :bucket-name :initform
                         (common-lisp:error ":bucketname is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-get-bucket-access-keys-request-bucket-name
                         :shape "BucketName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-bucket-access-keys-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bucket-access-keys-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-bucket-access-keys-request
                    'make-get-bucket-access-keys-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-access-keys-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-access-keys-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "bucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-access-keys-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-access-keys-result common-lisp:nil
                       ((access-keys :initarg :access-keys :initform
                         common-lisp:nil :type
                         (common-lisp:or access-key-list common-lisp:null)
                         :accessor
                         struct-shape-get-bucket-access-keys-result-access-keys
                         :shape "AccessKeyList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-bucket-access-keys-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bucket-access-keys-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-bucket-access-keys-result
                    'make-get-bucket-access-keys-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-access-keys-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-access-keys-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-keys))
      (common-lisp:list
       (common-lisp:cons "accessKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-access-keys-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-bundles-request common-lisp:nil
                       ((include-inactive :initarg :include-inactive :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         struct-shape-get-bucket-bundles-request-include-inactive
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-bucket-bundles-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-bucket-bundles-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-bucket-bundles-request
                    'make-get-bucket-bundles-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-bundles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-bundles-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-inactive))
      (common-lisp:list
       (common-lisp:cons "includeInactive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-bundles-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-bundles-result common-lisp:nil
                       ((bundles :initarg :bundles :initform common-lisp:nil
                         :type
                         (common-lisp:or bucket-bundle-list common-lisp:null)
                         :accessor
                         struct-shape-get-bucket-bundles-result-bundles :shape
                         "BucketBundleList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-bucket-bundles-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-bucket-bundles-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-bucket-bundles-result
                    'make-get-bucket-bundles-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-bundles-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-bundles-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundles))
      (common-lisp:list
       (common-lisp:cons "bundles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-bundles-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-metric-data-request common-lisp:nil
                       ((bucket-name :initarg :bucket-name :initform
                         (common-lisp:error ":bucketname is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-get-bucket-metric-data-request-bucket-name
                         :shape "BucketName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metric-name :initarg :metric-name :initform
                         (common-lisp:error ":metricname is required") :type
                         (common-lisp:or bucket-metric-name common-lisp:null)
                         :accessor
                         struct-shape-get-bucket-metric-data-request-metric-name
                         :shape "BucketMetricName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         (common-lisp:error ":starttime is required") :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-get-bucket-metric-data-request-start-time
                         :shape "IsoDate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-time :initarg :end-time :initform
                         (common-lisp:error ":endtime is required") :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-get-bucket-metric-data-request-end-time
                         :shape "IsoDate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (period :initarg :period :initform
                         (common-lisp:error ":period is required") :type
                         (common-lisp:or metric-period common-lisp:null)
                         :accessor
                         struct-shape-get-bucket-metric-data-request-period
                         :shape "MetricPeriod" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (statistics :initarg :statistics :initform
                         (common-lisp:error ":statistics is required") :type
                         (common-lisp:or metric-statistic-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-bucket-metric-data-request-statistics
                         :shape "MetricStatisticList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unit :initarg :unit :initform
                         (common-lisp:error ":unit is required") :type
                         (common-lisp:or metric-unit common-lisp:null)
                         :accessor
                         struct-shape-get-bucket-metric-data-request-unit
                         :shape "MetricUnit" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-bucket-metric-data-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bucket-metric-data-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-bucket-metric-data-request
                    'make-get-bucket-metric-data-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-metric-data-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-metric-data-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "bucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "metricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'period))
      (common-lisp:list
       (common-lisp:cons "period"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistics))
      (common-lisp:list
       (common-lisp:cons "statistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-metric-data-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-metric-data-result common-lisp:nil
                       ((metric-name :initarg :metric-name :initform
                         common-lisp:nil :type
                         (common-lisp:or bucket-metric-name common-lisp:null)
                         :accessor
                         struct-shape-get-bucket-metric-data-result-metric-name
                         :shape "BucketMetricName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metric-data :initarg :metric-data :initform
                         common-lisp:nil :type
                         (common-lisp:or metric-datapoint-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-bucket-metric-data-result-metric-data
                         :shape "MetricDatapointList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-bucket-metric-data-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bucket-metric-data-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-bucket-metric-data-result
                    'make-get-bucket-metric-data-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-metric-data-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-metric-data-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "metricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-data))
      (common-lisp:list
       (common-lisp:cons "metricData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-metric-data-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-buckets-request common-lisp:nil
                       ((bucket-name :initarg :bucket-name :initform
                         common-lisp:nil :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor struct-shape-get-buckets-request-bucket-name
                         :shape "BucketName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (page-token :initarg :page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-get-buckets-request-page-token
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (include-connected-resources :initarg
                         :include-connected-resources :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         struct-shape-get-buckets-request-include-connected-resources
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-buckets-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-buckets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-buckets-request 'make-get-buckets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-buckets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-buckets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "bucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "pageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-connected-resources))
      (common-lisp:list
       (common-lisp:cons "includeConnectedResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-buckets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-buckets-result common-lisp:nil
                       ((buckets :initarg :buckets :initform common-lisp:nil
                         :type (common-lisp:or bucket-list common-lisp:null)
                         :accessor struct-shape-get-buckets-result-buckets
                         :shape "BucketList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-page-token :initarg :next-page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-buckets-result-next-page-token :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (account-level-bpa-sync :initarg
                         :account-level-bpa-sync :initform common-lisp:nil
                         :type
                         (common-lisp:or account-level-bpa-sync
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-buckets-result-account-level-bpa-sync
                         :shape "AccountLevelBpaSync" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-buckets-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-buckets-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-buckets-result 'make-get-buckets-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-buckets-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-buckets-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'buckets))
      (common-lisp:list
       (common-lisp:cons "buckets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'account-level-bpa-sync))
      (common-lisp:list
       (common-lisp:cons "accountLevelBpaSync"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-buckets-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bundles-request common-lisp:nil
                       ((include-inactive :initarg :include-inactive :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         struct-shape-get-bundles-request-include-inactive
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (page-token :initarg :page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-get-bundles-request-page-token
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (app-category :initarg :app-category :initform
                         common-lisp:nil :type
                         (common-lisp:or app-category common-lisp:null)
                         :accessor
                         struct-shape-get-bundles-request-app-category :shape
                         "AppCategory" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-bundles-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-bundles-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-bundles-request 'make-get-bundles-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-bundles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-bundles-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-inactive))
      (common-lisp:list
       (common-lisp:cons "includeInactive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "pageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-category))
      (common-lisp:list
       (common-lisp:cons "appCategory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-bundles-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bundles-result common-lisp:nil
                       ((bundles :initarg :bundles :initform common-lisp:nil
                         :type (common-lisp:or bundle-list common-lisp:null)
                         :accessor struct-shape-get-bundles-result-bundles
                         :shape "BundleList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-page-token :initarg :next-page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-bundles-result-next-page-token :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-bundles-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-bundles-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-bundles-result 'make-get-bundles-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-bundles-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-bundles-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundles))
      (common-lisp:list
       (common-lisp:cons "bundles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-bundles-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-certificates-request common-lisp:nil
                       ((certificate-statuses :initarg :certificate-statuses
                         :initform common-lisp:nil :type
                         (common-lisp:or certificate-status-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-certificates-request-certificate-statuses
                         :shape "CertificateStatusList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (include-certificate-details :initarg
                         :include-certificate-details :initform common-lisp:nil
                         :type
                         (common-lisp:or include-certificate-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-certificates-request-include-certificate-details
                         :shape "IncludeCertificateDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (certificate-name :initarg :certificate-name :initform
                         common-lisp:nil :type
                         (common-lisp:or certificate-name common-lisp:null)
                         :accessor
                         struct-shape-get-certificates-request-certificate-name
                         :shape "CertificateName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (page-token :initarg :page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-certificates-request-page-token
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-certificates-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-certificates-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-certificates-request 'make-get-certificates-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-certificates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-certificates-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-statuses))
      (common-lisp:list
       (common-lisp:cons "certificateStatuses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-certificate-details))
      (common-lisp:list
       (common-lisp:cons "includeCertificateDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-name))
      (common-lisp:list
       (common-lisp:cons "certificateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "pageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-certificates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-certificates-result common-lisp:nil
                       ((certificates :initarg :certificates :initform
                         common-lisp:nil :type
                         (common-lisp:or certificate-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-certificates-result-certificates
                         :shape "CertificateSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-page-token :initarg :next-page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-certificates-result-next-page-token
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-certificates-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-certificates-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-certificates-result 'make-get-certificates-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-certificates-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-certificates-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificates))
      (common-lisp:list
       (common-lisp:cons "certificates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-certificates-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-cloud-formation-stack-records-request
                       common-lisp:nil
                       ((page-token :initarg :page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-cloud-formation-stack-records-request-page-token
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-cloud-formation-stack-records-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-cloud-formation-stack-records-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-cloud-formation-stack-records-request
                    'make-get-cloud-formation-stack-records-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-cloud-formation-stack-records-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-cloud-formation-stack-records-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "pageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-cloud-formation-stack-records-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-cloud-formation-stack-records-result common-lisp:nil
                       ((cloud-formation-stack-records :initarg
                         :cloud-formation-stack-records :initform
                         common-lisp:nil :type
                         (common-lisp:or cloud-formation-stack-record-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-cloud-formation-stack-records-result-cloud-formation-stack-records
                         :shape "CloudFormationStackRecordList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-page-token :initarg :next-page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-cloud-formation-stack-records-result-next-page-token
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-cloud-formation-stack-records-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-cloud-formation-stack-records-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-cloud-formation-stack-records-result
                    'make-get-cloud-formation-stack-records-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-cloud-formation-stack-records-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-cloud-formation-stack-records-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-formation-stack-records))
      (common-lisp:list
       (common-lisp:cons "cloudFormationStackRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-cloud-formation-stack-records-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-contact-methods-request common-lisp:nil
                       ((protocols :initarg :protocols :initform
                         common-lisp:nil :type
                         (common-lisp:or contact-protocols-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-contact-methods-request-protocols
                         :shape "ContactProtocolsList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-contact-methods-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-contact-methods-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-contact-methods-request
                    'make-get-contact-methods-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-contact-methods-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-contact-methods-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocols))
      (common-lisp:list
       (common-lisp:cons "protocols"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-contact-methods-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-contact-methods-result common-lisp:nil
                       ((contact-methods :initarg :contact-methods :initform
                         common-lisp:nil :type
                         (common-lisp:or contact-methods-list common-lisp:null)
                         :accessor
                         struct-shape-get-contact-methods-result-contact-methods
                         :shape "ContactMethodsList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-contact-methods-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-contact-methods-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-contact-methods-result
                    'make-get-contact-methods-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-contact-methods-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-contact-methods-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-methods))
      (common-lisp:list
       (common-lisp:cons "contactMethods"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-contact-methods-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-container-apimetadata-request common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-container-apimetadata-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-container-apimetadata-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-container-apimetadata-request
                    'make-get-container-apimetadata-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-container-apimetadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-container-apimetadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-container-apimetadata-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-container-apimetadata-result common-lisp:nil
                       ((metadata :initarg :metadata :initform common-lisp:nil
                         :type
                         (common-lisp:or container-service-metadata-entry-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-container-apimetadata-result-metadata
                         :shape "ContainerServiceMetadataEntryList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-container-apimetadata-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-container-apimetadata-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-container-apimetadata-result
                    'make-get-container-apimetadata-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-container-apimetadata-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-container-apimetadata-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-container-apimetadata-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-container-images-request common-lisp:nil
                       ((service-name :initarg :service-name :initform
                         (common-lisp:error ":servicename is required") :type
                         (common-lisp:or container-service-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-container-images-request-service-name
                         :shape "ContainerServiceName" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-container-images-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-container-images-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-container-images-request
                    'make-get-container-images-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-container-images-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-container-images-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-container-images-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-container-images-result common-lisp:nil
                       ((container-images :initarg :container-images :initform
                         common-lisp:nil :type
                         (common-lisp:or container-image-list common-lisp:null)
                         :accessor
                         struct-shape-get-container-images-result-container-images
                         :shape "ContainerImageList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-container-images-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-container-images-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-container-images-result
                    'make-get-container-images-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-container-images-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-container-images-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-images))
      (common-lisp:list
       (common-lisp:cons "containerImages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-container-images-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-container-log-request common-lisp:nil
                       ((service-name :initarg :service-name :initform
                         (common-lisp:error ":servicename is required") :type
                         (common-lisp:or container-service-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-container-log-request-service-name
                         :shape "ContainerServiceName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (container-name :initarg :container-name :initform
                         (common-lisp:error ":containername is required") :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-container-log-request-container-name
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-get-container-log-request-start-time
                         :shape "IsoDate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or iso-date common-lisp:null)
                         :accessor
                         struct-shape-get-container-log-request-end-time :shape
                         "IsoDate" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (filter-pattern :initarg :filter-pattern :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-container-log-request-filter-pattern
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (page-token :initarg :page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-container-log-request-page-token
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-container-log-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-container-log-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-container-log-request
                    'make-get-container-log-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-container-log-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-container-log-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-name))
      (common-lisp:list
       (common-lisp:cons "containerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-pattern))
      (common-lisp:list
       (common-lisp:cons "filterPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "pageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-container-log-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-container-log-result common-lisp:nil
                       ((log-events :initarg :log-events :initform
                         common-lisp:nil :type
                         (common-lisp:or container-service-log-event-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-container-log-result-log-events
                         :shape "ContainerServiceLogEventList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-page-token :initarg :next-page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-container-log-result-next-page-token
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-container-log-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-container-log-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-container-log-result 'make-get-container-log-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-container-log-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-container-log-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-events))
      (common-lisp:list
       (common-lisp:cons "logEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-container-log-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-container-service-deployments-request
                       common-lisp:nil
                       ((service-name :initarg :service-name :initform
                         (common-lisp:error ":servicename is required") :type
                         (common-lisp:or container-service-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-container-service-deployments-request-service-name
                         :shape "ContainerServiceName" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-container-service-deployments-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-container-service-deployments-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-container-service-deployments-request
                    'make-get-container-service-deployments-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-container-service-deployments-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-container-service-deployments-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-container-service-deployments-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-container-service-deployments-result common-lisp:nil
                       ((deployments :initarg :deployments :initform
                         common-lisp:nil :type
                         (common-lisp:or container-service-deployment-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-container-service-deployments-result-deployments
                         :shape "ContainerServiceDeploymentList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-container-service-deployments-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-container-service-deployments-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-container-service-deployments-result
                    'make-get-container-service-deployments-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-container-service-deployments-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-container-service-deployments-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployments))
      (common-lisp:list
       (common-lisp:cons "deployments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-container-service-deployments-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-container-service-metric-data-request
                       common-lisp:nil
                       ((service-name :initarg :service-name :initform
                         (common-lisp:error ":servicename is required") :type
                         (common-lisp:or container-service-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-container-service-metric-data-request-service-name
                         :shape "ContainerServiceName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (metric-name :initarg :metric-name :initform
                         (common-lisp:error ":metricname is required") :type
                         (common-lisp:or container-service-metric-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-container-service-metric-data-request-metric-name
                         :shape "ContainerServiceMetricName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         (common-lisp:error ":starttime is required") :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-get-container-service-metric-data-request-start-time
                         :shape "IsoDate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-time :initarg :end-time :initform
                         (common-lisp:error ":endtime is required") :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-get-container-service-metric-data-request-end-time
                         :shape "IsoDate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (period :initarg :period :initform
                         (common-lisp:error ":period is required") :type
                         (common-lisp:or metric-period common-lisp:null)
                         :accessor
                         struct-shape-get-container-service-metric-data-request-period
                         :shape "MetricPeriod" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (statistics :initarg :statistics :initform
                         (common-lisp:error ":statistics is required") :type
                         (common-lisp:or metric-statistic-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-container-service-metric-data-request-statistics
                         :shape "MetricStatisticList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-container-service-metric-data-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-container-service-metric-data-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-container-service-metric-data-request
                    'make-get-container-service-metric-data-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-container-service-metric-data-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-container-service-metric-data-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "metricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'period))
      (common-lisp:list
       (common-lisp:cons "period"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistics))
      (common-lisp:list
       (common-lisp:cons "statistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-container-service-metric-data-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-container-service-metric-data-result common-lisp:nil
                       ((metric-name :initarg :metric-name :initform
                         common-lisp:nil :type
                         (common-lisp:or container-service-metric-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-container-service-metric-data-result-metric-name
                         :shape "ContainerServiceMetricName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (metric-data :initarg :metric-data :initform
                         common-lisp:nil :type
                         (common-lisp:or metric-datapoint-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-container-service-metric-data-result-metric-data
                         :shape "MetricDatapointList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-container-service-metric-data-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-container-service-metric-data-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-container-service-metric-data-result
                    'make-get-container-service-metric-data-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-container-service-metric-data-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-container-service-metric-data-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "metricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-data))
      (common-lisp:list
       (common-lisp:cons "metricData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-container-service-metric-data-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-container-service-powers-request common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-container-service-powers-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-container-service-powers-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-container-service-powers-request
                    'make-get-container-service-powers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-container-service-powers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-container-service-powers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-container-service-powers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-container-service-powers-result common-lisp:nil
                       ((powers :initarg :powers :initform common-lisp:nil
                         :type
                         (common-lisp:or container-service-power-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-container-service-powers-result-powers
                         :shape "ContainerServicePowerList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-container-service-powers-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-container-service-powers-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-container-service-powers-result
                    'make-get-container-service-powers-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-container-service-powers-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-container-service-powers-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'powers))
      (common-lisp:list
       (common-lisp:cons "powers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-container-service-powers-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-container-services-request common-lisp:nil
                       ((service-name :initarg :service-name :initform
                         common-lisp:nil :type
                         (common-lisp:or container-service-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-container-services-request-service-name
                         :shape "ContainerServiceName" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-container-services-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-container-services-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-container-services-request
                    'make-get-container-services-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-container-services-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-container-services-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-container-services-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-cost-estimate-request common-lisp:nil
                       ((resource-name :initarg :resource-name :initform
                         (common-lisp:error ":resourcename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-get-cost-estimate-request-resource-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         (common-lisp:error ":starttime is required") :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-get-cost-estimate-request-start-time
                         :shape "IsoDate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-time :initarg :end-time :initform
                         (common-lisp:error ":endtime is required") :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-get-cost-estimate-request-end-time :shape
                         "IsoDate" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-cost-estimate-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-cost-estimate-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-cost-estimate-request
                    'make-get-cost-estimate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-estimate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-estimate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "resourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-estimate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-cost-estimate-result common-lisp:nil
                       ((resources-budget-estimate :initarg
                         :resources-budget-estimate :initform common-lisp:nil
                         :type
                         (common-lisp:or resources-budget-estimate
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-cost-estimate-result-resources-budget-estimate
                         :shape "ResourcesBudgetEstimate" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-cost-estimate-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-cost-estimate-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-cost-estimate-result 'make-get-cost-estimate-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-estimate-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-estimate-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resources-budget-estimate))
      (common-lisp:list
       (common-lisp:cons "resourcesBudgetEstimate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-estimate-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-disk-request common-lisp:nil
                       ((disk-name :initarg :disk-name :initform
                         (common-lisp:error ":diskname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-get-disk-request-disk-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-disk-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-disk-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-disk-request 'make-get-disk-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-disk-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-disk-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disk-name))
      (common-lisp:list
       (common-lisp:cons "diskName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-disk-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-disk-result common-lisp:nil
                       ((disk :initarg :disk :initform common-lisp:nil :type
                         (common-lisp:or disk common-lisp:null) :accessor
                         struct-shape-get-disk-result-disk :shape "Disk"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-disk-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-disk-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'get-disk-result 'make-get-disk-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-disk-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-disk-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disk))
      (common-lisp:list
       (common-lisp:cons "disk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-disk-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-disk-snapshot-request common-lisp:nil
                       ((disk-snapshot-name :initarg :disk-snapshot-name
                         :initform
                         (common-lisp:error ":disksnapshotname is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-get-disk-snapshot-request-disk-snapshot-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-disk-snapshot-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-disk-snapshot-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-disk-snapshot-request
                    'make-get-disk-snapshot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-disk-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-disk-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disk-snapshot-name))
      (common-lisp:list
       (common-lisp:cons "diskSnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-disk-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-disk-snapshot-result common-lisp:nil
                       ((disk-snapshot :initarg :disk-snapshot :initform
                         common-lisp:nil :type
                         (common-lisp:or disk-snapshot common-lisp:null)
                         :accessor
                         struct-shape-get-disk-snapshot-result-disk-snapshot
                         :shape "DiskSnapshot" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-disk-snapshot-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-disk-snapshot-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-disk-snapshot-result 'make-get-disk-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-disk-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-disk-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disk-snapshot))
      (common-lisp:list
       (common-lisp:cons "diskSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-disk-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-disk-snapshots-request common-lisp:nil
                       ((page-token :initarg :page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-disk-snapshots-request-page-token
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-disk-snapshots-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-disk-snapshots-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-disk-snapshots-request
                    'make-get-disk-snapshots-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-disk-snapshots-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-disk-snapshots-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "pageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-disk-snapshots-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-disk-snapshots-result common-lisp:nil
                       ((disk-snapshots :initarg :disk-snapshots :initform
                         common-lisp:nil :type
                         (common-lisp:or disk-snapshot-list common-lisp:null)
                         :accessor
                         struct-shape-get-disk-snapshots-result-disk-snapshots
                         :shape "DiskSnapshotList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-page-token :initarg :next-page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-disk-snapshots-result-next-page-token
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-disk-snapshots-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-disk-snapshots-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-disk-snapshots-result
                    'make-get-disk-snapshots-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-disk-snapshots-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-disk-snapshots-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disk-snapshots))
      (common-lisp:list
       (common-lisp:cons "diskSnapshots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-disk-snapshots-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-disks-request common-lisp:nil
                       ((page-token :initarg :page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-get-disks-request-page-token
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-disks-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-disks-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-disks-request 'make-get-disks-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-disks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-disks-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "pageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-disks-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-disks-result common-lisp:nil
                       ((disks :initarg :disks :initform common-lisp:nil :type
                         (common-lisp:or disk-list common-lisp:null) :accessor
                         struct-shape-get-disks-result-disks :shape "DiskList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-page-token :initarg :next-page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-disks-result-next-page-token :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-disks-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-disks-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-disks-result 'make-get-disks-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-disks-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-disks-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disks))
      (common-lisp:list
       (common-lisp:cons "disks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-disks-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-distribution-bundles-request common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-distribution-bundles-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-distribution-bundles-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-distribution-bundles-request
                    'make-get-distribution-bundles-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-bundles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-bundles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-bundles-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-distribution-bundles-result common-lisp:nil
                       ((bundles :initarg :bundles :initform common-lisp:nil
                         :type
                         (common-lisp:or distribution-bundle-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-distribution-bundles-result-bundles
                         :shape "DistributionBundleList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-distribution-bundles-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-distribution-bundles-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-distribution-bundles-result
                    'make-get-distribution-bundles-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-bundles-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-bundles-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundles))
      (common-lisp:list
       (common-lisp:cons "bundles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-bundles-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-distribution-latest-cache-reset-request
                       common-lisp:nil
                       ((distribution-name :initarg :distribution-name
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-get-distribution-latest-cache-reset-request-distribution-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-distribution-latest-cache-reset-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-distribution-latest-cache-reset-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-distribution-latest-cache-reset-request
                    'make-get-distribution-latest-cache-reset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-latest-cache-reset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-latest-cache-reset-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distribution-name))
      (common-lisp:list
       (common-lisp:cons "distributionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-latest-cache-reset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-distribution-latest-cache-reset-result
                       common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-distribution-latest-cache-reset-result-status
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (create-time :initarg :create-time :initform
                         common-lisp:nil :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-get-distribution-latest-cache-reset-result-create-time
                         :shape "IsoDate" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-distribution-latest-cache-reset-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-distribution-latest-cache-reset-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-distribution-latest-cache-reset-result
                    'make-get-distribution-latest-cache-reset-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-latest-cache-reset-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-latest-cache-reset-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-latest-cache-reset-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-distribution-metric-data-request common-lisp:nil
                       ((distribution-name :initarg :distribution-name
                         :initform
                         (common-lisp:error ":distributionname is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-get-distribution-metric-data-request-distribution-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metric-name :initarg :metric-name :initform
                         (common-lisp:error ":metricname is required") :type
                         (common-lisp:or distribution-metric-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-distribution-metric-data-request-metric-name
                         :shape "DistributionMetricName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         (common-lisp:error ":starttime is required") :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-distribution-metric-data-request-start-time
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-time :initarg :end-time :initform
                         (common-lisp:error ":endtime is required") :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-distribution-metric-data-request-end-time
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (period :initarg :period :initform
                         (common-lisp:error ":period is required") :type
                         (common-lisp:or metric-period common-lisp:null)
                         :accessor
                         struct-shape-get-distribution-metric-data-request-period
                         :shape "MetricPeriod" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unit :initarg :unit :initform
                         (common-lisp:error ":unit is required") :type
                         (common-lisp:or metric-unit common-lisp:null)
                         :accessor
                         struct-shape-get-distribution-metric-data-request-unit
                         :shape "MetricUnit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (statistics :initarg :statistics :initform
                         (common-lisp:error ":statistics is required") :type
                         (common-lisp:or metric-statistic-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-distribution-metric-data-request-statistics
                         :shape "MetricStatisticList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-distribution-metric-data-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-distribution-metric-data-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-distribution-metric-data-request
                    'make-get-distribution-metric-data-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-metric-data-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-metric-data-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distribution-name))
      (common-lisp:list
       (common-lisp:cons "distributionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "metricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'period))
      (common-lisp:list
       (common-lisp:cons "period"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistics))
      (common-lisp:list
       (common-lisp:cons "statistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-metric-data-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-distribution-metric-data-result common-lisp:nil
                       ((metric-name :initarg :metric-name :initform
                         common-lisp:nil :type
                         (common-lisp:or distribution-metric-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-distribution-metric-data-result-metric-name
                         :shape "DistributionMetricName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (metric-data :initarg :metric-data :initform
                         common-lisp:nil :type
                         (common-lisp:or metric-datapoint-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-distribution-metric-data-result-metric-data
                         :shape "MetricDatapointList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-distribution-metric-data-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-distribution-metric-data-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-distribution-metric-data-result
                    'make-get-distribution-metric-data-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-metric-data-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-metric-data-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "metricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-data))
      (common-lisp:list
       (common-lisp:cons "metricData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-metric-data-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-distributions-request common-lisp:nil
                       ((distribution-name :initarg :distribution-name
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-get-distributions-request-distribution-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (page-token :initarg :page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-distributions-request-page-token
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-distributions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-distributions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-distributions-request
                    'make-get-distributions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-distributions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-distributions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distribution-name))
      (common-lisp:list
       (common-lisp:cons "distributionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "pageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-distributions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-distributions-result common-lisp:nil
                       ((distributions :initarg :distributions :initform
                         common-lisp:nil :type
                         (common-lisp:or distribution-list common-lisp:null)
                         :accessor
                         struct-shape-get-distributions-result-distributions
                         :shape "DistributionList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-page-token :initarg :next-page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-distributions-result-next-page-token
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-distributions-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-distributions-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-distributions-result 'make-get-distributions-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-distributions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-distributions-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distributions))
      (common-lisp:list
       (common-lisp:cons "distributions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-distributions-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-domain-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domainname is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor struct-shape-get-domain-request-domain-name
                         :shape "DomainName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-domain-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-domain-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-domain-request 'make-get-domain-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-domain-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "domainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-domain-result common-lisp:nil
                       ((domain :initarg :domain :initform common-lisp:nil
                         :type (common-lisp:or domain common-lisp:null)
                         :accessor struct-shape-get-domain-result-domain :shape
                         "Domain" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-domain-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-domain-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-domain-result 'make-get-domain-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-domain-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-domain-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-domain-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-domains-request common-lisp:nil
                       ((page-token :initarg :page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-get-domains-request-page-token
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-domains-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-domains-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-domains-request 'make-get-domains-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-domains-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-domains-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "pageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-domains-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-domains-result common-lisp:nil
                       ((domains :initarg :domains :initform common-lisp:nil
                         :type (common-lisp:or domain-list common-lisp:null)
                         :accessor struct-shape-get-domains-result-domains
                         :shape "DomainList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-page-token :initarg :next-page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-domains-result-next-page-token :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-domains-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-domains-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-domains-result 'make-get-domains-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-domains-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-domains-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domains))
      (common-lisp:list
       (common-lisp:cons "domains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-domains-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-export-snapshot-records-request common-lisp:nil
                       ((page-token :initarg :page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-export-snapshot-records-request-page-token
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-export-snapshot-records-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-export-snapshot-records-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-export-snapshot-records-request
                    'make-get-export-snapshot-records-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-export-snapshot-records-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-export-snapshot-records-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "pageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-export-snapshot-records-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-export-snapshot-records-result common-lisp:nil
                       ((export-snapshot-records :initarg
                         :export-snapshot-records :initform common-lisp:nil
                         :type
                         (common-lisp:or export-snapshot-record-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-export-snapshot-records-result-export-snapshot-records
                         :shape "ExportSnapshotRecordList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-page-token :initarg :next-page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-export-snapshot-records-result-next-page-token
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-export-snapshot-records-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-export-snapshot-records-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-export-snapshot-records-result
                    'make-get-export-snapshot-records-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-export-snapshot-records-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-export-snapshot-records-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'export-snapshot-records))
      (common-lisp:list
       (common-lisp:cons "exportSnapshotRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-export-snapshot-records-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-instance-access-details-request common-lisp:nil
                       ((instance-name :initarg :instance-name :initform
                         (common-lisp:error ":instancename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-get-instance-access-details-request-instance-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (protocol :initarg :protocol :initform common-lisp:nil
                         :type
                         (common-lisp:or instance-access-protocol
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-instance-access-details-request-protocol
                         :shape "InstanceAccessProtocol" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-instance-access-details-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-instance-access-details-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-instance-access-details-request
                    'make-get-instance-access-details-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-access-details-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-access-details-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-name))
      (common-lisp:list
       (common-lisp:cons "instanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-access-details-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-instance-access-details-result common-lisp:nil
                       ((access-details :initarg :access-details :initform
                         common-lisp:nil :type
                         (common-lisp:or instance-access-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-instance-access-details-result-access-details
                         :shape "InstanceAccessDetails" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-instance-access-details-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-instance-access-details-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-instance-access-details-result
                    'make-get-instance-access-details-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-access-details-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-access-details-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-details))
      (common-lisp:list
       (common-lisp:cons "accessDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-access-details-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-instance-metric-data-request common-lisp:nil
                       ((instance-name :initarg :instance-name :initform
                         (common-lisp:error ":instancename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-get-instance-metric-data-request-instance-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metric-name :initarg :metric-name :initform
                         (common-lisp:error ":metricname is required") :type
                         (common-lisp:or instance-metric-name common-lisp:null)
                         :accessor
                         struct-shape-get-instance-metric-data-request-metric-name
                         :shape "InstanceMetricName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (period :initarg :period :initform
                         (common-lisp:error ":period is required") :type
                         (common-lisp:or metric-period common-lisp:null)
                         :accessor
                         struct-shape-get-instance-metric-data-request-period
                         :shape "MetricPeriod" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         (common-lisp:error ":starttime is required") :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-instance-metric-data-request-start-time
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-time :initarg :end-time :initform
                         (common-lisp:error ":endtime is required") :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-instance-metric-data-request-end-time
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unit :initarg :unit :initform
                         (common-lisp:error ":unit is required") :type
                         (common-lisp:or metric-unit common-lisp:null)
                         :accessor
                         struct-shape-get-instance-metric-data-request-unit
                         :shape "MetricUnit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (statistics :initarg :statistics :initform
                         (common-lisp:error ":statistics is required") :type
                         (common-lisp:or metric-statistic-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-instance-metric-data-request-statistics
                         :shape "MetricStatisticList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-instance-metric-data-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-instance-metric-data-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-instance-metric-data-request
                    'make-get-instance-metric-data-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-metric-data-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-metric-data-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-name))
      (common-lisp:list
       (common-lisp:cons "instanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "metricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'period))
      (common-lisp:list
       (common-lisp:cons "period"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistics))
      (common-lisp:list
       (common-lisp:cons "statistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-metric-data-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-instance-metric-data-result common-lisp:nil
                       ((metric-name :initarg :metric-name :initform
                         common-lisp:nil :type
                         (common-lisp:or instance-metric-name common-lisp:null)
                         :accessor
                         struct-shape-get-instance-metric-data-result-metric-name
                         :shape "InstanceMetricName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metric-data :initarg :metric-data :initform
                         common-lisp:nil :type
                         (common-lisp:or metric-datapoint-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-instance-metric-data-result-metric-data
                         :shape "MetricDatapointList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-instance-metric-data-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-instance-metric-data-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-instance-metric-data-result
                    'make-get-instance-metric-data-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-metric-data-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-metric-data-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "metricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-data))
      (common-lisp:list
       (common-lisp:cons "metricData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-metric-data-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-instance-port-states-request common-lisp:nil
                       ((instance-name :initarg :instance-name :initform
                         (common-lisp:error ":instancename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-get-instance-port-states-request-instance-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-instance-port-states-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-instance-port-states-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-instance-port-states-request
                    'make-get-instance-port-states-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-port-states-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-port-states-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-name))
      (common-lisp:list
       (common-lisp:cons "instanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-port-states-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-instance-port-states-result common-lisp:nil
                       ((port-states :initarg :port-states :initform
                         common-lisp:nil :type
                         (common-lisp:or instance-port-state-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-instance-port-states-result-port-states
                         :shape "InstancePortStateList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-instance-port-states-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-instance-port-states-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-instance-port-states-result
                    'make-get-instance-port-states-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-port-states-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-port-states-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-states))
      (common-lisp:list
       (common-lisp:cons "portStates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-port-states-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-instance-request common-lisp:nil
                       ((instance-name :initarg :instance-name :initform
                         (common-lisp:error ":instancename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-get-instance-request-instance-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-instance-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-instance-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-instance-request 'make-get-instance-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-instance-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-name))
      (common-lisp:list
       (common-lisp:cons "instanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-instance-result common-lisp:nil
                       ((instance :initarg :instance :initform common-lisp:nil
                         :type (common-lisp:or instance common-lisp:null)
                         :accessor struct-shape-get-instance-result-instance
                         :shape "Instance" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-instance-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-instance-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-instance-result 'make-get-instance-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-instance-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-instance-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance))
      (common-lisp:list
       (common-lisp:cons "instance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-instance-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-instance-snapshot-request common-lisp:nil
                       ((instance-snapshot-name :initarg
                         :instance-snapshot-name :initform
                         (common-lisp:error
                          ":instancesnapshotname is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-get-instance-snapshot-request-instance-snapshot-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-instance-snapshot-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-instance-snapshot-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-instance-snapshot-request
                    'make-get-instance-snapshot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-snapshot-name))
      (common-lisp:list
       (common-lisp:cons "instanceSnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-instance-snapshot-result common-lisp:nil
                       ((instance-snapshot :initarg :instance-snapshot
                         :initform common-lisp:nil :type
                         (common-lisp:or instance-snapshot common-lisp:null)
                         :accessor
                         struct-shape-get-instance-snapshot-result-instance-snapshot
                         :shape "InstanceSnapshot" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-instance-snapshot-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-instance-snapshot-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-instance-snapshot-result
                    'make-get-instance-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-snapshot))
      (common-lisp:list
       (common-lisp:cons "instanceSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-instance-snapshots-request common-lisp:nil
                       ((page-token :initarg :page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-instance-snapshots-request-page-token
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-instance-snapshots-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-instance-snapshots-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-instance-snapshots-request
                    'make-get-instance-snapshots-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-snapshots-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-snapshots-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "pageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-snapshots-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-instance-snapshots-result common-lisp:nil
                       ((instance-snapshots :initarg :instance-snapshots
                         :initform common-lisp:nil :type
                         (common-lisp:or instance-snapshot-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-instance-snapshots-result-instance-snapshots
                         :shape "InstanceSnapshotList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-page-token :initarg :next-page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-instance-snapshots-result-next-page-token
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-instance-snapshots-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-instance-snapshots-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-instance-snapshots-result
                    'make-get-instance-snapshots-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-snapshots-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-snapshots-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-snapshots))
      (common-lisp:list
       (common-lisp:cons "instanceSnapshots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-snapshots-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-instance-state-request common-lisp:nil
                       ((instance-name :initarg :instance-name :initform
                         (common-lisp:error ":instancename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-get-instance-state-request-instance-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-instance-state-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-instance-state-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-instance-state-request
                    'make-get-instance-state-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-state-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-state-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-name))
      (common-lisp:list
       (common-lisp:cons "instanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-state-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-instance-state-result common-lisp:nil
                       ((state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or instance-state common-lisp:null)
                         :accessor struct-shape-get-instance-state-result-state
                         :shape "InstanceState" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-instance-state-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-instance-state-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-instance-state-result
                    'make-get-instance-state-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-state-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-state-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-state-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-instances-request common-lisp:nil
                       ((page-token :initarg :page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-instances-request-page-token :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-instances-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-instances-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-instances-request 'make-get-instances-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-instances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-instances-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "pageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-instances-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-instances-result common-lisp:nil
                       ((instances :initarg :instances :initform
                         common-lisp:nil :type
                         (common-lisp:or instance-list common-lisp:null)
                         :accessor struct-shape-get-instances-result-instances
                         :shape "InstanceList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-page-token :initarg :next-page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-instances-result-next-page-token
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-instances-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-instances-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-instances-result 'make-get-instances-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-instances-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-instances-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instances))
      (common-lisp:list
       (common-lisp:cons "instances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-instances-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-key-pair-request common-lisp:nil
                       ((key-pair-name :initarg :key-pair-name :initform
                         (common-lisp:error ":keypairname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-get-key-pair-request-key-pair-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-key-pair-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-key-pair-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-key-pair-request 'make-get-key-pair-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-key-pair-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-key-pair-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-pair-name))
      (common-lisp:list
       (common-lisp:cons "keyPairName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-key-pair-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-key-pair-result common-lisp:nil
                       ((key-pair :initarg :key-pair :initform common-lisp:nil
                         :type (common-lisp:or key-pair common-lisp:null)
                         :accessor struct-shape-get-key-pair-result-key-pair
                         :shape "KeyPair" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-key-pair-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-key-pair-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-key-pair-result 'make-get-key-pair-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-key-pair-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-key-pair-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-pair))
      (common-lisp:list
       (common-lisp:cons "keyPair"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-key-pair-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-key-pairs-request common-lisp:nil
                       ((page-token :initarg :page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-key-pairs-request-page-token :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (include-default-key-pair :initarg
                         :include-default-key-pair :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         struct-shape-get-key-pairs-request-include-default-key-pair
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-key-pairs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-key-pairs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-key-pairs-request 'make-get-key-pairs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-key-pairs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-key-pairs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "pageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-default-key-pair))
      (common-lisp:list
       (common-lisp:cons "includeDefaultKeyPair"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-key-pairs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-key-pairs-result common-lisp:nil
                       ((key-pairs :initarg :key-pairs :initform
                         common-lisp:nil :type
                         (common-lisp:or key-pair-list common-lisp:null)
                         :accessor struct-shape-get-key-pairs-result-key-pairs
                         :shape "KeyPairList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-page-token :initarg :next-page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-key-pairs-result-next-page-token
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-key-pairs-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-key-pairs-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-key-pairs-result 'make-get-key-pairs-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-key-pairs-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-key-pairs-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-pairs))
      (common-lisp:list
       (common-lisp:cons "keyPairs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-key-pairs-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-load-balancer-metric-data-request common-lisp:nil
                       ((load-balancer-name :initarg :load-balancer-name
                         :initform
                         (common-lisp:error ":loadbalancername is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-get-load-balancer-metric-data-request-load-balancer-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metric-name :initarg :metric-name :initform
                         (common-lisp:error ":metricname is required") :type
                         (common-lisp:or load-balancer-metric-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-load-balancer-metric-data-request-metric-name
                         :shape "LoadBalancerMetricName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (period :initarg :period :initform
                         (common-lisp:error ":period is required") :type
                         (common-lisp:or metric-period common-lisp:null)
                         :accessor
                         struct-shape-get-load-balancer-metric-data-request-period
                         :shape "MetricPeriod" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         (common-lisp:error ":starttime is required") :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-load-balancer-metric-data-request-start-time
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-time :initarg :end-time :initform
                         (common-lisp:error ":endtime is required") :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-load-balancer-metric-data-request-end-time
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unit :initarg :unit :initform
                         (common-lisp:error ":unit is required") :type
                         (common-lisp:or metric-unit common-lisp:null)
                         :accessor
                         struct-shape-get-load-balancer-metric-data-request-unit
                         :shape "MetricUnit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (statistics :initarg :statistics :initform
                         (common-lisp:error ":statistics is required") :type
                         (common-lisp:or metric-statistic-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-load-balancer-metric-data-request-statistics
                         :shape "MetricStatisticList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-load-balancer-metric-data-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-load-balancer-metric-data-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-load-balancer-metric-data-request
                    'make-get-load-balancer-metric-data-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancer-metric-data-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancer-metric-data-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "loadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "metricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'period))
      (common-lisp:list
       (common-lisp:cons "period"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistics))
      (common-lisp:list
       (common-lisp:cons "statistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancer-metric-data-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-load-balancer-metric-data-result common-lisp:nil
                       ((metric-name :initarg :metric-name :initform
                         common-lisp:nil :type
                         (common-lisp:or load-balancer-metric-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-load-balancer-metric-data-result-metric-name
                         :shape "LoadBalancerMetricName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (metric-data :initarg :metric-data :initform
                         common-lisp:nil :type
                         (common-lisp:or metric-datapoint-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-load-balancer-metric-data-result-metric-data
                         :shape "MetricDatapointList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-load-balancer-metric-data-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-load-balancer-metric-data-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-load-balancer-metric-data-result
                    'make-get-load-balancer-metric-data-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancer-metric-data-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancer-metric-data-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "metricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-data))
      (common-lisp:list
       (common-lisp:cons "metricData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancer-metric-data-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-load-balancer-request common-lisp:nil
                       ((load-balancer-name :initarg :load-balancer-name
                         :initform
                         (common-lisp:error ":loadbalancername is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-get-load-balancer-request-load-balancer-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-load-balancer-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-load-balancer-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-load-balancer-request
                    'make-get-load-balancer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancer-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "loadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-load-balancer-result common-lisp:nil
                       ((load-balancer :initarg :load-balancer :initform
                         common-lisp:nil :type
                         (common-lisp:or load-balancer common-lisp:null)
                         :accessor
                         struct-shape-get-load-balancer-result-load-balancer
                         :shape "LoadBalancer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-load-balancer-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-load-balancer-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-load-balancer-result 'make-get-load-balancer-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancer-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancer-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer))
      (common-lisp:list
       (common-lisp:cons "loadBalancer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancer-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-load-balancer-tls-certificates-request
                       common-lisp:nil
                       ((load-balancer-name :initarg :load-balancer-name
                         :initform
                         (common-lisp:error ":loadbalancername is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-get-load-balancer-tls-certificates-request-load-balancer-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-load-balancer-tls-certificates-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-load-balancer-tls-certificates-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-load-balancer-tls-certificates-request
                    'make-get-load-balancer-tls-certificates-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancer-tls-certificates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancer-tls-certificates-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "loadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancer-tls-certificates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-load-balancer-tls-certificates-result
                       common-lisp:nil
                       ((tls-certificates :initarg :tls-certificates :initform
                         common-lisp:nil :type
                         (common-lisp:or load-balancer-tls-certificate-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-load-balancer-tls-certificates-result-tls-certificates
                         :shape "LoadBalancerTlsCertificateList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-load-balancer-tls-certificates-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-load-balancer-tls-certificates-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-load-balancer-tls-certificates-result
                    'make-get-load-balancer-tls-certificates-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancer-tls-certificates-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancer-tls-certificates-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tls-certificates))
      (common-lisp:list
       (common-lisp:cons "tlsCertificates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancer-tls-certificates-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-load-balancer-tls-policies-request common-lisp:nil
                       ((page-token :initarg :page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-load-balancer-tls-policies-request-page-token
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-load-balancer-tls-policies-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-load-balancer-tls-policies-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-load-balancer-tls-policies-request
                    'make-get-load-balancer-tls-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancer-tls-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancer-tls-policies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "pageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancer-tls-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-load-balancer-tls-policies-result common-lisp:nil
                       ((tls-policies :initarg :tls-policies :initform
                         common-lisp:nil :type
                         (common-lisp:or load-balancer-tls-policy-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-load-balancer-tls-policies-result-tls-policies
                         :shape "LoadBalancerTlsPolicyList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-page-token :initarg :next-page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-load-balancer-tls-policies-result-next-page-token
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-load-balancer-tls-policies-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-load-balancer-tls-policies-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-load-balancer-tls-policies-result
                    'make-get-load-balancer-tls-policies-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancer-tls-policies-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancer-tls-policies-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tls-policies))
      (common-lisp:list
       (common-lisp:cons "tlsPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancer-tls-policies-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-load-balancers-request common-lisp:nil
                       ((page-token :initarg :page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-load-balancers-request-page-token
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-load-balancers-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-load-balancers-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-load-balancers-request
                    'make-get-load-balancers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "pageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-load-balancers-result common-lisp:nil
                       ((load-balancers :initarg :load-balancers :initform
                         common-lisp:nil :type
                         (common-lisp:or load-balancer-list common-lisp:null)
                         :accessor
                         struct-shape-get-load-balancers-result-load-balancers
                         :shape "LoadBalancerList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-page-token :initarg :next-page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-load-balancers-result-next-page-token
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-load-balancers-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-load-balancers-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-load-balancers-result
                    'make-get-load-balancers-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancers-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancers-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancers))
      (common-lisp:list
       (common-lisp:cons "loadBalancers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancers-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-operation-request common-lisp:nil
                       ((operation-id :initarg :operation-id :initform
                         (common-lisp:error ":operationid is required") :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-get-operation-request-operation-id :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-operation-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-operation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-operation-request 'make-get-operation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-operation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-operation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "operationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-operation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-operation-result common-lisp:nil
                       ((operation :initarg :operation :initform
                         common-lisp:nil :type
                         (common-lisp:or operation common-lisp:null) :accessor
                         struct-shape-get-operation-result-operation :shape
                         "Operation" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-operation-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-operation-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-operation-result 'make-get-operation-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-operation-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-operation-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-operation-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-operations-for-resource-request common-lisp:nil
                       ((resource-name :initarg :resource-name :initform
                         (common-lisp:error ":resourcename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-get-operations-for-resource-request-resource-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (page-token :initarg :page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-operations-for-resource-request-page-token
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-operations-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-operations-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-operations-for-resource-request
                    'make-get-operations-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-operations-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-operations-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "resourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "pageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-operations-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-operations-for-resource-result common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor
                         struct-shape-get-operations-for-resource-result-operations
                         :shape "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-page-count :initarg :next-page-count :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-operations-for-resource-result-next-page-count
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-page-token :initarg :next-page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-operations-for-resource-result-next-page-token
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-operations-for-resource-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-operations-for-resource-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-operations-for-resource-result
                    'make-get-operations-for-resource-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-operations-for-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-operations-for-resource-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-count))
      (common-lisp:list
       (common-lisp:cons "nextPageCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-operations-for-resource-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-operations-request common-lisp:nil
                       ((page-token :initarg :page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-operations-request-page-token :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-operations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-operations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-operations-request 'make-get-operations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-operations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-operations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "pageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-operations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-operations-result common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor
                         struct-shape-get-operations-result-operations :shape
                         "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-page-token :initarg :next-page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-operations-result-next-page-token
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-operations-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-operations-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-operations-result 'make-get-operations-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-operations-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-operations-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-operations-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-regions-request common-lisp:nil
                       ((include-availability-zones :initarg
                         :include-availability-zones :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         struct-shape-get-regions-request-include-availability-zones
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (include-relational-database-availability-zones
                         :initarg
                         :include-relational-database-availability-zones
                         :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         struct-shape-get-regions-request-include-relational-database-availability-zones
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-regions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-regions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-regions-request 'make-get-regions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-regions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-regions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-availability-zones))
      (common-lisp:list
       (common-lisp:cons "includeAvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-relational-database-availability-zones))
      (common-lisp:list
       (common-lisp:cons "includeRelationalDatabaseAvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-regions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-regions-result common-lisp:nil
                       ((regions :initarg :regions :initform common-lisp:nil
                         :type (common-lisp:or region-list common-lisp:null)
                         :accessor struct-shape-get-regions-result-regions
                         :shape "RegionList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-regions-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-regions-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-regions-result 'make-get-regions-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-regions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-regions-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions))
      (common-lisp:list
       (common-lisp:cons "regions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-regions-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-relational-database-blueprints-request
                       common-lisp:nil
                       ((page-token :initarg :page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-relational-database-blueprints-request-page-token
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-relational-database-blueprints-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-relational-database-blueprints-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-relational-database-blueprints-request
                    'make-get-relational-database-blueprints-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-blueprints-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-blueprints-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "pageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-blueprints-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-relational-database-blueprints-result
                       common-lisp:nil
                       ((blueprints :initarg :blueprints :initform
                         common-lisp:nil :type
                         (common-lisp:or relational-database-blueprint-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-relational-database-blueprints-result-blueprints
                         :shape "RelationalDatabaseBlueprintList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-page-token :initarg :next-page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-relational-database-blueprints-result-next-page-token
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-relational-database-blueprints-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-relational-database-blueprints-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-relational-database-blueprints-result
                    'make-get-relational-database-blueprints-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-blueprints-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-blueprints-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blueprints))
      (common-lisp:list
       (common-lisp:cons "blueprints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-blueprints-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-relational-database-bundles-request common-lisp:nil
                       ((page-token :initarg :page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-relational-database-bundles-request-page-token
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (include-inactive :initarg :include-inactive :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         struct-shape-get-relational-database-bundles-request-include-inactive
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-relational-database-bundles-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-relational-database-bundles-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-relational-database-bundles-request
                    'make-get-relational-database-bundles-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-bundles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-bundles-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "pageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-inactive))
      (common-lisp:list
       (common-lisp:cons "includeInactive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-bundles-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-relational-database-bundles-result common-lisp:nil
                       ((bundles :initarg :bundles :initform common-lisp:nil
                         :type
                         (common-lisp:or relational-database-bundle-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-relational-database-bundles-result-bundles
                         :shape "RelationalDatabaseBundleList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-page-token :initarg :next-page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-relational-database-bundles-result-next-page-token
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-relational-database-bundles-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-relational-database-bundles-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-relational-database-bundles-result
                    'make-get-relational-database-bundles-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-bundles-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-bundles-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundles))
      (common-lisp:list
       (common-lisp:cons "bundles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-bundles-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-relational-database-events-request common-lisp:nil
                       ((relational-database-name :initarg
                         :relational-database-name :initform
                         (common-lisp:error
                          ":relationaldatabasename is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-get-relational-database-events-request-relational-database-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (duration-in-minutes :initarg :duration-in-minutes
                         :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor
                         struct-shape-get-relational-database-events-request-duration-in-minutes
                         :shape "integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (page-token :initarg :page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-relational-database-events-request-page-token
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-relational-database-events-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-relational-database-events-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-relational-database-events-request
                    'make-get-relational-database-events-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-events-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-events-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-name))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-in-minutes))
      (common-lisp:list
       (common-lisp:cons "durationInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "pageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-events-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-relational-database-events-result common-lisp:nil
                       ((relational-database-events :initarg
                         :relational-database-events :initform common-lisp:nil
                         :type
                         (common-lisp:or relational-database-event-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-relational-database-events-result-relational-database-events
                         :shape "RelationalDatabaseEventList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-page-token :initarg :next-page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-relational-database-events-result-next-page-token
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-relational-database-events-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-relational-database-events-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-relational-database-events-result
                    'make-get-relational-database-events-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-events-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-events-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-events))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-events-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-relational-database-log-events-request
                       common-lisp:nil
                       ((relational-database-name :initarg
                         :relational-database-name :initform
                         (common-lisp:error
                          ":relationaldatabasename is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-get-relational-database-log-events-request-relational-database-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-stream-name :initarg :log-stream-name :initform
                         (common-lisp:error ":logstreamname is required") :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-relational-database-log-events-request-log-stream-name
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-get-relational-database-log-events-request-start-time
                         :shape "IsoDate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or iso-date common-lisp:null)
                         :accessor
                         struct-shape-get-relational-database-log-events-request-end-time
                         :shape "IsoDate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-from-head :initarg :start-from-head :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         struct-shape-get-relational-database-log-events-request-start-from-head
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (page-token :initarg :page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-relational-database-log-events-request-page-token
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-relational-database-log-events-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-relational-database-log-events-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-relational-database-log-events-request
                    'make-get-relational-database-log-events-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-log-events-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-log-events-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-name))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-stream-name))
      (common-lisp:list
       (common-lisp:cons "logStreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-from-head))
      (common-lisp:list
       (common-lisp:cons "startFromHead"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "pageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-log-events-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-relational-database-log-events-result
                       common-lisp:nil
                       ((resource-log-events :initarg :resource-log-events
                         :initform common-lisp:nil :type
                         (common-lisp:or log-event-list common-lisp:null)
                         :accessor
                         struct-shape-get-relational-database-log-events-result-resource-log-events
                         :shape "LogEventList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-backward-token :initarg :next-backward-token
                         :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-relational-database-log-events-result-next-backward-token
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-forward-token :initarg :next-forward-token
                         :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-relational-database-log-events-result-next-forward-token
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-relational-database-log-events-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-relational-database-log-events-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-relational-database-log-events-result
                    'make-get-relational-database-log-events-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-log-events-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-log-events-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-log-events))
      (common-lisp:list
       (common-lisp:cons "resourceLogEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-backward-token))
      (common-lisp:list
       (common-lisp:cons "nextBackwardToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-forward-token))
      (common-lisp:list
       (common-lisp:cons "nextForwardToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-log-events-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-relational-database-log-streams-request
                       common-lisp:nil
                       ((relational-database-name :initarg
                         :relational-database-name :initform
                         (common-lisp:error
                          ":relationaldatabasename is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-get-relational-database-log-streams-request-relational-database-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-relational-database-log-streams-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-relational-database-log-streams-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-relational-database-log-streams-request
                    'make-get-relational-database-log-streams-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-log-streams-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-log-streams-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-name))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-log-streams-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-relational-database-log-streams-result
                       common-lisp:nil
                       ((log-streams :initarg :log-streams :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-get-relational-database-log-streams-result-log-streams
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-relational-database-log-streams-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-relational-database-log-streams-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-relational-database-log-streams-result
                    'make-get-relational-database-log-streams-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-log-streams-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-log-streams-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-streams))
      (common-lisp:list
       (common-lisp:cons "logStreams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-log-streams-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-relational-database-master-user-password-request
                       common-lisp:nil
                       ((relational-database-name :initarg
                         :relational-database-name :initform
                         (common-lisp:error
                          ":relationaldatabasename is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-get-relational-database-master-user-password-request-relational-database-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (password-version :initarg :password-version :initform
                         common-lisp:nil :type
                         (common-lisp:or relational-database-password-version
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-relational-database-master-user-password-request-password-version
                         :shape "RelationalDatabasePasswordVersion" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-relational-database-master-user-password-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-relational-database-master-user-password-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-relational-database-master-user-password-request
                    'make-get-relational-database-master-user-password-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-master-user-password-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-master-user-password-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-name))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password-version))
      (common-lisp:list
       (common-lisp:cons "passwordVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-master-user-password-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-relational-database-master-user-password-result
                       common-lisp:nil
                       ((master-user-password :initarg :master-user-password
                         :initform common-lisp:nil :type
                         (common-lisp:or sensitive-string common-lisp:null)
                         :accessor
                         struct-shape-get-relational-database-master-user-password-result-master-user-password
                         :shape "SensitiveString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-get-relational-database-master-user-password-result-created-at
                         :shape "IsoDate" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-relational-database-master-user-password-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-relational-database-master-user-password-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-relational-database-master-user-password-result
                    'make-get-relational-database-master-user-password-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-master-user-password-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-master-user-password-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-password))
      (common-lisp:list
       (common-lisp:cons "masterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-master-user-password-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-relational-database-metric-data-request
                       common-lisp:nil
                       ((relational-database-name :initarg
                         :relational-database-name :initform
                         (common-lisp:error
                          ":relationaldatabasename is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-get-relational-database-metric-data-request-relational-database-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metric-name :initarg :metric-name :initform
                         (common-lisp:error ":metricname is required") :type
                         (common-lisp:or relational-database-metric-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-relational-database-metric-data-request-metric-name
                         :shape "RelationalDatabaseMetricName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (period :initarg :period :initform
                         (common-lisp:error ":period is required") :type
                         (common-lisp:or metric-period common-lisp:null)
                         :accessor
                         struct-shape-get-relational-database-metric-data-request-period
                         :shape "MetricPeriod" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         (common-lisp:error ":starttime is required") :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-get-relational-database-metric-data-request-start-time
                         :shape "IsoDate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-time :initarg :end-time :initform
                         (common-lisp:error ":endtime is required") :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-get-relational-database-metric-data-request-end-time
                         :shape "IsoDate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unit :initarg :unit :initform
                         (common-lisp:error ":unit is required") :type
                         (common-lisp:or metric-unit common-lisp:null)
                         :accessor
                         struct-shape-get-relational-database-metric-data-request-unit
                         :shape "MetricUnit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (statistics :initarg :statistics :initform
                         (common-lisp:error ":statistics is required") :type
                         (common-lisp:or metric-statistic-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-relational-database-metric-data-request-statistics
                         :shape "MetricStatisticList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-relational-database-metric-data-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-relational-database-metric-data-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-relational-database-metric-data-request
                    'make-get-relational-database-metric-data-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-metric-data-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-metric-data-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-name))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "metricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'period))
      (common-lisp:list
       (common-lisp:cons "period"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistics))
      (common-lisp:list
       (common-lisp:cons "statistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-metric-data-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-relational-database-metric-data-result
                       common-lisp:nil
                       ((metric-name :initarg :metric-name :initform
                         common-lisp:nil :type
                         (common-lisp:or relational-database-metric-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-relational-database-metric-data-result-metric-name
                         :shape "RelationalDatabaseMetricName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (metric-data :initarg :metric-data :initform
                         common-lisp:nil :type
                         (common-lisp:or metric-datapoint-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-relational-database-metric-data-result-metric-data
                         :shape "MetricDatapointList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-relational-database-metric-data-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-relational-database-metric-data-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-relational-database-metric-data-result
                    'make-get-relational-database-metric-data-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-metric-data-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-metric-data-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "metricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-data))
      (common-lisp:list
       (common-lisp:cons "metricData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-metric-data-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-relational-database-parameters-request
                       common-lisp:nil
                       ((relational-database-name :initarg
                         :relational-database-name :initform
                         (common-lisp:error
                          ":relationaldatabasename is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-get-relational-database-parameters-request-relational-database-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (page-token :initarg :page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-relational-database-parameters-request-page-token
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-relational-database-parameters-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-relational-database-parameters-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-relational-database-parameters-request
                    'make-get-relational-database-parameters-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-parameters-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-parameters-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-name))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "pageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-parameters-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-relational-database-parameters-result
                       common-lisp:nil
                       ((parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or relational-database-parameter-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-relational-database-parameters-result-parameters
                         :shape "RelationalDatabaseParameterList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-page-token :initarg :next-page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-relational-database-parameters-result-next-page-token
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-relational-database-parameters-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-relational-database-parameters-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-relational-database-parameters-result
                    'make-get-relational-database-parameters-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-parameters-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-parameters-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-parameters-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-relational-database-request common-lisp:nil
                       ((relational-database-name :initarg
                         :relational-database-name :initform
                         (common-lisp:error
                          ":relationaldatabasename is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-get-relational-database-request-relational-database-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-relational-database-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-relational-database-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-relational-database-request
                    'make-get-relational-database-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-name))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-relational-database-result common-lisp:nil
                       ((relational-database :initarg :relational-database
                         :initform common-lisp:nil :type
                         (common-lisp:or relational-database common-lisp:null)
                         :accessor
                         struct-shape-get-relational-database-result-relational-database
                         :shape "RelationalDatabase" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-relational-database-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-relational-database-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-relational-database-result
                    'make-get-relational-database-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relational-database))
      (common-lisp:list
       (common-lisp:cons "relationalDatabase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-relational-database-snapshot-request common-lisp:nil
                       ((relational-database-snapshot-name :initarg
                         :relational-database-snapshot-name :initform
                         (common-lisp:error
                          ":relationaldatabasesnapshotname is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-get-relational-database-snapshot-request-relational-database-snapshot-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-relational-database-snapshot-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-relational-database-snapshot-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-relational-database-snapshot-request
                    'make-get-relational-database-snapshot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-snapshot-name))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseSnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-relational-database-snapshot-result common-lisp:nil
                       ((relational-database-snapshot :initarg
                         :relational-database-snapshot :initform
                         common-lisp:nil :type
                         (common-lisp:or relational-database-snapshot
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-relational-database-snapshot-result-relational-database-snapshot
                         :shape "RelationalDatabaseSnapshot" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-relational-database-snapshot-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-relational-database-snapshot-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-relational-database-snapshot-result
                    'make-get-relational-database-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-snapshot))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-relational-database-snapshots-request
                       common-lisp:nil
                       ((page-token :initarg :page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-relational-database-snapshots-request-page-token
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-relational-database-snapshots-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-relational-database-snapshots-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-relational-database-snapshots-request
                    'make-get-relational-database-snapshots-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-snapshots-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-snapshots-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "pageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-snapshots-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-relational-database-snapshots-result common-lisp:nil
                       ((relational-database-snapshots :initarg
                         :relational-database-snapshots :initform
                         common-lisp:nil :type
                         (common-lisp:or relational-database-snapshot-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-relational-database-snapshots-result-relational-database-snapshots
                         :shape "RelationalDatabaseSnapshotList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-page-token :initarg :next-page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-relational-database-snapshots-result-next-page-token
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-relational-database-snapshots-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-relational-database-snapshots-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-relational-database-snapshots-result
                    'make-get-relational-database-snapshots-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-snapshots-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-snapshots-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-snapshots))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseSnapshots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-snapshots-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-relational-databases-request common-lisp:nil
                       ((page-token :initarg :page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-relational-databases-request-page-token
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-relational-databases-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-relational-databases-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-relational-databases-request
                    'make-get-relational-databases-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-databases-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-databases-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "pageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-databases-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-relational-databases-result common-lisp:nil
                       ((relational-databases :initarg :relational-databases
                         :initform common-lisp:nil :type
                         (common-lisp:or relational-database-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-relational-databases-result-relational-databases
                         :shape "RelationalDatabaseList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-page-token :initarg :next-page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-relational-databases-result-next-page-token
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-relational-databases-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-relational-databases-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-relational-databases-result
                    'make-get-relational-databases-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-databases-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-databases-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-databases))
      (common-lisp:list
       (common-lisp:cons "relationalDatabases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-databases-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-setup-history-request common-lisp:nil
                       ((resource-name :initarg :resource-name :initform
                         (common-lisp:error ":resourcename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-get-setup-history-request-resource-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (page-token :initarg :page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or setup-history-page-token
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-setup-history-request-page-token
                         :shape "SetupHistoryPageToken" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-setup-history-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-setup-history-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-setup-history-request
                    'make-get-setup-history-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-setup-history-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-setup-history-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "resourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "pageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-setup-history-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-setup-history-result common-lisp:nil
                       ((setup-history :initarg :setup-history :initform
                         common-lisp:nil :type
                         (common-lisp:or |setupHistoryList| common-lisp:null)
                         :accessor
                         struct-shape-get-setup-history-result-setup-history
                         :shape "setupHistoryList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-page-token :initarg :next-page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or setup-history-page-token
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-setup-history-result-next-page-token
                         :shape "SetupHistoryPageToken" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-setup-history-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-setup-history-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-setup-history-result 'make-get-setup-history-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-setup-history-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-setup-history-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'setup-history))
      (common-lisp:list
       (common-lisp:cons "setupHistory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-setup-history-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-static-ip-request common-lisp:nil
                       ((static-ip-name :initarg :static-ip-name :initform
                         (common-lisp:error ":staticipname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-get-static-ip-request-static-ip-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-static-ip-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-static-ip-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-static-ip-request 'make-get-static-ip-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-static-ip-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-static-ip-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'static-ip-name))
      (common-lisp:list
       (common-lisp:cons "staticIpName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-static-ip-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-static-ip-result common-lisp:nil
                       ((static-ip :initarg :static-ip :initform
                         common-lisp:nil :type
                         (common-lisp:or static-ip common-lisp:null) :accessor
                         struct-shape-get-static-ip-result-static-ip :shape
                         "StaticIp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-static-ip-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-static-ip-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-static-ip-result 'make-get-static-ip-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-static-ip-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-static-ip-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'static-ip))
      (common-lisp:list
       (common-lisp:cons "staticIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-static-ip-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-static-ips-request common-lisp:nil
                       ((page-token :initarg :page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-static-ips-request-page-token :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-static-ips-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-static-ips-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-static-ips-request 'make-get-static-ips-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-static-ips-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-static-ips-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "pageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-static-ips-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-static-ips-result common-lisp:nil
                       ((static-ips :initarg :static-ips :initform
                         common-lisp:nil :type
                         (common-lisp:or static-ip-list common-lisp:null)
                         :accessor
                         struct-shape-get-static-ips-result-static-ips :shape
                         "StaticIpList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-page-token :initarg :next-page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-static-ips-result-next-page-token
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-static-ips-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-static-ips-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-static-ips-result 'make-get-static-ips-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-static-ips-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-static-ips-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'static-ips))
      (common-lisp:list
       (common-lisp:cons "staticIps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-static-ips-result))
   common-lisp:nil))
(common-lisp:deftype header-enum () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype header-forward-list ()
   '(trivial-types:proper-list header-enum))
 (common-lisp:defun make-header-forward-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list header-enum))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass header-object common-lisp:nil
                       ((option :initarg :option :initform common-lisp:nil
                         :type (common-lisp:or forward-values common-lisp:null)
                         :accessor struct-shape-header-object-option :shape
                         "ForwardValues" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (headers-allow-list :initarg :headers-allow-list
                         :initform common-lisp:nil :type
                         (common-lisp:or header-forward-list common-lisp:null)
                         :accessor
                         struct-shape-header-object-headers-allow-list :shape
                         "HeaderForwardList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-header-object
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'header-object
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'header-object 'make-header-object))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input header-object))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input header-object))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option))
      (common-lisp:list
       (common-lisp:cons "option"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'headers-allow-list))
      (common-lisp:list
       (common-lisp:cons "headersAllowList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input header-object))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass host-key-attributes common-lisp:nil
                       ((algorithm :initarg :algorithm :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-host-key-attributes-algorithm
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (public-key :initarg :public-key :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-host-key-attributes-public-key
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (witnessed-at :initarg :witnessed-at :initform
                         common-lisp:nil :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-host-key-attributes-witnessed-at :shape
                         "IsoDate" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (fingerprint-sha1 :initarg :fingerprint-sha1 :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-host-key-attributes-fingerprint-sha1
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (fingerprint-sha256 :initarg :fingerprint-sha256
                         :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-host-key-attributes-fingerprint-sha256
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (not-valid-before :initarg :not-valid-before :initform
                         common-lisp:nil :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-host-key-attributes-not-valid-before
                         :shape "IsoDate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (not-valid-after :initarg :not-valid-after :initform
                         common-lisp:nil :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-host-key-attributes-not-valid-after
                         :shape "IsoDate" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-host-key-attributes
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'host-key-attributes
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'host-key-attributes 'make-host-key-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input host-key-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input host-key-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'algorithm))
      (common-lisp:list
       (common-lisp:cons "algorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-key))
      (common-lisp:list
       (common-lisp:cons "publicKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'witnessed-at))
      (common-lisp:list
       (common-lisp:cons "witnessedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fingerprint-sha1))
      (common-lisp:list
       (common-lisp:cons "fingerprintSHA1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fingerprint-sha256))
      (common-lisp:list
       (common-lisp:cons "fingerprintSHA256"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-valid-before))
      (common-lisp:list
       (common-lisp:cons "notValidBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-valid-after))
      (common-lisp:list
       (common-lisp:cons "notValidAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input host-key-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype host-keys-list ()
   '(trivial-types:proper-list host-key-attributes))
 (common-lisp:defun make-host-keys-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list host-key-attributes))
   aws-sdk/generator/shape::members))
(common-lisp:deftype http-endpoint () 'common-lisp:string)
(common-lisp:deftype http-protocol-ipv6 () 'common-lisp:string)
(common-lisp:deftype http-tokens () 'common-lisp:string)
(common-lisp:deftype iamaccess-key-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass import-key-pair-request common-lisp:nil
                       ((key-pair-name :initarg :key-pair-name :initform
                         (common-lisp:error ":keypairname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-import-key-pair-request-key-pair-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (public-key-base64 :initarg :public-key-base64
                         :initform
                         (common-lisp:error ":publickeybase64 is required")
                         :type (common-lisp:or base64 common-lisp:null)
                         :accessor
                         struct-shape-import-key-pair-request-public-key-base64
                         :shape "Base64" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-import-key-pair-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'import-key-pair-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'import-key-pair-request 'make-import-key-pair-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-key-pair-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-key-pair-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-pair-name))
      (common-lisp:list
       (common-lisp:cons "keyPairName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-key-base64))
      (common-lisp:list
       (common-lisp:cons "publicKeyBase64"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-key-pair-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-key-pair-result common-lisp:nil
                       ((operation :initarg :operation :initform
                         common-lisp:nil :type
                         (common-lisp:or operation common-lisp:null) :accessor
                         struct-shape-import-key-pair-result-operation :shape
                         "Operation" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-import-key-pair-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'import-key-pair-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'import-key-pair-result 'make-import-key-pair-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-key-pair-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-key-pair-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-key-pair-result))
   common-lisp:nil))
(common-lisp:deftype in-use-resource-count () 'common-lisp:integer)
(common-lisp:deftype include-certificate-details () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass input-origin common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-input-origin-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (region-name :initarg :region-name :initform
                         common-lisp:nil :type
                         (common-lisp:or region-name common-lisp:null)
                         :accessor struct-shape-input-origin-region-name :shape
                         "RegionName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (protocol-policy :initarg :protocol-policy :initform
                         common-lisp:nil :type
                         (common-lisp:or origin-protocol-policy-enum
                                         common-lisp:null)
                         :accessor struct-shape-input-origin-protocol-policy
                         :shape "OriginProtocolPolicyEnum" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-input-origin
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'input-origin
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'input-origin 'make-input-origin))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-origin))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-origin))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region-name))
      (common-lisp:list
       (common-lisp:cons "regionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol-policy))
      (common-lisp:list
       (common-lisp:cons "protocolPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-origin))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass instance common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-instance-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-instance-arn :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (support-code :initarg :support-code :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-instance-support-code :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-instance-created-at :shape "IsoDate"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (location :initarg :location :initform common-lisp:nil
                         :type
                         (common-lisp:or resource-location common-lisp:null)
                         :accessor struct-shape-instance-location :shape
                         "ResourceLocation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor struct-shape-instance-resource-type :shape
                         "ResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-instance-tags :shape "TagList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (blueprint-id :initarg :blueprint-id :initform
                         common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-instance-blueprint-id :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (blueprint-name :initarg :blueprint-name :initform
                         common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-instance-blueprint-name :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bundle-id :initarg :bundle-id :initform
                         common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-instance-bundle-id :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (add-ons :initarg :add-ons :initform common-lisp:nil
                         :type (common-lisp:or add-on-list common-lisp:null)
                         :accessor struct-shape-instance-add-ons :shape
                         "AddOnList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (is-static-ip :initarg :is-static-ip :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor struct-shape-instance-is-static-ip :shape
                         "boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (private-ip-address :initarg :private-ip-address
                         :initform common-lisp:nil :type
                         (common-lisp:or ip-address common-lisp:null) :accessor
                         struct-shape-instance-private-ip-address :shape
                         "IpAddress" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (public-ip-address :initarg :public-ip-address
                         :initform common-lisp:nil :type
                         (common-lisp:or ip-address common-lisp:null) :accessor
                         struct-shape-instance-public-ip-address :shape
                         "IpAddress" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ipv6addresses :initarg :ipv6addresses :initform
                         common-lisp:nil :type
                         (common-lisp:or ipv6address-list common-lisp:null)
                         :accessor struct-shape-instance-ipv6addresses :shape
                         "Ipv6AddressList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ip-address-type :initarg :ip-address-type :initform
                         common-lisp:nil :type
                         (common-lisp:or ip-address-type common-lisp:null)
                         :accessor struct-shape-instance-ip-address-type :shape
                         "IpAddressType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hardware :initarg :hardware :initform common-lisp:nil
                         :type
                         (common-lisp:or instance-hardware common-lisp:null)
                         :accessor struct-shape-instance-hardware :shape
                         "InstanceHardware" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (networking :initarg :networking :initform
                         common-lisp:nil :type
                         (common-lisp:or instance-networking common-lisp:null)
                         :accessor struct-shape-instance-networking :shape
                         "InstanceNetworking" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or instance-state common-lisp:null)
                         :accessor struct-shape-instance-state :shape
                         "InstanceState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (username :initarg :username :initform common-lisp:nil
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-instance-username :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ssh-key-name :initarg :ssh-key-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-instance-ssh-key-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metadata-options :initarg :metadata-options :initform
                         common-lisp:nil :type
                         (common-lisp:or instance-metadata-options
                                         common-lisp:null)
                         :accessor struct-shape-instance-metadata-options
                         :shape "InstanceMetadataOptions" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-instance
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'instance
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'instance 'make-instance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'support-code))
      (common-lisp:list
       (common-lisp:cons "supportCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blueprint-id))
      (common-lisp:list
       (common-lisp:cons "blueprintId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blueprint-name))
      (common-lisp:list
       (common-lisp:cons "blueprintName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-id))
      (common-lisp:list
       (common-lisp:cons "bundleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'add-ons))
      (common-lisp:list
       (common-lisp:cons "addOns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-static-ip))
      (common-lisp:list
       (common-lisp:cons "isStaticIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-ip-address))
      (common-lisp:list
       (common-lisp:cons "privateIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-ip-address))
      (common-lisp:list
       (common-lisp:cons "publicIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6addresses))
      (common-lisp:list
       (common-lisp:cons "ipv6Addresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-type))
      (common-lisp:list
       (common-lisp:cons "ipAddressType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hardware))
      (common-lisp:list
       (common-lisp:cons "hardware"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'networking))
      (common-lisp:list
       (common-lisp:cons "networking"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssh-key-name))
      (common-lisp:list
       (common-lisp:cons "sshKeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-options))
      (common-lisp:list
       (common-lisp:cons "metadataOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass instance-access-details common-lisp:nil
                       ((cert-key :initarg :cert-key :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-instance-access-details-cert-key :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (expires-at :initarg :expires-at :initform
                         common-lisp:nil :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-instance-access-details-expires-at :shape
                         "IsoDate" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ip-address :initarg :ip-address :initform
                         common-lisp:nil :type
                         (common-lisp:or ip-address common-lisp:null) :accessor
                         struct-shape-instance-access-details-ip-address :shape
                         "IpAddress" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ipv6addresses :initarg :ipv6addresses :initform
                         common-lisp:nil :type
                         (common-lisp:or ipv6address-list common-lisp:null)
                         :accessor
                         struct-shape-instance-access-details-ipv6addresses
                         :shape "Ipv6AddressList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (password :initarg :password :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-instance-access-details-password :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (password-data :initarg :password-data :initform
                         common-lisp:nil :type
                         (common-lisp:or password-data common-lisp:null)
                         :accessor
                         struct-shape-instance-access-details-password-data
                         :shape "PasswordData" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (private-key :initarg :private-key :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-instance-access-details-private-key
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (protocol :initarg :protocol :initform common-lisp:nil
                         :type
                         (common-lisp:or instance-access-protocol
                                         common-lisp:null)
                         :accessor
                         struct-shape-instance-access-details-protocol :shape
                         "InstanceAccessProtocol" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-name :initarg :instance-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-instance-access-details-instance-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (username :initarg :username :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-instance-access-details-username :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (host-keys :initarg :host-keys :initform
                         common-lisp:nil :type
                         (common-lisp:or host-keys-list common-lisp:null)
                         :accessor
                         struct-shape-instance-access-details-host-keys :shape
                         "HostKeysList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-instance-access-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'instance-access-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'instance-access-details 'make-instance-access-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-access-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-access-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cert-key))
      (common-lisp:list
       (common-lisp:cons "certKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires-at))
      (common-lisp:list
       (common-lisp:cons "expiresAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "ipAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6addresses))
      (common-lisp:list
       (common-lisp:cons "ipv6Addresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password-data))
      (common-lisp:list
       (common-lisp:cons "passwordData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-key))
      (common-lisp:list
       (common-lisp:cons "privateKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-name))
      (common-lisp:list
       (common-lisp:cons "instanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-keys))
      (common-lisp:list
       (common-lisp:cons "hostKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-access-details))
   common-lisp:nil))
(common-lisp:deftype instance-access-protocol () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass instance-entry common-lisp:nil
                       ((source-name :initarg :source-name :initform
                         (common-lisp:error ":sourcename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-instance-entry-source-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-type :initarg :instance-type :initform
                         (common-lisp:error ":instancetype is required") :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-instance-entry-instance-type
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port-info-source :initarg :port-info-source :initform
                         (common-lisp:error ":portinfosource is required")
                         :type
                         (common-lisp:or port-info-source-type
                                         common-lisp:null)
                         :accessor struct-shape-instance-entry-port-info-source
                         :shape "PortInfoSourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-data :initarg :user-data :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-instance-entry-user-data :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (availability-zone :initarg :availability-zone
                         :initform
                         (common-lisp:error ":availabilityzone is required")
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-instance-entry-availability-zone :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-instance-entry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'instance-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'instance-entry 'make-instance-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-name))
      (common-lisp:list
       (common-lisp:cons "sourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "instanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-info-source))
      (common-lisp:list
       (common-lisp:cons "portInfoSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-data))
      (common-lisp:list
       (common-lisp:cons "userData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "availabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instance-entry-list ()
   '(trivial-types:proper-list instance-entry))
 (common-lisp:defun make-instance-entry-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass instance-hardware common-lisp:nil
                       ((cpu-count :initarg :cpu-count :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor struct-shape-instance-hardware-cpu-count
                         :shape "integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (disks :initarg :disks :initform common-lisp:nil :type
                         (common-lisp:or disk-list common-lisp:null) :accessor
                         struct-shape-instance-hardware-disks :shape "DiskList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ram-size-in-gb :initarg :ram-size-in-gb :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:single-float
                                         common-lisp:null)
                         :accessor
                         struct-shape-instance-hardware-ram-size-in-gb :shape
                         "float" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-instance-hardware
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'instance-hardware
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'instance-hardware 'make-instance-hardware))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-hardware))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-hardware))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpu-count))
      (common-lisp:list
       (common-lisp:cons "cpuCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disks))
      (common-lisp:list
       (common-lisp:cons "disks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ram-size-in-gb))
      (common-lisp:list
       (common-lisp:cons "ramSizeInGb"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-hardware))
   common-lisp:nil))
(common-lisp:deftype instance-health-reason () 'common-lisp:string)
(common-lisp:deftype instance-health-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass instance-health-summary common-lisp:nil
                       ((instance-name :initarg :instance-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-instance-health-summary-instance-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-health :initarg :instance-health :initform
                         common-lisp:nil :type
                         (common-lisp:or instance-health-state
                                         common-lisp:null)
                         :accessor
                         struct-shape-instance-health-summary-instance-health
                         :shape "InstanceHealthState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-health-reason :initarg
                         :instance-health-reason :initform common-lisp:nil
                         :type
                         (common-lisp:or instance-health-reason
                                         common-lisp:null)
                         :accessor
                         struct-shape-instance-health-summary-instance-health-reason
                         :shape "InstanceHealthReason" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-instance-health-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'instance-health-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'instance-health-summary 'make-instance-health-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-health-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-health-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-name))
      (common-lisp:list
       (common-lisp:cons "instanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-health))
      (common-lisp:list
       (common-lisp:cons "instanceHealth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-health-reason))
      (common-lisp:list
       (common-lisp:cons "instanceHealthReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-health-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instance-health-summary-list ()
   '(trivial-types:proper-list instance-health-summary))
 (common-lisp:defun make-instance-health-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-health-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype instance-list () '(trivial-types:proper-list instance))
 (common-lisp:defun make-instance-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass instance-metadata-options common-lisp:nil
                       ((state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or instance-metadata-state
                                         common-lisp:null)
                         :accessor struct-shape-instance-metadata-options-state
                         :shape "InstanceMetadataState" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (http-tokens :initarg :http-tokens :initform
                         common-lisp:nil :type
                         (common-lisp:or http-tokens common-lisp:null)
                         :accessor
                         struct-shape-instance-metadata-options-http-tokens
                         :shape "HttpTokens" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (http-endpoint :initarg :http-endpoint :initform
                         common-lisp:nil :type
                         (common-lisp:or http-endpoint common-lisp:null)
                         :accessor
                         struct-shape-instance-metadata-options-http-endpoint
                         :shape "HttpEndpoint" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (http-put-response-hop-limit :initarg
                         :http-put-response-hop-limit :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor
                         struct-shape-instance-metadata-options-http-put-response-hop-limit
                         :shape "integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (http-protocol-ipv6 :initarg :http-protocol-ipv6
                         :initform common-lisp:nil :type
                         (common-lisp:or http-protocol-ipv6 common-lisp:null)
                         :accessor
                         struct-shape-instance-metadata-options-http-protocol-ipv6
                         :shape "HttpProtocolIpv6" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-instance-metadata-options
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'instance-metadata-options
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'instance-metadata-options
                    'make-instance-metadata-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-metadata-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-metadata-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-tokens))
      (common-lisp:list
       (common-lisp:cons "httpTokens"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-endpoint))
      (common-lisp:list
       (common-lisp:cons "httpEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'http-put-response-hop-limit))
      (common-lisp:list
       (common-lisp:cons "httpPutResponseHopLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-protocol-ipv6))
      (common-lisp:list
       (common-lisp:cons "httpProtocolIpv6"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-metadata-options))
   common-lisp:nil))
(common-lisp:deftype instance-metadata-state () 'common-lisp:string)
(common-lisp:deftype instance-metric-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass instance-networking common-lisp:nil
                       ((monthly-transfer :initarg :monthly-transfer :initform
                         common-lisp:nil :type
                         (common-lisp:or monthly-transfer common-lisp:null)
                         :accessor
                         struct-shape-instance-networking-monthly-transfer
                         :shape "MonthlyTransfer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ports :initarg :ports :initform common-lisp:nil :type
                         (common-lisp:or instance-port-info-list
                                         common-lisp:null)
                         :accessor struct-shape-instance-networking-ports
                         :shape "InstancePortInfoList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-instance-networking
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'instance-networking
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'instance-networking 'make-instance-networking))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-networking))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-networking))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monthly-transfer))
      (common-lisp:list
       (common-lisp:cons "monthlyTransfer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ports))
      (common-lisp:list
       (common-lisp:cons "ports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-networking))
   common-lisp:nil))
(common-lisp:deftype instance-platform () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype instance-platform-list ()
   '(trivial-types:proper-list instance-platform))
 (common-lisp:defun make-instance-platform-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-platform))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass instance-port-info common-lisp:nil
                       ((from-port :initarg :from-port :initform
                         common-lisp:nil :type
                         (common-lisp:or port common-lisp:null) :accessor
                         struct-shape-instance-port-info-from-port :shape
                         "Port" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (to-port :initarg :to-port :initform common-lisp:nil
                         :type (common-lisp:or port common-lisp:null) :accessor
                         struct-shape-instance-port-info-to-port :shape "Port"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (protocol :initarg :protocol :initform common-lisp:nil
                         :type
                         (common-lisp:or network-protocol common-lisp:null)
                         :accessor struct-shape-instance-port-info-protocol
                         :shape "NetworkProtocol" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (access-from :initarg :access-from :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-instance-port-info-access-from
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (access-type :initarg :access-type :initform
                         common-lisp:nil :type
                         (common-lisp:or port-access-type common-lisp:null)
                         :accessor struct-shape-instance-port-info-access-type
                         :shape "PortAccessType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (common-name :initarg :common-name :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-instance-port-info-common-name
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (access-direction :initarg :access-direction :initform
                         common-lisp:nil :type
                         (common-lisp:or access-direction common-lisp:null)
                         :accessor
                         struct-shape-instance-port-info-access-direction
                         :shape "AccessDirection" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cidrs :initarg :cidrs :initform common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-instance-port-info-cidrs :shape
                         "StringList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ipv6cidrs :initarg :ipv6cidrs :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-instance-port-info-ipv6cidrs
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cidr-list-aliases :initarg :cidr-list-aliases
                         :initform common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-instance-port-info-cidr-list-aliases
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-instance-port-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'instance-port-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'instance-port-info 'make-instance-port-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-port-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-port-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-port))
      (common-lisp:list
       (common-lisp:cons "fromPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to-port))
      (common-lisp:list
       (common-lisp:cons "toPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-from))
      (common-lisp:list
       (common-lisp:cons "accessFrom"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-type))
      (common-lisp:list
       (common-lisp:cons "accessType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'common-name))
      (common-lisp:list
       (common-lisp:cons "commonName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-direction))
      (common-lisp:list
       (common-lisp:cons "accessDirection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidrs))
      (common-lisp:list
       (common-lisp:cons "cidrs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6cidrs))
      (common-lisp:list
       (common-lisp:cons "ipv6Cidrs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr-list-aliases))
      (common-lisp:list
       (common-lisp:cons "cidrListAliases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-port-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instance-port-info-list ()
   '(trivial-types:proper-list instance-port-info))
 (common-lisp:defun make-instance-port-info-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-port-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass instance-port-state common-lisp:nil
                       ((from-port :initarg :from-port :initform
                         common-lisp:nil :type
                         (common-lisp:or port common-lisp:null) :accessor
                         struct-shape-instance-port-state-from-port :shape
                         "Port" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (to-port :initarg :to-port :initform common-lisp:nil
                         :type (common-lisp:or port common-lisp:null) :accessor
                         struct-shape-instance-port-state-to-port :shape "Port"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (protocol :initarg :protocol :initform common-lisp:nil
                         :type
                         (common-lisp:or network-protocol common-lisp:null)
                         :accessor struct-shape-instance-port-state-protocol
                         :shape "NetworkProtocol" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or port-state common-lisp:null) :accessor
                         struct-shape-instance-port-state-state :shape
                         "PortState" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cidrs :initarg :cidrs :initform common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-instance-port-state-cidrs
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ipv6cidrs :initarg :ipv6cidrs :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-instance-port-state-ipv6cidrs
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cidr-list-aliases :initarg :cidr-list-aliases
                         :initform common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-instance-port-state-cidr-list-aliases
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-instance-port-state
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'instance-port-state
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'instance-port-state 'make-instance-port-state))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-port-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-port-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-port))
      (common-lisp:list
       (common-lisp:cons "fromPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to-port))
      (common-lisp:list
       (common-lisp:cons "toPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidrs))
      (common-lisp:list
       (common-lisp:cons "cidrs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6cidrs))
      (common-lisp:list
       (common-lisp:cons "ipv6Cidrs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr-list-aliases))
      (common-lisp:list
       (common-lisp:cons "cidrListAliases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-port-state))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instance-port-state-list ()
   '(trivial-types:proper-list instance-port-state))
 (common-lisp:defun make-instance-port-state-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-port-state))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass instance-snapshot common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-instance-snapshot-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-instance-snapshot-arn :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (support-code :initarg :support-code :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-instance-snapshot-support-code
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-instance-snapshot-created-at :shape
                         "IsoDate" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (location :initarg :location :initform common-lisp:nil
                         :type
                         (common-lisp:or resource-location common-lisp:null)
                         :accessor struct-shape-instance-snapshot-location
                         :shape "ResourceLocation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor struct-shape-instance-snapshot-resource-type
                         :shape "ResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-instance-snapshot-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or instance-snapshot-state
                                         common-lisp:null)
                         :accessor struct-shape-instance-snapshot-state :shape
                         "InstanceSnapshotState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (progress :initarg :progress :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-instance-snapshot-progress
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (from-attached-disks :initarg :from-attached-disks
                         :initform common-lisp:nil :type
                         (common-lisp:or disk-list common-lisp:null) :accessor
                         struct-shape-instance-snapshot-from-attached-disks
                         :shape "DiskList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (from-instance-name :initarg :from-instance-name
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-instance-snapshot-from-instance-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (from-instance-arn :initarg :from-instance-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-instance-snapshot-from-instance-arn
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (from-blueprint-id :initarg :from-blueprint-id
                         :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-instance-snapshot-from-blueprint-id
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (from-bundle-id :initarg :from-bundle-id :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-instance-snapshot-from-bundle-id :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (is-from-auto-snapshot :initarg :is-from-auto-snapshot
                         :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         struct-shape-instance-snapshot-is-from-auto-snapshot
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (size-in-gb :initarg :size-in-gb :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor struct-shape-instance-snapshot-size-in-gb
                         :shape "integer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-instance-snapshot
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'instance-snapshot
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'instance-snapshot 'make-instance-snapshot))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-snapshot))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-snapshot))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'support-code))
      (common-lisp:list
       (common-lisp:cons "supportCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'progress))
      (common-lisp:list
       (common-lisp:cons "progress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-attached-disks))
      (common-lisp:list
       (common-lisp:cons "fromAttachedDisks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-instance-name))
      (common-lisp:list
       (common-lisp:cons "fromInstanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-instance-arn))
      (common-lisp:list
       (common-lisp:cons "fromInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-blueprint-id))
      (common-lisp:list
       (common-lisp:cons "fromBlueprintId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-bundle-id))
      (common-lisp:list
       (common-lisp:cons "fromBundleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-from-auto-snapshot))
      (common-lisp:list
       (common-lisp:cons "isFromAutoSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-in-gb))
      (common-lisp:list
       (common-lisp:cons "sizeInGb"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-snapshot))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass instance-snapshot-info common-lisp:nil
                       ((from-bundle-id :initarg :from-bundle-id :initform
                         common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-instance-snapshot-info-from-bundle-id
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (from-blueprint-id :initarg :from-blueprint-id
                         :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-instance-snapshot-info-from-blueprint-id
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (from-disk-info :initarg :from-disk-info :initform
                         common-lisp:nil :type
                         (common-lisp:or disk-info-list common-lisp:null)
                         :accessor
                         struct-shape-instance-snapshot-info-from-disk-info
                         :shape "DiskInfoList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-instance-snapshot-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'instance-snapshot-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'instance-snapshot-info 'make-instance-snapshot-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-snapshot-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-snapshot-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-bundle-id))
      (common-lisp:list
       (common-lisp:cons "fromBundleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-blueprint-id))
      (common-lisp:list
       (common-lisp:cons "fromBlueprintId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-disk-info))
      (common-lisp:list
       (common-lisp:cons "fromDiskInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-snapshot-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instance-snapshot-list ()
   '(trivial-types:proper-list instance-snapshot))
 (common-lisp:defun make-instance-snapshot-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-snapshot))
   aws-sdk/generator/shape::members))
(common-lisp:deftype instance-snapshot-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass instance-state common-lisp:nil
                       ((code :initarg :code :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor struct-shape-instance-state-code :shape
                         "integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-instance-state-name :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-instance-state
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'instance-state
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'instance-state 'make-instance-state))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-state))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition invalid-input-exception
     (lightsail-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       invalid-input-exception-code)
      (docs :initarg :docs :initform common-lisp:nil :reader
       invalid-input-exception-docs)
      (message :initarg :message :initform common-lisp:nil :reader
       invalid-input-exception-message)
      (tip :initarg :tip :initform common-lisp:nil :reader
       invalid-input-exception-tip)))
 (common-lisp:export
  (common-lisp:list 'invalid-input-exception 'invalid-input-exception-code
                    'invalid-input-exception-docs
                    'invalid-input-exception-message
                    'invalid-input-exception-tip)))
(common-lisp:deftype ip-address () 'common-lisp:string)
(common-lisp:deftype ip-address-type () 'common-lisp:string)
(common-lisp:deftype ipv6address () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ipv6address-list ()
   '(trivial-types:proper-list ipv6address))
 (common-lisp:defun make-ipv6address-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ipv6address))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass is-vpc-peered-request common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-is-vpc-peered-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'is-vpc-peered-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'is-vpc-peered-request 'make-is-vpc-peered-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          is-vpc-peered-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          is-vpc-peered-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          is-vpc-peered-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass is-vpc-peered-result common-lisp:nil
                       ((is-peered :initarg :is-peered :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor struct-shape-is-vpc-peered-result-is-peered
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-is-vpc-peered-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'is-vpc-peered-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'is-vpc-peered-result 'make-is-vpc-peered-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input is-vpc-peered-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input is-vpc-peered-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-peered))
      (common-lisp:list
       (common-lisp:cons "isPeered"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input is-vpc-peered-result))
   common-lisp:nil))
(common-lisp:deftype iso-date () 'common-lisp:string)
(common-lisp:deftype issuer-ca () 'common-lisp:string)
(common-lisp:deftype key-algorithm () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass key-pair common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-key-pair-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-key-pair-arn :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (support-code :initarg :support-code :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-key-pair-support-code :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-key-pair-created-at :shape "IsoDate"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (location :initarg :location :initform common-lisp:nil
                         :type
                         (common-lisp:or resource-location common-lisp:null)
                         :accessor struct-shape-key-pair-location :shape
                         "ResourceLocation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor struct-shape-key-pair-resource-type :shape
                         "ResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-key-pair-tags :shape "TagList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (fingerprint :initarg :fingerprint :initform
                         common-lisp:nil :type
                         (common-lisp:or base64 common-lisp:null) :accessor
                         struct-shape-key-pair-fingerprint :shape "Base64"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-key-pair
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'key-pair
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'key-pair 'make-key-pair))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input key-pair))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input key-pair))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'support-code))
      (common-lisp:list
       (common-lisp:cons "supportCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fingerprint))
      (common-lisp:list
       (common-lisp:cons "fingerprint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input key-pair))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype key-pair-list () '(trivial-types:proper-list key-pair))
 (common-lisp:defun make-key-pair-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list key-pair))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass lightsail-distribution common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-lightsail-distribution-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-lightsail-distribution-arn
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (support-code :initarg :support-code :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-lightsail-distribution-support-code
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-lightsail-distribution-created-at :shape
                         "IsoDate" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (location :initarg :location :initform common-lisp:nil
                         :type
                         (common-lisp:or resource-location common-lisp:null)
                         :accessor struct-shape-lightsail-distribution-location
                         :shape "ResourceLocation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor
                         struct-shape-lightsail-distribution-resource-type
                         :shape "ResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (alternative-domain-names :initarg
                         :alternative-domain-names :initform common-lisp:nil
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-lightsail-distribution-alternative-domain-names
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-lightsail-distribution-status
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-enabled :initarg :is-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         struct-shape-lightsail-distribution-is-enabled :shape
                         "boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (domain-name :initarg :domain-name :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-lightsail-distribution-domain-name :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bundle-id :initarg :bundle-id :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-lightsail-distribution-bundle-id :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (certificate-name :initarg :certificate-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-lightsail-distribution-certificate-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (origin :initarg :origin :initform common-lisp:nil
                         :type (common-lisp:or origin common-lisp:null)
                         :accessor struct-shape-lightsail-distribution-origin
                         :shape "Origin" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (origin-public-dns :initarg :origin-public-dns
                         :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-lightsail-distribution-origin-public-dns
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-cache-behavior :initarg
                         :default-cache-behavior :initform common-lisp:nil
                         :type (common-lisp:or cache-behavior common-lisp:null)
                         :accessor
                         struct-shape-lightsail-distribution-default-cache-behavior
                         :shape "CacheBehavior" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-behavior-settings :initarg
                         :cache-behavior-settings :initform common-lisp:nil
                         :type (common-lisp:or cache-settings common-lisp:null)
                         :accessor
                         struct-shape-lightsail-distribution-cache-behavior-settings
                         :shape "CacheSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-behaviors :initarg :cache-behaviors :initform
                         common-lisp:nil :type
                         (common-lisp:or cache-behavior-list common-lisp:null)
                         :accessor
                         struct-shape-lightsail-distribution-cache-behaviors
                         :shape "CacheBehaviorList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (able-to-update-bundle :initarg :able-to-update-bundle
                         :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         struct-shape-lightsail-distribution-able-to-update-bundle
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ip-address-type :initarg :ip-address-type :initform
                         common-lisp:nil :type
                         (common-lisp:or ip-address-type common-lisp:null)
                         :accessor
                         struct-shape-lightsail-distribution-ip-address-type
                         :shape "IpAddressType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-lightsail-distribution-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-lightsail-distribution
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'lightsail-distribution
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'lightsail-distribution 'make-lightsail-distribution))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lightsail-distribution))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lightsail-distribution))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'support-code))
      (common-lisp:list
       (common-lisp:cons "supportCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'alternative-domain-names))
      (common-lisp:list
       (common-lisp:cons "alternativeDomainNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-enabled))
      (common-lisp:list
       (common-lisp:cons "isEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "domainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-id))
      (common-lisp:list
       (common-lisp:cons "bundleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-name))
      (common-lisp:list
       (common-lisp:cons "certificateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin))
      (common-lisp:list
       (common-lisp:cons "origin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin-public-dns))
      (common-lisp:list
       (common-lisp:cons "originPublicDNS"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-cache-behavior))
      (common-lisp:list
       (common-lisp:cons "defaultCacheBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-behavior-settings))
      (common-lisp:list
       (common-lisp:cons "cacheBehaviorSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-behaviors))
      (common-lisp:list
       (common-lisp:cons "cacheBehaviors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'able-to-update-bundle))
      (common-lisp:list
       (common-lisp:cons "ableToUpdateBundle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-type))
      (common-lisp:list
       (common-lisp:cons "ipAddressType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lightsail-distribution))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass load-balancer common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-load-balancer-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-load-balancer-arn :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (support-code :initarg :support-code :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-load-balancer-support-code
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-load-balancer-created-at :shape "IsoDate"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (location :initarg :location :initform common-lisp:nil
                         :type
                         (common-lisp:or resource-location common-lisp:null)
                         :accessor struct-shape-load-balancer-location :shape
                         "ResourceLocation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor struct-shape-load-balancer-resource-type
                         :shape "ResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-load-balancer-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dns-name :initarg :dns-name :initform common-lisp:nil
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-load-balancer-dns-name :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or load-balancer-state common-lisp:null)
                         :accessor struct-shape-load-balancer-state :shape
                         "LoadBalancerState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (protocol :initarg :protocol :initform common-lisp:nil
                         :type
                         (common-lisp:or load-balancer-protocol
                                         common-lisp:null)
                         :accessor struct-shape-load-balancer-protocol :shape
                         "LoadBalancerProtocol" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (public-ports :initarg :public-ports :initform
                         common-lisp:nil :type
                         (common-lisp:or port-list common-lisp:null) :accessor
                         struct-shape-load-balancer-public-ports :shape
                         "PortList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (health-check-path :initarg :health-check-path
                         :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-load-balancer-health-check-path
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-port :initarg :instance-port :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor struct-shape-load-balancer-instance-port
                         :shape "integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-health-summary :initarg
                         :instance-health-summary :initform common-lisp:nil
                         :type
                         (common-lisp:or instance-health-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-load-balancer-instance-health-summary
                         :shape "InstanceHealthSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tls-certificate-summaries :initarg
                         :tls-certificate-summaries :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          load-balancer-tls-certificate-summary-list
                          common-lisp:null)
                         :accessor
                         struct-shape-load-balancer-tls-certificate-summaries
                         :shape "LoadBalancerTlsCertificateSummaryList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (configuration-options :initarg :configuration-options
                         :initform common-lisp:nil :type
                         (common-lisp:or load-balancer-configuration-options
                                         common-lisp:null)
                         :accessor
                         struct-shape-load-balancer-configuration-options
                         :shape "LoadBalancerConfigurationOptions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ip-address-type :initarg :ip-address-type :initform
                         common-lisp:nil :type
                         (common-lisp:or ip-address-type common-lisp:null)
                         :accessor struct-shape-load-balancer-ip-address-type
                         :shape "IpAddressType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (https-redirection-enabled :initarg
                         :https-redirection-enabled :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         struct-shape-load-balancer-https-redirection-enabled
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tls-policy-name :initarg :tls-policy-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-load-balancer-tls-policy-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-load-balancer
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'load-balancer
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'load-balancer 'make-load-balancer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input load-balancer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input load-balancer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'support-code))
      (common-lisp:list
       (common-lisp:cons "supportCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-name))
      (common-lisp:list
       (common-lisp:cons "dnsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-ports))
      (common-lisp:list
       (common-lisp:cons "publicPorts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check-path))
      (common-lisp:list
       (common-lisp:cons "healthCheckPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-port))
      (common-lisp:list
       (common-lisp:cons "instancePort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-health-summary))
      (common-lisp:list
       (common-lisp:cons "instanceHealthSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tls-certificate-summaries))
      (common-lisp:list
       (common-lisp:cons "tlsCertificateSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-options))
      (common-lisp:list
       (common-lisp:cons "configurationOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-type))
      (common-lisp:list
       (common-lisp:cons "ipAddressType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'https-redirection-enabled))
      (common-lisp:list
       (common-lisp:cons "httpsRedirectionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tls-policy-name))
      (common-lisp:list
       (common-lisp:cons "tlsPolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input load-balancer))
   common-lisp:nil))
(common-lisp:deftype load-balancer-attribute-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype load-balancer-configuration-options ()
   'common-lisp:hash-table)
 (common-lisp:defun make-load-balancer-configuration-options
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype load-balancer-list ()
   '(trivial-types:proper-list load-balancer))
 (common-lisp:defun make-load-balancer-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list load-balancer))
   aws-sdk/generator/shape::members))
(common-lisp:deftype load-balancer-metric-name () 'common-lisp:string)
(common-lisp:deftype load-balancer-protocol () 'common-lisp:string)
(common-lisp:deftype load-balancer-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass load-balancer-tls-certificate common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-load-balancer-tls-certificate-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-load-balancer-tls-certificate-arn :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (support-code :initarg :support-code :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-load-balancer-tls-certificate-support-code
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-load-balancer-tls-certificate-created-at
                         :shape "IsoDate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (location :initarg :location :initform common-lisp:nil
                         :type
                         (common-lisp:or resource-location common-lisp:null)
                         :accessor
                         struct-shape-load-balancer-tls-certificate-location
                         :shape "ResourceLocation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor
                         struct-shape-load-balancer-tls-certificate-resource-type
                         :shape "ResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-load-balancer-tls-certificate-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (load-balancer-name :initarg :load-balancer-name
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-load-balancer-tls-certificate-load-balancer-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-attached :initarg :is-attached :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         struct-shape-load-balancer-tls-certificate-is-attached
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or load-balancer-tls-certificate-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-load-balancer-tls-certificate-status
                         :shape "LoadBalancerTlsCertificateStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (domain-name :initarg :domain-name :initform
                         common-lisp:nil :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-load-balancer-tls-certificate-domain-name
                         :shape "DomainName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-validation-records :initarg
                         :domain-validation-records :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          load-balancer-tls-certificate-domain-validation-record-list
                          common-lisp:null)
                         :accessor
                         struct-shape-load-balancer-tls-certificate-domain-validation-records
                         :shape
                         "LoadBalancerTlsCertificateDomainValidationRecordList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (failure-reason :initarg :failure-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          load-balancer-tls-certificate-failure-reason
                          common-lisp:null)
                         :accessor
                         struct-shape-load-balancer-tls-certificate-failure-reason
                         :shape "LoadBalancerTlsCertificateFailureReason"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (issued-at :initarg :issued-at :initform
                         common-lisp:nil :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-load-balancer-tls-certificate-issued-at
                         :shape "IsoDate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (issuer :initarg :issuer :initform common-lisp:nil
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-load-balancer-tls-certificate-issuer
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key-algorithm :initarg :key-algorithm :initform
                         common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-load-balancer-tls-certificate-key-algorithm
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (not-after :initarg :not-after :initform
                         common-lisp:nil :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-load-balancer-tls-certificate-not-after
                         :shape "IsoDate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (not-before :initarg :not-before :initform
                         common-lisp:nil :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-load-balancer-tls-certificate-not-before
                         :shape "IsoDate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (renewal-summary :initarg :renewal-summary :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          load-balancer-tls-certificate-renewal-summary
                          common-lisp:null)
                         :accessor
                         struct-shape-load-balancer-tls-certificate-renewal-summary
                         :shape "LoadBalancerTlsCertificateRenewalSummary"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (revocation-reason :initarg :revocation-reason
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          load-balancer-tls-certificate-revocation-reason
                          common-lisp:null)
                         :accessor
                         struct-shape-load-balancer-tls-certificate-revocation-reason
                         :shape "LoadBalancerTlsCertificateRevocationReason"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (revoked-at :initarg :revoked-at :initform
                         common-lisp:nil :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-load-balancer-tls-certificate-revoked-at
                         :shape "IsoDate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (serial :initarg :serial :initform common-lisp:nil
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-load-balancer-tls-certificate-serial
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (signature-algorithm :initarg :signature-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-load-balancer-tls-certificate-signature-algorithm
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subject :initarg :subject :initform common-lisp:nil
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-load-balancer-tls-certificate-subject
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subject-alternative-names :initarg
                         :subject-alternative-names :initform common-lisp:nil
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-load-balancer-tls-certificate-subject-alternative-names
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-load-balancer-tls-certificate
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'load-balancer-tls-certificate
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'load-balancer-tls-certificate
                    'make-load-balancer-tls-certificate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-tls-certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-tls-certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'support-code))
      (common-lisp:list
       (common-lisp:cons "supportCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "loadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-attached))
      (common-lisp:list
       (common-lisp:cons "isAttached"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "domainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-validation-records))
      (common-lisp:list
       (common-lisp:cons "domainValidationRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "failureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issued-at))
      (common-lisp:list
       (common-lisp:cons "issuedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issuer))
      (common-lisp:list
       (common-lisp:cons "issuer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-algorithm))
      (common-lisp:list
       (common-lisp:cons "keyAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-after))
      (common-lisp:list
       (common-lisp:cons "notAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-before))
      (common-lisp:list
       (common-lisp:cons "notBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'renewal-summary))
      (common-lisp:list
       (common-lisp:cons "renewalSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revocation-reason))
      (common-lisp:list
       (common-lisp:cons "revocationReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revoked-at))
      (common-lisp:list
       (common-lisp:cons "revokedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serial))
      (common-lisp:list
       (common-lisp:cons "serial"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signature-algorithm))
      (common-lisp:list
       (common-lisp:cons "signatureAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subject))
      (common-lisp:list
       (common-lisp:cons "subject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subject-alternative-names))
      (common-lisp:list
       (common-lisp:cons "subjectAlternativeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-tls-certificate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass load-balancer-tls-certificate-dns-record-creation-state
                       common-lisp:nil
                       ((code :initarg :code :initform common-lisp:nil :type
                         (common-lisp:or
                          load-balancer-tls-certificate-dns-record-creation-state-code
                          common-lisp:null)
                         :accessor
                         struct-shape-load-balancer-tls-certificate-dns-record-creation-state-code
                         :shape
                         "LoadBalancerTlsCertificateDnsRecordCreationStateCode"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-load-balancer-tls-certificate-dns-record-creation-state-message
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-load-balancer-tls-certificate-dns-record-creation-state
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'load-balancer-tls-certificate-dns-record-creation-state
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'load-balancer-tls-certificate-dns-record-creation-state
                    'make-load-balancer-tls-certificate-dns-record-creation-state))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-tls-certificate-dns-record-creation-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-tls-certificate-dns-record-creation-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-tls-certificate-dns-record-creation-state))
   common-lisp:nil))
(common-lisp:deftype load-balancer-tls-certificate-dns-record-creation-state-code
                     ()
  'common-lisp:string)
(common-lisp:deftype load-balancer-tls-certificate-domain-status ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass load-balancer-tls-certificate-domain-validation-option
                       common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         common-lisp:nil :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-load-balancer-tls-certificate-domain-validation-option-domain-name
                         :shape "DomainName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (validation-status :initarg :validation-status
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          load-balancer-tls-certificate-domain-status
                          common-lisp:null)
                         :accessor
                         struct-shape-load-balancer-tls-certificate-domain-validation-option-validation-status
                         :shape "LoadBalancerTlsCertificateDomainStatus"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-load-balancer-tls-certificate-domain-validation-option
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'load-balancer-tls-certificate-domain-validation-option
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'load-balancer-tls-certificate-domain-validation-option
                    'make-load-balancer-tls-certificate-domain-validation-option))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-tls-certificate-domain-validation-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-tls-certificate-domain-validation-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "domainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-status))
      (common-lisp:list
       (common-lisp:cons "validationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-tls-certificate-domain-validation-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype load-balancer-tls-certificate-domain-validation-option-list
                      ()
   '(trivial-types:proper-list
     load-balancer-tls-certificate-domain-validation-option))
 (common-lisp:defun make-load-balancer-tls-certificate-domain-validation-option-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            load-balancer-tls-certificate-domain-validation-option))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass load-balancer-tls-certificate-domain-validation-record
                       common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-load-balancer-tls-certificate-domain-validation-record-name
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-load-balancer-tls-certificate-domain-validation-record-type
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-load-balancer-tls-certificate-domain-validation-record-value
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (validation-status :initarg :validation-status
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          load-balancer-tls-certificate-domain-status
                          common-lisp:null)
                         :accessor
                         struct-shape-load-balancer-tls-certificate-domain-validation-record-validation-status
                         :shape "LoadBalancerTlsCertificateDomainStatus"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (domain-name :initarg :domain-name :initform
                         common-lisp:nil :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-load-balancer-tls-certificate-domain-validation-record-domain-name
                         :shape "DomainName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dns-record-creation-state :initarg
                         :dns-record-creation-state :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          load-balancer-tls-certificate-dns-record-creation-state
                          common-lisp:null)
                         :accessor
                         struct-shape-load-balancer-tls-certificate-domain-validation-record-dns-record-creation-state
                         :shape
                         "LoadBalancerTlsCertificateDnsRecordCreationState"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-load-balancer-tls-certificate-domain-validation-record
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'load-balancer-tls-certificate-domain-validation-record
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'load-balancer-tls-certificate-domain-validation-record
                    'make-load-balancer-tls-certificate-domain-validation-record))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-tls-certificate-domain-validation-record))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-tls-certificate-domain-validation-record))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-status))
      (common-lisp:list
       (common-lisp:cons "validationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "domainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dns-record-creation-state))
      (common-lisp:list
       (common-lisp:cons "dnsRecordCreationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-tls-certificate-domain-validation-record))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype load-balancer-tls-certificate-domain-validation-record-list
                      ()
   '(trivial-types:proper-list
     load-balancer-tls-certificate-domain-validation-record))
 (common-lisp:defun make-load-balancer-tls-certificate-domain-validation-record-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            load-balancer-tls-certificate-domain-validation-record))
   aws-sdk/generator/shape::members))
(common-lisp:deftype load-balancer-tls-certificate-failure-reason ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype load-balancer-tls-certificate-list ()
   '(trivial-types:proper-list load-balancer-tls-certificate))
 (common-lisp:defun make-load-balancer-tls-certificate-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            load-balancer-tls-certificate))
   aws-sdk/generator/shape::members))
(common-lisp:deftype load-balancer-tls-certificate-renewal-status ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass load-balancer-tls-certificate-renewal-summary
                       common-lisp:nil
                       ((renewal-status :initarg :renewal-status :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          load-balancer-tls-certificate-renewal-status
                          common-lisp:null)
                         :accessor
                         struct-shape-load-balancer-tls-certificate-renewal-summary-renewal-status
                         :shape "LoadBalancerTlsCertificateRenewalStatus"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (domain-validation-options :initarg
                         :domain-validation-options :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          load-balancer-tls-certificate-domain-validation-option-list
                          common-lisp:null)
                         :accessor
                         struct-shape-load-balancer-tls-certificate-renewal-summary-domain-validation-options
                         :shape
                         "LoadBalancerTlsCertificateDomainValidationOptionList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-load-balancer-tls-certificate-renewal-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'load-balancer-tls-certificate-renewal-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'load-balancer-tls-certificate-renewal-summary
                    'make-load-balancer-tls-certificate-renewal-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-tls-certificate-renewal-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-tls-certificate-renewal-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'renewal-status))
      (common-lisp:list
       (common-lisp:cons "renewalStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-validation-options))
      (common-lisp:list
       (common-lisp:cons "domainValidationOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-tls-certificate-renewal-summary))
   common-lisp:nil))
(common-lisp:deftype load-balancer-tls-certificate-revocation-reason ()
  'common-lisp:string)
(common-lisp:deftype load-balancer-tls-certificate-status ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass load-balancer-tls-certificate-summary common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-load-balancer-tls-certificate-summary-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-attached :initarg :is-attached :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         struct-shape-load-balancer-tls-certificate-summary-is-attached
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-load-balancer-tls-certificate-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'load-balancer-tls-certificate-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'load-balancer-tls-certificate-summary
                    'make-load-balancer-tls-certificate-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-tls-certificate-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-tls-certificate-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-attached))
      (common-lisp:list
       (common-lisp:cons "isAttached"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-tls-certificate-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype load-balancer-tls-certificate-summary-list ()
   '(trivial-types:proper-list load-balancer-tls-certificate-summary))
 (common-lisp:defun make-load-balancer-tls-certificate-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            load-balancer-tls-certificate-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass load-balancer-tls-policy common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-load-balancer-tls-policy-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-default :initarg :is-default :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         struct-shape-load-balancer-tls-policy-is-default
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-load-balancer-tls-policy-description
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (protocols :initarg :protocols :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-load-balancer-tls-policy-protocols :shape
                         "StringList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ciphers :initarg :ciphers :initform common-lisp:nil
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-load-balancer-tls-policy-ciphers :shape
                         "StringList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-load-balancer-tls-policy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'load-balancer-tls-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'load-balancer-tls-policy 'make-load-balancer-tls-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-tls-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-tls-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-default))
      (common-lisp:list
       (common-lisp:cons "isDefault"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocols))
      (common-lisp:list
       (common-lisp:cons "protocols"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ciphers))
      (common-lisp:list
       (common-lisp:cons "ciphers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-tls-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype load-balancer-tls-policy-list ()
   '(trivial-types:proper-list load-balancer-tls-policy))
 (common-lisp:defun make-load-balancer-tls-policy-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            load-balancer-tls-policy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass log-event common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-log-event-created-at :shape "IsoDate"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-log-event-message :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-log-event
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'log-event
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'log-event 'make-log-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input log-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input log-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input log-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype log-event-list () '(trivial-types:proper-list log-event))
 (common-lisp:defun make-log-event-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list log-event))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass metric-datapoint common-lisp:nil
                       ((average :initarg :average :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:double-float
                                         common-lisp:null)
                         :accessor struct-shape-metric-datapoint-average :shape
                         "double" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (maximum :initarg :maximum :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:double-float
                                         common-lisp:null)
                         :accessor struct-shape-metric-datapoint-maximum :shape
                         "double" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (minimum :initarg :minimum :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:double-float
                                         common-lisp:null)
                         :accessor struct-shape-metric-datapoint-minimum :shape
                         "double" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sample-count :initarg :sample-count :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:double-float
                                         common-lisp:null)
                         :accessor struct-shape-metric-datapoint-sample-count
                         :shape "double" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sum :initarg :sum :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:double-float
                                         common-lisp:null)
                         :accessor struct-shape-metric-datapoint-sum :shape
                         "double" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (timestamp :initarg :timestamp :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-metric-datapoint-timestamp
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unit :initarg :unit :initform common-lisp:nil :type
                         (common-lisp:or metric-unit common-lisp:null)
                         :accessor struct-shape-metric-datapoint-unit :shape
                         "MetricUnit" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-metric-datapoint
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'metric-datapoint
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'metric-datapoint 'make-metric-datapoint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metric-datapoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metric-datapoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'average))
      (common-lisp:list
       (common-lisp:cons "average"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum))
      (common-lisp:list
       (common-lisp:cons "maximum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimum))
      (common-lisp:list
       (common-lisp:cons "minimum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-count))
      (common-lisp:list
       (common-lisp:cons "sampleCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sum))
      (common-lisp:list
       (common-lisp:cons "sum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metric-datapoint))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype metric-datapoint-list ()
   '(trivial-types:proper-list metric-datapoint))
 (common-lisp:defun make-metric-datapoint-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metric-datapoint))
   aws-sdk/generator/shape::members))
(common-lisp:deftype metric-name () 'common-lisp:string)
(common-lisp:deftype metric-period () 'common-lisp:integer)
(common-lisp:deftype metric-statistic () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype metric-statistic-list ()
   '(trivial-types:proper-list metric-statistic))
 (common-lisp:defun make-metric-statistic-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metric-statistic))
   aws-sdk/generator/shape::members))
(common-lisp:deftype metric-unit () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass monitored-resource-info common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor struct-shape-monitored-resource-info-arn
                         :shape "ResourceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-monitored-resource-info-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor
                         struct-shape-monitored-resource-info-resource-type
                         :shape "ResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-monitored-resource-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'monitored-resource-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'monitored-resource-info 'make-monitored-resource-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          monitored-resource-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          monitored-resource-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          monitored-resource-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass monthly-transfer common-lisp:nil
                       ((gb-per-month-allocated :initarg
                         :gb-per-month-allocated :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor
                         struct-shape-monthly-transfer-gb-per-month-allocated
                         :shape "integer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-monthly-transfer
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'monthly-transfer
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'monthly-transfer 'make-monthly-transfer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input monthly-transfer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input monthly-transfer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'gb-per-month-allocated))
      (common-lisp:list
       (common-lisp:cons "gbPerMonthAllocated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input monthly-transfer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass name-servers-update-state common-lisp:nil
                       ((code :initarg :code :initform common-lisp:nil :type
                         (common-lisp:or name-servers-update-state-code
                                         common-lisp:null)
                         :accessor struct-shape-name-servers-update-state-code
                         :shape "NameServersUpdateStateCode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-name-servers-update-state-message :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-name-servers-update-state
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'name-servers-update-state
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'name-servers-update-state
                    'make-name-servers-update-state))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          name-servers-update-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          name-servers-update-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          name-servers-update-state))
   common-lisp:nil))
(common-lisp:deftype name-servers-update-state-code () 'common-lisp:string)
(common-lisp:deftype network-protocol () 'common-lisp:string)
(common-lisp:deftype non-empty-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition not-found-exception
     (lightsail-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       not-found-exception-code)
      (docs :initarg :docs :initform common-lisp:nil :reader
       not-found-exception-docs)
      (message :initarg :message :initform common-lisp:nil :reader
       not-found-exception-message)
      (tip :initarg :tip :initform common-lisp:nil :reader
       not-found-exception-tip)))
 (common-lisp:export
  (common-lisp:list 'not-found-exception 'not-found-exception-code
                    'not-found-exception-docs 'not-found-exception-message
                    'not-found-exception-tip)))
(common-lisp:progn
 (common-lisp:deftype notification-trigger-list ()
   '(trivial-types:proper-list alarm-state))
 (common-lisp:defun make-notification-trigger-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list alarm-state))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass open-instance-public-ports-request common-lisp:nil
                       ((port-info :initarg :port-info :initform
                         (common-lisp:error ":portinfo is required") :type
                         (common-lisp:or port-info common-lisp:null) :accessor
                         struct-shape-open-instance-public-ports-request-port-info
                         :shape "PortInfo" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-name :initarg :instance-name :initform
                         (common-lisp:error ":instancename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-open-instance-public-ports-request-instance-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-open-instance-public-ports-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'open-instance-public-ports-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'open-instance-public-ports-request
                    'make-open-instance-public-ports-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          open-instance-public-ports-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          open-instance-public-ports-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-info))
      (common-lisp:list
       (common-lisp:cons "portInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-name))
      (common-lisp:list
       (common-lisp:cons "instanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          open-instance-public-ports-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass open-instance-public-ports-result common-lisp:nil
                       ((operation :initarg :operation :initform
                         common-lisp:nil :type
                         (common-lisp:or operation common-lisp:null) :accessor
                         struct-shape-open-instance-public-ports-result-operation
                         :shape "Operation" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-open-instance-public-ports-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'open-instance-public-ports-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'open-instance-public-ports-result
                    'make-open-instance-public-ports-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          open-instance-public-ports-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          open-instance-public-ports-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          open-instance-public-ports-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass operation common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-operation-id :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-name :initarg :resource-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-operation-resource-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor struct-shape-operation-resource-type :shape
                         "ResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-operation-created-at :shape "IsoDate"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (location :initarg :location :initform common-lisp:nil
                         :type
                         (common-lisp:or resource-location common-lisp:null)
                         :accessor struct-shape-operation-location :shape
                         "ResourceLocation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-terminal :initarg :is-terminal :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor struct-shape-operation-is-terminal :shape
                         "boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (operation-details :initarg :operation-details
                         :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-operation-operation-details
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (operation-type :initarg :operation-type :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-type common-lisp:null)
                         :accessor struct-shape-operation-operation-type :shape
                         "OperationType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or operation-status common-lisp:null)
                         :accessor struct-shape-operation-status :shape
                         "OperationStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-changed-at :initarg :status-changed-at
                         :initform common-lisp:nil :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-operation-status-changed-at :shape
                         "IsoDate" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (error-code :initarg :error-code :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-operation-error-code :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (error-details :initarg :error-details :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-operation-error-details :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-operation
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'operation
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'operation 'make-operation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "resourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-terminal))
      (common-lisp:list
       (common-lisp:cons "isTerminal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-details))
      (common-lisp:list
       (common-lisp:cons "operationDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-type))
      (common-lisp:list
       (common-lisp:cons "operationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-changed-at))
      (common-lisp:list
       (common-lisp:cons "statusChangedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-details))
      (common-lisp:list
       (common-lisp:cons "errorDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input operation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition operation-failure-exception
     (lightsail-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       operation-failure-exception-code)
      (docs :initarg :docs :initform common-lisp:nil :reader
       operation-failure-exception-docs)
      (message :initarg :message :initform common-lisp:nil :reader
       operation-failure-exception-message)
      (tip :initarg :tip :initform common-lisp:nil :reader
       operation-failure-exception-tip)))
 (common-lisp:export
  (common-lisp:list 'operation-failure-exception
                    'operation-failure-exception-code
                    'operation-failure-exception-docs
                    'operation-failure-exception-message
                    'operation-failure-exception-tip)))
(common-lisp:progn
 (common-lisp:deftype operation-list () '(trivial-types:proper-list operation))
 (common-lisp:defun make-operation-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list operation))
   aws-sdk/generator/shape::members))
(common-lisp:deftype operation-status () 'common-lisp:string)
(common-lisp:deftype operation-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass origin common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-origin-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor struct-shape-origin-resource-type :shape
                         "ResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (region-name :initarg :region-name :initform
                         common-lisp:nil :type
                         (common-lisp:or region-name common-lisp:null)
                         :accessor struct-shape-origin-region-name :shape
                         "RegionName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (protocol-policy :initarg :protocol-policy :initform
                         common-lisp:nil :type
                         (common-lisp:or origin-protocol-policy-enum
                                         common-lisp:null)
                         :accessor struct-shape-origin-protocol-policy :shape
                         "OriginProtocolPolicyEnum" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-origin
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'origin
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'origin 'make-origin))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input origin))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input origin))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region-name))
      (common-lisp:list
       (common-lisp:cons "regionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol-policy))
      (common-lisp:list
       (common-lisp:cons "protocolPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input origin))
   common-lisp:nil))
(common-lisp:deftype origin-protocol-policy-enum () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype partner-id-list ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun make-partner-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass password-data common-lisp:nil
                       ((ciphertext :initarg :ciphertext :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-password-data-ciphertext :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (key-pair-name :initarg :key-pair-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-password-data-key-pair-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-password-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'password-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'password-data 'make-password-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input password-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input password-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ciphertext))
      (common-lisp:list
       (common-lisp:cons "ciphertext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-pair-name))
      (common-lisp:list
       (common-lisp:cons "keyPairName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input password-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass peer-vpc-request common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-peer-vpc-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'peer-vpc-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'peer-vpc-request 'make-peer-vpc-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input peer-vpc-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input peer-vpc-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input peer-vpc-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass peer-vpc-result common-lisp:nil
                       ((operation :initarg :operation :initform
                         common-lisp:nil :type
                         (common-lisp:or operation common-lisp:null) :accessor
                         struct-shape-peer-vpc-result-operation :shape
                         "Operation" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-peer-vpc-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'peer-vpc-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'peer-vpc-result 'make-peer-vpc-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input peer-vpc-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input peer-vpc-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input peer-vpc-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass pending-maintenance-action common-lisp:nil
                       ((action :initarg :action :initform common-lisp:nil
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-pending-maintenance-action-action :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-pending-maintenance-action-description
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (current-apply-date :initarg :current-apply-date
                         :initform common-lisp:nil :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-pending-maintenance-action-current-apply-date
                         :shape "IsoDate" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-pending-maintenance-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'pending-maintenance-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'pending-maintenance-action
                    'make-pending-maintenance-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pending-maintenance-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pending-maintenance-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-apply-date))
      (common-lisp:list
       (common-lisp:cons "currentApplyDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pending-maintenance-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype pending-maintenance-action-list ()
   '(trivial-types:proper-list pending-maintenance-action))
 (common-lisp:defun make-pending-maintenance-action-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            pending-maintenance-action))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass pending-modified-relational-database-values
                       common-lisp:nil
                       ((master-user-password :initarg :master-user-password
                         :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-pending-modified-relational-database-values-master-user-password
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-version :initarg :engine-version :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-pending-modified-relational-database-values-engine-version
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (backup-retention-enabled :initarg
                         :backup-retention-enabled :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         struct-shape-pending-modified-relational-database-values-backup-retention-enabled
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-pending-modified-relational-database-values
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'pending-modified-relational-database-values
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'pending-modified-relational-database-values
                    'make-pending-modified-relational-database-values))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pending-modified-relational-database-values))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pending-modified-relational-database-values))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-password))
      (common-lisp:list
       (common-lisp:cons "masterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "engineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-retention-enabled))
      (common-lisp:list
       (common-lisp:cons "backupRetentionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pending-modified-relational-database-values))
   common-lisp:nil))
(common-lisp:deftype port () 'common-lisp:integer)
(common-lisp:deftype port-access-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass port-info common-lisp:nil
                       ((from-port :initarg :from-port :initform
                         common-lisp:nil :type
                         (common-lisp:or port common-lisp:null) :accessor
                         struct-shape-port-info-from-port :shape "Port"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (to-port :initarg :to-port :initform common-lisp:nil
                         :type (common-lisp:or port common-lisp:null) :accessor
                         struct-shape-port-info-to-port :shape "Port" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (protocol :initarg :protocol :initform common-lisp:nil
                         :type
                         (common-lisp:or network-protocol common-lisp:null)
                         :accessor struct-shape-port-info-protocol :shape
                         "NetworkProtocol" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cidrs :initarg :cidrs :initform common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-port-info-cidrs :shape
                         "StringList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ipv6cidrs :initarg :ipv6cidrs :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-port-info-ipv6cidrs :shape
                         "StringList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cidr-list-aliases :initarg :cidr-list-aliases
                         :initform common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-port-info-cidr-list-aliases
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-port-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'port-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'port-info 'make-port-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input port-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input port-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-port))
      (common-lisp:list
       (common-lisp:cons "fromPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to-port))
      (common-lisp:list
       (common-lisp:cons "toPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidrs))
      (common-lisp:list
       (common-lisp:cons "cidrs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6cidrs))
      (common-lisp:list
       (common-lisp:cons "ipv6Cidrs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr-list-aliases))
      (common-lisp:list
       (common-lisp:cons "cidrListAliases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input port-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype port-info-list () '(trivial-types:proper-list port-info))
 (common-lisp:defun make-port-info-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list port-info))
   aws-sdk/generator/shape::members))
(common-lisp:deftype port-info-source-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype port-list () '(trivial-types:proper-list port))
 (common-lisp:defun make-port-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list port))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype port-map () 'common-lisp:hash-table)
 (common-lisp:defun make-port-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype port-state () 'common-lisp:string)
(common-lisp:deftype pricing-unit () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass private-registry-access common-lisp:nil
                       ((ecr-image-puller-role :initarg :ecr-image-puller-role
                         :initform common-lisp:nil :type
                         (common-lisp:or container-service-ecrimage-puller-role
                                         common-lisp:null)
                         :accessor
                         struct-shape-private-registry-access-ecr-image-puller-role
                         :shape "ContainerServiceECRImagePullerRole" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-private-registry-access
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'private-registry-access
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'private-registry-access 'make-private-registry-access))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          private-registry-access))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          private-registry-access))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ecr-image-puller-role))
      (common-lisp:list
       (common-lisp:cons "ecrImagePullerRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          private-registry-access))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass private-registry-access-request common-lisp:nil
                       ((ecr-image-puller-role :initarg :ecr-image-puller-role
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          container-service-ecrimage-puller-role-request
                          common-lisp:null)
                         :accessor
                         struct-shape-private-registry-access-request-ecr-image-puller-role
                         :shape "ContainerServiceECRImagePullerRoleRequest"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-private-registry-access-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'private-registry-access-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'private-registry-access-request
                    'make-private-registry-access-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          private-registry-access-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          private-registry-access-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ecr-image-puller-role))
      (common-lisp:list
       (common-lisp:cons "ecrImagePullerRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          private-registry-access-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-alarm-request common-lisp:nil
                       ((alarm-name :initarg :alarm-name :initform
                         (common-lisp:error ":alarmname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-put-alarm-request-alarm-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metric-name :initarg :metric-name :initform
                         (common-lisp:error ":metricname is required") :type
                         (common-lisp:or metric-name common-lisp:null)
                         :accessor struct-shape-put-alarm-request-metric-name
                         :shape "MetricName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (monitored-resource-name :initarg
                         :monitored-resource-name :initform
                         (common-lisp:error
                          ":monitoredresourcename is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-put-alarm-request-monitored-resource-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (comparison-operator :initarg :comparison-operator
                         :initform
                         (common-lisp:error ":comparisonoperator is required")
                         :type
                         (common-lisp:or comparison-operator common-lisp:null)
                         :accessor
                         struct-shape-put-alarm-request-comparison-operator
                         :shape "ComparisonOperator" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (threshold :initarg :threshold :initform
                         (common-lisp:error ":threshold is required") :type
                         (common-lisp:or common-lisp:double-float
                                         common-lisp:null)
                         :accessor struct-shape-put-alarm-request-threshold
                         :shape "double" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (evaluation-periods :initarg :evaluation-periods
                         :initform
                         (common-lisp:error ":evaluationperiods is required")
                         :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor
                         struct-shape-put-alarm-request-evaluation-periods
                         :shape "integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (datapoints-to-alarm :initarg :datapoints-to-alarm
                         :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor
                         struct-shape-put-alarm-request-datapoints-to-alarm
                         :shape "integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (treat-missing-data :initarg :treat-missing-data
                         :initform common-lisp:nil :type
                         (common-lisp:or treat-missing-data common-lisp:null)
                         :accessor
                         struct-shape-put-alarm-request-treat-missing-data
                         :shape "TreatMissingData" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (contact-protocols :initarg :contact-protocols
                         :initform common-lisp:nil :type
                         (common-lisp:or contact-protocols-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-alarm-request-contact-protocols
                         :shape "ContactProtocolsList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (notification-triggers :initarg :notification-triggers
                         :initform common-lisp:nil :type
                         (common-lisp:or notification-trigger-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-alarm-request-notification-triggers
                         :shape "NotificationTriggerList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (notification-enabled :initarg :notification-enabled
                         :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         struct-shape-put-alarm-request-notification-enabled
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-alarm-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-alarm-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-alarm-request 'make-put-alarm-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-alarm-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-alarm-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarm-name))
      (common-lisp:list
       (common-lisp:cons "alarmName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "metricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitored-resource-name))
      (common-lisp:list
       (common-lisp:cons "monitoredResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparison-operator))
      (common-lisp:list
       (common-lisp:cons "comparisonOperator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threshold))
      (common-lisp:list
       (common-lisp:cons "threshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-periods))
      (common-lisp:list
       (common-lisp:cons "evaluationPeriods"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datapoints-to-alarm))
      (common-lisp:list
       (common-lisp:cons "datapointsToAlarm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'treat-missing-data))
      (common-lisp:list
       (common-lisp:cons "treatMissingData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-protocols))
      (common-lisp:list
       (common-lisp:cons "contactProtocols"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-triggers))
      (common-lisp:list
       (common-lisp:cons "notificationTriggers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-enabled))
      (common-lisp:list
       (common-lisp:cons "notificationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-alarm-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-alarm-result common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor struct-shape-put-alarm-result-operations
                         :shape "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-alarm-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-alarm-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-alarm-result 'make-put-alarm-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-alarm-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-alarm-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-alarm-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-instance-public-ports-request common-lisp:nil
                       ((port-infos :initarg :port-infos :initform
                         (common-lisp:error ":portinfos is required") :type
                         (common-lisp:or port-info-list common-lisp:null)
                         :accessor
                         struct-shape-put-instance-public-ports-request-port-infos
                         :shape "PortInfoList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-name :initarg :instance-name :initform
                         (common-lisp:error ":instancename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-put-instance-public-ports-request-instance-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-instance-public-ports-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-instance-public-ports-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-instance-public-ports-request
                    'make-put-instance-public-ports-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-instance-public-ports-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-instance-public-ports-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-infos))
      (common-lisp:list
       (common-lisp:cons "portInfos"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-name))
      (common-lisp:list
       (common-lisp:cons "instanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-instance-public-ports-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-instance-public-ports-result common-lisp:nil
                       ((operation :initarg :operation :initform
                         common-lisp:nil :type
                         (common-lisp:or operation common-lisp:null) :accessor
                         struct-shape-put-instance-public-ports-result-operation
                         :shape "Operation" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-instance-public-ports-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-instance-public-ports-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-instance-public-ports-result
                    'make-put-instance-public-ports-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-instance-public-ports-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-instance-public-ports-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-instance-public-ports-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass query-string-object common-lisp:nil
                       ((option :initarg :option :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor struct-shape-query-string-object-option
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (query-strings-allow-list :initarg
                         :query-strings-allow-list :initform common-lisp:nil
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-query-string-object-query-strings-allow-list
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-query-string-object
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'query-string-object
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'query-string-object 'make-query-string-object))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input query-string-object))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input query-string-object))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option))
      (common-lisp:list
       (common-lisp:cons "option"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'query-strings-allow-list))
      (common-lisp:list
       (common-lisp:cons "queryStringsAllowList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input query-string-object))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass r53hosted-zone-deletion-state common-lisp:nil
                       ((code :initarg :code :initform common-lisp:nil :type
                         (common-lisp:or r53hosted-zone-deletion-state-code
                                         common-lisp:null)
                         :accessor
                         struct-shape-r53hosted-zone-deletion-state-code :shape
                         "R53HostedZoneDeletionStateCode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-r53hosted-zone-deletion-state-message
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-r53hosted-zone-deletion-state
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'r53hosted-zone-deletion-state
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'r53hosted-zone-deletion-state
                    'make-r53hosted-zone-deletion-state))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          r53hosted-zone-deletion-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          r53hosted-zone-deletion-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          r53hosted-zone-deletion-state))
   common-lisp:nil))
(common-lisp:deftype r53hosted-zone-deletion-state-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass reboot-instance-request common-lisp:nil
                       ((instance-name :initarg :instance-name :initform
                         (common-lisp:error ":instancename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-reboot-instance-request-instance-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reboot-instance-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reboot-instance-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reboot-instance-request 'make-reboot-instance-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reboot-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reboot-instance-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-name))
      (common-lisp:list
       (common-lisp:cons "instanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reboot-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reboot-instance-result common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor
                         struct-shape-reboot-instance-result-operations :shape
                         "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reboot-instance-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reboot-instance-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reboot-instance-result 'make-reboot-instance-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reboot-instance-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reboot-instance-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reboot-instance-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reboot-relational-database-request common-lisp:nil
                       ((relational-database-name :initarg
                         :relational-database-name :initform
                         (common-lisp:error
                          ":relationaldatabasename is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-reboot-relational-database-request-relational-database-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reboot-relational-database-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'reboot-relational-database-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reboot-relational-database-request
                    'make-reboot-relational-database-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reboot-relational-database-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reboot-relational-database-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-name))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reboot-relational-database-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reboot-relational-database-result common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor
                         struct-shape-reboot-relational-database-result-operations
                         :shape "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reboot-relational-database-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'reboot-relational-database-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reboot-relational-database-result
                    'make-reboot-relational-database-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reboot-relational-database-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reboot-relational-database-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reboot-relational-database-result))
   common-lisp:nil))
(common-lisp:deftype record-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass region common-lisp:nil
                       ((continent-code :initarg :continent-code :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-region-continent-code :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-region-description :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-region-display-name :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or region-name common-lisp:null)
                         :accessor struct-shape-region-name :shape "RegionName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (availability-zones :initarg :availability-zones
                         :initform common-lisp:nil :type
                         (common-lisp:or availability-zone-list
                                         common-lisp:null)
                         :accessor struct-shape-region-availability-zones
                         :shape "AvailabilityZoneList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (relational-database-availability-zones :initarg
                         :relational-database-availability-zones :initform
                         common-lisp:nil :type
                         (common-lisp:or availability-zone-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-region-relational-database-availability-zones
                         :shape "AvailabilityZoneList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-region
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'region
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'region 'make-region))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input region))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input region))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'continent-code))
      (common-lisp:list
       (common-lisp:cons "continentCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "availabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-availability-zones))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseAvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input region))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype region-list () '(trivial-types:proper-list region))
 (common-lisp:defun make-region-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list region))
   aws-sdk/generator/shape::members))
(common-lisp:deftype region-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass register-container-image-request common-lisp:nil
                       ((service-name :initarg :service-name :initform
                         (common-lisp:error ":servicename is required") :type
                         (common-lisp:or container-service-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-register-container-image-request-service-name
                         :shape "ContainerServiceName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (label :initarg :label :initform
                         (common-lisp:error ":label is required") :type
                         (common-lisp:or container-label common-lisp:null)
                         :accessor
                         struct-shape-register-container-image-request-label
                         :shape "ContainerLabel" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (digest :initarg :digest :initform
                         (common-lisp:error ":digest is required") :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-register-container-image-request-digest
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-register-container-image-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'register-container-image-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'register-container-image-request
                    'make-register-container-image-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-container-image-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-container-image-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label))
      (common-lisp:list
       (common-lisp:cons "label"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'digest))
      (common-lisp:list
       (common-lisp:cons "digest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-container-image-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-container-image-result common-lisp:nil
                       ((container-image :initarg :container-image :initform
                         common-lisp:nil :type
                         (common-lisp:or container-image common-lisp:null)
                         :accessor
                         struct-shape-register-container-image-result-container-image
                         :shape "ContainerImage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-register-container-image-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'register-container-image-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'register-container-image-result
                    'make-register-container-image-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-container-image-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-container-image-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-image))
      (common-lisp:list
       (common-lisp:cons "containerImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-container-image-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass registered-domain-delegation-info common-lisp:nil
                       ((name-servers-update-state :initarg
                         :name-servers-update-state :initform common-lisp:nil
                         :type
                         (common-lisp:or name-servers-update-state
                                         common-lisp:null)
                         :accessor
                         struct-shape-registered-domain-delegation-info-name-servers-update-state
                         :shape "NameServersUpdateState" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (r53hosted-zone-deletion-state :initarg
                         :r53hosted-zone-deletion-state :initform
                         common-lisp:nil :type
                         (common-lisp:or r53hosted-zone-deletion-state
                                         common-lisp:null)
                         :accessor
                         struct-shape-registered-domain-delegation-info-r53hosted-zone-deletion-state
                         :shape "R53HostedZoneDeletionState" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-registered-domain-delegation-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'registered-domain-delegation-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'registered-domain-delegation-info
                    'make-registered-domain-delegation-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          registered-domain-delegation-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          registered-domain-delegation-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'name-servers-update-state))
      (common-lisp:list
       (common-lisp:cons "nameServersUpdateState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'r53hosted-zone-deletion-state))
      (common-lisp:list
       (common-lisp:cons "r53HostedZoneDeletionState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          registered-domain-delegation-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass relational-database common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-relational-database-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-relational-database-arn :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (support-code :initarg :support-code :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-relational-database-support-code :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-relational-database-created-at :shape
                         "IsoDate" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (location :initarg :location :initform common-lisp:nil
                         :type
                         (common-lisp:or resource-location common-lisp:null)
                         :accessor struct-shape-relational-database-location
                         :shape "ResourceLocation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor
                         struct-shape-relational-database-resource-type :shape
                         "ResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-relational-database-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (relational-database-blueprint-id :initarg
                         :relational-database-blueprint-id :initform
                         common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-relational-database-relational-database-blueprint-id
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (relational-database-bundle-id :initarg
                         :relational-database-bundle-id :initform
                         common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-relational-database-relational-database-bundle-id
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (master-database-name :initarg :master-database-name
                         :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-relational-database-master-database-name
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hardware :initarg :hardware :initform common-lisp:nil
                         :type
                         (common-lisp:or relational-database-hardware
                                         common-lisp:null)
                         :accessor struct-shape-relational-database-hardware
                         :shape "RelationalDatabaseHardware" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-relational-database-state
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (secondary-availability-zone :initarg
                         :secondary-availability-zone :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-relational-database-secondary-availability-zone
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (backup-retention-enabled :initarg
                         :backup-retention-enabled :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         struct-shape-relational-database-backup-retention-enabled
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pending-modified-values :initarg
                         :pending-modified-values :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          pending-modified-relational-database-values
                          common-lisp:null)
                         :accessor
                         struct-shape-relational-database-pending-modified-values
                         :shape "PendingModifiedRelationalDatabaseValues"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (engine :initarg :engine :initform common-lisp:nil
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-relational-database-engine
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-version :initarg :engine-version :initform
                         common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-relational-database-engine-version :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (latest-restorable-time :initarg
                         :latest-restorable-time :initform common-lisp:nil
                         :type (common-lisp:or iso-date common-lisp:null)
                         :accessor
                         struct-shape-relational-database-latest-restorable-time
                         :shape "IsoDate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (master-username :initarg :master-username :initform
                         common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-relational-database-master-username
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameter-apply-status :initarg
                         :parameter-apply-status :initform common-lisp:nil
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-relational-database-parameter-apply-status
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (preferred-backup-window :initarg
                         :preferred-backup-window :initform common-lisp:nil
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-relational-database-preferred-backup-window
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (preferred-maintenance-window :initarg
                         :preferred-maintenance-window :initform
                         common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-relational-database-preferred-maintenance-window
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (publicly-accessible :initarg :publicly-accessible
                         :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         struct-shape-relational-database-publicly-accessible
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (master-endpoint :initarg :master-endpoint :initform
                         common-lisp:nil :type
                         (common-lisp:or relational-database-endpoint
                                         common-lisp:null)
                         :accessor
                         struct-shape-relational-database-master-endpoint
                         :shape "RelationalDatabaseEndpoint" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (pending-maintenance-actions :initarg
                         :pending-maintenance-actions :initform common-lisp:nil
                         :type
                         (common-lisp:or pending-maintenance-action-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-relational-database-pending-maintenance-actions
                         :shape "PendingMaintenanceActionList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ca-certificate-identifier :initarg
                         :ca-certificate-identifier :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-relational-database-ca-certificate-identifier
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-relational-database
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'relational-database
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'relational-database 'make-relational-database))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input relational-database))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input relational-database))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'support-code))
      (common-lisp:list
       (common-lisp:cons "supportCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-blueprint-id))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseBlueprintId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-bundle-id))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseBundleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-database-name))
      (common-lisp:list
       (common-lisp:cons "masterDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hardware))
      (common-lisp:list
       (common-lisp:cons "hardware"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secondary-availability-zone))
      (common-lisp:list
       (common-lisp:cons "secondaryAvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-retention-enabled))
      (common-lisp:list
       (common-lisp:cons "backupRetentionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pending-modified-values))
      (common-lisp:list
       (common-lisp:cons "pendingModifiedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "engineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-restorable-time))
      (common-lisp:list
       (common-lisp:cons "latestRestorableTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-username))
      (common-lisp:list
       (common-lisp:cons "masterUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-apply-status))
      (common-lisp:list
       (common-lisp:cons "parameterApplyStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-backup-window))
      (common-lisp:list
       (common-lisp:cons "preferredBackupWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "preferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "publiclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-endpoint))
      (common-lisp:list
       (common-lisp:cons "masterEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pending-maintenance-actions))
      (common-lisp:list
       (common-lisp:cons "pendingMaintenanceActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ca-certificate-identifier))
      (common-lisp:list
       (common-lisp:cons "caCertificateIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input relational-database))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass relational-database-blueprint common-lisp:nil
                       ((blueprint-id :initarg :blueprint-id :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-relational-database-blueprint-blueprint-id
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine :initarg :engine :initform common-lisp:nil
                         :type
                         (common-lisp:or relational-database-engine
                                         common-lisp:null)
                         :accessor
                         struct-shape-relational-database-blueprint-engine
                         :shape "RelationalDatabaseEngine" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (engine-version :initarg :engine-version :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-relational-database-blueprint-engine-version
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-description :initarg :engine-description
                         :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-relational-database-blueprint-engine-description
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-version-description :initarg
                         :engine-version-description :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-relational-database-blueprint-engine-version-description
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-engine-default :initarg :is-engine-default
                         :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         struct-shape-relational-database-blueprint-is-engine-default
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-relational-database-blueprint
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'relational-database-blueprint
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'relational-database-blueprint
                    'make-relational-database-blueprint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          relational-database-blueprint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          relational-database-blueprint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blueprint-id))
      (common-lisp:list
       (common-lisp:cons "blueprintId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "engineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-description))
      (common-lisp:list
       (common-lisp:cons "engineDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'engine-version-description))
      (common-lisp:list
       (common-lisp:cons "engineVersionDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-engine-default))
      (common-lisp:list
       (common-lisp:cons "isEngineDefault"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          relational-database-blueprint))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype relational-database-blueprint-list ()
   '(trivial-types:proper-list relational-database-blueprint))
 (common-lisp:defun make-relational-database-blueprint-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            relational-database-blueprint))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass relational-database-bundle common-lisp:nil
                       ((bundle-id :initarg :bundle-id :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-relational-database-bundle-bundle-id
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-relational-database-bundle-name
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (price :initarg :price :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:single-float
                                         common-lisp:null)
                         :accessor
                         struct-shape-relational-database-bundle-price :shape
                         "float" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ram-size-in-gb :initarg :ram-size-in-gb :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:single-float
                                         common-lisp:null)
                         :accessor
                         struct-shape-relational-database-bundle-ram-size-in-gb
                         :shape "float" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (disk-size-in-gb :initarg :disk-size-in-gb :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor
                         struct-shape-relational-database-bundle-disk-size-in-gb
                         :shape "integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transfer-per-month-in-gb :initarg
                         :transfer-per-month-in-gb :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor
                         struct-shape-relational-database-bundle-transfer-per-month-in-gb
                         :shape "integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cpu-count :initarg :cpu-count :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor
                         struct-shape-relational-database-bundle-cpu-count
                         :shape "integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-encrypted :initarg :is-encrypted :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         struct-shape-relational-database-bundle-is-encrypted
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-active :initarg :is-active :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         struct-shape-relational-database-bundle-is-active
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-relational-database-bundle
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'relational-database-bundle
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'relational-database-bundle
                    'make-relational-database-bundle))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          relational-database-bundle))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          relational-database-bundle))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-id))
      (common-lisp:list
       (common-lisp:cons "bundleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'price))
      (common-lisp:list
       (common-lisp:cons "price"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ram-size-in-gb))
      (common-lisp:list
       (common-lisp:cons "ramSizeInGb"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disk-size-in-gb))
      (common-lisp:list
       (common-lisp:cons "diskSizeInGb"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transfer-per-month-in-gb))
      (common-lisp:list
       (common-lisp:cons "transferPerMonthInGb"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpu-count))
      (common-lisp:list
       (common-lisp:cons "cpuCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-encrypted))
      (common-lisp:list
       (common-lisp:cons "isEncrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-active))
      (common-lisp:list
       (common-lisp:cons "isActive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          relational-database-bundle))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype relational-database-bundle-list ()
   '(trivial-types:proper-list relational-database-bundle))
 (common-lisp:defun make-relational-database-bundle-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            relational-database-bundle))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass relational-database-endpoint common-lisp:nil
                       ((port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor
                         struct-shape-relational-database-endpoint-port :shape
                         "integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (address :initarg :address :initform common-lisp:nil
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-relational-database-endpoint-address
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-relational-database-endpoint
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'relational-database-endpoint
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'relational-database-endpoint
                    'make-relational-database-endpoint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          relational-database-endpoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          relational-database-endpoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          relational-database-endpoint))
   common-lisp:nil))
(common-lisp:deftype relational-database-engine () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass relational-database-event common-lisp:nil
                       ((resource :initarg :resource :initform common-lisp:nil
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-relational-database-event-resource :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-relational-database-event-created-at
                         :shape "IsoDate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-relational-database-event-message :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (event-categories :initarg :event-categories :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-relational-database-event-event-categories
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-relational-database-event
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'relational-database-event
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'relational-database-event
                    'make-relational-database-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          relational-database-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          relational-database-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-categories))
      (common-lisp:list
       (common-lisp:cons "eventCategories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          relational-database-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype relational-database-event-list ()
   '(trivial-types:proper-list relational-database-event))
 (common-lisp:defun make-relational-database-event-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            relational-database-event))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass relational-database-hardware common-lisp:nil
                       ((cpu-count :initarg :cpu-count :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor
                         struct-shape-relational-database-hardware-cpu-count
                         :shape "integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (disk-size-in-gb :initarg :disk-size-in-gb :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor
                         struct-shape-relational-database-hardware-disk-size-in-gb
                         :shape "integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ram-size-in-gb :initarg :ram-size-in-gb :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:single-float
                                         common-lisp:null)
                         :accessor
                         struct-shape-relational-database-hardware-ram-size-in-gb
                         :shape "float" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-relational-database-hardware
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'relational-database-hardware
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'relational-database-hardware
                    'make-relational-database-hardware))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          relational-database-hardware))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          relational-database-hardware))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpu-count))
      (common-lisp:list
       (common-lisp:cons "cpuCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disk-size-in-gb))
      (common-lisp:list
       (common-lisp:cons "diskSizeInGb"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ram-size-in-gb))
      (common-lisp:list
       (common-lisp:cons "ramSizeInGb"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          relational-database-hardware))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype relational-database-list ()
   '(trivial-types:proper-list relational-database))
 (common-lisp:defun make-relational-database-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list relational-database))
   aws-sdk/generator/shape::members))
(common-lisp:deftype relational-database-metric-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass relational-database-parameter common-lisp:nil
                       ((allowed-values :initarg :allowed-values :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-relational-database-parameter-allowed-values
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (apply-method :initarg :apply-method :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-relational-database-parameter-apply-method
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (apply-type :initarg :apply-type :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-relational-database-parameter-apply-type
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-type :initarg :data-type :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-relational-database-parameter-data-type
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-relational-database-parameter-description
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-modifiable :initarg :is-modifiable :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         struct-shape-relational-database-parameter-is-modifiable
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameter-name :initarg :parameter-name :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-relational-database-parameter-parameter-name
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameter-value :initarg :parameter-value :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-relational-database-parameter-parameter-value
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-relational-database-parameter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'relational-database-parameter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'relational-database-parameter
                    'make-relational-database-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          relational-database-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          relational-database-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-values))
      (common-lisp:list
       (common-lisp:cons "allowedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-method))
      (common-lisp:list
       (common-lisp:cons "applyMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-type))
      (common-lisp:list
       (common-lisp:cons "applyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "dataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-modifiable))
      (common-lisp:list
       (common-lisp:cons "isModifiable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-name))
      (common-lisp:list
       (common-lisp:cons "parameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-value))
      (common-lisp:list
       (common-lisp:cons "parameterValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          relational-database-parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype relational-database-parameter-list ()
   '(trivial-types:proper-list relational-database-parameter))
 (common-lisp:defun make-relational-database-parameter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            relational-database-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype relational-database-password-version ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass relational-database-snapshot common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-relational-database-snapshot-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-relational-database-snapshot-arn :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (support-code :initarg :support-code :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-relational-database-snapshot-support-code
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-relational-database-snapshot-created-at
                         :shape "IsoDate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (location :initarg :location :initform common-lisp:nil
                         :type
                         (common-lisp:or resource-location common-lisp:null)
                         :accessor
                         struct-shape-relational-database-snapshot-location
                         :shape "ResourceLocation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor
                         struct-shape-relational-database-snapshot-resource-type
                         :shape "ResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-relational-database-snapshot-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (engine :initarg :engine :initform common-lisp:nil
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-relational-database-snapshot-engine
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-version :initarg :engine-version :initform
                         common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-relational-database-snapshot-engine-version
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (size-in-gb :initarg :size-in-gb :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor
                         struct-shape-relational-database-snapshot-size-in-gb
                         :shape "integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-relational-database-snapshot-state :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (from-relational-database-name :initarg
                         :from-relational-database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-relational-database-snapshot-from-relational-database-name
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (from-relational-database-arn :initarg
                         :from-relational-database-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-relational-database-snapshot-from-relational-database-arn
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (from-relational-database-bundle-id :initarg
                         :from-relational-database-bundle-id :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-relational-database-snapshot-from-relational-database-bundle-id
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (from-relational-database-blueprint-id :initarg
                         :from-relational-database-blueprint-id :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-relational-database-snapshot-from-relational-database-blueprint-id
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-relational-database-snapshot
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'relational-database-snapshot
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'relational-database-snapshot
                    'make-relational-database-snapshot))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          relational-database-snapshot))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          relational-database-snapshot))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'support-code))
      (common-lisp:list
       (common-lisp:cons "supportCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "engineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-in-gb))
      (common-lisp:list
       (common-lisp:cons "sizeInGb"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'from-relational-database-name))
      (common-lisp:list
       (common-lisp:cons "fromRelationalDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'from-relational-database-arn))
      (common-lisp:list
       (common-lisp:cons "fromRelationalDatabaseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'from-relational-database-bundle-id))
      (common-lisp:list
       (common-lisp:cons "fromRelationalDatabaseBundleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'from-relational-database-blueprint-id))
      (common-lisp:list
       (common-lisp:cons "fromRelationalDatabaseBlueprintId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          relational-database-snapshot))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype relational-database-snapshot-list ()
   '(trivial-types:proper-list relational-database-snapshot))
 (common-lisp:defun make-relational-database-snapshot-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            relational-database-snapshot))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass release-static-ip-request common-lisp:nil
                       ((static-ip-name :initarg :static-ip-name :initform
                         (common-lisp:error ":staticipname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-release-static-ip-request-static-ip-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-release-static-ip-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'release-static-ip-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'release-static-ip-request
                    'make-release-static-ip-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          release-static-ip-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          release-static-ip-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'static-ip-name))
      (common-lisp:list
       (common-lisp:cons "staticIpName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          release-static-ip-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass release-static-ip-result common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor
                         struct-shape-release-static-ip-result-operations
                         :shape "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-release-static-ip-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'release-static-ip-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'release-static-ip-result 'make-release-static-ip-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          release-static-ip-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          release-static-ip-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          release-static-ip-result))
   common-lisp:nil))
(common-lisp:deftype renewal-status () 'common-lisp:string)
(common-lisp:deftype renewal-status-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass renewal-summary common-lisp:nil
                       ((domain-validation-records :initarg
                         :domain-validation-records :initform common-lisp:nil
                         :type
                         (common-lisp:or domain-validation-record-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-renewal-summary-domain-validation-records
                         :shape "DomainValidationRecordList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (renewal-status :initarg :renewal-status :initform
                         common-lisp:nil :type
                         (common-lisp:or renewal-status common-lisp:null)
                         :accessor struct-shape-renewal-summary-renewal-status
                         :shape "RenewalStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (renewal-status-reason :initarg :renewal-status-reason
                         :initform common-lisp:nil :type
                         (common-lisp:or renewal-status-reason
                                         common-lisp:null)
                         :accessor
                         struct-shape-renewal-summary-renewal-status-reason
                         :shape "RenewalStatusReason" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-renewal-summary-updated-at :shape
                         "IsoDate" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-renewal-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'renewal-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'renewal-summary 'make-renewal-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input renewal-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input renewal-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-validation-records))
      (common-lisp:list
       (common-lisp:cons "domainValidationRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'renewal-status))
      (common-lisp:list
       (common-lisp:cons "renewalStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'renewal-status-reason))
      (common-lisp:list
       (common-lisp:cons "renewalStatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input renewal-summary))
   common-lisp:nil))
(common-lisp:deftype request-failure-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass reset-distribution-cache-request common-lisp:nil
                       ((distribution-name :initarg :distribution-name
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-reset-distribution-cache-request-distribution-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reset-distribution-cache-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'reset-distribution-cache-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reset-distribution-cache-request
                    'make-reset-distribution-cache-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reset-distribution-cache-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reset-distribution-cache-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distribution-name))
      (common-lisp:list
       (common-lisp:cons "distributionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reset-distribution-cache-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reset-distribution-cache-result common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-reset-distribution-cache-result-status
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (create-time :initarg :create-time :initform
                         common-lisp:nil :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-reset-distribution-cache-result-create-time
                         :shape "IsoDate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (operation :initarg :operation :initform
                         common-lisp:nil :type
                         (common-lisp:or operation common-lisp:null) :accessor
                         struct-shape-reset-distribution-cache-result-operation
                         :shape "Operation" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reset-distribution-cache-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'reset-distribution-cache-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reset-distribution-cache-result
                    'make-reset-distribution-cache-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reset-distribution-cache-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reset-distribution-cache-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reset-distribution-cache-result))
   common-lisp:nil))
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:deftype resource-bucket-access () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass resource-budget-estimate common-lisp:nil
                       ((resource-name :initarg :resource-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-resource-budget-estimate-resource-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor
                         struct-shape-resource-budget-estimate-resource-type
                         :shape "ResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cost-estimates :initarg :cost-estimates :initform
                         common-lisp:nil :type
                         (common-lisp:or cost-estimates common-lisp:null)
                         :accessor
                         struct-shape-resource-budget-estimate-cost-estimates
                         :shape "CostEstimates" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-resource-budget-estimate-start-time
                         :shape "IsoDate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or iso-date common-lisp:null)
                         :accessor
                         struct-shape-resource-budget-estimate-end-time :shape
                         "IsoDate" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resource-budget-estimate
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resource-budget-estimate
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resource-budget-estimate 'make-resource-budget-estimate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resource-budget-estimate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resource-budget-estimate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "resourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost-estimates))
      (common-lisp:list
       (common-lisp:cons "costEstimates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resource-budget-estimate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resource-location common-lisp:nil
                       ((availability-zone :initarg :availability-zone
                         :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-resource-location-availability-zone
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (region-name :initarg :region-name :initform
                         common-lisp:nil :type
                         (common-lisp:or region-name common-lisp:null)
                         :accessor struct-shape-resource-location-region-name
                         :shape "RegionName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resource-location
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resource-location
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resource-location 'make-resource-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "availabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region-name))
      (common-lisp:list
       (common-lisp:cons "regionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-location))
   common-lisp:nil))
(common-lisp:deftype resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-name-list ()
   '(trivial-types:proper-list resource-name))
 (common-lisp:defun make-resource-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass resource-receiving-access common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-resource-receiving-access-name
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-resource-receiving-access-resource-type
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resource-receiving-access
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resource-receiving-access
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resource-receiving-access
                    'make-resource-receiving-access))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resource-receiving-access))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resource-receiving-access))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resource-receiving-access))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resource-record common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-resource-record-name :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-resource-record-type :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-resource-record-value :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resource-record
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resource-record
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'resource-record 'make-resource-record))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-record))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-record))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-record))
   common-lisp:nil))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resources-budget-estimate ()
   '(trivial-types:proper-list resource-budget-estimate))
 (common-lisp:defun make-resources-budget-estimate
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            resource-budget-estimate))
   aws-sdk/generator/shape::members))
(common-lisp:deftype revocation-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass send-contact-method-verification-request common-lisp:nil
                       ((protocol :initarg :protocol :initform
                         (common-lisp:error ":protocol is required") :type
                         (common-lisp:or contact-method-verification-protocol
                                         common-lisp:null)
                         :accessor
                         struct-shape-send-contact-method-verification-request-protocol
                         :shape "ContactMethodVerificationProtocol" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-send-contact-method-verification-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'send-contact-method-verification-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'send-contact-method-verification-request
                    'make-send-contact-method-verification-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-contact-method-verification-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-contact-method-verification-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-contact-method-verification-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass send-contact-method-verification-result common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor
                         struct-shape-send-contact-method-verification-result-operations
                         :shape "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-send-contact-method-verification-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'send-contact-method-verification-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'send-contact-method-verification-result
                    'make-send-contact-method-verification-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-contact-method-verification-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-contact-method-verification-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-contact-method-verification-result))
   common-lisp:nil))
(common-lisp:deftype sensitive-non-empty-string () 'common-lisp:string)
(common-lisp:deftype sensitive-string () 'common-lisp:string)
(common-lisp:deftype serial-number () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-exception
     (lightsail-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       service-exception-code)
      (docs :initarg :docs :initform common-lisp:nil :reader
       service-exception-docs)
      (message :initarg :message :initform common-lisp:nil :reader
       service-exception-message)
      (tip :initarg :tip :initform common-lisp:nil :reader
       service-exception-tip)))
 (common-lisp:export
  (common-lisp:list 'service-exception 'service-exception-code
                    'service-exception-docs 'service-exception-message
                    'service-exception-tip)))
(common-lisp:progn
 (common-lisp:defclass session common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-session-name :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (url :initarg :url :initform common-lisp:nil :type
                         (common-lisp:or sensitive-non-empty-string
                                         common-lisp:null)
                         :accessor struct-shape-session-url :shape
                         "SensitiveNonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-primary :initarg :is-primary :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor struct-shape-session-is-primary :shape
                         "boolean" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-session
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'session
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'session 'make-session))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input session))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input session))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-primary))
      (common-lisp:list
       (common-lisp:cons "isPrimary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input session))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sessions () '(trivial-types:proper-list session))
 (common-lisp:defun make-sessions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list session))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass set-ip-address-type-request common-lisp:nil
                       ((resource-type :initarg :resource-type :initform
                         (common-lisp:error ":resourcetype is required") :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor
                         struct-shape-set-ip-address-type-request-resource-type
                         :shape "ResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-name :initarg :resource-name :initform
                         (common-lisp:error ":resourcename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-set-ip-address-type-request-resource-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ip-address-type :initarg :ip-address-type :initform
                         (common-lisp:error ":ipaddresstype is required") :type
                         (common-lisp:or ip-address-type common-lisp:null)
                         :accessor
                         struct-shape-set-ip-address-type-request-ip-address-type
                         :shape "IpAddressType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-ip-address-type-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'set-ip-address-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-ip-address-type-request
                    'make-set-ip-address-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-ip-address-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-ip-address-type-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "resourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-type))
      (common-lisp:list
       (common-lisp:cons "ipAddressType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-ip-address-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-ip-address-type-result common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor
                         struct-shape-set-ip-address-type-result-operations
                         :shape "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-ip-address-type-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'set-ip-address-type-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-ip-address-type-result
                    'make-set-ip-address-type-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-ip-address-type-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-ip-address-type-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-ip-address-type-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-resource-access-for-bucket-request common-lisp:nil
                       ((resource-name :initarg :resource-name :initform
                         (common-lisp:error ":resourcename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-set-resource-access-for-bucket-request-resource-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bucket-name :initarg :bucket-name :initform
                         (common-lisp:error ":bucketname is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-set-resource-access-for-bucket-request-bucket-name
                         :shape "BucketName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (access :initarg :access :initform
                         (common-lisp:error ":access is required") :type
                         (common-lisp:or resource-bucket-access
                                         common-lisp:null)
                         :accessor
                         struct-shape-set-resource-access-for-bucket-request-access
                         :shape "ResourceBucketAccess" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-resource-access-for-bucket-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-resource-access-for-bucket-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-resource-access-for-bucket-request
                    'make-set-resource-access-for-bucket-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-resource-access-for-bucket-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-resource-access-for-bucket-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "resourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "bucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access))
      (common-lisp:list
       (common-lisp:cons "access"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-resource-access-for-bucket-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-resource-access-for-bucket-result common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor
                         struct-shape-set-resource-access-for-bucket-result-operations
                         :shape "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-resource-access-for-bucket-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-resource-access-for-bucket-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-resource-access-for-bucket-result
                    'make-set-resource-access-for-bucket-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-resource-access-for-bucket-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-resource-access-for-bucket-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-resource-access-for-bucket-result))
   common-lisp:nil))
(common-lisp:deftype setup-domain-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype setup-domain-name-list ()
   '(trivial-types:proper-list setup-domain-name))
 (common-lisp:defun make-setup-domain-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list setup-domain-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass setup-execution-details common-lisp:nil
                       ((command :initarg :command :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-setup-execution-details-command
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (date-time :initarg :date-time :initform
                         common-lisp:nil :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-setup-execution-details-date-time :shape
                         "IsoDate" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-setup-execution-details-name
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or setup-status common-lisp:null)
                         :accessor struct-shape-setup-execution-details-status
                         :shape "SetupStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (standard-error :initarg :standard-error :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-setup-execution-details-standard-error
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (standard-output :initarg :standard-output :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-setup-execution-details-standard-output
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (version :initarg :version :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-setup-execution-details-version
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-setup-execution-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'setup-execution-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'setup-execution-details 'make-setup-execution-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          setup-execution-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          setup-execution-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'command))
      (common-lisp:list
       (common-lisp:cons "command"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-time))
      (common-lisp:list
       (common-lisp:cons "dateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'standard-error))
      (common-lisp:list
       (common-lisp:cons "standardError"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'standard-output))
      (common-lisp:list
       (common-lisp:cons "standardOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          setup-execution-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype setup-execution-details-list ()
   '(trivial-types:proper-list setup-execution-details))
 (common-lisp:defun make-setup-execution-details-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list setup-execution-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass setup-history common-lisp:nil
                       ((operation-id :initarg :operation-id :initform
                         common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-setup-history-operation-id
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (request :initarg :request :initform common-lisp:nil
                         :type (common-lisp:or setup-request common-lisp:null)
                         :accessor struct-shape-setup-history-request :shape
                         "SetupRequest" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource :initarg :resource :initform common-lisp:nil
                         :type
                         (common-lisp:or setup-history-resource
                                         common-lisp:null)
                         :accessor struct-shape-setup-history-resource :shape
                         "SetupHistoryResource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (execution-details :initarg :execution-details
                         :initform common-lisp:nil :type
                         (common-lisp:or setup-execution-details-list
                                         common-lisp:null)
                         :accessor struct-shape-setup-history-execution-details
                         :shape "SetupExecutionDetailsList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or setup-status common-lisp:null)
                         :accessor struct-shape-setup-history-status :shape
                         "SetupStatus" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-setup-history
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'setup-history
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'setup-history 'make-setup-history))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input setup-history))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input setup-history))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "operationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request))
      (common-lisp:list
       (common-lisp:cons "request"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-details))
      (common-lisp:list
       (common-lisp:cons "executionDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input setup-history))
   common-lisp:nil))
(common-lisp:deftype setup-history-page-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass setup-history-resource common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-setup-history-resource-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-setup-history-resource-arn
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-setup-history-resource-created-at :shape
                         "IsoDate" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (location :initarg :location :initform common-lisp:nil
                         :type
                         (common-lisp:or resource-location common-lisp:null)
                         :accessor struct-shape-setup-history-resource-location
                         :shape "ResourceLocation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor
                         struct-shape-setup-history-resource-resource-type
                         :shape "ResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-setup-history-resource
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'setup-history-resource
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'setup-history-resource 'make-setup-history-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          setup-history-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          setup-history-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          setup-history-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass setup-instance-https-request common-lisp:nil
                       ((instance-name :initarg :instance-name :initform
                         (common-lisp:error ":instancename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-setup-instance-https-request-instance-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (email-address :initarg :email-address :initform
                         (common-lisp:error ":emailaddress is required") :type
                         (common-lisp:or email-address common-lisp:null)
                         :accessor
                         struct-shape-setup-instance-https-request-email-address
                         :shape "EmailAddress" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-names :initarg :domain-names :initform
                         (common-lisp:error ":domainnames is required") :type
                         (common-lisp:or setup-domain-name-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-setup-instance-https-request-domain-names
                         :shape "SetupDomainNameList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-provider :initarg :certificate-provider
                         :initform
                         (common-lisp:error ":certificateprovider is required")
                         :type
                         (common-lisp:or certificate-provider common-lisp:null)
                         :accessor
                         struct-shape-setup-instance-https-request-certificate-provider
                         :shape "CertificateProvider" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-setup-instance-https-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'setup-instance-https-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'setup-instance-https-request
                    'make-setup-instance-https-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          setup-instance-https-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          setup-instance-https-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-name))
      (common-lisp:list
       (common-lisp:cons "instanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-address))
      (common-lisp:list
       (common-lisp:cons "emailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-names))
      (common-lisp:list
       (common-lisp:cons "domainNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-provider))
      (common-lisp:list
       (common-lisp:cons "certificateProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          setup-instance-https-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass setup-instance-https-result common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor
                         struct-shape-setup-instance-https-result-operations
                         :shape "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-setup-instance-https-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'setup-instance-https-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'setup-instance-https-result
                    'make-setup-instance-https-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          setup-instance-https-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          setup-instance-https-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          setup-instance-https-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass setup-request common-lisp:nil
                       ((instance-name :initarg :instance-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-setup-request-instance-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-names :initarg :domain-names :initform
                         common-lisp:nil :type
                         (common-lisp:or setup-domain-name-list
                                         common-lisp:null)
                         :accessor struct-shape-setup-request-domain-names
                         :shape "SetupDomainNameList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-provider :initarg :certificate-provider
                         :initform common-lisp:nil :type
                         (common-lisp:or certificate-provider common-lisp:null)
                         :accessor
                         struct-shape-setup-request-certificate-provider :shape
                         "CertificateProvider" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-setup-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'setup-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'setup-request 'make-setup-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input setup-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input setup-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-name))
      (common-lisp:list
       (common-lisp:cons "instanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-names))
      (common-lisp:list
       (common-lisp:cons "domainNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-provider))
      (common-lisp:list
       (common-lisp:cons "certificateProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input setup-request))
   common-lisp:nil))
(common-lisp:deftype setup-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass start-guisession-request common-lisp:nil
                       ((resource-name :initarg :resource-name :initform
                         (common-lisp:error ":resourcename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-start-guisession-request-resource-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-guisession-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-guisession-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-guisession-request 'make-start-guisession-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-guisession-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-guisession-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "resourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-guisession-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-guisession-result common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor
                         struct-shape-start-guisession-result-operations :shape
                         "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-guisession-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-guisession-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-guisession-result 'make-start-guisession-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-guisession-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-guisession-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-guisession-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-instance-request common-lisp:nil
                       ((instance-name :initarg :instance-name :initform
                         (common-lisp:error ":instancename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-start-instance-request-instance-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-instance-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-instance-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-instance-request 'make-start-instance-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-instance-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-name))
      (common-lisp:list
       (common-lisp:cons "instanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-instance-result common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor
                         struct-shape-start-instance-result-operations :shape
                         "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-instance-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-instance-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-instance-result 'make-start-instance-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-instance-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-instance-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-instance-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-relational-database-request common-lisp:nil
                       ((relational-database-name :initarg
                         :relational-database-name :initform
                         (common-lisp:error
                          ":relationaldatabasename is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-start-relational-database-request-relational-database-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-relational-database-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-relational-database-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-relational-database-request
                    'make-start-relational-database-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-relational-database-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-relational-database-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-name))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-relational-database-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-relational-database-result common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor
                         struct-shape-start-relational-database-result-operations
                         :shape "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-relational-database-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-relational-database-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-relational-database-result
                    'make-start-relational-database-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-relational-database-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-relational-database-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-relational-database-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass static-ip common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-static-ip-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-static-ip-arn :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (support-code :initarg :support-code :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-static-ip-support-code :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-static-ip-created-at :shape "IsoDate"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (location :initarg :location :initform common-lisp:nil
                         :type
                         (common-lisp:or resource-location common-lisp:null)
                         :accessor struct-shape-static-ip-location :shape
                         "ResourceLocation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor struct-shape-static-ip-resource-type :shape
                         "ResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ip-address :initarg :ip-address :initform
                         common-lisp:nil :type
                         (common-lisp:or ip-address common-lisp:null) :accessor
                         struct-shape-static-ip-ip-address :shape "IpAddress"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (attached-to :initarg :attached-to :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-static-ip-attached-to :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-attached :initarg :is-attached :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor struct-shape-static-ip-is-attached :shape
                         "boolean" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-static-ip
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'static-ip
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'static-ip 'make-static-ip))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input static-ip))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input static-ip))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'support-code))
      (common-lisp:list
       (common-lisp:cons "supportCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "ipAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attached-to))
      (common-lisp:list
       (common-lisp:cons "attachedTo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-attached))
      (common-lisp:list
       (common-lisp:cons "isAttached"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input static-ip))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype static-ip-list () '(trivial-types:proper-list static-ip))
 (common-lisp:defun make-static-ip-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list static-ip))
   aws-sdk/generator/shape::members))
(common-lisp:deftype status () 'common-lisp:string)
(common-lisp:deftype status-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass stop-guisession-request common-lisp:nil
                       ((resource-name :initarg :resource-name :initform
                         (common-lisp:error ":resourcename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-stop-guisession-request-resource-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-guisession-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stop-guisession-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-guisession-request 'make-stop-guisession-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-guisession-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-guisession-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "resourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-guisession-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-guisession-result common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor
                         struct-shape-stop-guisession-result-operations :shape
                         "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-guisession-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stop-guisession-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-guisession-result 'make-stop-guisession-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-guisession-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-guisession-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-guisession-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-instance-on-idle-request common-lisp:nil
                       ((threshold :initarg :threshold :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-stop-instance-on-idle-request-threshold
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (duration :initarg :duration :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-stop-instance-on-idle-request-duration
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-instance-on-idle-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-instance-on-idle-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-instance-on-idle-request
                    'make-stop-instance-on-idle-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-instance-on-idle-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-instance-on-idle-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threshold))
      (common-lisp:list
       (common-lisp:cons "threshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-instance-on-idle-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-instance-request common-lisp:nil
                       ((instance-name :initarg :instance-name :initform
                         (common-lisp:error ":instancename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-stop-instance-request-instance-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (force :initarg :force :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor struct-shape-stop-instance-request-force
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-instance-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stop-instance-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-instance-request 'make-stop-instance-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-instance-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-name))
      (common-lisp:list
       (common-lisp:cons "instanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force))
      (common-lisp:list
       (common-lisp:cons "force"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-instance-result common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor struct-shape-stop-instance-result-operations
                         :shape "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-instance-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stop-instance-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-instance-result 'make-stop-instance-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-instance-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-instance-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-instance-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-relational-database-request common-lisp:nil
                       ((relational-database-name :initarg
                         :relational-database-name :initform
                         (common-lisp:error
                          ":relationaldatabasename is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-stop-relational-database-request-relational-database-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (relational-database-snapshot-name :initarg
                         :relational-database-snapshot-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-stop-relational-database-request-relational-database-snapshot-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-relational-database-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-relational-database-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-relational-database-request
                    'make-stop-relational-database-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-relational-database-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-relational-database-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-name))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-snapshot-name))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseSnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-relational-database-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-relational-database-result common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor
                         struct-shape-stop-relational-database-result-operations
                         :shape "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-relational-database-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-relational-database-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-relational-database-result
                    'make-stop-relational-database-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-relational-database-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-relational-database-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-relational-database-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype string-list ()
   '(trivial-types:proper-list common-lisp:string))
 (common-lisp:defun make-string-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list common-lisp:string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype string-max256 () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype subject-alternative-name-list ()
   '(trivial-types:proper-list domain-name))
 (common-lisp:defun make-subject-alternative-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list domain-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((key :initarg :key :initform common-lisp:nil :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         struct-shape-tag-key :shape "TagKey" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         struct-shape-tag-value :shape "TagValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-name :initarg :resource-name :initform
                         (common-lisp:error ":resourcename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-tag-resource-request-resource-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-arn :initarg :resource-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "ResourceArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "resourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-result common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor struct-shape-tag-resource-result-operations
                         :shape "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-result 'make-tag-resource-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-result))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass test-alarm-request common-lisp:nil
                       ((alarm-name :initarg :alarm-name :initform
                         (common-lisp:error ":alarmname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-test-alarm-request-alarm-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform
                         (common-lisp:error ":state is required") :type
                         (common-lisp:or alarm-state common-lisp:null)
                         :accessor struct-shape-test-alarm-request-state :shape
                         "AlarmState" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-test-alarm-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'test-alarm-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'test-alarm-request 'make-test-alarm-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input test-alarm-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input test-alarm-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarm-name))
      (common-lisp:list
       (common-lisp:cons "alarmName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input test-alarm-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass test-alarm-result common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor struct-shape-test-alarm-result-operations
                         :shape "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-test-alarm-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'test-alarm-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'test-alarm-result 'make-test-alarm-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input test-alarm-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input test-alarm-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input test-alarm-result))
   common-lisp:nil))
(common-lisp:deftype time-of-day () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass time-period common-lisp:nil
                       ((start :initarg :start :initform common-lisp:nil :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-time-period-start :shape "IsoDate"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (end :initarg :end :initform common-lisp:nil :type
                         (common-lisp:or iso-date common-lisp:null) :accessor
                         struct-shape-time-period-end :shape "IsoDate"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-time-period
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'time-period
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'time-period 'make-time-period))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input time-period))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input time-period))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start))
      (common-lisp:list
       (common-lisp:cons "start"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end))
      (common-lisp:list
       (common-lisp:cons "end"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input time-period))
   common-lisp:nil))
(common-lisp:deftype treat-missing-data () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition unauthenticated-exception
     (lightsail-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       unauthenticated-exception-code)
      (docs :initarg :docs :initform common-lisp:nil :reader
       unauthenticated-exception-docs)
      (message :initarg :message :initform common-lisp:nil :reader
       unauthenticated-exception-message)
      (tip :initarg :tip :initform common-lisp:nil :reader
       unauthenticated-exception-tip)))
 (common-lisp:export
  (common-lisp:list 'unauthenticated-exception 'unauthenticated-exception-code
                    'unauthenticated-exception-docs
                    'unauthenticated-exception-message
                    'unauthenticated-exception-tip)))
(common-lisp:progn
 (common-lisp:defclass unpeer-vpc-request common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-unpeer-vpc-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'unpeer-vpc-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'unpeer-vpc-request 'make-unpeer-vpc-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input unpeer-vpc-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input unpeer-vpc-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input unpeer-vpc-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass unpeer-vpc-result common-lisp:nil
                       ((operation :initarg :operation :initform
                         common-lisp:nil :type
                         (common-lisp:or operation common-lisp:null) :accessor
                         struct-shape-unpeer-vpc-result-operation :shape
                         "Operation" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-unpeer-vpc-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'unpeer-vpc-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'unpeer-vpc-result 'make-unpeer-vpc-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input unpeer-vpc-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input unpeer-vpc-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input unpeer-vpc-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-name :initarg :resource-name :initform
                         (common-lisp:error ":resourcename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-untag-resource-request-resource-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-arn :initarg :resource-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "ResourceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tagkeys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-untag-resource-request-tag-keys
                         :shape "TagKeyList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "resourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "tagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-result common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor
                         struct-shape-untag-resource-result-operations :shape
                         "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-result 'make-untag-resource-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-bucket-bundle-request common-lisp:nil
                       ((bucket-name :initarg :bucket-name :initform
                         (common-lisp:error ":bucketname is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-update-bucket-bundle-request-bucket-name
                         :shape "BucketName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bundle-id :initarg :bundle-id :initform
                         (common-lisp:error ":bundleid is required") :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-update-bucket-bundle-request-bundle-id
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-bucket-bundle-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-bucket-bundle-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-bucket-bundle-request
                    'make-update-bucket-bundle-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-bucket-bundle-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-bucket-bundle-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "bucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-id))
      (common-lisp:list
       (common-lisp:cons "bundleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-bucket-bundle-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-bucket-bundle-result common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor
                         struct-shape-update-bucket-bundle-result-operations
                         :shape "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-bucket-bundle-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-bucket-bundle-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-bucket-bundle-result
                    'make-update-bucket-bundle-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-bucket-bundle-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-bucket-bundle-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-bucket-bundle-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-bucket-request common-lisp:nil
                       ((bucket-name :initarg :bucket-name :initform
                         (common-lisp:error ":bucketname is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-update-bucket-request-bucket-name :shape
                         "BucketName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (access-rules :initarg :access-rules :initform
                         common-lisp:nil :type
                         (common-lisp:or access-rules common-lisp:null)
                         :accessor
                         struct-shape-update-bucket-request-access-rules :shape
                         "AccessRules" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (versioning :initarg :versioning :initform
                         common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-update-bucket-request-versioning :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (readonly-access-accounts :initarg
                         :readonly-access-accounts :initform common-lisp:nil
                         :type
                         (common-lisp:or partner-id-list common-lisp:null)
                         :accessor
                         struct-shape-update-bucket-request-readonly-access-accounts
                         :shape "PartnerIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (access-log-config :initarg :access-log-config
                         :initform common-lisp:nil :type
                         (common-lisp:or bucket-access-log-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-bucket-request-access-log-config
                         :shape "BucketAccessLogConfig" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-bucket-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-bucket-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-bucket-request 'make-update-bucket-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-bucket-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-bucket-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "bucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-rules))
      (common-lisp:list
       (common-lisp:cons "accessRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'versioning))
      (common-lisp:list
       (common-lisp:cons "versioning"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'readonly-access-accounts))
      (common-lisp:list
       (common-lisp:cons "readonlyAccessAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-log-config))
      (common-lisp:list
       (common-lisp:cons "accessLogConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-bucket-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-bucket-result common-lisp:nil
                       ((bucket :initarg :bucket :initform common-lisp:nil
                         :type (common-lisp:or bucket common-lisp:null)
                         :accessor struct-shape-update-bucket-result-bucket
                         :shape "Bucket" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor struct-shape-update-bucket-result-operations
                         :shape "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-bucket-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-bucket-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-bucket-result 'make-update-bucket-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-bucket-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-bucket-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-bucket-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-container-service-request common-lisp:nil
                       ((service-name :initarg :service-name :initform
                         (common-lisp:error ":servicename is required") :type
                         (common-lisp:or container-service-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-container-service-request-service-name
                         :shape "ContainerServiceName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (power :initarg :power :initform common-lisp:nil :type
                         (common-lisp:or container-service-power-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-container-service-request-power
                         :shape "ContainerServicePowerName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (scale :initarg :scale :initform common-lisp:nil :type
                         (common-lisp:or container-service-scale
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-container-service-request-scale
                         :shape "ContainerServiceScale" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (is-disabled :initarg :is-disabled :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         struct-shape-update-container-service-request-is-disabled
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (public-domain-names :initarg :public-domain-names
                         :initform common-lisp:nil :type
                         (common-lisp:or container-service-public-domains
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-container-service-request-public-domain-names
                         :shape "ContainerServicePublicDomains" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (private-registry-access :initarg
                         :private-registry-access :initform common-lisp:nil
                         :type
                         (common-lisp:or private-registry-access-request
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-container-service-request-private-registry-access
                         :shape "PrivateRegistryAccessRequest" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-container-service-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-container-service-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-container-service-request
                    'make-update-container-service-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-container-service-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-container-service-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'power))
      (common-lisp:list
       (common-lisp:cons "power"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scale))
      (common-lisp:list
       (common-lisp:cons "scale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-disabled))
      (common-lisp:list
       (common-lisp:cons "isDisabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-domain-names))
      (common-lisp:list
       (common-lisp:cons "publicDomainNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'private-registry-access))
      (common-lisp:list
       (common-lisp:cons "privateRegistryAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-container-service-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-container-service-result common-lisp:nil
                       ((container-service :initarg :container-service
                         :initform common-lisp:nil :type
                         (common-lisp:or container-service common-lisp:null)
                         :accessor
                         struct-shape-update-container-service-result-container-service
                         :shape "ContainerService" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-container-service-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-container-service-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-container-service-result
                    'make-update-container-service-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-container-service-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-container-service-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-service))
      (common-lisp:list
       (common-lisp:cons "containerService"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-container-service-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-distribution-bundle-request common-lisp:nil
                       ((distribution-name :initarg :distribution-name
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-update-distribution-bundle-request-distribution-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bundle-id :initarg :bundle-id :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-update-distribution-bundle-request-bundle-id
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-distribution-bundle-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-distribution-bundle-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-distribution-bundle-request
                    'make-update-distribution-bundle-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-distribution-bundle-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-distribution-bundle-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distribution-name))
      (common-lisp:list
       (common-lisp:cons "distributionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-id))
      (common-lisp:list
       (common-lisp:cons "bundleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-distribution-bundle-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-distribution-bundle-result common-lisp:nil
                       ((operation :initarg :operation :initform
                         common-lisp:nil :type
                         (common-lisp:or operation common-lisp:null) :accessor
                         struct-shape-update-distribution-bundle-result-operation
                         :shape "Operation" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-distribution-bundle-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-distribution-bundle-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-distribution-bundle-result
                    'make-update-distribution-bundle-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-distribution-bundle-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-distribution-bundle-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-distribution-bundle-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-distribution-request common-lisp:nil
                       ((distribution-name :initarg :distribution-name
                         :initform
                         (common-lisp:error ":distributionname is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-update-distribution-request-distribution-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (origin :initarg :origin :initform common-lisp:nil
                         :type (common-lisp:or input-origin common-lisp:null)
                         :accessor
                         struct-shape-update-distribution-request-origin :shape
                         "InputOrigin" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (default-cache-behavior :initarg
                         :default-cache-behavior :initform common-lisp:nil
                         :type (common-lisp:or cache-behavior common-lisp:null)
                         :accessor
                         struct-shape-update-distribution-request-default-cache-behavior
                         :shape "CacheBehavior" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-behavior-settings :initarg
                         :cache-behavior-settings :initform common-lisp:nil
                         :type (common-lisp:or cache-settings common-lisp:null)
                         :accessor
                         struct-shape-update-distribution-request-cache-behavior-settings
                         :shape "CacheSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-behaviors :initarg :cache-behaviors :initform
                         common-lisp:nil :type
                         (common-lisp:or cache-behavior-list common-lisp:null)
                         :accessor
                         struct-shape-update-distribution-request-cache-behaviors
                         :shape "CacheBehaviorList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-enabled :initarg :is-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         struct-shape-update-distribution-request-is-enabled
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-distribution-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-distribution-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-distribution-request
                    'make-update-distribution-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-distribution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-distribution-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distribution-name))
      (common-lisp:list
       (common-lisp:cons "distributionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin))
      (common-lisp:list
       (common-lisp:cons "origin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-cache-behavior))
      (common-lisp:list
       (common-lisp:cons "defaultCacheBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-behavior-settings))
      (common-lisp:list
       (common-lisp:cons "cacheBehaviorSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-behaviors))
      (common-lisp:list
       (common-lisp:cons "cacheBehaviors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-enabled))
      (common-lisp:list
       (common-lisp:cons "isEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-distribution-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-distribution-result common-lisp:nil
                       ((operation :initarg :operation :initform
                         common-lisp:nil :type
                         (common-lisp:or operation common-lisp:null) :accessor
                         struct-shape-update-distribution-result-operation
                         :shape "Operation" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-distribution-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-distribution-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-distribution-result
                    'make-update-distribution-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-distribution-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-distribution-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-distribution-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-domain-entry-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domainname is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-update-domain-entry-request-domain-name
                         :shape "DomainName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-entry :initarg :domain-entry :initform
                         (common-lisp:error ":domainentry is required") :type
                         (common-lisp:or domain-entry common-lisp:null)
                         :accessor
                         struct-shape-update-domain-entry-request-domain-entry
                         :shape "DomainEntry" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-domain-entry-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-domain-entry-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-domain-entry-request
                    'make-update-domain-entry-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-entry-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-entry-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "domainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-entry))
      (common-lisp:list
       (common-lisp:cons "domainEntry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-entry-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-domain-entry-result common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor
                         struct-shape-update-domain-entry-result-operations
                         :shape "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-domain-entry-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-domain-entry-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-domain-entry-result
                    'make-update-domain-entry-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-entry-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-entry-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-entry-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-instance-metadata-options-request common-lisp:nil
                       ((instance-name :initarg :instance-name :initform
                         (common-lisp:error ":instancename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-update-instance-metadata-options-request-instance-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (http-tokens :initarg :http-tokens :initform
                         common-lisp:nil :type
                         (common-lisp:or http-tokens common-lisp:null)
                         :accessor
                         struct-shape-update-instance-metadata-options-request-http-tokens
                         :shape "HttpTokens" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (http-endpoint :initarg :http-endpoint :initform
                         common-lisp:nil :type
                         (common-lisp:or http-endpoint common-lisp:null)
                         :accessor
                         struct-shape-update-instance-metadata-options-request-http-endpoint
                         :shape "HttpEndpoint" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (http-put-response-hop-limit :initarg
                         :http-put-response-hop-limit :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor
                         struct-shape-update-instance-metadata-options-request-http-put-response-hop-limit
                         :shape "integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (http-protocol-ipv6 :initarg :http-protocol-ipv6
                         :initform common-lisp:nil :type
                         (common-lisp:or http-protocol-ipv6 common-lisp:null)
                         :accessor
                         struct-shape-update-instance-metadata-options-request-http-protocol-ipv6
                         :shape "HttpProtocolIpv6" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-instance-metadata-options-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-instance-metadata-options-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-instance-metadata-options-request
                    'make-update-instance-metadata-options-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-instance-metadata-options-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-instance-metadata-options-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-name))
      (common-lisp:list
       (common-lisp:cons "instanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-tokens))
      (common-lisp:list
       (common-lisp:cons "httpTokens"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-endpoint))
      (common-lisp:list
       (common-lisp:cons "httpEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'http-put-response-hop-limit))
      (common-lisp:list
       (common-lisp:cons "httpPutResponseHopLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-protocol-ipv6))
      (common-lisp:list
       (common-lisp:cons "httpProtocolIpv6"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-instance-metadata-options-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-instance-metadata-options-result common-lisp:nil
                       ((operation :initarg :operation :initform
                         common-lisp:nil :type
                         (common-lisp:or operation common-lisp:null) :accessor
                         struct-shape-update-instance-metadata-options-result-operation
                         :shape "Operation" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-instance-metadata-options-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-instance-metadata-options-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-instance-metadata-options-result
                    'make-update-instance-metadata-options-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-instance-metadata-options-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-instance-metadata-options-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-instance-metadata-options-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-load-balancer-attribute-request common-lisp:nil
                       ((load-balancer-name :initarg :load-balancer-name
                         :initform
                         (common-lisp:error ":loadbalancername is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-update-load-balancer-attribute-request-load-balancer-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attribute-name :initarg :attribute-name :initform
                         (common-lisp:error ":attributename is required") :type
                         (common-lisp:or load-balancer-attribute-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-load-balancer-attribute-request-attribute-name
                         :shape "LoadBalancerAttributeName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (attribute-value :initarg :attribute-value :initform
                         (common-lisp:error ":attributevalue is required")
                         :type (common-lisp:or string-max256 common-lisp:null)
                         :accessor
                         struct-shape-update-load-balancer-attribute-request-attribute-value
                         :shape "StringMax256" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-load-balancer-attribute-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-load-balancer-attribute-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-load-balancer-attribute-request
                    'make-update-load-balancer-attribute-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-load-balancer-attribute-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-load-balancer-attribute-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "loadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "attributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-value))
      (common-lisp:list
       (common-lisp:cons "attributeValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-load-balancer-attribute-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-load-balancer-attribute-result common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor
                         struct-shape-update-load-balancer-attribute-result-operations
                         :shape "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-load-balancer-attribute-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-load-balancer-attribute-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-load-balancer-attribute-result
                    'make-update-load-balancer-attribute-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-load-balancer-attribute-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-load-balancer-attribute-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-load-balancer-attribute-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-relational-database-parameters-request
                       common-lisp:nil
                       ((relational-database-name :initarg
                         :relational-database-name :initform
                         (common-lisp:error
                          ":relationaldatabasename is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-update-relational-database-parameters-request-relational-database-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         (common-lisp:error ":parameters is required") :type
                         (common-lisp:or relational-database-parameter-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-relational-database-parameters-request-parameters
                         :shape "RelationalDatabaseParameterList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-relational-database-parameters-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-relational-database-parameters-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-relational-database-parameters-request
                    'make-update-relational-database-parameters-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-relational-database-parameters-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-relational-database-parameters-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-name))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-relational-database-parameters-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-relational-database-parameters-result
                       common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor
                         struct-shape-update-relational-database-parameters-result-operations
                         :shape "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-relational-database-parameters-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-relational-database-parameters-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-relational-database-parameters-result
                    'make-update-relational-database-parameters-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-relational-database-parameters-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-relational-database-parameters-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-relational-database-parameters-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-relational-database-request common-lisp:nil
                       ((relational-database-name :initarg
                         :relational-database-name :initform
                         (common-lisp:error
                          ":relationaldatabasename is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-update-relational-database-request-relational-database-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (master-user-password :initarg :master-user-password
                         :initform common-lisp:nil :type
                         (common-lisp:or sensitive-string common-lisp:null)
                         :accessor
                         struct-shape-update-relational-database-request-master-user-password
                         :shape "SensitiveString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rotate-master-user-password :initarg
                         :rotate-master-user-password :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         struct-shape-update-relational-database-request-rotate-master-user-password
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (preferred-backup-window :initarg
                         :preferred-backup-window :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-update-relational-database-request-preferred-backup-window
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (preferred-maintenance-window :initarg
                         :preferred-maintenance-window :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-update-relational-database-request-preferred-maintenance-window
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-backup-retention :initarg
                         :enable-backup-retention :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         struct-shape-update-relational-database-request-enable-backup-retention
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (disable-backup-retention :initarg
                         :disable-backup-retention :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         struct-shape-update-relational-database-request-disable-backup-retention
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (publicly-accessible :initarg :publicly-accessible
                         :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         struct-shape-update-relational-database-request-publicly-accessible
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (apply-immediately :initarg :apply-immediately
                         :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         struct-shape-update-relational-database-request-apply-immediately
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ca-certificate-identifier :initarg
                         :ca-certificate-identifier :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-update-relational-database-request-ca-certificate-identifier
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (relational-database-blueprint-id :initarg
                         :relational-database-blueprint-id :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-update-relational-database-request-relational-database-blueprint-id
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-relational-database-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-relational-database-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-relational-database-request
                    'make-update-relational-database-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-relational-database-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-relational-database-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-name))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-password))
      (common-lisp:list
       (common-lisp:cons "masterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rotate-master-user-password))
      (common-lisp:list
       (common-lisp:cons "rotateMasterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-backup-window))
      (common-lisp:list
       (common-lisp:cons "preferredBackupWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "preferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-backup-retention))
      (common-lisp:list
       (common-lisp:cons "enableBackupRetention"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disable-backup-retention))
      (common-lisp:list
       (common-lisp:cons "disableBackupRetention"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "publiclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-immediately))
      (common-lisp:list
       (common-lisp:cons "applyImmediately"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ca-certificate-identifier))
      (common-lisp:list
       (common-lisp:cons "caCertificateIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-blueprint-id))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseBlueprintId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-relational-database-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-relational-database-result common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor
                         struct-shape-update-relational-database-result-operations
                         :shape "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-relational-database-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-relational-database-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-relational-database-result
                    'make-update-relational-database-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-relational-database-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-relational-database-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-relational-database-result))
   common-lisp:nil))
common-lisp:nil
common-lisp:nil
common-lisp:nil
common-lisp:nil
common-lisp:nil
(common-lisp:progn
 (common-lisp:deftype |setupHistoryList| ()
   '(trivial-types:proper-list setup-history))
 (common-lisp:defun make-setuphistorylist
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list setup-history))
   aws-sdk/generator/shape::members))
common-lisp:nil
common-lisp:nil
(common-lisp:progn
 (common-lisp:defun allocate-static-ip
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key static-ip-name)
   (common-lisp:declare (common-lisp:ignorable static-ip-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-allocate-static-ip-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AllocateStaticIp"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'allocate-static-ip))
(common-lisp:progn
 (common-lisp:defun attach-certificate-to-distribution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key distribution-name certificate-name)
   (common-lisp:declare
    (common-lisp:ignorable distribution-name certificate-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-attach-certificate-to-distribution-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AttachCertificateToDistribution"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'attach-certificate-to-distribution))
(common-lisp:progn
 (common-lisp:defun attach-disk
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key disk-name instance-name disk-path
                     auto-mounting)
   (common-lisp:declare
    (common-lisp:ignorable disk-name instance-name disk-path auto-mounting))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-attach-disk-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AttachDisk"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'attach-disk))
(common-lisp:progn
 (common-lisp:defun attach-instances-to-load-balancer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name instance-names)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-name instance-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-attach-instances-to-load-balancer-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AttachInstancesToLoadBalancer"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'attach-instances-to-load-balancer))
(common-lisp:progn
 (common-lisp:defun attach-load-balancer-tls-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name certificate-name)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-name certificate-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-attach-load-balancer-tls-certificate-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AttachLoadBalancerTlsCertificate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'attach-load-balancer-tls-certificate))
(common-lisp:progn
 (common-lisp:defun attach-static-ip
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key static-ip-name instance-name)
   (common-lisp:declare (common-lisp:ignorable static-ip-name instance-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-attach-static-ip-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AttachStaticIp"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'attach-static-ip))
(common-lisp:progn
 (common-lisp:defun close-instance-public-ports
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key port-info instance-name)
   (common-lisp:declare (common-lisp:ignorable port-info instance-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-close-instance-public-ports-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CloseInstancePublicPorts"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'close-instance-public-ports))
(common-lisp:progn
 (common-lisp:defun copy-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-snapshot-name source-resource-name
                     restore-date use-latest-restorable-auto-snapshot
                     target-snapshot-name source-region)
   (common-lisp:declare
    (common-lisp:ignorable source-snapshot-name source-resource-name
     restore-date use-latest-restorable-auto-snapshot target-snapshot-name
     source-region))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-copy-snapshot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CopySnapshot"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'copy-snapshot))
(common-lisp:progn
 (common-lisp:defun create-bucket
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket-name bundle-id tags
                     enable-object-versioning)
   (common-lisp:declare
    (common-lisp:ignorable bucket-name bundle-id tags
     enable-object-versioning))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-bucket-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateBucket"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-bucket))
(common-lisp:progn
 (common-lisp:defun create-bucket-access-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket-name)
   (common-lisp:declare (common-lisp:ignorable bucket-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-bucket-access-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateBucketAccessKey"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-bucket-access-key))
(common-lisp:progn
 (common-lisp:defun create-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-name domain-name
                     subject-alternative-names tags)
   (common-lisp:declare
    (common-lisp:ignorable certificate-name domain-name
     subject-alternative-names tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-certificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateCertificate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-certificate))
(common-lisp:progn
 (common-lisp:defun create-cloud-formation-stack
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instances)
   (common-lisp:declare (common-lisp:ignorable instances))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-cloud-formation-stack-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateCloudFormationStack"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-cloud-formation-stack))
(common-lisp:progn
 (common-lisp:defun create-contact-method
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key protocol contact-endpoint)
   (common-lisp:declare (common-lisp:ignorable protocol contact-endpoint))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-contact-method-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateContactMethod"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-contact-method))
(common-lisp:progn
 (common-lisp:defun create-container-service
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-name power scale tags
                     public-domain-names deployment private-registry-access)
   (common-lisp:declare
    (common-lisp:ignorable service-name power scale tags public-domain-names
     deployment private-registry-access))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-container-service-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateContainerService"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-container-service))
(common-lisp:progn
 (common-lisp:defun create-container-service-deployment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-name containers public-endpoint)
   (common-lisp:declare
    (common-lisp:ignorable service-name containers public-endpoint))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-container-service-deployment-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateContainerServiceDeployment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-container-service-deployment))
(common-lisp:progn
 (common-lisp:defun create-container-service-registry-login ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'lightsail-request :method "POST" :path "/"
                                :operation
                                "CreateContainerServiceRegistryLogin"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'create-container-service-registry-login))
(common-lisp:progn
 (common-lisp:defun create-disk
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key disk-name availability-zone size-in-gb
                     tags add-ons)
   (common-lisp:declare
    (common-lisp:ignorable disk-name availability-zone size-in-gb tags
     add-ons))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-disk-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDisk"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-disk))
(common-lisp:progn
 (common-lisp:defun create-disk-from-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key disk-name disk-snapshot-name
                     availability-zone size-in-gb tags add-ons source-disk-name
                     restore-date use-latest-restorable-auto-snapshot)
   (common-lisp:declare
    (common-lisp:ignorable disk-name disk-snapshot-name availability-zone
     size-in-gb tags add-ons source-disk-name restore-date
     use-latest-restorable-auto-snapshot))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-disk-from-snapshot-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDiskFromSnapshot"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-disk-from-snapshot))
(common-lisp:progn
 (common-lisp:defun create-disk-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key disk-name disk-snapshot-name
                     instance-name tags)
   (common-lisp:declare
    (common-lisp:ignorable disk-name disk-snapshot-name instance-name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-disk-snapshot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDiskSnapshot"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-disk-snapshot))
(common-lisp:progn
 (common-lisp:defun create-distribution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key distribution-name origin
                     default-cache-behavior cache-behavior-settings
                     cache-behaviors bundle-id ip-address-type tags)
   (common-lisp:declare
    (common-lisp:ignorable distribution-name origin default-cache-behavior
     cache-behavior-settings cache-behaviors bundle-id ip-address-type tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-distribution-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDistribution"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-distribution))
(common-lisp:progn
 (common-lisp:defun create-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name tags)
   (common-lisp:declare (common-lisp:ignorable domain-name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-domain-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDomain"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-domain))
(common-lisp:progn
 (common-lisp:defun create-domain-entry
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name domain-entry)
   (common-lisp:declare (common-lisp:ignorable domain-name domain-entry))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-domain-entry-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDomainEntry"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-domain-entry))
(common-lisp:progn
 (common-lisp:defun create-guisession-access-details
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-name)
   (common-lisp:declare (common-lisp:ignorable resource-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-guisession-access-details-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateGUISessionAccessDetails"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-guisession-access-details))
(common-lisp:progn
 (common-lisp:defun create-instance-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-snapshot-name instance-name
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable instance-snapshot-name instance-name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-instance-snapshot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateInstanceSnapshot"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-instance-snapshot))
(common-lisp:progn
 (common-lisp:defun create-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-names availability-zone
                     custom-image-name blueprint-id bundle-id user-data
                     key-pair-name tags add-ons ip-address-type)
   (common-lisp:declare
    (common-lisp:ignorable instance-names availability-zone custom-image-name
     blueprint-id bundle-id user-data key-pair-name tags add-ons
     ip-address-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-instances-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateInstances"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-instances))
(common-lisp:progn
 (common-lisp:defun create-instances-from-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-names attached-disk-mapping
                     availability-zone instance-snapshot-name bundle-id
                     user-data key-pair-name tags add-ons ip-address-type
                     source-instance-name restore-date
                     use-latest-restorable-auto-snapshot)
   (common-lisp:declare
    (common-lisp:ignorable instance-names attached-disk-mapping
     availability-zone instance-snapshot-name bundle-id user-data key-pair-name
     tags add-ons ip-address-type source-instance-name restore-date
     use-latest-restorable-auto-snapshot))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-instances-from-snapshot-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateInstancesFromSnapshot"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-instances-from-snapshot))
(common-lisp:progn
 (common-lisp:defun create-key-pair
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-pair-name tags)
   (common-lisp:declare (common-lisp:ignorable key-pair-name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-key-pair-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateKeyPair"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-key-pair))
(common-lisp:progn
 (common-lisp:defun create-load-balancer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name instance-port
                     health-check-path certificate-name certificate-domain-name
                     certificate-alternative-names tags ip-address-type
                     tls-policy-name)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-name instance-port health-check-path
     certificate-name certificate-domain-name certificate-alternative-names
     tags ip-address-type tls-policy-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-load-balancer-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateLoadBalancer"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-load-balancer))
(common-lisp:progn
 (common-lisp:defun create-load-balancer-tls-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name certificate-name
                     certificate-domain-name certificate-alternative-names
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-name certificate-name
     certificate-domain-name certificate-alternative-names tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-load-balancer-tls-certificate-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateLoadBalancerTlsCertificate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-load-balancer-tls-certificate))
(common-lisp:progn
 (common-lisp:defun create-relational-database
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key relational-database-name
                     availability-zone relational-database-blueprint-id
                     relational-database-bundle-id master-database-name
                     master-username master-user-password
                     preferred-backup-window preferred-maintenance-window
                     publicly-accessible tags)
   (common-lisp:declare
    (common-lisp:ignorable relational-database-name availability-zone
     relational-database-blueprint-id relational-database-bundle-id
     master-database-name master-username master-user-password
     preferred-backup-window preferred-maintenance-window publicly-accessible
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-relational-database-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateRelationalDatabase"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-relational-database))
(common-lisp:progn
 (common-lisp:defun create-relational-database-from-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key relational-database-name
                     availability-zone publicly-accessible
                     relational-database-snapshot-name
                     relational-database-bundle-id
                     source-relational-database-name restore-time
                     use-latest-restorable-time tags)
   (common-lisp:declare
    (common-lisp:ignorable relational-database-name availability-zone
     publicly-accessible relational-database-snapshot-name
     relational-database-bundle-id source-relational-database-name restore-time
     use-latest-restorable-time tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-relational-database-from-snapshot-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateRelationalDatabaseFromSnapshot"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-relational-database-from-snapshot))
(common-lisp:progn
 (common-lisp:defun create-relational-database-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key relational-database-name
                     relational-database-snapshot-name tags)
   (common-lisp:declare
    (common-lisp:ignorable relational-database-name
     relational-database-snapshot-name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-relational-database-snapshot-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateRelationalDatabaseSnapshot"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-relational-database-snapshot))
(common-lisp:progn
 (common-lisp:defun delete-alarm
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key alarm-name)
   (common-lisp:declare (common-lisp:ignorable alarm-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-alarm-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteAlarm"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-alarm))
(common-lisp:progn
 (common-lisp:defun delete-auto-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-name date)
   (common-lisp:declare (common-lisp:ignorable resource-name date))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-auto-snapshot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteAutoSnapshot"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-auto-snapshot))
(common-lisp:progn
 (common-lisp:defun delete-bucket
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket-name force-delete)
   (common-lisp:declare (common-lisp:ignorable bucket-name force-delete))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-bucket-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteBucket"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-bucket))
(common-lisp:progn
 (common-lisp:defun delete-bucket-access-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket-name access-key-id)
   (common-lisp:declare (common-lisp:ignorable bucket-name access-key-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-bucket-access-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteBucketAccessKey"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-bucket-access-key))
(common-lisp:progn
 (common-lisp:defun delete-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-name)
   (common-lisp:declare (common-lisp:ignorable certificate-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-certificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteCertificate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-certificate))
(common-lisp:progn
 (common-lisp:defun delete-contact-method
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key protocol)
   (common-lisp:declare (common-lisp:ignorable protocol))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-contact-method-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteContactMethod"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-contact-method))
(common-lisp:progn
 (common-lisp:defun delete-container-image
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-name image)
   (common-lisp:declare (common-lisp:ignorable service-name image))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-container-image-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteContainerImage"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-container-image))
(common-lisp:progn
 (common-lisp:defun delete-container-service
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-name)
   (common-lisp:declare (common-lisp:ignorable service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-container-service-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteContainerService"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-container-service))
(common-lisp:progn
 (common-lisp:defun delete-disk
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key disk-name force-delete-add-ons)
   (common-lisp:declare (common-lisp:ignorable disk-name force-delete-add-ons))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-disk-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDisk"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-disk))
(common-lisp:progn
 (common-lisp:defun delete-disk-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key disk-snapshot-name)
   (common-lisp:declare (common-lisp:ignorable disk-snapshot-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-disk-snapshot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDiskSnapshot"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-disk-snapshot))
(common-lisp:progn
 (common-lisp:defun delete-distribution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key distribution-name)
   (common-lisp:declare (common-lisp:ignorable distribution-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-distribution-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDistribution"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-distribution))
(common-lisp:progn
 (common-lisp:defun delete-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name)
   (common-lisp:declare (common-lisp:ignorable domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-domain-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDomain"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-domain))
(common-lisp:progn
 (common-lisp:defun delete-domain-entry
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name domain-entry)
   (common-lisp:declare (common-lisp:ignorable domain-name domain-entry))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-domain-entry-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDomainEntry"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-domain-entry))
(common-lisp:progn
 (common-lisp:defun delete-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-name force-delete-add-ons)
   (common-lisp:declare
    (common-lisp:ignorable instance-name force-delete-add-ons))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-instance-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteInstance"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-instance))
(common-lisp:progn
 (common-lisp:defun delete-instance-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-snapshot-name)
   (common-lisp:declare (common-lisp:ignorable instance-snapshot-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-instance-snapshot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteInstanceSnapshot"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-instance-snapshot))
(common-lisp:progn
 (common-lisp:defun delete-key-pair
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-pair-name expected-fingerprint)
   (common-lisp:declare
    (common-lisp:ignorable key-pair-name expected-fingerprint))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-key-pair-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteKeyPair"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-key-pair))
(common-lisp:progn
 (common-lisp:defun delete-known-host-keys
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-name)
   (common-lisp:declare (common-lisp:ignorable instance-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-known-host-keys-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteKnownHostKeys"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-known-host-keys))
(common-lisp:progn
 (common-lisp:defun delete-load-balancer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name)
   (common-lisp:declare (common-lisp:ignorable load-balancer-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-load-balancer-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteLoadBalancer"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-load-balancer))
(common-lisp:progn
 (common-lisp:defun delete-load-balancer-tls-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name certificate-name
                     force)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-name certificate-name force))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-load-balancer-tls-certificate-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteLoadBalancerTlsCertificate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-load-balancer-tls-certificate))
(common-lisp:progn
 (common-lisp:defun delete-relational-database
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key relational-database-name
                     skip-final-snapshot
                     final-relational-database-snapshot-name)
   (common-lisp:declare
    (common-lisp:ignorable relational-database-name skip-final-snapshot
     final-relational-database-snapshot-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-relational-database-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteRelationalDatabase"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-relational-database))
(common-lisp:progn
 (common-lisp:defun delete-relational-database-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key relational-database-snapshot-name)
   (common-lisp:declare
    (common-lisp:ignorable relational-database-snapshot-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-relational-database-snapshot-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteRelationalDatabaseSnapshot"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-relational-database-snapshot))
(common-lisp:progn
 (common-lisp:defun detach-certificate-from-distribution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key distribution-name)
   (common-lisp:declare (common-lisp:ignorable distribution-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-detach-certificate-from-distribution-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DetachCertificateFromDistribution"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'detach-certificate-from-distribution))
(common-lisp:progn
 (common-lisp:defun detach-disk
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key disk-name)
   (common-lisp:declare (common-lisp:ignorable disk-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-detach-disk-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DetachDisk"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'detach-disk))
(common-lisp:progn
 (common-lisp:defun detach-instances-from-load-balancer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name instance-names)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-name instance-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-detach-instances-from-load-balancer-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DetachInstancesFromLoadBalancer"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'detach-instances-from-load-balancer))
(common-lisp:progn
 (common-lisp:defun detach-static-ip
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key static-ip-name)
   (common-lisp:declare (common-lisp:ignorable static-ip-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-detach-static-ip-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DetachStaticIp"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'detach-static-ip))
(common-lisp:progn
 (common-lisp:defun disable-add-on
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key add-on-type resource-name)
   (common-lisp:declare (common-lisp:ignorable add-on-type resource-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disable-add-on-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DisableAddOn"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disable-add-on))
(common-lisp:progn
 (common-lisp:defun download-default-key-pair ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'lightsail-request :method "POST" :path "/"
                                :operation "DownloadDefaultKeyPair"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'download-default-key-pair))
(common-lisp:progn
 (common-lisp:defun enable-add-on
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-name add-on-request)
   (common-lisp:declare (common-lisp:ignorable resource-name add-on-request))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-enable-add-on-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "EnableAddOn"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'enable-add-on))
(common-lisp:progn
 (common-lisp:defun export-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-snapshot-name)
   (common-lisp:declare (common-lisp:ignorable source-snapshot-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-export-snapshot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ExportSnapshot"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'export-snapshot))
(common-lisp:progn
 (common-lisp:defun get-active-names
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key page-token)
   (common-lisp:declare (common-lisp:ignorable page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-active-names-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetActiveNames"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-active-names))
(common-lisp:progn
 (common-lisp:defun get-alarms
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key alarm-name page-token
                     monitored-resource-name)
   (common-lisp:declare
    (common-lisp:ignorable alarm-name page-token monitored-resource-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-alarms-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetAlarms"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-alarms))
(common-lisp:progn
 (common-lisp:defun get-auto-snapshots
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-name)
   (common-lisp:declare (common-lisp:ignorable resource-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-auto-snapshots-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetAutoSnapshots"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-auto-snapshots))
(common-lisp:progn
 (common-lisp:defun get-blueprints
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key include-inactive page-token app-category)
   (common-lisp:declare
    (common-lisp:ignorable include-inactive page-token app-category))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-blueprints-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetBlueprints"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-blueprints))
(common-lisp:progn
 (common-lisp:defun get-bucket-access-keys
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket-name)
   (common-lisp:declare (common-lisp:ignorable bucket-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bucket-access-keys-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetBucketAccessKeys"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-bucket-access-keys))
(common-lisp:progn
 (common-lisp:defun get-bucket-bundles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key include-inactive)
   (common-lisp:declare (common-lisp:ignorable include-inactive))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bucket-bundles-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetBucketBundles"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-bucket-bundles))
(common-lisp:progn
 (common-lisp:defun get-bucket-metric-data
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket-name metric-name start-time
                     end-time period statistics unit)
   (common-lisp:declare
    (common-lisp:ignorable bucket-name metric-name start-time end-time period
     statistics unit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bucket-metric-data-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetBucketMetricData"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-bucket-metric-data))
(common-lisp:progn
 (common-lisp:defun get-buckets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket-name page-token
                     include-connected-resources)
   (common-lisp:declare
    (common-lisp:ignorable bucket-name page-token include-connected-resources))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-buckets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetBuckets"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-buckets))
(common-lisp:progn
 (common-lisp:defun get-bundles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key include-inactive page-token app-category)
   (common-lisp:declare
    (common-lisp:ignorable include-inactive page-token app-category))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bundles-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetBundles"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-bundles))
(common-lisp:progn
 (common-lisp:defun get-certificates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-statuses
                     include-certificate-details certificate-name page-token)
   (common-lisp:declare
    (common-lisp:ignorable certificate-statuses include-certificate-details
     certificate-name page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-certificates-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetCertificates"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-certificates))
(common-lisp:progn
 (common-lisp:defun get-cloud-formation-stack-records
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key page-token)
   (common-lisp:declare (common-lisp:ignorable page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-cloud-formation-stack-records-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetCloudFormationStackRecords"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-cloud-formation-stack-records))
(common-lisp:progn
 (common-lisp:defun get-contact-methods
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key protocols)
   (common-lisp:declare (common-lisp:ignorable protocols))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-contact-methods-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetContactMethods"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-contact-methods))
(common-lisp:progn
 (common-lisp:defun get-container-apimetadata ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'lightsail-request :method "POST" :path "/"
                                :operation "GetContainerAPIMetadata"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-container-apimetadata))
(common-lisp:progn
 (common-lisp:defun get-container-images
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-name)
   (common-lisp:declare (common-lisp:ignorable service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-container-images-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetContainerImages"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-container-images))
(common-lisp:progn
 (common-lisp:defun get-container-log
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-name container-name start-time
                     end-time filter-pattern page-token)
   (common-lisp:declare
    (common-lisp:ignorable service-name container-name start-time end-time
     filter-pattern page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-container-log-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetContainerLog"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-container-log))
(common-lisp:progn
 (common-lisp:defun get-container-service-deployments
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-name)
   (common-lisp:declare (common-lisp:ignorable service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-container-service-deployments-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetContainerServiceDeployments"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-container-service-deployments))
(common-lisp:progn
 (common-lisp:defun get-container-service-metric-data
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-name metric-name start-time
                     end-time period statistics)
   (common-lisp:declare
    (common-lisp:ignorable service-name metric-name start-time end-time period
     statistics))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-container-service-metric-data-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetContainerServiceMetricData"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-container-service-metric-data))
(common-lisp:progn
 (common-lisp:defun get-container-service-powers ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'lightsail-request :method "POST" :path "/"
                                :operation "GetContainerServicePowers"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-container-service-powers))
(common-lisp:progn
 (common-lisp:defun get-container-services
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-name)
   (common-lisp:declare (common-lisp:ignorable service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-container-services-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetContainerServices"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-container-services))
(common-lisp:progn
 (common-lisp:defun get-cost-estimate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-name start-time end-time)
   (common-lisp:declare
    (common-lisp:ignorable resource-name start-time end-time))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-cost-estimate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetCostEstimate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-cost-estimate))
(common-lisp:progn
 (common-lisp:defun get-disk
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key disk-name)
   (common-lisp:declare (common-lisp:ignorable disk-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-disk-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "GetDisk"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-disk))
(common-lisp:progn
 (common-lisp:defun get-disk-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key disk-snapshot-name)
   (common-lisp:declare (common-lisp:ignorable disk-snapshot-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-disk-snapshot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDiskSnapshot"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-disk-snapshot))
(common-lisp:progn
 (common-lisp:defun get-disk-snapshots
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key page-token)
   (common-lisp:declare (common-lisp:ignorable page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-disk-snapshots-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDiskSnapshots"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-disk-snapshots))
(common-lisp:progn
 (common-lisp:defun get-disks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key page-token)
   (common-lisp:declare (common-lisp:ignorable page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-disks-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "GetDisks"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-disks))
(common-lisp:progn
 (common-lisp:defun get-distribution-bundles ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'lightsail-request :method "POST" :path "/"
                                :operation "GetDistributionBundles"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-distribution-bundles))
(common-lisp:progn
 (common-lisp:defun get-distribution-latest-cache-reset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key distribution-name)
   (common-lisp:declare (common-lisp:ignorable distribution-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-distribution-latest-cache-reset-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDistributionLatestCacheReset"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-distribution-latest-cache-reset))
(common-lisp:progn
 (common-lisp:defun get-distribution-metric-data
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key distribution-name metric-name start-time
                     end-time period unit statistics)
   (common-lisp:declare
    (common-lisp:ignorable distribution-name metric-name start-time end-time
     period unit statistics))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-distribution-metric-data-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDistributionMetricData"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-distribution-metric-data))
(common-lisp:progn
 (common-lisp:defun get-distributions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key distribution-name page-token)
   (common-lisp:declare (common-lisp:ignorable distribution-name page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-distributions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDistributions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-distributions))
(common-lisp:progn
 (common-lisp:defun get-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name)
   (common-lisp:declare (common-lisp:ignorable domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-domain-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDomain"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-domain))
(common-lisp:progn
 (common-lisp:defun get-domains
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key page-token)
   (common-lisp:declare (common-lisp:ignorable page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-domains-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDomains"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-domains))
(common-lisp:progn
 (common-lisp:defun get-export-snapshot-records
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key page-token)
   (common-lisp:declare (common-lisp:ignorable page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-export-snapshot-records-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetExportSnapshotRecords"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-export-snapshot-records))
(common-lisp:progn
 (common-lisp:defun get-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-name)
   (common-lisp:declare (common-lisp:ignorable instance-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-instance-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetInstance"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-instance))
(common-lisp:progn
 (common-lisp:defun get-instance-access-details
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-name protocol)
   (common-lisp:declare (common-lisp:ignorable instance-name protocol))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-instance-access-details-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetInstanceAccessDetails"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-instance-access-details))
(common-lisp:progn
 (common-lisp:defun get-instance-metric-data
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-name metric-name period
                     start-time end-time unit statistics)
   (common-lisp:declare
    (common-lisp:ignorable instance-name metric-name period start-time end-time
     unit statistics))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-instance-metric-data-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetInstanceMetricData"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-instance-metric-data))
(common-lisp:progn
 (common-lisp:defun get-instance-port-states
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-name)
   (common-lisp:declare (common-lisp:ignorable instance-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-instance-port-states-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetInstancePortStates"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-instance-port-states))
(common-lisp:progn
 (common-lisp:defun get-instance-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-snapshot-name)
   (common-lisp:declare (common-lisp:ignorable instance-snapshot-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-instance-snapshot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetInstanceSnapshot"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-instance-snapshot))
(common-lisp:progn
 (common-lisp:defun get-instance-snapshots
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key page-token)
   (common-lisp:declare (common-lisp:ignorable page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-instance-snapshots-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetInstanceSnapshots"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-instance-snapshots))
(common-lisp:progn
 (common-lisp:defun get-instance-state
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-name)
   (common-lisp:declare (common-lisp:ignorable instance-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-instance-state-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetInstanceState"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-instance-state))
(common-lisp:progn
 (common-lisp:defun get-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key page-token)
   (common-lisp:declare (common-lisp:ignorable page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-instances-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetInstances"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-instances))
(common-lisp:progn
 (common-lisp:defun get-key-pair
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-pair-name)
   (common-lisp:declare (common-lisp:ignorable key-pair-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-key-pair-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetKeyPair"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-key-pair))
(common-lisp:progn
 (common-lisp:defun get-key-pairs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key page-token include-default-key-pair)
   (common-lisp:declare
    (common-lisp:ignorable page-token include-default-key-pair))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-key-pairs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetKeyPairs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-key-pairs))
(common-lisp:progn
 (common-lisp:defun get-load-balancer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name)
   (common-lisp:declare (common-lisp:ignorable load-balancer-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-load-balancer-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetLoadBalancer"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-load-balancer))
(common-lisp:progn
 (common-lisp:defun get-load-balancer-metric-data
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name metric-name period
                     start-time end-time unit statistics)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-name metric-name period start-time
     end-time unit statistics))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-load-balancer-metric-data-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetLoadBalancerMetricData"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-load-balancer-metric-data))
(common-lisp:progn
 (common-lisp:defun get-load-balancer-tls-certificates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name)
   (common-lisp:declare (common-lisp:ignorable load-balancer-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-load-balancer-tls-certificates-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetLoadBalancerTlsCertificates"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-load-balancer-tls-certificates))
(common-lisp:progn
 (common-lisp:defun get-load-balancer-tls-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key page-token)
   (common-lisp:declare (common-lisp:ignorable page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-load-balancer-tls-policies-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetLoadBalancerTlsPolicies"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-load-balancer-tls-policies))
(common-lisp:progn
 (common-lisp:defun get-load-balancers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key page-token)
   (common-lisp:declare (common-lisp:ignorable page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-load-balancers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetLoadBalancers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-load-balancers))
(common-lisp:progn
 (common-lisp:defun get-operation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key operation-id)
   (common-lisp:declare (common-lisp:ignorable operation-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-operation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetOperation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-operation))
(common-lisp:progn
 (common-lisp:defun get-operations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key page-token)
   (common-lisp:declare (common-lisp:ignorable page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-operations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetOperations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-operations))
(common-lisp:progn
 (common-lisp:defun get-operations-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-name page-token)
   (common-lisp:declare (common-lisp:ignorable resource-name page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-operations-for-resource-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetOperationsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-operations-for-resource))
(common-lisp:progn
 (common-lisp:defun get-regions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key include-availability-zones
                     include-relational-database-availability-zones)
   (common-lisp:declare
    (common-lisp:ignorable include-availability-zones
     include-relational-database-availability-zones))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-regions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetRegions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-regions))
(common-lisp:progn
 (common-lisp:defun get-relational-database
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key relational-database-name)
   (common-lisp:declare (common-lisp:ignorable relational-database-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-relational-database-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetRelationalDatabase"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-relational-database))
(common-lisp:progn
 (common-lisp:defun get-relational-database-blueprints
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key page-token)
   (common-lisp:declare (common-lisp:ignorable page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-relational-database-blueprints-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetRelationalDatabaseBlueprints"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-relational-database-blueprints))
(common-lisp:progn
 (common-lisp:defun get-relational-database-bundles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key page-token include-inactive)
   (common-lisp:declare (common-lisp:ignorable page-token include-inactive))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-relational-database-bundles-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetRelationalDatabaseBundles"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-relational-database-bundles))
(common-lisp:progn
 (common-lisp:defun get-relational-database-events
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key relational-database-name
                     duration-in-minutes page-token)
   (common-lisp:declare
    (common-lisp:ignorable relational-database-name duration-in-minutes
     page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-relational-database-events-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetRelationalDatabaseEvents"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-relational-database-events))
(common-lisp:progn
 (common-lisp:defun get-relational-database-log-events
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key relational-database-name log-stream-name
                     start-time end-time start-from-head page-token)
   (common-lisp:declare
    (common-lisp:ignorable relational-database-name log-stream-name start-time
     end-time start-from-head page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-relational-database-log-events-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetRelationalDatabaseLogEvents"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-relational-database-log-events))
(common-lisp:progn
 (common-lisp:defun get-relational-database-log-streams
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key relational-database-name)
   (common-lisp:declare (common-lisp:ignorable relational-database-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-relational-database-log-streams-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetRelationalDatabaseLogStreams"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-relational-database-log-streams))
(common-lisp:progn
 (common-lisp:defun get-relational-database-master-user-password
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key relational-database-name
                     password-version)
   (common-lisp:declare
    (common-lisp:ignorable relational-database-name password-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-relational-database-master-user-password-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetRelationalDatabaseMasterUserPassword"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-relational-database-master-user-password))
(common-lisp:progn
 (common-lisp:defun get-relational-database-metric-data
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key relational-database-name metric-name
                     period start-time end-time unit statistics)
   (common-lisp:declare
    (common-lisp:ignorable relational-database-name metric-name period
     start-time end-time unit statistics))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-relational-database-metric-data-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetRelationalDatabaseMetricData"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-relational-database-metric-data))
(common-lisp:progn
 (common-lisp:defun get-relational-database-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key relational-database-name page-token)
   (common-lisp:declare
    (common-lisp:ignorable relational-database-name page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-relational-database-parameters-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetRelationalDatabaseParameters"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-relational-database-parameters))
(common-lisp:progn
 (common-lisp:defun get-relational-database-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key relational-database-snapshot-name)
   (common-lisp:declare
    (common-lisp:ignorable relational-database-snapshot-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-relational-database-snapshot-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetRelationalDatabaseSnapshot"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-relational-database-snapshot))
(common-lisp:progn
 (common-lisp:defun get-relational-database-snapshots
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key page-token)
   (common-lisp:declare (common-lisp:ignorable page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-relational-database-snapshots-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetRelationalDatabaseSnapshots"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-relational-database-snapshots))
(common-lisp:progn
 (common-lisp:defun get-relational-databases
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key page-token)
   (common-lisp:declare (common-lisp:ignorable page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-relational-databases-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetRelationalDatabases"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-relational-databases))
(common-lisp:progn
 (common-lisp:defun get-setup-history
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-name page-token)
   (common-lisp:declare (common-lisp:ignorable resource-name page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-setup-history-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetSetupHistory"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-setup-history))
(common-lisp:progn
 (common-lisp:defun get-static-ip
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key static-ip-name)
   (common-lisp:declare (common-lisp:ignorable static-ip-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-static-ip-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetStaticIp"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-static-ip))
(common-lisp:progn
 (common-lisp:defun get-static-ips
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key page-token)
   (common-lisp:declare (common-lisp:ignorable page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-static-ips-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetStaticIps"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-static-ips))
(common-lisp:progn
 (common-lisp:defun import-key-pair
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-pair-name public-key-base64)
   (common-lisp:declare
    (common-lisp:ignorable key-pair-name public-key-base64))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-import-key-pair-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ImportKeyPair"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'import-key-pair))
(common-lisp:progn
 (common-lisp:defun is-vpc-peered ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'lightsail-request :method "POST" :path "/"
                                :operation "IsVpcPeered"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'is-vpc-peered))
(common-lisp:progn
 (common-lisp:defun open-instance-public-ports
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key port-info instance-name)
   (common-lisp:declare (common-lisp:ignorable port-info instance-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-open-instance-public-ports-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "OpenInstancePublicPorts"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'open-instance-public-ports))
(common-lisp:progn
 (common-lisp:defun peer-vpc ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'lightsail-request :method "POST" :path "/"
                                :operation "PeerVpc"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'peer-vpc))
(common-lisp:progn
 (common-lisp:defun put-alarm
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key alarm-name metric-name
                     monitored-resource-name comparison-operator threshold
                     evaluation-periods datapoints-to-alarm treat-missing-data
                     contact-protocols notification-triggers
                     notification-enabled)
   (common-lisp:declare
    (common-lisp:ignorable alarm-name metric-name monitored-resource-name
     comparison-operator threshold evaluation-periods datapoints-to-alarm
     treat-missing-data contact-protocols notification-triggers
     notification-enabled))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-alarm-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "PutAlarm"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-alarm))
(common-lisp:progn
 (common-lisp:defun put-instance-public-ports
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key port-infos instance-name)
   (common-lisp:declare (common-lisp:ignorable port-infos instance-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-instance-public-ports-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutInstancePublicPorts"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-instance-public-ports))
(common-lisp:progn
 (common-lisp:defun reboot-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-name)
   (common-lisp:declare (common-lisp:ignorable instance-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reboot-instance-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RebootInstance"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'reboot-instance))
(common-lisp:progn
 (common-lisp:defun reboot-relational-database
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key relational-database-name)
   (common-lisp:declare (common-lisp:ignorable relational-database-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-reboot-relational-database-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RebootRelationalDatabase"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'reboot-relational-database))
(common-lisp:progn
 (common-lisp:defun register-container-image
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-name label digest)
   (common-lisp:declare (common-lisp:ignorable service-name label digest))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-container-image-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RegisterContainerImage"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'register-container-image))
(common-lisp:progn
 (common-lisp:defun release-static-ip
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key static-ip-name)
   (common-lisp:declare (common-lisp:ignorable static-ip-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-release-static-ip-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ReleaseStaticIp"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'release-static-ip))
(common-lisp:progn
 (common-lisp:defun reset-distribution-cache
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key distribution-name)
   (common-lisp:declare (common-lisp:ignorable distribution-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reset-distribution-cache-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ResetDistributionCache"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'reset-distribution-cache))
(common-lisp:progn
 (common-lisp:defun send-contact-method-verification
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key protocol)
   (common-lisp:declare (common-lisp:ignorable protocol))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-send-contact-method-verification-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SendContactMethodVerification"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'send-contact-method-verification))
(common-lisp:progn
 (common-lisp:defun set-ip-address-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-type resource-name
                     ip-address-type)
   (common-lisp:declare
    (common-lisp:ignorable resource-type resource-name ip-address-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-set-ip-address-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SetIpAddressType"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'set-ip-address-type))
(common-lisp:progn
 (common-lisp:defun set-resource-access-for-bucket
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-name bucket-name access)
   (common-lisp:declare
    (common-lisp:ignorable resource-name bucket-name access))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-set-resource-access-for-bucket-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SetResourceAccessForBucket"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'set-resource-access-for-bucket))
(common-lisp:progn
 (common-lisp:defun setup-instance-https
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-name email-address domain-names
                     certificate-provider)
   (common-lisp:declare
    (common-lisp:ignorable instance-name email-address domain-names
     certificate-provider))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-setup-instance-https-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SetupInstanceHttps"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'setup-instance-https))
(common-lisp:progn
 (common-lisp:defun start-guisession
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-name)
   (common-lisp:declare (common-lisp:ignorable resource-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-guisession-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartGUISession"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-guisession))
(common-lisp:progn
 (common-lisp:defun start-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-name)
   (common-lisp:declare (common-lisp:ignorable instance-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-instance-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartInstance"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-instance))
(common-lisp:progn
 (common-lisp:defun start-relational-database
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key relational-database-name)
   (common-lisp:declare (common-lisp:ignorable relational-database-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-relational-database-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartRelationalDatabase"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-relational-database))
(common-lisp:progn
 (common-lisp:defun stop-guisession
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-name)
   (common-lisp:declare (common-lisp:ignorable resource-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-guisession-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopGUISession"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'stop-guisession))
(common-lisp:progn
 (common-lisp:defun stop-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-name force)
   (common-lisp:declare (common-lisp:ignorable instance-name force))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-instance-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopInstance"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'stop-instance))
(common-lisp:progn
 (common-lisp:defun stop-relational-database
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key relational-database-name
                     relational-database-snapshot-name)
   (common-lisp:declare
    (common-lisp:ignorable relational-database-name
     relational-database-snapshot-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-relational-database-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopRelationalDatabase"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'stop-relational-database))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-name resource-arn tags)
   (common-lisp:declare
    (common-lisp:ignorable resource-name resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun test-alarm
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key alarm-name state)
   (common-lisp:declare (common-lisp:ignorable alarm-name state))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-test-alarm-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TestAlarm"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'test-alarm))
(common-lisp:progn
 (common-lisp:defun unpeer-vpc ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'lightsail-request :method "POST" :path "/"
                                :operation "UnpeerVpc"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'unpeer-vpc))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-name resource-arn tag-keys)
   (common-lisp:declare
    (common-lisp:ignorable resource-name resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-bucket
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket-name access-rules versioning
                     readonly-access-accounts access-log-config)
   (common-lisp:declare
    (common-lisp:ignorable bucket-name access-rules versioning
     readonly-access-accounts access-log-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-bucket-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateBucket"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-bucket))
(common-lisp:progn
 (common-lisp:defun update-bucket-bundle
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket-name bundle-id)
   (common-lisp:declare (common-lisp:ignorable bucket-name bundle-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-bucket-bundle-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateBucketBundle"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-bucket-bundle))
(common-lisp:progn
 (common-lisp:defun update-container-service
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-name power scale is-disabled
                     public-domain-names private-registry-access)
   (common-lisp:declare
    (common-lisp:ignorable service-name power scale is-disabled
     public-domain-names private-registry-access))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-container-service-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateContainerService"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-container-service))
(common-lisp:progn
 (common-lisp:defun update-distribution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key distribution-name origin
                     default-cache-behavior cache-behavior-settings
                     cache-behaviors is-enabled)
   (common-lisp:declare
    (common-lisp:ignorable distribution-name origin default-cache-behavior
     cache-behavior-settings cache-behaviors is-enabled))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-distribution-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateDistribution"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-distribution))
(common-lisp:progn
 (common-lisp:defun update-distribution-bundle
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key distribution-name bundle-id)
   (common-lisp:declare (common-lisp:ignorable distribution-name bundle-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-distribution-bundle-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateDistributionBundle"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-distribution-bundle))
(common-lisp:progn
 (common-lisp:defun update-domain-entry
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name domain-entry)
   (common-lisp:declare (common-lisp:ignorable domain-name domain-entry))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-domain-entry-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateDomainEntry"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-domain-entry))
(common-lisp:progn
 (common-lisp:defun update-instance-metadata-options
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-name http-tokens http-endpoint
                     http-put-response-hop-limit http-protocol-ipv6)
   (common-lisp:declare
    (common-lisp:ignorable instance-name http-tokens http-endpoint
     http-put-response-hop-limit http-protocol-ipv6))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-instance-metadata-options-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateInstanceMetadataOptions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-instance-metadata-options))
(common-lisp:progn
 (common-lisp:defun update-load-balancer-attribute
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name attribute-name
                     attribute-value)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-name attribute-name attribute-value))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-load-balancer-attribute-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateLoadBalancerAttribute"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-load-balancer-attribute))
(common-lisp:progn
 (common-lisp:defun update-relational-database
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key relational-database-name
                     master-user-password rotate-master-user-password
                     preferred-backup-window preferred-maintenance-window
                     enable-backup-retention disable-backup-retention
                     publicly-accessible apply-immediately
                     ca-certificate-identifier
                     relational-database-blueprint-id)
   (common-lisp:declare
    (common-lisp:ignorable relational-database-name master-user-password
     rotate-master-user-password preferred-backup-window
     preferred-maintenance-window enable-backup-retention
     disable-backup-retention publicly-accessible apply-immediately
     ca-certificate-identifier relational-database-blueprint-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-relational-database-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateRelationalDatabase"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-relational-database))
(common-lisp:progn
 (common-lisp:defun update-relational-database-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key relational-database-name parameters)
   (common-lisp:declare
    (common-lisp:ignorable relational-database-name parameters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-relational-database-parameters-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateRelationalDatabaseParameters"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-relational-database-parameters))
