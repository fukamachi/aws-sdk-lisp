;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/connectcases/api
  (:use)
  (:nicknames #:aws/connectcases)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/connectcases/api)
(common-lisp:progn
 (common-lisp:define-condition connectcases-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'connectcases-error))
(common-lisp:progn
 (common-lisp:defclass connectcases-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "connectcases" :api-version
                        "2022-10-03" :host-prefix "cases" :signing-name "cases"
                        :global-host common-lisp:nil))
 (common-lisp:export 'connectcases-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (connectcases-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:deftype association-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass audit-event common-lisp:nil
                       ((event-id :initarg :event-id :initform
                         (common-lisp:error ":eventid is required") :type
                         (common-lisp:or audit-event-id common-lisp:null)
                         :accessor struct-shape-audit-event-event-id :shape
                         "AuditEventId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (fields :initarg :fields :initform
                         (common-lisp:error ":fields is required") :type
                         (common-lisp:or audit-event-field-list
                                         common-lisp:null)
                         :accessor struct-shape-audit-event-fields :shape
                         "AuditEventFieldList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (performed-by :initarg :performed-by :initform
                         common-lisp:nil :type
                         (common-lisp:or audit-event-performed-by
                                         common-lisp:null)
                         :accessor struct-shape-audit-event-performed-by :shape
                         "AuditEventPerformedBy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (performed-time :initarg :performed-time :initform
                         (common-lisp:error ":performedtime is required") :type
                         (common-lisp:or audit-event-date-time
                                         common-lisp:null)
                         :accessor struct-shape-audit-event-performed-time
                         :shape "AuditEventDateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (related-item-type :initarg :related-item-type
                         :initform common-lisp:nil :type
                         (common-lisp:or related-item-type common-lisp:null)
                         :accessor struct-shape-audit-event-related-item-type
                         :shape "RelatedItemType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or audit-event-type common-lisp:null)
                         :accessor struct-shape-audit-event-type :shape
                         "AuditEventType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-audit-event
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'audit-event
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'audit-event 'make-audit-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input audit-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input audit-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "eventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fields))
      (common-lisp:list
       (common-lisp:cons "fields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'performed-by))
      (common-lisp:list
       (common-lisp:cons "performedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'performed-time))
      (common-lisp:list
       (common-lisp:cons "performedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'related-item-type))
      (common-lisp:list
       (common-lisp:cons "relatedItemType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input audit-event))
   common-lisp:nil))
(common-lisp:deftype audit-event-date-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass audit-event-field common-lisp:nil
                       ((event-field-id :initarg :event-field-id :initform
                         (common-lisp:error ":eventfieldid is required") :type
                         (common-lisp:or audit-event-field-id common-lisp:null)
                         :accessor
                         struct-shape-audit-event-field-event-field-id :shape
                         "AuditEventFieldId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (new-value :initarg :new-value :initform
                         (common-lisp:error ":newvalue is required") :type
                         (common-lisp:or audit-event-field-value-union
                                         common-lisp:null)
                         :accessor struct-shape-audit-event-field-new-value
                         :shape "AuditEventFieldValueUnion" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (old-value :initarg :old-value :initform
                         common-lisp:nil :type
                         (common-lisp:or audit-event-field-value-union
                                         common-lisp:null)
                         :accessor struct-shape-audit-event-field-old-value
                         :shape "AuditEventFieldValueUnion" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-audit-event-field
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'audit-event-field
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'audit-event-field 'make-audit-event-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input audit-event-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input audit-event-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-field-id))
      (common-lisp:list
       (common-lisp:cons "eventFieldId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-value))
      (common-lisp:list
       (common-lisp:cons "newValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'old-value))
      (common-lisp:list
       (common-lisp:cons "oldValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input audit-event-field))
   common-lisp:nil))
(common-lisp:deftype audit-event-field-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype audit-event-field-list ()
   '(trivial-types:proper-list audit-event-field))
 (common-lisp:defun make-audit-event-field-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list audit-event-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass audit-event-field-value-union common-lisp:nil
                       ((boolean-value :initarg :boolean-value :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-audit-event-field-value-union-boolean-value
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (double-value :initarg :double-value :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-audit-event-field-value-union-double-value
                         :shape "Double" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (empty-value :initarg :empty-value :initform
                         common-lisp:nil :type
                         (common-lisp:or empty-field-value common-lisp:null)
                         :accessor
                         struct-shape-audit-event-field-value-union-empty-value
                         :shape "EmptyFieldValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (string-value :initarg :string-value :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          audit-event-field-value-union-string-value-string
                          common-lisp:null)
                         :accessor
                         struct-shape-audit-event-field-value-union-string-value
                         :shape "AuditEventFieldValueUnionStringValueString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (user-arn-value :initarg :user-arn-value :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-audit-event-field-value-union-user-arn-value
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-audit-event-field-value-union
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'audit-event-field-value-union
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'audit-event-field-value-union
                    'make-audit-event-field-value-union))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          audit-event-field-value-union))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          audit-event-field-value-union))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'boolean-value))
      (common-lisp:list
       (common-lisp:cons "booleanValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'double-value))
      (common-lisp:list
       (common-lisp:cons "doubleValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'empty-value))
      (common-lisp:list
       (common-lisp:cons "emptyValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-value))
      (common-lisp:list
       (common-lisp:cons "stringValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-arn-value))
      (common-lisp:list
       (common-lisp:cons "userArnValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          audit-event-field-value-union))
   common-lisp:nil))
(common-lisp:deftype audit-event-field-value-union-string-value-string ()
  'common-lisp:string)
(common-lisp:deftype audit-event-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass audit-event-performed-by common-lisp:nil
                       ((iam-principal-arn :initarg :iam-principal-arn
                         :initform
                         (common-lisp:error ":iamprincipalarn is required")
                         :type
                         (common-lisp:or iam-principal-arn common-lisp:null)
                         :accessor
                         struct-shape-audit-event-performed-by-iam-principal-arn
                         :shape "IamPrincipalArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user :initarg :user :initform common-lisp:nil :type
                         (common-lisp:or user-union common-lisp:null) :accessor
                         struct-shape-audit-event-performed-by-user :shape
                         "UserUnion" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-audit-event-performed-by
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'audit-event-performed-by
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'audit-event-performed-by 'make-audit-event-performed-by))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          audit-event-performed-by))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          audit-event-performed-by))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-principal-arn))
      (common-lisp:list
       (common-lisp:cons "iamPrincipalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user))
      (common-lisp:list
       (common-lisp:cons "user"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          audit-event-performed-by))
   common-lisp:nil))
(common-lisp:deftype audit-event-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass basic-layout common-lisp:nil
                       ((more-info :initarg :more-info :initform
                         common-lisp:nil :type
                         (common-lisp:or layout-sections common-lisp:null)
                         :accessor struct-shape-basic-layout-more-info :shape
                         "LayoutSections" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (top-panel :initarg :top-panel :initform
                         common-lisp:nil :type
                         (common-lisp:or layout-sections common-lisp:null)
                         :accessor struct-shape-basic-layout-top-panel :shape
                         "LayoutSections" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-basic-layout
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'basic-layout
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'basic-layout 'make-basic-layout))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input basic-layout))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input basic-layout))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'more-info))
      (common-lisp:list
       (common-lisp:cons "moreInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'top-panel))
      (common-lisp:list
       (common-lisp:cons "topPanel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input basic-layout))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-get-field-identifier-list ()
   '(trivial-types:proper-list field-identifier))
 (common-lisp:defun make-batch-get-field-identifier-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list field-identifier))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-get-field-request common-lisp:nil
                       ((domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-batch-get-field-request-domain-id :shape
                         "DomainId" :location "uri" :location-name "domainId")
                        (fields :initarg :fields :initform
                         (common-lisp:error ":fields is required") :type
                         (common-lisp:or batch-get-field-identifier-list
                                         common-lisp:null)
                         :accessor struct-shape-batch-get-field-request-fields
                         :shape "BatchGetFieldIdentifierList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-field-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-get-field-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-field-request 'make-batch-get-field-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-field-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-field-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fields))
      (common-lisp:list
       (common-lisp:cons "fields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-field-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-field-response common-lisp:nil
                       ((errors :initarg :errors :initform
                         (common-lisp:error ":errors is required") :type
                         (common-lisp:or batch-get-field-response-errors-list
                                         common-lisp:null)
                         :accessor struct-shape-batch-get-field-response-errors
                         :shape "BatchGetFieldResponseErrorsList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (fields :initarg :fields :initform
                         (common-lisp:error ":fields is required") :type
                         (common-lisp:or batch-get-field-response-fields-list
                                         common-lisp:null)
                         :accessor struct-shape-batch-get-field-response-fields
                         :shape "BatchGetFieldResponseFieldsList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-field-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-get-field-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-field-response 'make-batch-get-field-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-field-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-field-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fields))
      (common-lisp:list
       (common-lisp:cons "fields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-field-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-get-field-response-errors-list ()
   '(trivial-types:proper-list field-error))
 (common-lisp:defun make-batch-get-field-response-errors-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list field-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype batch-get-field-response-fields-list ()
   '(trivial-types:proper-list get-field-response))
 (common-lisp:defun make-batch-get-field-response-fields-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list get-field-response))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-put-field-options-request common-lisp:nil
                       ((domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-batch-put-field-options-request-domain-id
                         :shape "DomainId" :location "uri" :location-name
                         "domainId")
                        (field-id :initarg :field-id :initform
                         (common-lisp:error ":fieldid is required") :type
                         (common-lisp:or field-id common-lisp:null) :accessor
                         struct-shape-batch-put-field-options-request-field-id
                         :shape "FieldId" :location "uri" :location-name
                         "fieldId")
                        (options :initarg :options :initform
                         (common-lisp:error ":options is required") :type
                         (common-lisp:or
                          batch-put-field-options-request-options-list
                          common-lisp:null)
                         :accessor
                         struct-shape-batch-put-field-options-request-options
                         :shape "BatchPutFieldOptionsRequestOptionsList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-put-field-options-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-put-field-options-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-put-field-options-request
                    'make-batch-put-field-options-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-field-options-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-field-options-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-field-options-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-put-field-options-request-options-list ()
   '(trivial-types:proper-list field-option))
 (common-lisp:defun make-batch-put-field-options-request-options-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list field-option))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-put-field-options-response common-lisp:nil
                       ((errors :initarg :errors :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          batch-put-field-options-response-errors-list
                          common-lisp:null)
                         :accessor
                         struct-shape-batch-put-field-options-response-errors
                         :shape "BatchPutFieldOptionsResponseErrorsList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-put-field-options-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-put-field-options-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-put-field-options-response
                    'make-batch-put-field-options-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-field-options-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-field-options-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-field-options-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-put-field-options-response-errors-list ()
   '(trivial-types:proper-list field-option-error))
 (common-lisp:defun make-batch-put-field-options-response-errors-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list field-option-error))
   aws-sdk/generator/shape::members))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype case-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass case-event-included-data common-lisp:nil
                       ((fields :initarg :fields :initform
                         (common-lisp:error ":fields is required") :type
                         (common-lisp:or case-event-included-data-fields-list
                                         common-lisp:null)
                         :accessor struct-shape-case-event-included-data-fields
                         :shape "CaseEventIncludedDataFieldsList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-case-event-included-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'case-event-included-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'case-event-included-data 'make-case-event-included-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          case-event-included-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          case-event-included-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fields))
      (common-lisp:list
       (common-lisp:cons "fields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          case-event-included-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype case-event-included-data-fields-list ()
   '(trivial-types:proper-list field-identifier))
 (common-lisp:defun make-case-event-included-data-fields-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list field-identifier))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass case-filter common-lisp:nil
                       ((and-all :initarg :and-all :initform common-lisp:nil
                         :type
                         (common-lisp:or case-filter-and-all-list
                                         common-lisp:null)
                         :accessor struct-shape-case-filter-and-all :shape
                         "CaseFilterAndAllList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (field :initarg :field :initform common-lisp:nil :type
                         (common-lisp:or field-filter common-lisp:null)
                         :accessor struct-shape-case-filter-field :shape
                         "FieldFilter" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (not :initarg :not :initform common-lisp:nil :type
                         (common-lisp:or case-filter common-lisp:null)
                         :accessor struct-shape-case-filter-not :shape
                         "CaseFilter" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (or-all :initarg :or-all :initform common-lisp:nil
                         :type
                         (common-lisp:or case-filter-or-all-list
                                         common-lisp:null)
                         :accessor struct-shape-case-filter-or-all :shape
                         "CaseFilterOrAllList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-case-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'case-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'case-filter 'make-case-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input case-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input case-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'and-all))
      (common-lisp:list
       (common-lisp:cons "andAll"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field))
      (common-lisp:list
       (common-lisp:cons "field"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not))
      (common-lisp:list
       (common-lisp:cons "not"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'or-all))
      (common-lisp:list
       (common-lisp:cons "orAll"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input case-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype case-filter-and-all-list ()
   '(trivial-types:proper-list case-filter))
 (common-lisp:defun make-case-filter-and-all-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list case-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype case-filter-or-all-list ()
   '(trivial-types:proper-list case-filter))
 (common-lisp:defun make-case-filter-or-all-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list case-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype case-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass case-summary common-lisp:nil
                       ((case-id :initarg :case-id :initform
                         (common-lisp:error ":caseid is required") :type
                         (common-lisp:or case-id common-lisp:null) :accessor
                         struct-shape-case-summary-case-id :shape "CaseId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (template-id :initarg :template-id :initform
                         (common-lisp:error ":templateid is required") :type
                         (common-lisp:or template-id common-lisp:null)
                         :accessor struct-shape-case-summary-template-id :shape
                         "TemplateId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-case-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'case-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'case-summary 'make-case-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input case-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input case-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'case-id))
      (common-lisp:list
       (common-lisp:cons "caseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-id))
      (common-lisp:list
       (common-lisp:cons "templateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input case-summary))
   common-lisp:nil))
(common-lisp:deftype channel () 'common-lisp:string)
(common-lisp:deftype comment-body () 'common-lisp:string)
(common-lisp:deftype comment-body-text-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass comment-content common-lisp:nil
                       ((body :initarg :body :initform
                         (common-lisp:error ":body is required") :type
                         (common-lisp:or comment-body common-lisp:null)
                         :accessor struct-shape-comment-content-body :shape
                         "CommentBody" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (content-type :initarg :content-type :initform
                         (common-lisp:error ":contenttype is required") :type
                         (common-lisp:or comment-body-text-type
                                         common-lisp:null)
                         :accessor struct-shape-comment-content-content-type
                         :shape "CommentBodyTextType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-comment-content
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'comment-content
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'comment-content 'make-comment-content))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input comment-content))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input comment-content))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'body))
      (common-lisp:list
       (common-lisp:cons "body"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "contentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input comment-content))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass comment-filter common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-comment-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'comment-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'comment-filter 'make-comment-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input comment-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input comment-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input comment-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (connectcases-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:deftype connected-to-system-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass contact common-lisp:nil
                       ((contact-arn :initarg :contact-arn :initform
                         (common-lisp:error ":contactarn is required") :type
                         (common-lisp:or contact-arn common-lisp:null)
                         :accessor struct-shape-contact-contact-arn :shape
                         "ContactArn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-contact
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'contact
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'contact 'make-contact))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input contact))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input contact))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-arn))
      (common-lisp:list
       (common-lisp:cons "contactArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input contact))
   common-lisp:nil))
(common-lisp:deftype contact-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass contact-content common-lisp:nil
                       ((channel :initarg :channel :initform
                         (common-lisp:error ":channel is required") :type
                         (common-lisp:or channel common-lisp:null) :accessor
                         struct-shape-contact-content-channel :shape "Channel"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (connected-to-system-time :initarg
                         :connected-to-system-time :initform
                         (common-lisp:error
                          ":connectedtosystemtime is required")
                         :type
                         (common-lisp:or connected-to-system-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-contact-content-connected-to-system-time
                         :shape "ConnectedToSystemTime" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (contact-arn :initarg :contact-arn :initform
                         (common-lisp:error ":contactarn is required") :type
                         (common-lisp:or contact-arn common-lisp:null)
                         :accessor struct-shape-contact-content-contact-arn
                         :shape "ContactArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-contact-content
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'contact-content
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'contact-content 'make-contact-content))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input contact-content))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input contact-content))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel))
      (common-lisp:list
       (common-lisp:cons "channel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connected-to-system-time))
      (common-lisp:list
       (common-lisp:cons "connectedToSystemTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-arn))
      (common-lisp:list
       (common-lisp:cons "contactArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input contact-content))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass contact-filter common-lisp:nil
                       ((channel :initarg :channel :initform common-lisp:nil
                         :type
                         (common-lisp:or contact-filter-channel-list
                                         common-lisp:null)
                         :accessor struct-shape-contact-filter-channel :shape
                         "ContactFilterChannelList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (contact-arn :initarg :contact-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or contact-arn common-lisp:null)
                         :accessor struct-shape-contact-filter-contact-arn
                         :shape "ContactArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-contact-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'contact-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'contact-filter 'make-contact-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input contact-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input contact-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel))
      (common-lisp:list
       (common-lisp:cons "channel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-arn))
      (common-lisp:list
       (common-lisp:cons "contactArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input contact-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype contact-filter-channel-list ()
   '(trivial-types:proper-list channel))
 (common-lisp:defun make-contact-filter-channel-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list channel))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass create-case-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          create-case-request-client-token-string
                          common-lisp:null)
                         :accessor
                         struct-shape-create-case-request-client-token :shape
                         "CreateCaseRequestClientTokenString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-create-case-request-domain-id :shape
                         "DomainId" :location "uri" :location-name "domainId")
                        (fields :initarg :fields :initform
                         (common-lisp:error ":fields is required") :type
                         (common-lisp:or create-case-request-fields-list
                                         common-lisp:null)
                         :accessor struct-shape-create-case-request-fields
                         :shape "CreateCaseRequestFieldsList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (performed-by :initarg :performed-by :initform
                         common-lisp:nil :type
                         (common-lisp:or user-union common-lisp:null) :accessor
                         struct-shape-create-case-request-performed-by :shape
                         "UserUnion" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (template-id :initarg :template-id :initform
                         (common-lisp:error ":templateid is required") :type
                         (common-lisp:or template-id common-lisp:null)
                         :accessor struct-shape-create-case-request-template-id
                         :shape "TemplateId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-case-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-case-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-case-request 'make-create-case-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-case-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-case-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fields))
      (common-lisp:list
       (common-lisp:cons "fields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'performed-by))
      (common-lisp:list
       (common-lisp:cons "performedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-id))
      (common-lisp:list
       (common-lisp:cons "templateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-case-request))
   common-lisp:nil))
(common-lisp:deftype create-case-request-client-token-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype create-case-request-fields-list ()
   '(trivial-types:proper-list field-value))
 (common-lisp:defun make-create-case-request-fields-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list field-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass create-case-response common-lisp:nil
                       ((case-arn :initarg :case-arn :initform
                         (common-lisp:error ":casearn is required") :type
                         (common-lisp:or case-arn common-lisp:null) :accessor
                         struct-shape-create-case-response-case-arn :shape
                         "CaseArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (case-id :initarg :case-id :initform
                         (common-lisp:error ":caseid is required") :type
                         (common-lisp:or case-id common-lisp:null) :accessor
                         struct-shape-create-case-response-case-id :shape
                         "CaseId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-case-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-case-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-case-response 'make-create-case-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-case-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-case-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'case-arn))
      (common-lisp:list
       (common-lisp:cons "caseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'case-id))
      (common-lisp:list
       (common-lisp:cons "caseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-case-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-domain-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor struct-shape-create-domain-request-name
                         :shape "DomainName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-domain-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-domain-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-domain-request 'make-create-domain-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-domain-response common-lisp:nil
                       ((domain-arn :initarg :domain-arn :initform
                         (common-lisp:error ":domainarn is required") :type
                         (common-lisp:or domain-arn common-lisp:null) :accessor
                         struct-shape-create-domain-response-domain-arn :shape
                         "DomainArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-create-domain-response-domain-id :shape
                         "DomainId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (domain-status :initarg :domain-status :initform
                         (common-lisp:error ":domainstatus is required") :type
                         (common-lisp:or domain-status common-lisp:null)
                         :accessor
                         struct-shape-create-domain-response-domain-status
                         :shape "DomainStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-domain-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-domain-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-domain-response 'make-create-domain-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-arn))
      (common-lisp:list
       (common-lisp:cons "domainArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-status))
      (common-lisp:list
       (common-lisp:cons "domainStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-field-request common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or field-description common-lisp:null)
                         :accessor
                         struct-shape-create-field-request-description :shape
                         "FieldDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-create-field-request-domain-id :shape
                         "DomainId" :location "uri" :location-name "domainId")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or field-name common-lisp:null) :accessor
                         struct-shape-create-field-request-name :shape
                         "FieldName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or field-type common-lisp:null) :accessor
                         struct-shape-create-field-request-type :shape
                         "FieldType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-field-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-field-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-field-request 'make-create-field-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-field-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-field-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-field-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-field-response common-lisp:nil
                       ((field-arn :initarg :field-arn :initform
                         (common-lisp:error ":fieldarn is required") :type
                         (common-lisp:or field-arn common-lisp:null) :accessor
                         struct-shape-create-field-response-field-arn :shape
                         "FieldArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (field-id :initarg :field-id :initform
                         (common-lisp:error ":fieldid is required") :type
                         (common-lisp:or field-id common-lisp:null) :accessor
                         struct-shape-create-field-response-field-id :shape
                         "FieldId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-field-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-field-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-field-response 'make-create-field-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-field-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-field-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-arn))
      (common-lisp:list
       (common-lisp:cons "fieldArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-id))
      (common-lisp:list
       (common-lisp:cons "fieldId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-field-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-layout-request common-lisp:nil
                       ((content :initarg :content :initform
                         (common-lisp:error ":content is required") :type
                         (common-lisp:or layout-content common-lisp:null)
                         :accessor struct-shape-create-layout-request-content
                         :shape "LayoutContent" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-create-layout-request-domain-id :shape
                         "DomainId" :location "uri" :location-name "domainId")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or layout-name common-lisp:null)
                         :accessor struct-shape-create-layout-request-name
                         :shape "LayoutName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-layout-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-layout-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-layout-request 'make-create-layout-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-layout-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-layout-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-layout-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-layout-response common-lisp:nil
                       ((layout-arn :initarg :layout-arn :initform
                         (common-lisp:error ":layoutarn is required") :type
                         (common-lisp:or layout-arn common-lisp:null) :accessor
                         struct-shape-create-layout-response-layout-arn :shape
                         "LayoutArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (layout-id :initarg :layout-id :initform
                         (common-lisp:error ":layoutid is required") :type
                         (common-lisp:or layout-id common-lisp:null) :accessor
                         struct-shape-create-layout-response-layout-id :shape
                         "LayoutId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-layout-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-layout-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-layout-response 'make-create-layout-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-layout-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-layout-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layout-arn))
      (common-lisp:list
       (common-lisp:cons "layoutArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layout-id))
      (common-lisp:list
       (common-lisp:cons "layoutId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-layout-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-related-item-request common-lisp:nil
                       ((case-id :initarg :case-id :initform
                         (common-lisp:error ":caseid is required") :type
                         (common-lisp:or case-id common-lisp:null) :accessor
                         struct-shape-create-related-item-request-case-id
                         :shape "CaseId" :location "uri" :location-name
                         "caseId")
                        (content :initarg :content :initform
                         (common-lisp:error ":content is required") :type
                         (common-lisp:or related-item-input-content
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-related-item-request-content
                         :shape "RelatedItemInputContent" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-create-related-item-request-domain-id
                         :shape "DomainId" :location "uri" :location-name
                         "domainId")
                        (performed-by :initarg :performed-by :initform
                         common-lisp:nil :type
                         (common-lisp:or user-union common-lisp:null) :accessor
                         struct-shape-create-related-item-request-performed-by
                         :shape "UserUnion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or related-item-type common-lisp:null)
                         :accessor
                         struct-shape-create-related-item-request-type :shape
                         "RelatedItemType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-related-item-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-related-item-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-related-item-request
                    'make-create-related-item-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-related-item-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-related-item-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'performed-by))
      (common-lisp:list
       (common-lisp:cons "performedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-related-item-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-related-item-response common-lisp:nil
                       ((related-item-arn :initarg :related-item-arn :initform
                         (common-lisp:error ":relateditemarn is required")
                         :type
                         (common-lisp:or related-item-arn common-lisp:null)
                         :accessor
                         struct-shape-create-related-item-response-related-item-arn
                         :shape "RelatedItemArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (related-item-id :initarg :related-item-id :initform
                         (common-lisp:error ":relateditemid is required") :type
                         (common-lisp:or related-item-id common-lisp:null)
                         :accessor
                         struct-shape-create-related-item-response-related-item-id
                         :shape "RelatedItemId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-related-item-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-related-item-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-related-item-response
                    'make-create-related-item-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-related-item-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-related-item-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'related-item-arn))
      (common-lisp:list
       (common-lisp:cons "relatedItemArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'related-item-id))
      (common-lisp:list
       (common-lisp:cons "relatedItemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-related-item-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-template-request common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or template-description common-lisp:null)
                         :accessor
                         struct-shape-create-template-request-description
                         :shape "TemplateDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-create-template-request-domain-id :shape
                         "DomainId" :location "uri" :location-name "domainId")
                        (layout-configuration :initarg :layout-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or layout-configuration common-lisp:null)
                         :accessor
                         struct-shape-create-template-request-layout-configuration
                         :shape "LayoutConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or template-name common-lisp:null)
                         :accessor struct-shape-create-template-request-name
                         :shape "TemplateName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (required-fields :initarg :required-fields :initform
                         common-lisp:nil :type
                         (common-lisp:or required-field-list common-lisp:null)
                         :accessor
                         struct-shape-create-template-request-required-fields
                         :shape "RequiredFieldList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or template-status common-lisp:null)
                         :accessor struct-shape-create-template-request-status
                         :shape "TemplateStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-template-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-template-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-template-request 'make-create-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'layout-configuration))
      (common-lisp:list
       (common-lisp:cons "layoutConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'required-fields))
      (common-lisp:list
       (common-lisp:cons "requiredFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-template-response common-lisp:nil
                       ((template-arn :initarg :template-arn :initform
                         (common-lisp:error ":templatearn is required") :type
                         (common-lisp:or template-arn common-lisp:null)
                         :accessor
                         struct-shape-create-template-response-template-arn
                         :shape "TemplateArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-id :initarg :template-id :initform
                         (common-lisp:error ":templateid is required") :type
                         (common-lisp:or template-id common-lisp:null)
                         :accessor
                         struct-shape-create-template-response-template-id
                         :shape "TemplateId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-template-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-template-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-template-response 'make-create-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-arn))
      (common-lisp:list
       (common-lisp:cons "templateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-id))
      (common-lisp:list
       (common-lisp:cons "templateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-template-response))
   common-lisp:nil))
(common-lisp:deftype created-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-domain-request common-lisp:nil
                       ((domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-delete-domain-request-domain-id :shape
                         "DomainId" :location "uri" :location-name "domainId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-domain-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-domain-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-domain-request 'make-delete-domain-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-domain-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-domain-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-domain-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-domain-response 'make-delete-domain-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-response))
   common-lisp:nil))
(common-lisp:deftype domain-arn () 'common-lisp:string)
(common-lisp:deftype domain-id () 'common-lisp:string)
(common-lisp:deftype domain-name () 'common-lisp:string)
(common-lisp:deftype domain-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass domain-summary common-lisp:nil
                       ((domain-arn :initarg :domain-arn :initform
                         (common-lisp:error ":domainarn is required") :type
                         (common-lisp:or domain-arn common-lisp:null) :accessor
                         struct-shape-domain-summary-domain-arn :shape
                         "DomainArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-domain-summary-domain-id :shape
                         "DomainId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor struct-shape-domain-summary-name :shape
                         "DomainName" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-domain-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'domain-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'domain-summary 'make-domain-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input domain-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input domain-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-arn))
      (common-lisp:list
       (common-lisp:cons "domainArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input domain-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype domain-summary-list ()
   '(trivial-types:proper-list domain-summary))
 (common-lisp:defun make-domain-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list domain-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defclass empty-field-value common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-empty-field-value
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'empty-field-value
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'empty-field-value 'make-empty-field-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input empty-field-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input empty-field-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input empty-field-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass event-bridge-configuration common-lisp:nil
                       ((enabled :initarg :enabled :initform
                         (common-lisp:error ":enabled is required") :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-event-bridge-configuration-enabled :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (included-data :initarg :included-data :initform
                         common-lisp:nil :type
                         (common-lisp:or event-included-data common-lisp:null)
                         :accessor
                         struct-shape-event-bridge-configuration-included-data
                         :shape "EventIncludedData" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-event-bridge-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'event-bridge-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'event-bridge-configuration
                    'make-event-bridge-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          event-bridge-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          event-bridge-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'included-data))
      (common-lisp:list
       (common-lisp:cons "includedData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          event-bridge-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass event-included-data common-lisp:nil
                       ((case-data :initarg :case-data :initform
                         common-lisp:nil :type
                         (common-lisp:or case-event-included-data
                                         common-lisp:null)
                         :accessor struct-shape-event-included-data-case-data
                         :shape "CaseEventIncludedData" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (related-item-data :initarg :related-item-data
                         :initform common-lisp:nil :type
                         (common-lisp:or related-item-event-included-data
                                         common-lisp:null)
                         :accessor
                         struct-shape-event-included-data-related-item-data
                         :shape "RelatedItemEventIncludedData" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-event-included-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'event-included-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'event-included-data 'make-event-included-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-included-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-included-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'case-data))
      (common-lisp:list
       (common-lisp:cons "caseData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'related-item-data))
      (common-lisp:list
       (common-lisp:cons "relatedItemData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-included-data))
   common-lisp:nil))
(common-lisp:deftype field-arn () 'common-lisp:string)
(common-lisp:deftype field-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass field-error common-lisp:nil
                       ((error-code :initarg :error-code :initform
                         (common-lisp:error ":errorcode is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-field-error-error-code :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or field-id common-lisp:null) :accessor
                         struct-shape-field-error-id :shape "FieldId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-field-error-message :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-field-error
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'field-error
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'field-error 'make-field-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input field-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input field-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input field-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass field-filter common-lisp:nil
                       ((contains :initarg :contains :initform common-lisp:nil
                         :type (common-lisp:or field-value common-lisp:null)
                         :accessor struct-shape-field-filter-contains :shape
                         "FieldValue" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (equal-to :initarg :equal-to :initform common-lisp:nil
                         :type (common-lisp:or field-value common-lisp:null)
                         :accessor struct-shape-field-filter-equal-to :shape
                         "FieldValue" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (greater-than :initarg :greater-than :initform
                         common-lisp:nil :type
                         (common-lisp:or field-value common-lisp:null)
                         :accessor struct-shape-field-filter-greater-than
                         :shape "FieldValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (greater-than-or-equal-to :initarg
                         :greater-than-or-equal-to :initform common-lisp:nil
                         :type (common-lisp:or field-value common-lisp:null)
                         :accessor
                         struct-shape-field-filter-greater-than-or-equal-to
                         :shape "FieldValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (less-than :initarg :less-than :initform
                         common-lisp:nil :type
                         (common-lisp:or field-value common-lisp:null)
                         :accessor struct-shape-field-filter-less-than :shape
                         "FieldValue" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (less-than-or-equal-to :initarg :less-than-or-equal-to
                         :initform common-lisp:nil :type
                         (common-lisp:or field-value common-lisp:null)
                         :accessor
                         struct-shape-field-filter-less-than-or-equal-to :shape
                         "FieldValue" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-field-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'field-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'field-filter 'make-field-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input field-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input field-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contains))
      (common-lisp:list
       (common-lisp:cons "contains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'equal-to))
      (common-lisp:list
       (common-lisp:cons "equalTo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'greater-than))
      (common-lisp:list
       (common-lisp:cons "greaterThan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'greater-than-or-equal-to))
      (common-lisp:list
       (common-lisp:cons "greaterThanOrEqualTo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'less-than))
      (common-lisp:list
       (common-lisp:cons "lessThan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'less-than-or-equal-to))
      (common-lisp:list
       (common-lisp:cons "lessThanOrEqualTo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input field-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass field-group common-lisp:nil
                       ((fields :initarg :fields :initform
                         (common-lisp:error ":fields is required") :type
                         (common-lisp:or field-group-fields-list
                                         common-lisp:null)
                         :accessor struct-shape-field-group-fields :shape
                         "FieldGroupFieldsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or field-group-name-string
                                         common-lisp:null)
                         :accessor struct-shape-field-group-name :shape
                         "FieldGroupNameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-field-group
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'field-group
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'field-group 'make-field-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input field-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input field-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fields))
      (common-lisp:list
       (common-lisp:cons "fields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input field-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype field-group-fields-list ()
   '(trivial-types:proper-list field-item))
 (common-lisp:defun make-field-group-fields-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list field-item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype field-group-name-string () 'common-lisp:string)
(common-lisp:deftype field-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass field-identifier common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or field-id common-lisp:null) :accessor
                         struct-shape-field-identifier-id :shape "FieldId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-field-identifier
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'field-identifier
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'field-identifier 'make-field-identifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input field-identifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input field-identifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input field-identifier))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass field-item common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or field-id common-lisp:null) :accessor
                         struct-shape-field-item-id :shape "FieldId" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-field-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'field-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'field-item 'make-field-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input field-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input field-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input field-item))
   common-lisp:nil))
(common-lisp:deftype field-name () 'common-lisp:string)
(common-lisp:deftype field-namespace () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass field-option common-lisp:nil
                       ((active :initarg :active :initform
                         (common-lisp:error ":active is required") :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-field-option-active :shape "Boolean"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or field-option-name common-lisp:null)
                         :accessor struct-shape-field-option-name :shape
                         "FieldOptionName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or field-option-value common-lisp:null)
                         :accessor struct-shape-field-option-value :shape
                         "FieldOptionValue" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-field-option
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'field-option
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'field-option 'make-field-option))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input field-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input field-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active))
      (common-lisp:list
       (common-lisp:cons "active"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input field-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass field-option-error common-lisp:nil
                       ((error-code :initarg :error-code :initform
                         (common-lisp:error ":errorcode is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-field-option-error-error-code :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message :initarg :message :initform
                         (common-lisp:error ":message is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-field-option-error-message :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or field-option-value common-lisp:null)
                         :accessor struct-shape-field-option-error-value :shape
                         "FieldOptionValue" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-field-option-error
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'field-option-error
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'field-option-error 'make-field-option-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input field-option-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input field-option-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input field-option-error))
   common-lisp:nil))
(common-lisp:deftype field-option-name () 'common-lisp:string)
(common-lisp:deftype field-option-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype field-options-list ()
   '(trivial-types:proper-list field-option))
 (common-lisp:defun make-field-options-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list field-option))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass field-summary common-lisp:nil
                       ((field-arn :initarg :field-arn :initform
                         (common-lisp:error ":fieldarn is required") :type
                         (common-lisp:or field-arn common-lisp:null) :accessor
                         struct-shape-field-summary-field-arn :shape "FieldArn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (field-id :initarg :field-id :initform
                         (common-lisp:error ":fieldid is required") :type
                         (common-lisp:or field-id common-lisp:null) :accessor
                         struct-shape-field-summary-field-id :shape "FieldId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or field-name common-lisp:null) :accessor
                         struct-shape-field-summary-name :shape "FieldName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (namespace :initarg :namespace :initform
                         (common-lisp:error ":namespace is required") :type
                         (common-lisp:or field-namespace common-lisp:null)
                         :accessor struct-shape-field-summary-namespace :shape
                         "FieldNamespace" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or field-type common-lisp:null) :accessor
                         struct-shape-field-summary-type :shape "FieldType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-field-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'field-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'field-summary 'make-field-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input field-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input field-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-arn))
      (common-lisp:list
       (common-lisp:cons "fieldArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-id))
      (common-lisp:list
       (common-lisp:cons "fieldId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input field-summary))
   common-lisp:nil))
(common-lisp:deftype field-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass field-value common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or field-id common-lisp:null) :accessor
                         struct-shape-field-value-id :shape "FieldId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or field-value-union common-lisp:null)
                         :accessor struct-shape-field-value-value :shape
                         "FieldValueUnion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-field-value
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'field-value
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'field-value 'make-field-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input field-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input field-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input field-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass field-value-union common-lisp:nil
                       ((boolean-value :initarg :boolean-value :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-field-value-union-boolean-value :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (double-value :initarg :double-value :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-field-value-union-double-value :shape
                         "Double" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (empty-value :initarg :empty-value :initform
                         common-lisp:nil :type
                         (common-lisp:or empty-field-value common-lisp:null)
                         :accessor struct-shape-field-value-union-empty-value
                         :shape "EmptyFieldValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (string-value :initarg :string-value :initform
                         common-lisp:nil :type
                         (common-lisp:or field-value-union-string-value-string
                                         common-lisp:null)
                         :accessor struct-shape-field-value-union-string-value
                         :shape "FieldValueUnionStringValueString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (user-arn-value :initarg :user-arn-value :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-field-value-union-user-arn-value :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-field-value-union
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'field-value-union
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'field-value-union 'make-field-value-union))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input field-value-union))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input field-value-union))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'boolean-value))
      (common-lisp:list
       (common-lisp:cons "booleanValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'double-value))
      (common-lisp:list
       (common-lisp:cons "doubleValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'empty-value))
      (common-lisp:list
       (common-lisp:cons "emptyValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-value))
      (common-lisp:list
       (common-lisp:cons "stringValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-arn-value))
      (common-lisp:list
       (common-lisp:cons "userArnValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input field-value-union))
   common-lisp:nil))
(common-lisp:deftype field-value-union-string-value-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-case-audit-events-request common-lisp:nil
                       ((case-id :initarg :case-id :initform
                         (common-lisp:error ":caseid is required") :type
                         (common-lisp:or case-id common-lisp:null) :accessor
                         struct-shape-get-case-audit-events-request-case-id
                         :shape "CaseId" :location "uri" :location-name
                         "caseId")
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-get-case-audit-events-request-domain-id
                         :shape "DomainId" :location "uri" :location-name
                         "domainId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          get-case-audit-events-request-max-results-integer
                          common-lisp:null)
                         :accessor
                         struct-shape-get-case-audit-events-request-max-results
                         :shape "GetCaseAuditEventsRequestMaxResultsInteger"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-case-audit-events-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-case-audit-events-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-case-audit-events-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-case-audit-events-request
                    'make-get-case-audit-events-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-case-audit-events-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-case-audit-events-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-case-audit-events-request))
   common-lisp:nil))
(common-lisp:deftype get-case-audit-events-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass get-case-audit-events-response common-lisp:nil
                       ((audit-events :initarg :audit-events :initform
                         (common-lisp:error ":auditevents is required") :type
                         (common-lisp:or
                          get-case-audit-events-response-audit-events-list
                          common-lisp:null)
                         :accessor
                         struct-shape-get-case-audit-events-response-audit-events
                         :shape "GetCaseAuditEventsResponseAuditEventsList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-case-audit-events-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-case-audit-events-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-case-audit-events-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-case-audit-events-response
                    'make-get-case-audit-events-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-case-audit-events-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-case-audit-events-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audit-events))
      (common-lisp:list
       (common-lisp:cons "auditEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-case-audit-events-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype get-case-audit-events-response-audit-events-list ()
   '(trivial-types:proper-list audit-event))
 (common-lisp:defun make-get-case-audit-events-response-audit-events-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list audit-event))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass get-case-event-configuration-request common-lisp:nil
                       ((domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-get-case-event-configuration-request-domain-id
                         :shape "DomainId" :location "uri" :location-name
                         "domainId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-case-event-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-case-event-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-case-event-configuration-request
                    'make-get-case-event-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-case-event-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-case-event-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-case-event-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-case-event-configuration-response common-lisp:nil
                       ((event-bridge :initarg :event-bridge :initform
                         (common-lisp:error ":eventbridge is required") :type
                         (common-lisp:or event-bridge-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-case-event-configuration-response-event-bridge
                         :shape "EventBridgeConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-case-event-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-case-event-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-case-event-configuration-response
                    'make-get-case-event-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-case-event-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-case-event-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-bridge))
      (common-lisp:list
       (common-lisp:cons "eventBridge"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-case-event-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-case-request common-lisp:nil
                       ((case-id :initarg :case-id :initform
                         (common-lisp:error ":caseid is required") :type
                         (common-lisp:or case-id common-lisp:null) :accessor
                         struct-shape-get-case-request-case-id :shape "CaseId"
                         :location "uri" :location-name "caseId")
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-get-case-request-domain-id :shape
                         "DomainId" :location "uri" :location-name "domainId")
                        (fields :initarg :fields :initform
                         (common-lisp:error ":fields is required") :type
                         (common-lisp:or get-case-request-fields-list
                                         common-lisp:null)
                         :accessor struct-shape-get-case-request-fields :shape
                         "GetCaseRequestFieldsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-case-request-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-case-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-case-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-case-request 'make-get-case-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-case-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-case-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fields))
      (common-lisp:list
       (common-lisp:cons "fields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-case-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype get-case-request-fields-list ()
   '(trivial-types:proper-list field-identifier))
 (common-lisp:defun make-get-case-request-fields-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list field-identifier))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass get-case-response common-lisp:nil
                       ((fields :initarg :fields :initform
                         (common-lisp:error ":fields is required") :type
                         (common-lisp:or get-case-response-fields-list
                                         common-lisp:null)
                         :accessor struct-shape-get-case-response-fields :shape
                         "GetCaseResponseFieldsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-case-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-get-case-response-tags :shape "Tags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (template-id :initarg :template-id :initform
                         (common-lisp:error ":templateid is required") :type
                         (common-lisp:or template-id common-lisp:null)
                         :accessor struct-shape-get-case-response-template-id
                         :shape "TemplateId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-case-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-case-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-case-response 'make-get-case-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-case-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-case-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fields))
      (common-lisp:list
       (common-lisp:cons "fields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-id))
      (common-lisp:list
       (common-lisp:cons "templateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-case-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype get-case-response-fields-list ()
   '(trivial-types:proper-list field-value))
 (common-lisp:defun make-get-case-response-fields-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list field-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass get-domain-request common-lisp:nil
                       ((domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-get-domain-request-domain-id :shape
                         "DomainId" :location "uri" :location-name "domainId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-domain-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-domain-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-domain-request 'make-get-domain-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-domain-response common-lisp:nil
                       ((created-time :initarg :created-time :initform
                         (common-lisp:error ":createdtime is required") :type
                         (common-lisp:or created-time common-lisp:null)
                         :accessor
                         struct-shape-get-domain-response-created-time :shape
                         "CreatedTime" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (domain-arn :initarg :domain-arn :initform
                         (common-lisp:error ":domainarn is required") :type
                         (common-lisp:or domain-arn common-lisp:null) :accessor
                         struct-shape-get-domain-response-domain-arn :shape
                         "DomainArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-get-domain-response-domain-id :shape
                         "DomainId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (domain-status :initarg :domain-status :initform
                         (common-lisp:error ":domainstatus is required") :type
                         (common-lisp:or domain-status common-lisp:null)
                         :accessor
                         struct-shape-get-domain-response-domain-status :shape
                         "DomainStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor struct-shape-get-domain-response-name :shape
                         "DomainName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-get-domain-response-tags :shape "Tags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-domain-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-domain-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-domain-response 'make-get-domain-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-domain-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "createdTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-arn))
      (common-lisp:list
       (common-lisp:cons "domainArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-status))
      (common-lisp:list
       (common-lisp:cons "domainStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-domain-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-field-response common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or field-description common-lisp:null)
                         :accessor struct-shape-get-field-response-description
                         :shape "FieldDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (field-arn :initarg :field-arn :initform
                         (common-lisp:error ":fieldarn is required") :type
                         (common-lisp:or field-arn common-lisp:null) :accessor
                         struct-shape-get-field-response-field-arn :shape
                         "FieldArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (field-id :initarg :field-id :initform
                         (common-lisp:error ":fieldid is required") :type
                         (common-lisp:or field-id common-lisp:null) :accessor
                         struct-shape-get-field-response-field-id :shape
                         "FieldId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or field-name common-lisp:null) :accessor
                         struct-shape-get-field-response-name :shape
                         "FieldName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (namespace :initarg :namespace :initform
                         (common-lisp:error ":namespace is required") :type
                         (common-lisp:or field-namespace common-lisp:null)
                         :accessor struct-shape-get-field-response-namespace
                         :shape "FieldNamespace" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-get-field-response-tags :shape "Tags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or field-type common-lisp:null) :accessor
                         struct-shape-get-field-response-type :shape
                         "FieldType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-field-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-field-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-field-response 'make-get-field-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-field-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-field-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-arn))
      (common-lisp:list
       (common-lisp:cons "fieldArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-id))
      (common-lisp:list
       (common-lisp:cons "fieldId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-field-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-layout-request common-lisp:nil
                       ((domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-get-layout-request-domain-id :shape
                         "DomainId" :location "uri" :location-name "domainId")
                        (layout-id :initarg :layout-id :initform
                         (common-lisp:error ":layoutid is required") :type
                         (common-lisp:or layout-id common-lisp:null) :accessor
                         struct-shape-get-layout-request-layout-id :shape
                         "LayoutId" :location "uri" :location-name "layoutId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-layout-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-layout-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-layout-request 'make-get-layout-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-layout-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-layout-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-layout-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-layout-response common-lisp:nil
                       ((content :initarg :content :initform
                         (common-lisp:error ":content is required") :type
                         (common-lisp:or layout-content common-lisp:null)
                         :accessor struct-shape-get-layout-response-content
                         :shape "LayoutContent" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (layout-arn :initarg :layout-arn :initform
                         (common-lisp:error ":layoutarn is required") :type
                         (common-lisp:or layout-arn common-lisp:null) :accessor
                         struct-shape-get-layout-response-layout-arn :shape
                         "LayoutArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (layout-id :initarg :layout-id :initform
                         (common-lisp:error ":layoutid is required") :type
                         (common-lisp:or layout-id common-lisp:null) :accessor
                         struct-shape-get-layout-response-layout-id :shape
                         "LayoutId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or layout-name common-lisp:null)
                         :accessor struct-shape-get-layout-response-name :shape
                         "LayoutName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-get-layout-response-tags :shape "Tags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-layout-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-layout-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-layout-response 'make-get-layout-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-layout-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-layout-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layout-arn))
      (common-lisp:list
       (common-lisp:cons "layoutArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layout-id))
      (common-lisp:list
       (common-lisp:cons "layoutId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-layout-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-template-request common-lisp:nil
                       ((domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-get-template-request-domain-id :shape
                         "DomainId" :location "uri" :location-name "domainId")
                        (template-id :initarg :template-id :initform
                         (common-lisp:error ":templateid is required") :type
                         (common-lisp:or template-id common-lisp:null)
                         :accessor
                         struct-shape-get-template-request-template-id :shape
                         "TemplateId" :location "uri" :location-name
                         "templateId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-template-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-template-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-template-request 'make-get-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-template-response common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or template-description common-lisp:null)
                         :accessor
                         struct-shape-get-template-response-description :shape
                         "TemplateDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (layout-configuration :initarg :layout-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or layout-configuration common-lisp:null)
                         :accessor
                         struct-shape-get-template-response-layout-configuration
                         :shape "LayoutConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or template-name common-lisp:null)
                         :accessor struct-shape-get-template-response-name
                         :shape "TemplateName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (required-fields :initarg :required-fields :initform
                         common-lisp:nil :type
                         (common-lisp:or required-field-list common-lisp:null)
                         :accessor
                         struct-shape-get-template-response-required-fields
                         :shape "RequiredFieldList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or template-status common-lisp:null)
                         :accessor struct-shape-get-template-response-status
                         :shape "TemplateStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-get-template-response-tags :shape "Tags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (template-arn :initarg :template-arn :initform
                         (common-lisp:error ":templatearn is required") :type
                         (common-lisp:or template-arn common-lisp:null)
                         :accessor
                         struct-shape-get-template-response-template-arn :shape
                         "TemplateArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (template-id :initarg :template-id :initform
                         (common-lisp:error ":templateid is required") :type
                         (common-lisp:or template-id common-lisp:null)
                         :accessor
                         struct-shape-get-template-response-template-id :shape
                         "TemplateId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-template-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-template-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-template-response 'make-get-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'layout-configuration))
      (common-lisp:list
       (common-lisp:cons "layoutConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'required-fields))
      (common-lisp:list
       (common-lisp:cons "requiredFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-arn))
      (common-lisp:list
       (common-lisp:cons "templateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-id))
      (common-lisp:list
       (common-lisp:cons "templateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-template-response))
   common-lisp:nil))
(common-lisp:deftype iam-principal-arn () 'common-lisp:string)
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (connectcases-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)
      (retry-after-seconds :initarg :retry-after-seconds :initform
       common-lisp:nil :reader internal-server-exception-retry-after-seconds)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message
                    'internal-server-exception-retry-after-seconds)))
(common-lisp:deftype layout-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass layout-configuration common-lisp:nil
                       ((default-layout :initarg :default-layout :initform
                         common-lisp:nil :type
                         (common-lisp:or layout-id common-lisp:null) :accessor
                         struct-shape-layout-configuration-default-layout
                         :shape "LayoutId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-layout-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'layout-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'layout-configuration 'make-layout-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input layout-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input layout-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-layout))
      (common-lisp:list
       (common-lisp:cons "defaultLayout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input layout-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass layout-content common-lisp:nil
                       ((basic :initarg :basic :initform common-lisp:nil :type
                         (common-lisp:or basic-layout common-lisp:null)
                         :accessor struct-shape-layout-content-basic :shape
                         "BasicLayout" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-layout-content
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'layout-content
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'layout-content 'make-layout-content))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input layout-content))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input layout-content))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'basic))
      (common-lisp:list
       (common-lisp:cons "basic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input layout-content))
   common-lisp:nil))
(common-lisp:deftype layout-id () 'common-lisp:string)
(common-lisp:deftype layout-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass layout-sections common-lisp:nil
                       ((sections :initarg :sections :initform common-lisp:nil
                         :type (common-lisp:or sections-list common-lisp:null)
                         :accessor struct-shape-layout-sections-sections :shape
                         "SectionsList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-layout-sections
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'layout-sections
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'layout-sections 'make-layout-sections))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input layout-sections))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input layout-sections))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sections))
      (common-lisp:list
       (common-lisp:cons "sections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input layout-sections))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass layout-summary common-lisp:nil
                       ((layout-arn :initarg :layout-arn :initform
                         (common-lisp:error ":layoutarn is required") :type
                         (common-lisp:or layout-arn common-lisp:null) :accessor
                         struct-shape-layout-summary-layout-arn :shape
                         "LayoutArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (layout-id :initarg :layout-id :initform
                         (common-lisp:error ":layoutid is required") :type
                         (common-lisp:or layout-id common-lisp:null) :accessor
                         struct-shape-layout-summary-layout-id :shape
                         "LayoutId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or layout-name common-lisp:null)
                         :accessor struct-shape-layout-summary-name :shape
                         "LayoutName" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-layout-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'layout-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'layout-summary 'make-layout-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input layout-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input layout-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layout-arn))
      (common-lisp:list
       (common-lisp:cons "layoutArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layout-id))
      (common-lisp:list
       (common-lisp:cons "layoutId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input layout-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype layout-summary-list ()
   '(trivial-types:proper-list layout-summary))
 (common-lisp:defun make-layout-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list layout-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass list-cases-for-contact-request common-lisp:nil
                       ((contact-arn :initarg :contact-arn :initform
                         (common-lisp:error ":contactarn is required") :type
                         (common-lisp:or contact-arn common-lisp:null)
                         :accessor
                         struct-shape-list-cases-for-contact-request-contact-arn
                         :shape "ContactArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-list-cases-for-contact-request-domain-id
                         :shape "DomainId" :location "uri" :location-name
                         "domainId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          list-cases-for-contact-request-max-results-integer
                          common-lisp:null)
                         :accessor
                         struct-shape-list-cases-for-contact-request-max-results
                         :shape "ListCasesForContactRequestMaxResultsInteger"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-cases-for-contact-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-cases-for-contact-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-cases-for-contact-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-cases-for-contact-request
                    'make-list-cases-for-contact-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-cases-for-contact-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-cases-for-contact-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-arn))
      (common-lisp:list
       (common-lisp:cons "contactArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-cases-for-contact-request))
   common-lisp:nil))
(common-lisp:deftype list-cases-for-contact-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-cases-for-contact-response common-lisp:nil
                       ((cases :initarg :cases :initform
                         (common-lisp:error ":cases is required") :type
                         (common-lisp:or
                          list-cases-for-contact-response-cases-list
                          common-lisp:null)
                         :accessor
                         struct-shape-list-cases-for-contact-response-cases
                         :shape "ListCasesForContactResponseCasesList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-cases-for-contact-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-cases-for-contact-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-cases-for-contact-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-cases-for-contact-response
                    'make-list-cases-for-contact-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-cases-for-contact-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-cases-for-contact-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cases))
      (common-lisp:list
       (common-lisp:cons "cases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-cases-for-contact-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-cases-for-contact-response-cases-list ()
   '(trivial-types:proper-list case-summary))
 (common-lisp:defun make-list-cases-for-contact-response-cases-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list case-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass list-domains-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          list-domains-request-max-results-integer
                          common-lisp:null)
                         :accessor
                         struct-shape-list-domains-request-max-results :shape
                         "ListDomainsRequestMaxResultsInteger" :location
                         "querystring" :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-domains-request-next-token :shape
                         "NextToken" :location "querystring" :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-domains-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-domains-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-domains-request 'make-list-domains-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-domains-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-domains-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-domains-request))
   common-lisp:nil))
(common-lisp:deftype list-domains-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-domains-response common-lisp:nil
                       ((domains :initarg :domains :initform
                         (common-lisp:error ":domains is required") :type
                         (common-lisp:or domain-summary-list common-lisp:null)
                         :accessor struct-shape-list-domains-response-domains
                         :shape "DomainSummaryList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-domains-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-domains-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-domains-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-domains-response 'make-list-domains-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-domains-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-domains-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domains))
      (common-lisp:list
       (common-lisp:cons "domains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-domains-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-field-options-request common-lisp:nil
                       ((domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-list-field-options-request-domain-id
                         :shape "DomainId" :location "uri" :location-name
                         "domainId")
                        (field-id :initarg :field-id :initform
                         (common-lisp:error ":fieldid is required") :type
                         (common-lisp:or field-id common-lisp:null) :accessor
                         struct-shape-list-field-options-request-field-id
                         :shape "FieldId" :location "uri" :location-name
                         "fieldId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-field-options-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-field-options-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken")
                        (values :initarg :values :initform common-lisp:nil
                         :type (common-lisp:or values-list common-lisp:null)
                         :accessor
                         struct-shape-list-field-options-request-values :shape
                         "ValuesList" :location "querystring" :location-name
                         "values"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-field-options-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-field-options-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-field-options-request
                    'make-list-field-options-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-field-options-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-field-options-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-field-options-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-field-options-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-field-options-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (options :initarg :options :initform
                         (common-lisp:error ":options is required") :type
                         (common-lisp:or field-options-list common-lisp:null)
                         :accessor
                         struct-shape-list-field-options-response-options
                         :shape "FieldOptionsList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-field-options-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-field-options-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-field-options-response
                    'make-list-field-options-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-field-options-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-field-options-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-field-options-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-fields-request common-lisp:nil
                       ((domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-list-fields-request-domain-id :shape
                         "DomainId" :location "uri" :location-name "domainId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor struct-shape-list-fields-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-fields-request-next-token :shape
                         "NextToken" :location "querystring" :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-fields-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-fields-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-fields-request 'make-list-fields-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-fields-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-fields-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-fields-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-fields-response common-lisp:nil
                       ((fields :initarg :fields :initform
                         (common-lisp:error ":fields is required") :type
                         (common-lisp:or list-fields-response-fields-list
                                         common-lisp:null)
                         :accessor struct-shape-list-fields-response-fields
                         :shape "ListFieldsResponseFieldsList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-fields-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-fields-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-fields-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-fields-response 'make-list-fields-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-fields-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-fields-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fields))
      (common-lisp:list
       (common-lisp:cons "fields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-fields-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-fields-response-fields-list ()
   '(trivial-types:proper-list field-summary))
 (common-lisp:defun make-list-fields-response-fields-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list field-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass list-layouts-request common-lisp:nil
                       ((domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-list-layouts-request-domain-id :shape
                         "DomainId" :location "uri" :location-name "domainId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-layouts-request-max-results :shape
                         "MaxResults" :location "querystring" :location-name
                         "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-layouts-request-next-token :shape
                         "NextToken" :location "querystring" :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-layouts-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-layouts-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-layouts-request 'make-list-layouts-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-layouts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-layouts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-layouts-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-layouts-response common-lisp:nil
                       ((layouts :initarg :layouts :initform
                         (common-lisp:error ":layouts is required") :type
                         (common-lisp:or layout-summary-list common-lisp:null)
                         :accessor struct-shape-list-layouts-response-layouts
                         :shape "LayoutSummaryList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-layouts-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-layouts-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-layouts-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-layouts-response 'make-list-layouts-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-layouts-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-layouts-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layouts))
      (common-lisp:list
       (common-lisp:cons "layouts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-layouts-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-request-arn :shape
                         "Arn" :location "uri" :location-name "arn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-tags
                         :shape "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-templates-request common-lisp:nil
                       ((domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-list-templates-request-domain-id :shape
                         "DomainId" :location "uri" :location-name "domainId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-templates-request-max-results :shape
                         "MaxResults" :location "querystring" :location-name
                         "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-templates-request-next-token :shape
                         "NextToken" :location "querystring" :location-name
                         "nextToken")
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or template-status-filters
                                         common-lisp:null)
                         :accessor struct-shape-list-templates-request-status
                         :shape "TemplateStatusFilters" :location "querystring"
                         :location-name "status"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-templates-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-templates-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-templates-request 'make-list-templates-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-templates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-templates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-templates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-templates-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-templates-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (templates :initarg :templates :initform
                         (common-lisp:error ":templates is required") :type
                         (common-lisp:or list-templates-response-templates-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-templates-response-templates :shape
                         "ListTemplatesResponseTemplatesList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-templates-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-templates-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-templates-response 'make-list-templates-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-templates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-templates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'templates))
      (common-lisp:list
       (common-lisp:cons "templates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-templates-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-templates-response-templates-list ()
   '(trivial-types:proper-list template-summary))
 (common-lisp:defun make-list-templates-response-templates-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list template-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype order () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass put-case-event-configuration-request common-lisp:nil
                       ((domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-put-case-event-configuration-request-domain-id
                         :shape "DomainId" :location "uri" :location-name
                         "domainId")
                        (event-bridge :initarg :event-bridge :initform
                         (common-lisp:error ":eventbridge is required") :type
                         (common-lisp:or event-bridge-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-case-event-configuration-request-event-bridge
                         :shape "EventBridgeConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-case-event-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-case-event-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-case-event-configuration-request
                    'make-put-case-event-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-case-event-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-case-event-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-bridge))
      (common-lisp:list
       (common-lisp:cons "eventBridge"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-case-event-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-case-event-configuration-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-case-event-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-case-event-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-case-event-configuration-response
                    'make-put-case-event-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-case-event-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-case-event-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-case-event-configuration-response))
   common-lisp:nil))
(common-lisp:deftype related-item-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass related-item-content common-lisp:nil
                       ((comment :initarg :comment :initform common-lisp:nil
                         :type
                         (common-lisp:or comment-content common-lisp:null)
                         :accessor struct-shape-related-item-content-comment
                         :shape "CommentContent" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (contact :initarg :contact :initform common-lisp:nil
                         :type
                         (common-lisp:or contact-content common-lisp:null)
                         :accessor struct-shape-related-item-content-contact
                         :shape "ContactContent" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-related-item-content
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'related-item-content
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'related-item-content 'make-related-item-content))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input related-item-content))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input related-item-content))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact))
      (common-lisp:list
       (common-lisp:cons "contact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input related-item-content))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass related-item-event-included-data common-lisp:nil
                       ((include-content :initarg :include-content :initform
                         (common-lisp:error ":includecontent is required")
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-related-item-event-included-data-include-content
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-related-item-event-included-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'related-item-event-included-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'related-item-event-included-data
                    'make-related-item-event-included-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          related-item-event-included-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          related-item-event-included-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-content))
      (common-lisp:list
       (common-lisp:cons "includeContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          related-item-event-included-data))
   common-lisp:nil))
(common-lisp:deftype related-item-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass related-item-input-content common-lisp:nil
                       ((comment :initarg :comment :initform common-lisp:nil
                         :type
                         (common-lisp:or comment-content common-lisp:null)
                         :accessor
                         struct-shape-related-item-input-content-comment :shape
                         "CommentContent" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (contact :initarg :contact :initform common-lisp:nil
                         :type (common-lisp:or contact common-lisp:null)
                         :accessor
                         struct-shape-related-item-input-content-contact :shape
                         "Contact" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-related-item-input-content
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'related-item-input-content
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'related-item-input-content
                    'make-related-item-input-content))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          related-item-input-content))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          related-item-input-content))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact))
      (common-lisp:list
       (common-lisp:cons "contact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          related-item-input-content))
   common-lisp:nil))
(common-lisp:deftype related-item-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass related-item-type-filter common-lisp:nil
                       ((comment :initarg :comment :initform common-lisp:nil
                         :type (common-lisp:or comment-filter common-lisp:null)
                         :accessor
                         struct-shape-related-item-type-filter-comment :shape
                         "CommentFilter" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (contact :initarg :contact :initform common-lisp:nil
                         :type (common-lisp:or contact-filter common-lisp:null)
                         :accessor
                         struct-shape-related-item-type-filter-contact :shape
                         "ContactFilter" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-related-item-type-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'related-item-type-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'related-item-type-filter 'make-related-item-type-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          related-item-type-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          related-item-type-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact))
      (common-lisp:list
       (common-lisp:cons "contact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          related-item-type-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass required-field common-lisp:nil
                       ((field-id :initarg :field-id :initform
                         (common-lisp:error ":fieldid is required") :type
                         (common-lisp:or field-id common-lisp:null) :accessor
                         struct-shape-required-field-field-id :shape "FieldId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-required-field
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'required-field
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'required-field 'make-required-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input required-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input required-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-id))
      (common-lisp:list
       (common-lisp:cons "fieldId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input required-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype required-field-list ()
   '(trivial-types:proper-list required-field))
 (common-lisp:defun make-required-field-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list required-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (connectcases-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       resource-not-found-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-id
                    'resource-not-found-exception-resource-type)))
(common-lisp:progn
 (common-lisp:defclass search-cases-request common-lisp:nil
                       ((domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-search-cases-request-domain-id :shape
                         "DomainId" :location "uri" :location-name "domainId")
                        (fields :initarg :fields :initform common-lisp:nil
                         :type
                         (common-lisp:or search-cases-request-fields-list
                                         common-lisp:null)
                         :accessor struct-shape-search-cases-request-fields
                         :shape "SearchCasesRequestFieldsList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (filter :initarg :filter :initform common-lisp:nil
                         :type (common-lisp:or case-filter common-lisp:null)
                         :accessor struct-shape-search-cases-request-filter
                         :shape "CaseFilter" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          search-cases-request-max-results-integer
                          common-lisp:null)
                         :accessor
                         struct-shape-search-cases-request-max-results :shape
                         "SearchCasesRequestMaxResultsInteger" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-search-cases-request-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (search-term :initarg :search-term :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          search-cases-request-search-term-string
                          common-lisp:null)
                         :accessor
                         struct-shape-search-cases-request-search-term :shape
                         "SearchCasesRequestSearchTermString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (sorts :initarg :sorts :initform common-lisp:nil :type
                         (common-lisp:or search-cases-request-sorts-list
                                         common-lisp:null)
                         :accessor struct-shape-search-cases-request-sorts
                         :shape "SearchCasesRequestSortsList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-cases-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-cases-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-cases-request 'make-search-cases-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input search-cases-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input search-cases-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fields))
      (common-lisp:list
       (common-lisp:cons "fields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-term))
      (common-lisp:list
       (common-lisp:cons "searchTerm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sorts))
      (common-lisp:list
       (common-lisp:cons "sorts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input search-cases-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype search-cases-request-fields-list ()
   '(trivial-types:proper-list field-identifier))
 (common-lisp:defun make-search-cases-request-fields-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list field-identifier))
   aws-sdk/generator/shape::members))
(common-lisp:deftype search-cases-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:deftype search-cases-request-search-term-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype search-cases-request-sorts-list ()
   '(trivial-types:proper-list sort))
 (common-lisp:defun make-search-cases-request-sorts-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sort))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass search-cases-response common-lisp:nil
                       ((cases :initarg :cases :initform
                         (common-lisp:error ":cases is required") :type
                         (common-lisp:or search-cases-response-cases-list
                                         common-lisp:null)
                         :accessor struct-shape-search-cases-response-cases
                         :shape "SearchCasesResponseCasesList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-search-cases-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-cases-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-cases-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-cases-response 'make-search-cases-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-cases-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-cases-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cases))
      (common-lisp:list
       (common-lisp:cons "cases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-cases-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype search-cases-response-cases-list ()
   '(trivial-types:proper-list search-cases-response-item))
 (common-lisp:defun make-search-cases-response-cases-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            search-cases-response-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass search-cases-response-item common-lisp:nil
                       ((case-id :initarg :case-id :initform
                         (common-lisp:error ":caseid is required") :type
                         (common-lisp:or case-id common-lisp:null) :accessor
                         struct-shape-search-cases-response-item-case-id :shape
                         "CaseId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (fields :initarg :fields :initform
                         (common-lisp:error ":fields is required") :type
                         (common-lisp:or search-cases-response-item-fields-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-search-cases-response-item-fields :shape
                         "SearchCasesResponseItemFieldsList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-search-cases-response-item-tags :shape
                         "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (template-id :initarg :template-id :initform
                         (common-lisp:error ":templateid is required") :type
                         (common-lisp:or template-id common-lisp:null)
                         :accessor
                         struct-shape-search-cases-response-item-template-id
                         :shape "TemplateId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-cases-response-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-cases-response-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-cases-response-item
                    'make-search-cases-response-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-cases-response-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-cases-response-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'case-id))
      (common-lisp:list
       (common-lisp:cons "caseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fields))
      (common-lisp:list
       (common-lisp:cons "fields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-id))
      (common-lisp:list
       (common-lisp:cons "templateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-cases-response-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype search-cases-response-item-fields-list ()
   '(trivial-types:proper-list field-value))
 (common-lisp:defun make-search-cases-response-item-fields-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list field-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass search-related-items-request common-lisp:nil
                       ((case-id :initarg :case-id :initform
                         (common-lisp:error ":caseid is required") :type
                         (common-lisp:or case-id common-lisp:null) :accessor
                         struct-shape-search-related-items-request-case-id
                         :shape "CaseId" :location "uri" :location-name
                         "caseId")
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-search-related-items-request-domain-id
                         :shape "DomainId" :location "uri" :location-name
                         "domainId")
                        (filters :initarg :filters :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          search-related-items-request-filters-list
                          common-lisp:null)
                         :accessor
                         struct-shape-search-related-items-request-filters
                         :shape "SearchRelatedItemsRequestFiltersList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          search-related-items-request-max-results-integer
                          common-lisp:null)
                         :accessor
                         struct-shape-search-related-items-request-max-results
                         :shape "SearchRelatedItemsRequestMaxResultsInteger"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-search-related-items-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-related-items-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-related-items-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-related-items-request
                    'make-search-related-items-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-related-items-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-related-items-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-related-items-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype search-related-items-request-filters-list ()
   '(trivial-types:proper-list related-item-type-filter))
 (common-lisp:defun make-search-related-items-request-filters-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            related-item-type-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype search-related-items-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass search-related-items-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-search-related-items-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (related-items :initarg :related-items :initform
                         (common-lisp:error ":relateditems is required") :type
                         (common-lisp:or
                          search-related-items-response-related-items-list
                          common-lisp:null)
                         :accessor
                         struct-shape-search-related-items-response-related-items
                         :shape "SearchRelatedItemsResponseRelatedItemsList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-related-items-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'search-related-items-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-related-items-response
                    'make-search-related-items-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-related-items-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-related-items-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'related-items))
      (common-lisp:list
       (common-lisp:cons "relatedItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-related-items-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-related-items-response-item common-lisp:nil
                       ((association-time :initarg :association-time :initform
                         (common-lisp:error ":associationtime is required")
                         :type
                         (common-lisp:or association-time common-lisp:null)
                         :accessor
                         struct-shape-search-related-items-response-item-association-time
                         :shape "AssociationTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (content :initarg :content :initform
                         (common-lisp:error ":content is required") :type
                         (common-lisp:or related-item-content common-lisp:null)
                         :accessor
                         struct-shape-search-related-items-response-item-content
                         :shape "RelatedItemContent" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (performed-by :initarg :performed-by :initform
                         common-lisp:nil :type
                         (common-lisp:or user-union common-lisp:null) :accessor
                         struct-shape-search-related-items-response-item-performed-by
                         :shape "UserUnion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (related-item-id :initarg :related-item-id :initform
                         (common-lisp:error ":relateditemid is required") :type
                         (common-lisp:or related-item-id common-lisp:null)
                         :accessor
                         struct-shape-search-related-items-response-item-related-item-id
                         :shape "RelatedItemId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-search-related-items-response-item-tags
                         :shape "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or related-item-type common-lisp:null)
                         :accessor
                         struct-shape-search-related-items-response-item-type
                         :shape "RelatedItemType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-related-items-response-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'search-related-items-response-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-related-items-response-item
                    'make-search-related-items-response-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-related-items-response-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-related-items-response-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-time))
      (common-lisp:list
       (common-lisp:cons "associationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'performed-by))
      (common-lisp:list
       (common-lisp:cons "performedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'related-item-id))
      (common-lisp:list
       (common-lisp:cons "relatedItemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-related-items-response-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype search-related-items-response-related-items-list ()
   '(trivial-types:proper-list search-related-items-response-item))
 (common-lisp:defun make-search-related-items-response-related-items-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            search-related-items-response-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass section common-lisp:nil
                       ((field-group :initarg :field-group :initform
                         common-lisp:nil :type
                         (common-lisp:or field-group common-lisp:null)
                         :accessor struct-shape-section-field-group :shape
                         "FieldGroup" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-section
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'section
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'section 'make-section))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input section))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input section))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-group))
      (common-lisp:list
       (common-lisp:cons "fieldGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input section))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sections-list () '(trivial-types:proper-list section))
 (common-lisp:defun make-sections-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list section))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (connectcases-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass sort common-lisp:nil
                       ((field-id :initarg :field-id :initform
                         (common-lisp:error ":fieldid is required") :type
                         (common-lisp:or field-id common-lisp:null) :accessor
                         struct-shape-sort-field-id :shape "FieldId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (sort-order :initarg :sort-order :initform
                         (common-lisp:error ":sortorder is required") :type
                         (common-lisp:or order common-lisp:null) :accessor
                         struct-shape-sort-sort-order :shape "Order" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sort (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sort
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'sort 'make-sort))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sort))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sort))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-id))
      (common-lisp:list
       (common-lisp:cons "fieldId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "sortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sort))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-tag-resource-request-arn :shape "Arn"
                         :location "uri" :location-name "arn")
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape "Tags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tags () 'common-lisp:hash-table)
 (common-lisp:defun make-tags (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype template-arn () 'common-lisp:string)
(common-lisp:deftype template-description () 'common-lisp:string)
(common-lisp:deftype template-id () 'common-lisp:string)
(common-lisp:deftype template-name () 'common-lisp:string)
(common-lisp:deftype template-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype template-status-filters ()
   '(trivial-types:proper-list template-status))
 (common-lisp:defun make-template-status-filters
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list template-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass template-summary common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or template-name common-lisp:null)
                         :accessor struct-shape-template-summary-name :shape
                         "TemplateName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or template-status common-lisp:null)
                         :accessor struct-shape-template-summary-status :shape
                         "TemplateStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-arn :initarg :template-arn :initform
                         (common-lisp:error ":templatearn is required") :type
                         (common-lisp:or template-arn common-lisp:null)
                         :accessor struct-shape-template-summary-template-arn
                         :shape "TemplateArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-id :initarg :template-id :initform
                         (common-lisp:error ":templateid is required") :type
                         (common-lisp:or template-id common-lisp:null)
                         :accessor struct-shape-template-summary-template-id
                         :shape "TemplateId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-template-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'template-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'template-summary 'make-template-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input template-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input template-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-arn))
      (common-lisp:list
       (common-lisp:cons "templateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-id))
      (common-lisp:list
       (common-lisp:cons "templateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input template-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (connectcases-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-untag-resource-request-arn :shape "Arn"
                         :location "uri" :location-name "arn")
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tagkeys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-untag-resource-request-tag-keys
                         :shape "TagKeyList" :location "querystring"
                         :location-name "tagKeys"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-case-request common-lisp:nil
                       ((case-id :initarg :case-id :initform
                         (common-lisp:error ":caseid is required") :type
                         (common-lisp:or case-id common-lisp:null) :accessor
                         struct-shape-update-case-request-case-id :shape
                         "CaseId" :location "uri" :location-name "caseId")
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-update-case-request-domain-id :shape
                         "DomainId" :location "uri" :location-name "domainId")
                        (fields :initarg :fields :initform
                         (common-lisp:error ":fields is required") :type
                         (common-lisp:or update-case-request-fields-list
                                         common-lisp:null)
                         :accessor struct-shape-update-case-request-fields
                         :shape "UpdateCaseRequestFieldsList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (performed-by :initarg :performed-by :initform
                         common-lisp:nil :type
                         (common-lisp:or user-union common-lisp:null) :accessor
                         struct-shape-update-case-request-performed-by :shape
                         "UserUnion" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-case-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-case-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-case-request 'make-update-case-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-case-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-case-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fields))
      (common-lisp:list
       (common-lisp:cons "fields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'performed-by))
      (common-lisp:list
       (common-lisp:cons "performedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-case-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype update-case-request-fields-list ()
   '(trivial-types:proper-list field-value))
 (common-lisp:defun make-update-case-request-fields-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list field-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass update-case-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-case-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-case-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-case-response 'make-update-case-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-case-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-case-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-case-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-field-request common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or field-description common-lisp:null)
                         :accessor
                         struct-shape-update-field-request-description :shape
                         "FieldDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-update-field-request-domain-id :shape
                         "DomainId" :location "uri" :location-name "domainId")
                        (field-id :initarg :field-id :initform
                         (common-lisp:error ":fieldid is required") :type
                         (common-lisp:or field-id common-lisp:null) :accessor
                         struct-shape-update-field-request-field-id :shape
                         "FieldId" :location "uri" :location-name "fieldId")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or field-name common-lisp:null) :accessor
                         struct-shape-update-field-request-name :shape
                         "FieldName" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-field-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-field-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-field-request 'make-update-field-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-field-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-field-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-field-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-field-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-field-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-field-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-field-response 'make-update-field-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-field-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-field-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-field-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-layout-request common-lisp:nil
                       ((content :initarg :content :initform common-lisp:nil
                         :type (common-lisp:or layout-content common-lisp:null)
                         :accessor struct-shape-update-layout-request-content
                         :shape "LayoutContent" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-update-layout-request-domain-id :shape
                         "DomainId" :location "uri" :location-name "domainId")
                        (layout-id :initarg :layout-id :initform
                         (common-lisp:error ":layoutid is required") :type
                         (common-lisp:or layout-id common-lisp:null) :accessor
                         struct-shape-update-layout-request-layout-id :shape
                         "LayoutId" :location "uri" :location-name "layoutId")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or layout-name common-lisp:null)
                         :accessor struct-shape-update-layout-request-name
                         :shape "LayoutName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-layout-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-layout-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-layout-request 'make-update-layout-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-layout-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-layout-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-layout-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-layout-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-layout-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-layout-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-layout-response 'make-update-layout-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-layout-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-layout-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-layout-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-template-request common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or template-description common-lisp:null)
                         :accessor
                         struct-shape-update-template-request-description
                         :shape "TemplateDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-update-template-request-domain-id :shape
                         "DomainId" :location "uri" :location-name "domainId")
                        (layout-configuration :initarg :layout-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or layout-configuration common-lisp:null)
                         :accessor
                         struct-shape-update-template-request-layout-configuration
                         :shape "LayoutConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or template-name common-lisp:null)
                         :accessor struct-shape-update-template-request-name
                         :shape "TemplateName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (required-fields :initarg :required-fields :initform
                         common-lisp:nil :type
                         (common-lisp:or required-field-list common-lisp:null)
                         :accessor
                         struct-shape-update-template-request-required-fields
                         :shape "RequiredFieldList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or template-status common-lisp:null)
                         :accessor struct-shape-update-template-request-status
                         :shape "TemplateStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-id :initarg :template-id :initform
                         (common-lisp:error ":templateid is required") :type
                         (common-lisp:or template-id common-lisp:null)
                         :accessor
                         struct-shape-update-template-request-template-id
                         :shape "TemplateId" :location "uri" :location-name
                         "templateId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-template-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-template-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-template-request 'make-update-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'layout-configuration))
      (common-lisp:list
       (common-lisp:cons "layoutConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'required-fields))
      (common-lisp:list
       (common-lisp:cons "requiredFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-template-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-template-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-template-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-template-response 'make-update-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-template-response))
   common-lisp:nil))
(common-lisp:deftype user-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass user-union common-lisp:nil
                       ((user-arn :initarg :user-arn :initform common-lisp:nil
                         :type (common-lisp:or user-arn common-lisp:null)
                         :accessor struct-shape-user-union-user-arn :shape
                         "UserArn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-user-union
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'user-union
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'user-union 'make-user-union))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-union))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-union))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-arn))
      (common-lisp:list
       (common-lisp:cons "userArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-union))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (connectcases-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:deftype value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype values-list () '(trivial-types:proper-list value))
 (common-lisp:defun make-values-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defun batch-get-field
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-id fields)
   (common-lisp:declare (common-lisp:ignorable domain-id fields))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-get-field-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connectcases-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/domains/~A/fields-batch"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-id))))
                                                        "BatchGetField"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-get-field))
(common-lisp:progn
 (common-lisp:defun batch-put-field-options
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-id field-id options)
   (common-lisp:declare (common-lisp:ignorable domain-id field-id options))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-put-field-options-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connectcases-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/domains/~A/fields/~A/options"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'field-id))))
                                                        "BatchPutFieldOptions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-put-field-options))
(common-lisp:progn
 (common-lisp:defun create-case
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token domain-id fields
                     performed-by template-id)
   (common-lisp:declare
    (common-lisp:ignorable client-token domain-id fields performed-by
     template-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-case-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connectcases-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/domains/~A/cases"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-id))))
                                                        "CreateCase"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-case))
(common-lisp:progn
 (common-lisp:defun create-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-domain-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connectcases-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/domains"
                                                        "CreateDomain"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-domain))
(common-lisp:progn
 (common-lisp:defun create-field
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description domain-id name type)
   (common-lisp:declare
    (common-lisp:ignorable description domain-id name type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-field-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connectcases-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/domains/~A/fields"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-id))))
                                                        "CreateField"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-field))
(common-lisp:progn
 (common-lisp:defun create-layout
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key content domain-id name)
   (common-lisp:declare (common-lisp:ignorable content domain-id name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-layout-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connectcases-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/domains/~A/layouts"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-id))))
                                                        "CreateLayout"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-layout))
(common-lisp:progn
 (common-lisp:defun create-related-item
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key case-id content domain-id performed-by
                     type)
   (common-lisp:declare
    (common-lisp:ignorable case-id content domain-id performed-by type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-related-item-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connectcases-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/domains/~A/cases/~A/related-items/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'case-id))))
                                                        "CreateRelatedItem"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-related-item))
(common-lisp:progn
 (common-lisp:defun create-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description domain-id
                     layout-configuration name required-fields status)
   (common-lisp:declare
    (common-lisp:ignorable description domain-id layout-configuration name
     required-fields status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connectcases-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/domains/~A/templates"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-id))))
                                                        "CreateTemplate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-template))
(common-lisp:progn
 (common-lisp:defun delete-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-id)
   (common-lisp:declare (common-lisp:ignorable domain-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-domain-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connectcases-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/domains/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-id))))
                                                        "DeleteDomain"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-domain))
(common-lisp:progn
 (common-lisp:defun get-case
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key case-id domain-id fields next-token)
   (common-lisp:declare
    (common-lisp:ignorable case-id domain-id fields next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-case-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connectcases-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/domains/~A/cases/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'case-id))))
                                                        "GetCase"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-case))
(common-lisp:progn
 (common-lisp:defun get-case-audit-events
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key case-id domain-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable case-id domain-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-case-audit-events-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connectcases-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/domains/~A/cases/~A/audit-history"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'case-id))))
                                                        "GetCaseAuditEvents"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-case-audit-events))
(common-lisp:progn
 (common-lisp:defun get-case-event-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-id)
   (common-lisp:declare (common-lisp:ignorable domain-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-case-event-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connectcases-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/domains/~A/case-event-configuration"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-id))))
                                                        "GetCaseEventConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-case-event-configuration))
(common-lisp:progn
 (common-lisp:defun get-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-id)
   (common-lisp:declare (common-lisp:ignorable domain-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-domain-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connectcases-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/domains/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-id))))
                                                        "GetDomain"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-domain))
(common-lisp:progn
 (common-lisp:defun get-layout
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-id layout-id)
   (common-lisp:declare (common-lisp:ignorable domain-id layout-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-layout-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connectcases-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/domains/~A/layouts/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'layout-id))))
                                                        "GetLayout"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-layout))
(common-lisp:progn
 (common-lisp:defun get-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-id template-id)
   (common-lisp:declare (common-lisp:ignorable domain-id template-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connectcases-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/domains/~A/templates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-id))))
                                                        "GetTemplate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-template))
(common-lisp:progn
 (common-lisp:defun list-cases-for-contact
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key contact-arn domain-id max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable contact-arn domain-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-cases-for-contact-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connectcases-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/domains/~A/list-cases-for-contact"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-id))))
                                                        "ListCasesForContact"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-cases-for-contact))
(common-lisp:progn
 (common-lisp:defun list-domains
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-domains-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connectcases-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/domains-list"
                                                        "ListDomains"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-domains))
(common-lisp:progn
 (common-lisp:defun list-field-options
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-id field-id max-results next-token
                     values)
   (common-lisp:declare
    (common-lisp:ignorable domain-id field-id max-results next-token values))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-field-options-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connectcases-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/domains/~A/fields/~A/options-list"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'field-id))))
                                                        "ListFieldOptions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-field-options))
(common-lisp:progn
 (common-lisp:defun list-fields
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable domain-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-fields-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connectcases-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/domains/~A/fields-list"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-id))))
                                                        "ListFields"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-fields))
(common-lisp:progn
 (common-lisp:defun list-layouts
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable domain-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-layouts-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connectcases-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/domains/~A/layouts-list"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-id))))
                                                        "ListLayouts"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-layouts))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connectcases-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'arn))))
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-templates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-id max-results next-token status)
   (common-lisp:declare
    (common-lisp:ignorable domain-id max-results next-token status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-templates-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connectcases-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/domains/~A/templates-list"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-id))))
                                                        "ListTemplates"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-templates))
(common-lisp:progn
 (common-lisp:defun put-case-event-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-id event-bridge)
   (common-lisp:declare (common-lisp:ignorable domain-id event-bridge))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-case-event-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connectcases-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/domains/~A/case-event-configuration"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-id))))
                                                        "PutCaseEventConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-case-event-configuration))
(common-lisp:progn
 (common-lisp:defun search-cases
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-id fields filter max-results
                     next-token search-term sorts)
   (common-lisp:declare
    (common-lisp:ignorable domain-id fields filter max-results next-token
     search-term sorts))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-cases-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connectcases-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/domains/~A/cases-search"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-id))))
                                                        "SearchCases"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'search-cases))
(common-lisp:progn
 (common-lisp:defun search-related-items
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key case-id domain-id filters max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable case-id domain-id filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-related-items-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connectcases-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/domains/~A/cases/~A/related-items-search"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'case-id))))
                                                        "SearchRelatedItems"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'search-related-items))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn tags)
   (common-lisp:declare (common-lisp:ignorable arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connectcases-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'arn))))
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connectcases-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'arn))))
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-case
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key case-id domain-id fields performed-by)
   (common-lisp:declare
    (common-lisp:ignorable case-id domain-id fields performed-by))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-case-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connectcases-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/domains/~A/cases/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'case-id))))
                                                        "UpdateCase"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-case))
(common-lisp:progn
 (common-lisp:defun update-field
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description domain-id field-id name)
   (common-lisp:declare
    (common-lisp:ignorable description domain-id field-id name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-field-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connectcases-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/domains/~A/fields/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'field-id))))
                                                        "UpdateField"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-field))
(common-lisp:progn
 (common-lisp:defun update-layout
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key content domain-id layout-id name)
   (common-lisp:declare
    (common-lisp:ignorable content domain-id layout-id name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-layout-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connectcases-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/domains/~A/layouts/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'layout-id))))
                                                        "UpdateLayout"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-layout))
(common-lisp:progn
 (common-lisp:defun update-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description domain-id
                     layout-configuration name required-fields status
                     template-id)
   (common-lisp:declare
    (common-lisp:ignorable description domain-id layout-configuration name
     required-fields status template-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connectcases-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/domains/~A/templates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-id))))
                                                        "UpdateTemplate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-template))
