;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(uiop/package:define-package #:aws-sdk/services/launch-wizard/api (:use)
                             (:nicknames #:aws/launch-wizard)
                             (:import-from #:aws-sdk/generator/shape)
                             (:import-from #:aws-sdk/generator/operation)
                             (:import-from #:aws-sdk/api)
                             (:import-from #:aws-sdk/request)
                             (:import-from #:aws-sdk/json-request)
                             (:import-from #:aws-sdk/rest-json-request)
                             (:import-from #:aws-sdk/rest-xml-request)
                             (:import-from #:aws-sdk/query-request)
                             (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/launch-wizard/api)
(common-lisp:progn
 (common-lisp:define-condition launch-wizard-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'launch-wizard-error))
(common-lisp:progn
 (common-lisp:defclass launch-wizard-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "launch-wizard" :api-version
                        "2018-05-10" :host-prefix "launchwizard" :signing-name
                        "launchwizard" :global-host common-lisp:nil))
 (common-lisp:export 'launch-wizard-request))
(common-lisp:defvar *error-map*
  '(("InternalServerException" . internal-server-exception)
    ("ResourceLimitException" . resource-limit-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass create-deployment-input common-lisp:nil
                       ((deployment-pattern-name :initarg
                         :deployment-pattern-name :initform
                         (common-lisp:error
                          ":deploymentpatternname is required")
                         :type
                         (common-lisp:or deployment-pattern-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-deployment-input-deployment-pattern-name
                         :shape "DeploymentPatternName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (dry-run :initarg :dry-run :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor struct-shape-create-deployment-input-dry-run
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or deployment-name common-lisp:null)
                         :accessor struct-shape-create-deployment-input-name
                         :shape "DeploymentName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (specifications :initarg :specifications :initform
                         (common-lisp:error ":specifications is required")
                         :type
                         (common-lisp:or deployment-specifications
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-deployment-input-specifications
                         :shape "DeploymentSpecifications" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (workload-name :initarg :workload-name :initform
                         (common-lisp:error ":workloadname is required") :type
                         (common-lisp:or workload-name common-lisp:null)
                         :accessor
                         struct-shape-create-deployment-input-workload-name
                         :shape "WorkloadName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-deployment-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-deployment-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-deployment-input 'make-create-deployment-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-pattern-name))
      (common-lisp:list
       (common-lisp:cons "deploymentPatternName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "dryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'specifications))
      (common-lisp:list
       (common-lisp:cons "specifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-name))
      (common-lisp:list
       (common-lisp:cons "workloadName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-deployment-output common-lisp:nil
                       ((deployment-id :initarg :deployment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or deployment-id common-lisp:null)
                         :accessor
                         struct-shape-create-deployment-output-deployment-id
                         :shape "DeploymentId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-deployment-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-deployment-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-deployment-output 'make-create-deployment-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "deploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-deployment-input common-lisp:nil
                       ((deployment-id :initarg :deployment-id :initform
                         (common-lisp:error ":deploymentid is required") :type
                         (common-lisp:or deployment-id common-lisp:null)
                         :accessor
                         struct-shape-delete-deployment-input-deployment-id
                         :shape "DeploymentId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-deployment-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-deployment-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-deployment-input 'make-delete-deployment-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-deployment-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-deployment-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "deploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-deployment-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-deployment-output common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or deployment-status common-lisp:null)
                         :accessor struct-shape-delete-deployment-output-status
                         :shape "DeploymentStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-reason :initarg :status-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-deployment-output-status-reason
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-deployment-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-deployment-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-deployment-output 'make-delete-deployment-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-deployment-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-deployment-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "statusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-deployment-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deployment-data common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-deployment-data-created-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (deleted-at :initarg :deleted-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-deployment-data-deleted-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or deployment-id common-lisp:null)
                         :accessor struct-shape-deployment-data-id :shape
                         "DeploymentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-deployment-data-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (pattern-name :initarg :pattern-name :initform
                         common-lisp:nil :type
                         (common-lisp:or deployment-pattern-name
                                         common-lisp:null)
                         :accessor struct-shape-deployment-data-pattern-name
                         :shape "DeploymentPatternName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (resource-group :initarg :resource-group :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-deployment-data-resource-group :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (specifications :initarg :specifications :initform
                         common-lisp:nil :type
                         (common-lisp:or deployment-specifications
                                         common-lisp:null)
                         :accessor struct-shape-deployment-data-specifications
                         :shape "DeploymentSpecifications" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or deployment-status common-lisp:null)
                         :accessor struct-shape-deployment-data-status :shape
                         "DeploymentStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (workload-name :initarg :workload-name :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-name common-lisp:null)
                         :accessor struct-shape-deployment-data-workload-name
                         :shape "WorkloadName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deployment-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'deployment-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'deployment-data 'make-deployment-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input deployment-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input deployment-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deleted-at))
      (common-lisp:list
       (common-lisp:cons "deletedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pattern-name))
      (common-lisp:list
       (common-lisp:cons "patternName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group))
      (common-lisp:list
       (common-lisp:cons "resourceGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'specifications))
      (common-lisp:list
       (common-lisp:cons "specifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-name))
      (common-lisp:list
       (common-lisp:cons "workloadName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input deployment-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deployment-data-summary common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-deployment-data-summary-created-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or deployment-id common-lisp:null)
                         :accessor struct-shape-deployment-data-summary-id
                         :shape "DeploymentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-deployment-data-summary-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (pattern-name :initarg :pattern-name :initform
                         common-lisp:nil :type
                         (common-lisp:or deployment-pattern-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-deployment-data-summary-pattern-name
                         :shape "DeploymentPatternName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or deployment-status common-lisp:null)
                         :accessor struct-shape-deployment-data-summary-status
                         :shape "DeploymentStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (workload-name :initarg :workload-name :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-name common-lisp:null)
                         :accessor
                         struct-shape-deployment-data-summary-workload-name
                         :shape "WorkloadName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deployment-data-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'deployment-data-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deployment-data-summary 'make-deployment-data-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deployment-data-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deployment-data-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pattern-name))
      (common-lisp:list
       (common-lisp:cons "patternName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-name))
      (common-lisp:list
       (common-lisp:cons "workloadName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deployment-data-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype deployment-data-summary-list ()
   '(trivial-types:proper-list deployment-data-summary))
 (common-lisp:defun make-deployment-data-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list deployment-data-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass deployment-event-data-summary common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-deployment-event-data-summary-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-deployment-event-data-summary-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or event-status common-lisp:null)
                         :accessor
                         struct-shape-deployment-event-data-summary-status
                         :shape "EventStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-reason :initarg :status-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-deployment-event-data-summary-status-reason
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timestamp :initarg :timestamp :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-deployment-event-data-summary-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deployment-event-data-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'deployment-event-data-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deployment-event-data-summary
                    'make-deployment-event-data-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deployment-event-data-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deployment-event-data-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "statusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deployment-event-data-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype deployment-event-data-summary-list ()
   '(trivial-types:proper-list deployment-event-data-summary))
 (common-lisp:defun make-deployment-event-data-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            deployment-event-data-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass deployment-filter common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or deployment-filter-key
                                         common-lisp:null)
                         :accessor struct-shape-deployment-filter-name :shape
                         "DeploymentFilterKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (values :initarg :values :initform common-lisp:nil
                         :type
                         (common-lisp:or deployment-filter-values
                                         common-lisp:null)
                         :accessor struct-shape-deployment-filter-values :shape
                         "DeploymentFilterValues" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deployment-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'deployment-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deployment-filter 'make-deployment-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input deployment-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input deployment-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input deployment-filter))
   common-lisp:nil))
(common-lisp:deftype deployment-filter-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype deployment-filter-list ()
   '(trivial-types:proper-list deployment-filter))
 (common-lisp:defun make-deployment-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list deployment-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype deployment-filter-values ()
   '(trivial-types:proper-list deployment-filter-values-member-string))
 (common-lisp:defun make-deployment-filter-values
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            deployment-filter-values-member-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype deployment-filter-values-member-string ()
  'common-lisp:string)
(common-lisp:deftype deployment-id () 'common-lisp:string)
(common-lisp:deftype deployment-name () 'common-lisp:string)
(common-lisp:deftype deployment-pattern-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype deployment-specifications () 'common-lisp:hash-table)
 (common-lisp:defun make-deployment-specifications
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype deployment-status () 'common-lisp:string)
(common-lisp:deftype event-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-deployment-input common-lisp:nil
                       ((deployment-id :initarg :deployment-id :initform
                         (common-lisp:error ":deploymentid is required") :type
                         (common-lisp:or deployment-id common-lisp:null)
                         :accessor
                         struct-shape-get-deployment-input-deployment-id :shape
                         "DeploymentId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-deployment-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-deployment-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-deployment-input 'make-get-deployment-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-deployment-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-deployment-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "deploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-deployment-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-deployment-output common-lisp:nil
                       ((deployment :initarg :deployment :initform
                         common-lisp:nil :type
                         (common-lisp:or deployment-data common-lisp:null)
                         :accessor
                         struct-shape-get-deployment-output-deployment :shape
                         "DeploymentData" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-deployment-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-deployment-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-deployment-output 'make-get-deployment-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment))
      (common-lisp:list
       (common-lisp:cons "deployment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-workload-input common-lisp:nil
                       ((workload-name :initarg :workload-name :initform
                         (common-lisp:error ":workloadname is required") :type
                         (common-lisp:or workload-name common-lisp:null)
                         :accessor
                         struct-shape-get-workload-input-workload-name :shape
                         "WorkloadName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-workload-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-workload-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-workload-input 'make-get-workload-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-workload-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-workload-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-name))
      (common-lisp:list
       (common-lisp:cons "workloadName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-workload-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-workload-output common-lisp:nil
                       ((workload :initarg :workload :initform common-lisp:nil
                         :type (common-lisp:or workload-data common-lisp:null)
                         :accessor struct-shape-get-workload-output-workload
                         :shape "WorkloadData" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-workload-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-workload-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-workload-output 'make-get-workload-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-workload-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-workload-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload))
      (common-lisp:list
       (common-lisp:cons "workload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-workload-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (launch-wizard-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:deftype key-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-deployment-events-input common-lisp:nil
                       ((deployment-id :initarg :deployment-id :initform
                         (common-lisp:error ":deploymentid is required") :type
                         (common-lisp:or deployment-id common-lisp:null)
                         :accessor
                         struct-shape-list-deployment-events-input-deployment-id
                         :shape "DeploymentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-deployment-event-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-deployment-events-input-max-results
                         :shape "MaxDeploymentEventResults" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-deployment-events-input-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-deployment-events-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-deployment-events-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-deployment-events-input
                    'make-list-deployment-events-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-events-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-events-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "deploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-events-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-deployment-events-output common-lisp:nil
                       ((deployment-events :initarg :deployment-events
                         :initform common-lisp:nil :type
                         (common-lisp:or deployment-event-data-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-deployment-events-output-deployment-events
                         :shape "DeploymentEventDataSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-deployment-events-output-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-deployment-events-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-deployment-events-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-deployment-events-output
                    'make-list-deployment-events-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-events-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-events-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-events))
      (common-lisp:list
       (common-lisp:cons "deploymentEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-events-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-deployments-input common-lisp:nil
                       ((filters :initarg :filters :initform common-lisp:nil
                         :type
                         (common-lisp:or deployment-filter-list
                                         common-lisp:null)
                         :accessor struct-shape-list-deployments-input-filters
                         :shape "DeploymentFilterList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-deployment-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-deployments-input-max-results :shape
                         "MaxDeploymentResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-deployments-input-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-deployments-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-deployments-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-deployments-input 'make-list-deployments-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-deployments-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-deployments-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-deployments-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-deployments-output common-lisp:nil
                       ((deployments :initarg :deployments :initform
                         common-lisp:nil :type
                         (common-lisp:or deployment-data-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-deployments-output-deployments
                         :shape "DeploymentDataSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-deployments-output-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-deployments-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-deployments-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-deployments-output 'make-list-deployments-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-deployments-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-deployments-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployments))
      (common-lisp:list
       (common-lisp:cons "deployments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-deployments-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-workload-deployment-patterns-input common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          max-workload-deployment-pattern-results
                          common-lisp:null)
                         :accessor
                         struct-shape-list-workload-deployment-patterns-input-max-results
                         :shape "MaxWorkloadDeploymentPatternResults" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-workload-deployment-patterns-input-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (workload-name :initarg :workload-name :initform
                         (common-lisp:error ":workloadname is required") :type
                         (common-lisp:or workload-name common-lisp:null)
                         :accessor
                         struct-shape-list-workload-deployment-patterns-input-workload-name
                         :shape "WorkloadName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-workload-deployment-patterns-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-workload-deployment-patterns-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-workload-deployment-patterns-input
                    'make-list-workload-deployment-patterns-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-workload-deployment-patterns-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-workload-deployment-patterns-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-name))
      (common-lisp:list
       (common-lisp:cons "workloadName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-workload-deployment-patterns-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-workload-deployment-patterns-output common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-workload-deployment-patterns-output-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (workload-deployment-patterns :initarg
                         :workload-deployment-patterns :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          workload-deployment-pattern-data-summary-list
                          common-lisp:null)
                         :accessor
                         struct-shape-list-workload-deployment-patterns-output-workload-deployment-patterns
                         :shape "WorkloadDeploymentPatternDataSummaryList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-workload-deployment-patterns-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-workload-deployment-patterns-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-workload-deployment-patterns-output
                    'make-list-workload-deployment-patterns-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-workload-deployment-patterns-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-workload-deployment-patterns-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workload-deployment-patterns))
      (common-lisp:list
       (common-lisp:cons "workloadDeploymentPatterns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-workload-deployment-patterns-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-workloads-input common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-workload-results common-lisp:null)
                         :accessor
                         struct-shape-list-workloads-input-max-results :shape
                         "MaxWorkloadResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-workloads-input-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-workloads-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-workloads-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-workloads-input 'make-list-workloads-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-workloads-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-workloads-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-workloads-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-workloads-output common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-workloads-output-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (workloads :initarg :workloads :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-data-summary-list
                                         common-lisp:null)
                         :accessor struct-shape-list-workloads-output-workloads
                         :shape "WorkloadDataSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-workloads-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-workloads-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-workloads-output 'make-list-workloads-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-workloads-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-workloads-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workloads))
      (common-lisp:list
       (common-lisp:cons "workloads"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-workloads-output))
   common-lisp:nil))
(common-lisp:deftype max-deployment-event-results () 'common-lisp:integer)
(common-lisp:deftype max-deployment-results () 'common-lisp:integer)
(common-lisp:deftype max-workload-deployment-pattern-results ()
  'common-lisp:integer)
(common-lisp:deftype max-workload-results () 'common-lisp:integer)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-limit-exception
     (launch-wizard-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-limit-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-limit-exception
                    'resource-limit-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (launch-wizard-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (launch-wizard-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:deftype value-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass workload-data common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-workload-data-description :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-workload-data-display-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (documentation-url :initarg :documentation-url
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-workload-data-documentation-url :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (icon-url :initarg :icon-url :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-workload-data-icon-url :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or workload-status common-lisp:null)
                         :accessor struct-shape-workload-data-status :shape
                         "WorkloadStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-workload-data-status-message :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (workload-name :initarg :workload-name :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-name common-lisp:null)
                         :accessor struct-shape-workload-data-workload-name
                         :shape "WorkloadName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-workload-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'workload-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'workload-data 'make-workload-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workload-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workload-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'documentation-url))
      (common-lisp:list
       (common-lisp:cons "documentationUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'icon-url))
      (common-lisp:list
       (common-lisp:cons "iconUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-name))
      (common-lisp:list
       (common-lisp:cons "workloadName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workload-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass workload-data-summary common-lisp:nil
                       ((display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-workload-data-summary-display-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (workload-name :initarg :workload-name :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-name common-lisp:null)
                         :accessor
                         struct-shape-workload-data-summary-workload-name
                         :shape "WorkloadName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-workload-data-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'workload-data-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'workload-data-summary 'make-workload-data-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          workload-data-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          workload-data-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-name))
      (common-lisp:list
       (common-lisp:cons "workloadName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          workload-data-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype workload-data-summary-list ()
   '(trivial-types:proper-list workload-data-summary))
 (common-lisp:defun make-workload-data-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list workload-data-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass workload-deployment-pattern-data-summary common-lisp:nil
                       ((deployment-pattern-name :initarg
                         :deployment-pattern-name :initform common-lisp:nil
                         :type
                         (common-lisp:or deployment-pattern-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-workload-deployment-pattern-data-summary-deployment-pattern-name
                         :shape "DeploymentPatternName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-workload-deployment-pattern-data-summary-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-workload-deployment-pattern-data-summary-display-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or workload-deployment-pattern-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-workload-deployment-pattern-data-summary-status
                         :shape "WorkloadDeploymentPatternStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-workload-deployment-pattern-data-summary-status-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (workload-name :initarg :workload-name :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-name common-lisp:null)
                         :accessor
                         struct-shape-workload-deployment-pattern-data-summary-workload-name
                         :shape "WorkloadName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (workload-version-name :initarg :workload-version-name
                         :initform common-lisp:nil :type
                         (common-lisp:or workload-version-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-workload-deployment-pattern-data-summary-workload-version-name
                         :shape "WorkloadVersionName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-workload-deployment-pattern-data-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'workload-deployment-pattern-data-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'workload-deployment-pattern-data-summary
                    'make-workload-deployment-pattern-data-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          workload-deployment-pattern-data-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          workload-deployment-pattern-data-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-pattern-name))
      (common-lisp:list
       (common-lisp:cons "deploymentPatternName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-name))
      (common-lisp:list
       (common-lisp:cons "workloadName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workload-version-name))
      (common-lisp:list
       (common-lisp:cons "workloadVersionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          workload-deployment-pattern-data-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype workload-deployment-pattern-data-summary-list ()
   '(trivial-types:proper-list workload-deployment-pattern-data-summary))
 (common-lisp:defun make-workload-deployment-pattern-data-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            workload-deployment-pattern-data-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype workload-deployment-pattern-status () 'common-lisp:string)
(common-lisp:deftype workload-name () 'common-lisp:string)
(common-lisp:deftype workload-status () 'common-lisp:string)
(common-lisp:deftype workload-version-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun create-deployment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key deployment-pattern-name dry-run name
                     specifications workload-name)
   (common-lisp:declare
    (common-lisp:ignorable deployment-pattern-name dry-run name specifications
     workload-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-deployment-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'launch-wizard-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/createDeployment"
                                                        "CreateDeployment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-deployment))
(common-lisp:progn
 (common-lisp:defun delete-deployment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key deployment-id)
   (common-lisp:declare (common-lisp:ignorable deployment-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-deployment-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'launch-wizard-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/deleteDeployment"
                                                        "DeleteDeployment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-deployment))
(common-lisp:progn
 (common-lisp:defun get-deployment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key deployment-id)
   (common-lisp:declare (common-lisp:ignorable deployment-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-deployment-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'launch-wizard-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/getDeployment"
                                                        "GetDeployment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-deployment))
(common-lisp:progn
 (common-lisp:defun get-workload
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-name)
   (common-lisp:declare (common-lisp:ignorable workload-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-workload-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'launch-wizard-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/getWorkload"
                                                        "GetWorkload"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-workload))
(common-lisp:progn
 (common-lisp:defun list-deployment-events
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key deployment-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable deployment-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-deployment-events-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'launch-wizard-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/listDeploymentEvents"
                                                        "ListDeploymentEvents"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-deployment-events))
(common-lisp:progn
 (common-lisp:defun list-deployments
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results next-token)
   (common-lisp:declare (common-lisp:ignorable filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-deployments-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'launch-wizard-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/listDeployments"
                                                        "ListDeployments"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-deployments))
(common-lisp:progn
 (common-lisp:defun list-workload-deployment-patterns
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token workload-name)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token workload-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-workload-deployment-patterns-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'launch-wizard-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/listWorkloadDeploymentPatterns"
                                                        "ListWorkloadDeploymentPatterns"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-workload-deployment-patterns))
(common-lisp:progn
 (common-lisp:defun list-workloads
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-workloads-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'launch-wizard-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/listWorkloads"
                                                        "ListWorkloads"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-workloads))
