;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/importexport/api
  (:use)
  (:nicknames #:aws/importexport)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/importexport/api)
(common-lisp:progn
 (common-lisp:define-condition importexport-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'importexport-error))
(common-lisp:progn
 (common-lisp:defclass importexport-request
                       (aws-sdk/query-request:query-request) common-lisp:nil
                       (:default-initargs :service "importexport" :api-version
                        "2010-06-01" :host-prefix "importexport" :signing-name
                        common-lisp:nil :global-host
                        "importexport.amazonaws.com"))
 (common-lisp:export 'importexport-request))
(common-lisp:defvar *error-map*
  '(("BucketPermissionException" . bucket-permission-exception)
    ("CanceledJobIdException" . canceled-job-id-exception)
    ("CreateJobQuotaExceededException" . create-job-quota-exceeded-exception)
    ("ExpiredJobIdException" . expired-job-id-exception)
    ("InvalidAccessKeyIdException" . invalid-access-key-id-exception)
    ("InvalidAddressException" . invalid-address-exception)
    ("InvalidCustomsException" . invalid-customs-exception)
    ("InvalidFileSystemException" . invalid-file-system-exception)
    ("InvalidJobIdException" . invalid-job-id-exception)
    ("InvalidManifestFieldException" . invalid-manifest-field-exception)
    ("InvalidParameterException" . invalid-parameter-exception)
    ("InvalidVersionException" . invalid-version-exception)
    ("MalformedManifestException" . malformed-manifest-exception)
    ("MissingCustomsException" . missing-customs-exception)
    ("MissingManifestFieldException" . missing-manifest-field-exception)
    ("MissingParameterException" . missing-parameter-exception)
    ("MultipleRegionsException" . multiple-regions-exception)
    ("NoSuchBucketException" . no-such-bucket-exception)
    ("UnableToCancelJobIdException" . unable-to-cancel-job-id-exception)
    ("UnableToUpdateJobIdException" . unable-to-update-job-id-exception)))
(common-lisp:deftype apiversion () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass artifact common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-artifact-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (url :initarg :url :initform common-lisp:nil :type
                         (common-lisp:or url common-lisp:null) :accessor
                         struct-shape-artifact-url :shape "URL" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-artifact
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'artifact
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'artifact 'make-artifact))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input artifact))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input artifact))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "URL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input artifact))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype artifact-list () '(trivial-types:proper-list artifact))
 (common-lisp:defun make-artifact-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list artifact))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition bucket-permission-exception
     (importexport-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       bucket-permission-exception-message)))
 (common-lisp:export
  (common-lisp:list 'bucket-permission-exception
                    'bucket-permission-exception-message)))
(common-lisp:progn
 (common-lisp:defclass cancel-job-input common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":job-id is required") :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-cancel-job-input-job-id :shape "JobId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (apiversion :initarg :apiversion :initform
                         common-lisp:nil :type
                         (common-lisp:or apiversion common-lisp:null) :accessor
                         struct-shape-cancel-job-input-apiversion :shape
                         "APIVersion" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-job-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-job-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-job-input 'make-cancel-job-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cancel-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cancel-job-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apiversion))
      (common-lisp:list
       (common-lisp:cons "APIVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cancel-job-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-job-output common-lisp:nil
                       ((success :initarg :success :initform common-lisp:nil
                         :type (common-lisp:or success common-lisp:null)
                         :accessor struct-shape-cancel-job-output-success
                         :shape "Success" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-job-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-job-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-job-output 'make-cancel-job-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cancel-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cancel-job-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'success))
      (common-lisp:list
       (common-lisp:cons "Success"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cancel-job-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition canceled-job-id-exception
     (importexport-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       canceled-job-id-exception-message)))
 (common-lisp:export
  (common-lisp:list 'canceled-job-id-exception
                    'canceled-job-id-exception-message)))
(common-lisp:deftype carrier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-job-input common-lisp:nil
                       ((job-type :initarg :job-type :initform
                         (common-lisp:error ":job-type is required") :type
                         (common-lisp:or job-type common-lisp:null) :accessor
                         struct-shape-create-job-input-job-type :shape
                         "JobType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (manifest :initarg :manifest :initform
                         (common-lisp:error ":manifest is required") :type
                         (common-lisp:or manifest common-lisp:null) :accessor
                         struct-shape-create-job-input-manifest :shape
                         "Manifest" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (manifest-addendum :initarg :manifest-addendum
                         :initform common-lisp:nil :type
                         (common-lisp:or manifest-addendum common-lisp:null)
                         :accessor
                         struct-shape-create-job-input-manifest-addendum :shape
                         "ManifestAddendum" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (validate-only :initarg :validate-only :initform
                         (common-lisp:error ":validate-only is required") :type
                         (common-lisp:or validate-only common-lisp:null)
                         :accessor struct-shape-create-job-input-validate-only
                         :shape "ValidateOnly" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (apiversion :initarg :apiversion :initform
                         common-lisp:nil :type
                         (common-lisp:or apiversion common-lisp:null) :accessor
                         struct-shape-create-job-input-apiversion :shape
                         "APIVersion" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-job-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-job-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-job-input 'make-create-job-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-job-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-type))
      (common-lisp:list
       (common-lisp:cons "JobType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'manifest))
      (common-lisp:list
       (common-lisp:cons "Manifest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'manifest-addendum))
      (common-lisp:list
       (common-lisp:cons "ManifestAddendum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validate-only))
      (common-lisp:list
       (common-lisp:cons "ValidateOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apiversion))
      (common-lisp:list
       (common-lisp:cons "APIVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-job-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-job-output common-lisp:nil
                       ((job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or job-id common-lisp:null)
                         :accessor struct-shape-create-job-output-job-id :shape
                         "JobId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (job-type :initarg :job-type :initform common-lisp:nil
                         :type (common-lisp:or job-type common-lisp:null)
                         :accessor struct-shape-create-job-output-job-type
                         :shape "JobType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (signature :initarg :signature :initform
                         common-lisp:nil :type
                         (common-lisp:or signature common-lisp:null) :accessor
                         struct-shape-create-job-output-signature :shape
                         "Signature" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (signature-file-contents :initarg
                         :signature-file-contents :initform common-lisp:nil
                         :type
                         (common-lisp:or signature-file-contents
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-job-output-signature-file-contents
                         :shape "SignatureFileContents" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (warning-message :initarg :warning-message :initform
                         common-lisp:nil :type
                         (common-lisp:or warning-message common-lisp:null)
                         :accessor
                         struct-shape-create-job-output-warning-message :shape
                         "WarningMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (artifact-list :initarg :artifact-list :initform
                         common-lisp:nil :type
                         (common-lisp:or artifact-list common-lisp:null)
                         :accessor struct-shape-create-job-output-artifact-list
                         :shape "ArtifactList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-job-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-job-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-job-output 'make-create-job-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-job-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-type))
      (common-lisp:list
       (common-lisp:cons "JobType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signature))
      (common-lisp:list
       (common-lisp:cons "Signature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'signature-file-contents))
      (common-lisp:list
       (common-lisp:cons "SignatureFileContents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warning-message))
      (common-lisp:list
       (common-lisp:cons "WarningMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'artifact-list))
      (common-lisp:list
       (common-lisp:cons "ArtifactList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-job-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition create-job-quota-exceeded-exception
     (importexport-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       create-job-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'create-job-quota-exceeded-exception
                    'create-job-quota-exceeded-exception-message)))
(common-lisp:deftype creation-date () 'common-lisp:string)
(common-lisp:deftype current-manifest () 'common-lisp:string)
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:deftype error-count () 'common-lisp:integer)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition expired-job-id-exception
     (importexport-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       expired-job-id-exception-message)))
 (common-lisp:export
  (common-lisp:list 'expired-job-id-exception
                    'expired-job-id-exception-message)))
(common-lisp:deftype generic-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-shipping-label-input common-lisp:nil
                       ((job-ids :initarg :job-ids :initform
                         (common-lisp:error ":jobids is required") :type
                         (common-lisp:or job-id-list common-lisp:null)
                         :accessor
                         struct-shape-get-shipping-label-input-job-ids :shape
                         "JobIdList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-get-shipping-label-input-name :shape
                         "name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (company :initarg :company :initform common-lisp:nil
                         :type (common-lisp:or |company| common-lisp:null)
                         :accessor
                         struct-shape-get-shipping-label-input-company :shape
                         "company" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (phone-number :initarg :phone-number :initform
                         common-lisp:nil :type
                         (common-lisp:or |phoneNumber| common-lisp:null)
                         :accessor
                         struct-shape-get-shipping-label-input-phone-number
                         :shape "phoneNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (country :initarg :country :initform common-lisp:nil
                         :type (common-lisp:or |country| common-lisp:null)
                         :accessor
                         struct-shape-get-shipping-label-input-country :shape
                         "country" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (state-or-province :initarg :state-or-province
                         :initform common-lisp:nil :type
                         (common-lisp:or |stateOrProvince| common-lisp:null)
                         :accessor
                         struct-shape-get-shipping-label-input-state-or-province
                         :shape "stateOrProvince" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (city :initarg :city :initform common-lisp:nil :type
                         (common-lisp:or |city| common-lisp:null) :accessor
                         struct-shape-get-shipping-label-input-city :shape
                         "city" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (postal-code :initarg :postal-code :initform
                         common-lisp:nil :type
                         (common-lisp:or |postalCode| common-lisp:null)
                         :accessor
                         struct-shape-get-shipping-label-input-postal-code
                         :shape "postalCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (street1 :initarg :street1 :initform common-lisp:nil
                         :type (common-lisp:or |street1| common-lisp:null)
                         :accessor
                         struct-shape-get-shipping-label-input-street1 :shape
                         "street1" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (street2 :initarg :street2 :initform common-lisp:nil
                         :type (common-lisp:or |street2| common-lisp:null)
                         :accessor
                         struct-shape-get-shipping-label-input-street2 :shape
                         "street2" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (street3 :initarg :street3 :initform common-lisp:nil
                         :type (common-lisp:or |street3| common-lisp:null)
                         :accessor
                         struct-shape-get-shipping-label-input-street3 :shape
                         "street3" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (apiversion :initarg :apiversion :initform
                         common-lisp:nil :type
                         (common-lisp:or apiversion common-lisp:null) :accessor
                         struct-shape-get-shipping-label-input-apiversion
                         :shape "APIVersion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-shipping-label-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-shipping-label-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-shipping-label-input 'make-get-shipping-label-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-shipping-label-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-shipping-label-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-ids))
      (common-lisp:list
       (common-lisp:cons "jobIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'company))
      (common-lisp:list
       (common-lisp:cons "company"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number))
      (common-lisp:list
       (common-lisp:cons "phoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'country))
      (common-lisp:list
       (common-lisp:cons "country"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-or-province))
      (common-lisp:list
       (common-lisp:cons "stateOrProvince"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'city))
      (common-lisp:list
       (common-lisp:cons "city"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'postal-code))
      (common-lisp:list
       (common-lisp:cons "postalCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'street1))
      (common-lisp:list
       (common-lisp:cons "street1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'street2))
      (common-lisp:list
       (common-lisp:cons "street2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'street3))
      (common-lisp:list
       (common-lisp:cons "street3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apiversion))
      (common-lisp:list
       (common-lisp:cons "APIVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-shipping-label-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-shipping-label-output common-lisp:nil
                       ((shipping-label-url :initarg :shipping-label-url
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-get-shipping-label-output-shipping-label-url
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (warning :initarg :warning :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-get-shipping-label-output-warning :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-shipping-label-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-shipping-label-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-shipping-label-output
                    'make-get-shipping-label-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-shipping-label-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-shipping-label-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shipping-label-url))
      (common-lisp:list
       (common-lisp:cons "ShippingLabelURL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warning))
      (common-lisp:list
       (common-lisp:cons "Warning"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-shipping-label-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-status-input common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":job-id is required") :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-get-status-input-job-id :shape "JobId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (apiversion :initarg :apiversion :initform
                         common-lisp:nil :type
                         (common-lisp:or apiversion common-lisp:null) :accessor
                         struct-shape-get-status-input-apiversion :shape
                         "APIVersion" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-status-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-status-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-status-input 'make-get-status-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-status-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-status-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apiversion))
      (common-lisp:list
       (common-lisp:cons "APIVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-status-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-status-output common-lisp:nil
                       ((job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or job-id common-lisp:null)
                         :accessor struct-shape-get-status-output-job-id :shape
                         "JobId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (job-type :initarg :job-type :initform common-lisp:nil
                         :type (common-lisp:or job-type common-lisp:null)
                         :accessor struct-shape-get-status-output-job-type
                         :shape "JobType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (location-code :initarg :location-code :initform
                         common-lisp:nil :type
                         (common-lisp:or location-code common-lisp:null)
                         :accessor struct-shape-get-status-output-location-code
                         :shape "LocationCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (location-message :initarg :location-message :initform
                         common-lisp:nil :type
                         (common-lisp:or location-message common-lisp:null)
                         :accessor
                         struct-shape-get-status-output-location-message :shape
                         "LocationMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (progress-code :initarg :progress-code :initform
                         common-lisp:nil :type
                         (common-lisp:or progress-code common-lisp:null)
                         :accessor struct-shape-get-status-output-progress-code
                         :shape "ProgressCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (progress-message :initarg :progress-message :initform
                         common-lisp:nil :type
                         (common-lisp:or progress-message common-lisp:null)
                         :accessor
                         struct-shape-get-status-output-progress-message :shape
                         "ProgressMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (carrier :initarg :carrier :initform common-lisp:nil
                         :type (common-lisp:or carrier common-lisp:null)
                         :accessor struct-shape-get-status-output-carrier
                         :shape "Carrier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tracking-number :initarg :tracking-number :initform
                         common-lisp:nil :type
                         (common-lisp:or tracking-number common-lisp:null)
                         :accessor
                         struct-shape-get-status-output-tracking-number :shape
                         "TrackingNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-bucket :initarg :log-bucket :initform
                         common-lisp:nil :type
                         (common-lisp:or log-bucket common-lisp:null) :accessor
                         struct-shape-get-status-output-log-bucket :shape
                         "LogBucket" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (log-key :initarg :log-key :initform common-lisp:nil
                         :type (common-lisp:or log-key common-lisp:null)
                         :accessor struct-shape-get-status-output-log-key
                         :shape "LogKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-count :initarg :error-count :initform
                         common-lisp:nil :type
                         (common-lisp:or error-count common-lisp:null)
                         :accessor struct-shape-get-status-output-error-count
                         :shape "ErrorCount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (signature :initarg :signature :initform
                         common-lisp:nil :type
                         (common-lisp:or signature common-lisp:null) :accessor
                         struct-shape-get-status-output-signature :shape
                         "Signature" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (signature-file-contents :initarg
                         :signature-file-contents :initform common-lisp:nil
                         :type (common-lisp:or signature common-lisp:null)
                         :accessor
                         struct-shape-get-status-output-signature-file-contents
                         :shape "Signature" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (current-manifest :initarg :current-manifest :initform
                         common-lisp:nil :type
                         (common-lisp:or current-manifest common-lisp:null)
                         :accessor
                         struct-shape-get-status-output-current-manifest :shape
                         "CurrentManifest" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or creation-date common-lisp:null)
                         :accessor struct-shape-get-status-output-creation-date
                         :shape "CreationDate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (artifact-list :initarg :artifact-list :initform
                         common-lisp:nil :type
                         (common-lisp:or artifact-list common-lisp:null)
                         :accessor struct-shape-get-status-output-artifact-list
                         :shape "ArtifactList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-status-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-status-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-status-output 'make-get-status-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-status-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-status-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-type))
      (common-lisp:list
       (common-lisp:cons "JobType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location-code))
      (common-lisp:list
       (common-lisp:cons "LocationCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location-message))
      (common-lisp:list
       (common-lisp:cons "LocationMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'progress-code))
      (common-lisp:list
       (common-lisp:cons "ProgressCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'progress-message))
      (common-lisp:list
       (common-lisp:cons "ProgressMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'carrier))
      (common-lisp:list
       (common-lisp:cons "Carrier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tracking-number))
      (common-lisp:list
       (common-lisp:cons "TrackingNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-bucket))
      (common-lisp:list
       (common-lisp:cons "LogBucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-key))
      (common-lisp:list
       (common-lisp:cons "LogKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-count))
      (common-lisp:list
       (common-lisp:cons "ErrorCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signature))
      (common-lisp:list
       (common-lisp:cons "Signature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'signature-file-contents))
      (common-lisp:list
       (common-lisp:cons "SignatureFileContents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-manifest))
      (common-lisp:list
       (common-lisp:cons "CurrentManifest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'artifact-list))
      (common-lisp:list
       (common-lisp:cons "ArtifactList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-status-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition invalid-access-key-id-exception
     (importexport-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-access-key-id-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-access-key-id-exception
                    'invalid-access-key-id-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-address-exception
     (importexport-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-address-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-address-exception
                    'invalid-address-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-customs-exception
     (importexport-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-customs-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-customs-exception
                    'invalid-customs-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-file-system-exception
     (importexport-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-file-system-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-file-system-exception
                    'invalid-file-system-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-job-id-exception
     (importexport-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-job-id-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-job-id-exception
                    'invalid-job-id-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-manifest-field-exception
     (importexport-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-manifest-field-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-manifest-field-exception
                    'invalid-manifest-field-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-exception
     (importexport-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-parameter-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-exception
                    'invalid-parameter-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-version-exception
     (importexport-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-version-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-version-exception
                    'invalid-version-exception-message)))
(common-lisp:deftype is-canceled () 'common-lisp:boolean)
(common-lisp:deftype is-truncated () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass job common-lisp:nil
                       ((job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or job-id common-lisp:null)
                         :accessor struct-shape-job-job-id :shape "JobId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or creation-date common-lisp:null)
                         :accessor struct-shape-job-creation-date :shape
                         "CreationDate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-canceled :initarg :is-canceled :initform
                         common-lisp:nil :type
                         (common-lisp:or is-canceled common-lisp:null)
                         :accessor struct-shape-job-is-canceled :shape
                         "IsCanceled" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (job-type :initarg :job-type :initform common-lisp:nil
                         :type (common-lisp:or job-type common-lisp:null)
                         :accessor struct-shape-job-job-type :shape "JobType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-job (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'job
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'job 'make-job))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-canceled))
      (common-lisp:list
       (common-lisp:cons "IsCanceled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-type))
      (common-lisp:list
       (common-lisp:cons "JobType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job))
   common-lisp:nil))
(common-lisp:deftype job-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype job-id-list ()
   '(trivial-types:proper-list generic-string))
 (common-lisp:defun make-job-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list generic-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype job-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype jobs-list () '(trivial-types:proper-list job))
 (common-lisp:defun make-jobs-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass list-jobs-input common-lisp:nil
                       ((max-jobs :initarg :max-jobs :initform common-lisp:nil
                         :type (common-lisp:or max-jobs common-lisp:null)
                         :accessor struct-shape-list-jobs-input-max-jobs :shape
                         "MaxJobs" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or marker common-lisp:null)
                         :accessor struct-shape-list-jobs-input-marker :shape
                         "Marker" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (apiversion :initarg :apiversion :initform
                         common-lisp:nil :type
                         (common-lisp:or apiversion common-lisp:null) :accessor
                         struct-shape-list-jobs-input-apiversion :shape
                         "APIVersion" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-jobs-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-jobs-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'list-jobs-input 'make-list-jobs-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-jobs-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-jobs-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-jobs))
      (common-lisp:list
       (common-lisp:cons "MaxJobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apiversion))
      (common-lisp:list
       (common-lisp:cons "APIVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-jobs-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-jobs-output common-lisp:nil
                       ((jobs :initarg :jobs :initform common-lisp:nil :type
                         (common-lisp:or jobs-list common-lisp:null) :accessor
                         struct-shape-list-jobs-output-jobs :shape "JobsList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (is-truncated :initarg :is-truncated :initform
                         common-lisp:nil :type
                         (common-lisp:or is-truncated common-lisp:null)
                         :accessor struct-shape-list-jobs-output-is-truncated
                         :shape "IsTruncated" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-jobs-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-jobs-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-jobs-output 'make-list-jobs-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-jobs-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-jobs-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'jobs))
      (common-lisp:list
       (common-lisp:cons "Jobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-jobs-output))
   common-lisp:nil))
(common-lisp:deftype location-code () 'common-lisp:string)
(common-lisp:deftype location-message () 'common-lisp:string)
(common-lisp:deftype log-bucket () 'common-lisp:string)
(common-lisp:deftype log-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition malformed-manifest-exception
     (importexport-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       malformed-manifest-exception-message)))
 (common-lisp:export
  (common-lisp:list 'malformed-manifest-exception
                    'malformed-manifest-exception-message)))
(common-lisp:deftype manifest () 'common-lisp:string)
(common-lisp:deftype manifest-addendum () 'common-lisp:string)
(common-lisp:deftype marker () 'common-lisp:string)
(common-lisp:deftype max-jobs () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition missing-customs-exception
     (importexport-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       missing-customs-exception-message)))
 (common-lisp:export
  (common-lisp:list 'missing-customs-exception
                    'missing-customs-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition missing-manifest-field-exception
     (importexport-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       missing-manifest-field-exception-message)))
 (common-lisp:export
  (common-lisp:list 'missing-manifest-field-exception
                    'missing-manifest-field-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition missing-parameter-exception
     (importexport-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       missing-parameter-exception-message)))
 (common-lisp:export
  (common-lisp:list 'missing-parameter-exception
                    'missing-parameter-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition multiple-regions-exception
     (importexport-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       multiple-regions-exception-message)))
 (common-lisp:export
  (common-lisp:list 'multiple-regions-exception
                    'multiple-regions-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition no-such-bucket-exception
     (importexport-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       no-such-bucket-exception-message)))
 (common-lisp:export
  (common-lisp:list 'no-such-bucket-exception
                    'no-such-bucket-exception-message)))
(common-lisp:deftype progress-code () 'common-lisp:string)
(common-lisp:deftype progress-message () 'common-lisp:string)
(common-lisp:deftype signature () 'common-lisp:string)
(common-lisp:deftype signature-file-contents () 'common-lisp:string)
(common-lisp:deftype success () 'common-lisp:boolean)
(common-lisp:deftype tracking-number () 'common-lisp:string)
(common-lisp:deftype url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition unable-to-cancel-job-id-exception
     (importexport-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unable-to-cancel-job-id-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unable-to-cancel-job-id-exception
                    'unable-to-cancel-job-id-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition unable-to-update-job-id-exception
     (importexport-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unable-to-update-job-id-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unable-to-update-job-id-exception
                    'unable-to-update-job-id-exception-message)))
(common-lisp:progn
 (common-lisp:defclass update-job-input common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":job-id is required") :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-update-job-input-job-id :shape "JobId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (manifest :initarg :manifest :initform
                         (common-lisp:error ":manifest is required") :type
                         (common-lisp:or manifest common-lisp:null) :accessor
                         struct-shape-update-job-input-manifest :shape
                         "Manifest" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (job-type :initarg :job-type :initform
                         (common-lisp:error ":job-type is required") :type
                         (common-lisp:or job-type common-lisp:null) :accessor
                         struct-shape-update-job-input-job-type :shape
                         "JobType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (validate-only :initarg :validate-only :initform
                         (common-lisp:error ":validate-only is required") :type
                         (common-lisp:or validate-only common-lisp:null)
                         :accessor struct-shape-update-job-input-validate-only
                         :shape "ValidateOnly" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (apiversion :initarg :apiversion :initform
                         common-lisp:nil :type
                         (common-lisp:or apiversion common-lisp:null) :accessor
                         struct-shape-update-job-input-apiversion :shape
                         "APIVersion" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-job-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-job-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-job-input 'make-update-job-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-job-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'manifest))
      (common-lisp:list
       (common-lisp:cons "Manifest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-type))
      (common-lisp:list
       (common-lisp:cons "JobType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validate-only))
      (common-lisp:list
       (common-lisp:cons "ValidateOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apiversion))
      (common-lisp:list
       (common-lisp:cons "APIVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-job-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-job-output common-lisp:nil
                       ((success :initarg :success :initform common-lisp:nil
                         :type (common-lisp:or success common-lisp:null)
                         :accessor struct-shape-update-job-output-success
                         :shape "Success" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (warning-message :initarg :warning-message :initform
                         common-lisp:nil :type
                         (common-lisp:or warning-message common-lisp:null)
                         :accessor
                         struct-shape-update-job-output-warning-message :shape
                         "WarningMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (artifact-list :initarg :artifact-list :initform
                         common-lisp:nil :type
                         (common-lisp:or artifact-list common-lisp:null)
                         :accessor struct-shape-update-job-output-artifact-list
                         :shape "ArtifactList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-job-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-job-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-job-output 'make-update-job-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-job-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'success))
      (common-lisp:list
       (common-lisp:cons "Success"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warning-message))
      (common-lisp:list
       (common-lisp:cons "WarningMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'artifact-list))
      (common-lisp:list
       (common-lisp:cons "ArtifactList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-job-output))
   common-lisp:nil))
(common-lisp:deftype validate-only () 'common-lisp:boolean)
(common-lisp:deftype warning-message () 'common-lisp:string)
(common-lisp:deftype |city| () 'common-lisp:string)
(common-lisp:deftype |company| () 'common-lisp:string)
(common-lisp:deftype |country| () 'common-lisp:string)
(common-lisp:deftype |name| () 'common-lisp:string)
(common-lisp:deftype |phoneNumber| () 'common-lisp:string)
(common-lisp:deftype |postalCode| () 'common-lisp:string)
(common-lisp:deftype |stateOrProvince| () 'common-lisp:string)
(common-lisp:deftype |street1| () 'common-lisp:string)
(common-lisp:deftype |street2| () 'common-lisp:string)
(common-lisp:deftype |street3| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun cancel-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id apiversion)
   (common-lisp:declare (common-lisp:ignorable job-id apiversion))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-job-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'importexport-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/?Operation=CancelJob"
                                                        "CancelJob"))
      common-lisp:nil "CancelJobResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'cancel-job))
(common-lisp:progn
 (common-lisp:defun create-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-type manifest manifest-addendum
                     validate-only apiversion)
   (common-lisp:declare
    (common-lisp:ignorable job-type manifest manifest-addendum validate-only
     apiversion))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-job-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'importexport-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/?Operation=CreateJob"
                                                        "CreateJob"))
      common-lisp:nil "CreateJobResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'create-job))
(common-lisp:progn
 (common-lisp:defun get-shipping-label
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-ids name company phone-number country
                     state-or-province city postal-code street1 street2 street3
                     apiversion)
   (common-lisp:declare
    (common-lisp:ignorable job-ids name company phone-number country
     state-or-province city postal-code street1 street2 street3 apiversion))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-shipping-label-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'importexport-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/?Operation=GetShippingLabel"
                                                        "GetShippingLabel"))
      common-lisp:nil "GetShippingLabelResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'get-shipping-label))
(common-lisp:progn
 (common-lisp:defun get-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id apiversion)
   (common-lisp:declare (common-lisp:ignorable job-id apiversion))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-status-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'importexport-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/?Operation=GetStatus"
                                                        "GetStatus"))
      common-lisp:nil "GetStatusResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'get-status))
(common-lisp:progn
 (common-lisp:defun list-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-jobs marker apiversion)
   (common-lisp:declare (common-lisp:ignorable max-jobs marker apiversion))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-jobs-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'importexport-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/?Operation=ListJobs"
                                                        "ListJobs"))
      common-lisp:nil "ListJobsResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'list-jobs))
(common-lisp:progn
 (common-lisp:defun update-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id manifest job-type validate-only
                     apiversion)
   (common-lisp:declare
    (common-lisp:ignorable job-id manifest job-type validate-only apiversion))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-job-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'importexport-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/?Operation=UpdateJob"
                                                        "UpdateJob"))
      common-lisp:nil "UpdateJobResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'update-job))
