;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(uiop/package:define-package #:aws-sdk/services/detective/api (:use)
                             (:nicknames #:aws/detective)
                             (:import-from #:aws-sdk/generator/shape)
                             (:import-from #:aws-sdk/generator/operation)
                             (:import-from #:aws-sdk/api)
                             (:import-from #:aws-sdk/request)
                             (:import-from #:aws-sdk/json-request)
                             (:import-from #:aws-sdk/rest-json-request)
                             (:import-from #:aws-sdk/rest-xml-request)
                             (:import-from #:aws-sdk/query-request)
                             (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/detective/api)
(common-lisp:progn
 (common-lisp:define-condition detective-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'detective-error))
(common-lisp:progn
 (common-lisp:defclass detective-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "detective" :api-version
                        "2018-10-26" :host-prefix "api.detective" :signing-name
                        "detective" :global-host common-lisp:nil))
 (common-lisp:export 'detective-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("TooManyRequestsException" . too-many-requests-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:deftype apifailure-count () 'common-lisp:integer)
(common-lisp:deftype apiname () 'common-lisp:string)
(common-lisp:deftype apisuccess-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass accept-invitation-request common-lisp:nil
                       ((graph-arn :initarg :graph-arn :initform
                         (common-lisp:error ":graph-arn is required") :type
                         (common-lisp:or graph-arn common-lisp:null) :accessor
                         struct-shape-accept-invitation-request-graph-arn
                         :shape "GraphArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-accept-invitation-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'accept-invitation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'accept-invitation-request
                    'make-accept-invitation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-invitation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-invitation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'graph-arn))
      (common-lisp:list
       (common-lisp:cons "GraphArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-invitation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (detective-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)
      (error-code :initarg :error-code :initform common-lisp:nil :reader
       access-denied-exception-error-code)
      (error-code-reason :initarg :error-code-reason :initform common-lisp:nil
       :reader access-denied-exception-error-code-reason)
      (sub-error-code :initarg :sub-error-code :initform common-lisp:nil
       :reader access-denied-exception-sub-error-code)
      (sub-error-code-reason :initarg :sub-error-code-reason :initform
       common-lisp:nil :reader access-denied-exception-sub-error-code-reason)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message
                    'access-denied-exception-error-code
                    'access-denied-exception-error-code-reason
                    'access-denied-exception-sub-error-code
                    'access-denied-exception-sub-error-code-reason)))
(common-lisp:progn
 (common-lisp:defclass account common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         (common-lisp:error ":account-id is required") :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-account-account-id :shape "AccountId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (email-address :initarg :email-address :initform
                         (common-lisp:error ":email-address is required") :type
                         (common-lisp:or email-address common-lisp:null)
                         :accessor struct-shape-account-email-address :shape
                         "EmailAddress" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-account
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'account
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'account 'make-account))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input account))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input account))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-address))
      (common-lisp:list
       (common-lisp:cons "EmailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input account))
   common-lisp:nil))
(common-lisp:deftype account-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype account-id-extended-list ()
   '(trivial-types:proper-list account-id))
 (common-lisp:defun make-account-id-extended-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list account-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype account-id-list ()
   '(trivial-types:proper-list account-id))
 (common-lisp:defun make-account-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list account-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype account-list () '(trivial-types:proper-list account))
 (common-lisp:defun make-account-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list account))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass administrator common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-administrator-account-id :shape
                         "AccountId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (graph-arn :initarg :graph-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or graph-arn common-lisp:null) :accessor
                         struct-shape-administrator-graph-arn :shape "GraphArn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (delegation-time :initarg :delegation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-administrator-delegation-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-administrator
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'administrator
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'administrator 'make-administrator))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input administrator))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input administrator))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'graph-arn))
      (common-lisp:list
       (common-lisp:cons "GraphArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delegation-time))
      (common-lisp:list
       (common-lisp:cons "DelegationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input administrator))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype administrator-list ()
   '(trivial-types:proper-list administrator))
 (common-lisp:defun make-administrator-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list administrator))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ai-pagination-token () 'common-lisp:string)
(common-lisp:deftype aso () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass batch-get-graph-member-datasources-request
                       common-lisp:nil
                       ((graph-arn :initarg :graph-arn :initform
                         (common-lisp:error ":graph-arn is required") :type
                         (common-lisp:or graph-arn common-lisp:null) :accessor
                         struct-shape-batch-get-graph-member-datasources-request-graph-arn
                         :shape "GraphArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (account-ids :initarg :account-ids :initform
                         (common-lisp:error ":account-ids is required") :type
                         (common-lisp:or account-id-extended-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-get-graph-member-datasources-request-account-ids
                         :shape "AccountIdExtendedList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-graph-member-datasources-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-graph-member-datasources-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-graph-member-datasources-request
                    'make-batch-get-graph-member-datasources-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-graph-member-datasources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-graph-member-datasources-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'graph-arn))
      (common-lisp:list
       (common-lisp:cons "GraphArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "AccountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-graph-member-datasources-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-graph-member-datasources-response
                       common-lisp:nil
                       ((member-datasources :initarg :member-datasources
                         :initform common-lisp:nil :type
                         (common-lisp:or membership-datasources-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-get-graph-member-datasources-response-member-datasources
                         :shape "MembershipDatasourcesList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (unprocessed-accounts :initarg :unprocessed-accounts
                         :initform common-lisp:nil :type
                         (common-lisp:or unprocessed-account-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-get-graph-member-datasources-response-unprocessed-accounts
                         :shape "UnprocessedAccountList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-graph-member-datasources-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-graph-member-datasources-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-graph-member-datasources-response
                    'make-batch-get-graph-member-datasources-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-graph-member-datasources-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-graph-member-datasources-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-datasources))
      (common-lisp:list
       (common-lisp:cons "MemberDatasources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-accounts))
      (common-lisp:list
       (common-lisp:cons "UnprocessedAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-graph-member-datasources-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-membership-datasources-request common-lisp:nil
                       ((graph-arns :initarg :graph-arns :initform
                         (common-lisp:error ":graph-arns is required") :type
                         (common-lisp:or graph-arn-list common-lisp:null)
                         :accessor
                         struct-shape-batch-get-membership-datasources-request-graph-arns
                         :shape "GraphArnList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-membership-datasources-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-membership-datasources-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-membership-datasources-request
                    'make-batch-get-membership-datasources-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-membership-datasources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-membership-datasources-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'graph-arns))
      (common-lisp:list
       (common-lisp:cons "GraphArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-membership-datasources-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-membership-datasources-response
                       common-lisp:nil
                       ((membership-datasources :initarg
                         :membership-datasources :initform common-lisp:nil
                         :type
                         (common-lisp:or membership-datasources-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-get-membership-datasources-response-membership-datasources
                         :shape "MembershipDatasourcesList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (unprocessed-graphs :initarg :unprocessed-graphs
                         :initform common-lisp:nil :type
                         (common-lisp:or unprocessed-graph-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-get-membership-datasources-response-unprocessed-graphs
                         :shape "UnprocessedGraphList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-membership-datasources-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-membership-datasources-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-membership-datasources-response
                    'make-batch-get-membership-datasources-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-membership-datasources-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-membership-datasources-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'membership-datasources))
      (common-lisp:list
       (common-lisp:cons "MembershipDatasources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unprocessed-graphs))
      (common-lisp:list
       (common-lisp:cons "UnprocessedGraphs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-membership-datasources-response))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype byte-value () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (detective-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defclass create-graph-request common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-graph-request-tags :shape "TagMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-graph-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-graph-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-graph-request 'make-create-graph-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-graph-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-graph-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-graph-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-graph-response common-lisp:nil
                       ((graph-arn :initarg :graph-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or graph-arn common-lisp:null) :accessor
                         struct-shape-create-graph-response-graph-arn :shape
                         "GraphArn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-graph-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-graph-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-graph-response 'make-create-graph-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-graph-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-graph-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'graph-arn))
      (common-lisp:list
       (common-lisp:cons "GraphArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-graph-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-members-request common-lisp:nil
                       ((graph-arn :initarg :graph-arn :initform
                         (common-lisp:error ":graph-arn is required") :type
                         (common-lisp:or graph-arn common-lisp:null) :accessor
                         struct-shape-create-members-request-graph-arn :shape
                         "GraphArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or email-message common-lisp:null)
                         :accessor struct-shape-create-members-request-message
                         :shape "EmailMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (disable-email-notification :initarg
                         :disable-email-notification :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-create-members-request-disable-email-notification
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (accounts :initarg :accounts :initform
                         (common-lisp:error ":accounts is required") :type
                         (common-lisp:or account-list common-lisp:null)
                         :accessor struct-shape-create-members-request-accounts
                         :shape "AccountList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-members-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-members-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-members-request 'make-create-members-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-members-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-members-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'graph-arn))
      (common-lisp:list
       (common-lisp:cons "GraphArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disable-email-notification))
      (common-lisp:list
       (common-lisp:cons "DisableEmailNotification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accounts))
      (common-lisp:list
       (common-lisp:cons "Accounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-members-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-members-response common-lisp:nil
                       ((members :initarg :members :initform common-lisp:nil
                         :type
                         (common-lisp:or member-detail-list common-lisp:null)
                         :accessor struct-shape-create-members-response-members
                         :shape "MemberDetailList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unprocessed-accounts :initarg :unprocessed-accounts
                         :initform common-lisp:nil :type
                         (common-lisp:or unprocessed-account-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-members-response-unprocessed-accounts
                         :shape "UnprocessedAccountList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-members-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-members-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-members-response 'make-create-members-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-members-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-members-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'members))
      (common-lisp:list
       (common-lisp:cons "Members"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-accounts))
      (common-lisp:list
       (common-lisp:cons "UnprocessedAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-members-response))
   common-lisp:nil))
(common-lisp:deftype datasource-package () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass datasource-package-ingest-detail common-lisp:nil
                       ((datasource-package-ingest-state :initarg
                         :datasource-package-ingest-state :initform
                         common-lisp:nil :type
                         (common-lisp:or datasource-package-ingest-state
                                         common-lisp:null)
                         :accessor
                         struct-shape-datasource-package-ingest-detail-datasource-package-ingest-state
                         :shape "DatasourcePackageIngestState" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-ingest-state-change :initarg
                         :last-ingest-state-change :initform common-lisp:nil
                         :type
                         (common-lisp:or last-ingest-state-change-dates
                                         common-lisp:null)
                         :accessor
                         struct-shape-datasource-package-ingest-detail-last-ingest-state-change
                         :shape "LastIngestStateChangeDates" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-datasource-package-ingest-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'datasource-package-ingest-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'datasource-package-ingest-detail
                    'make-datasource-package-ingest-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          datasource-package-ingest-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          datasource-package-ingest-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'datasource-package-ingest-state))
      (common-lisp:list
       (common-lisp:cons "DatasourcePackageIngestState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-ingest-state-change))
      (common-lisp:list
       (common-lisp:cons "LastIngestStateChange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          datasource-package-ingest-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype datasource-package-ingest-details ()
   'common-lisp:hash-table)
 (common-lisp:defun make-datasource-package-ingest-details
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype datasource-package-ingest-history ()
   'common-lisp:hash-table)
 (common-lisp:defun make-datasource-package-ingest-history
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype datasource-package-ingest-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype datasource-package-ingest-states ()
   'common-lisp:hash-table)
 (common-lisp:defun make-datasource-package-ingest-states
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype datasource-package-list ()
   '(trivial-types:proper-list datasource-package))
 (common-lisp:defun make-datasource-package-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list datasource-package))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass datasource-package-usage-info common-lisp:nil
                       ((volume-usage-in-bytes :initarg :volume-usage-in-bytes
                         :initform common-lisp:nil :type
                         (common-lisp:or byte-value common-lisp:null) :accessor
                         struct-shape-datasource-package-usage-info-volume-usage-in-bytes
                         :shape "ByteValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (volume-usage-update-time :initarg
                         :volume-usage-update-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-datasource-package-usage-info-volume-usage-update-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-datasource-package-usage-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'datasource-package-usage-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'datasource-package-usage-info
                    'make-datasource-package-usage-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          datasource-package-usage-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          datasource-package-usage-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'volume-usage-in-bytes))
      (common-lisp:list
       (common-lisp:cons "VolumeUsageInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'volume-usage-update-time))
      (common-lisp:list
       (common-lisp:cons "VolumeUsageUpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          datasource-package-usage-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass date-filter common-lisp:nil
                       ((start-inclusive :initarg :start-inclusive :initform
                         (common-lisp:error ":start-inclusive is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor struct-shape-date-filter-start-inclusive
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-inclusive :initarg :end-inclusive :initform
                         (common-lisp:error ":end-inclusive is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-date-filter-end-inclusive :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-date-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'date-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'date-filter 'make-date-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input date-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input date-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-inclusive))
      (common-lisp:list
       (common-lisp:cons "StartInclusive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-inclusive))
      (common-lisp:list
       (common-lisp:cons "EndInclusive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input date-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-graph-request common-lisp:nil
                       ((graph-arn :initarg :graph-arn :initform
                         (common-lisp:error ":graph-arn is required") :type
                         (common-lisp:or graph-arn common-lisp:null) :accessor
                         struct-shape-delete-graph-request-graph-arn :shape
                         "GraphArn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-graph-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-graph-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-graph-request 'make-delete-graph-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-graph-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-graph-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'graph-arn))
      (common-lisp:list
       (common-lisp:cons "GraphArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-graph-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-members-request common-lisp:nil
                       ((graph-arn :initarg :graph-arn :initform
                         (common-lisp:error ":graph-arn is required") :type
                         (common-lisp:or graph-arn common-lisp:null) :accessor
                         struct-shape-delete-members-request-graph-arn :shape
                         "GraphArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (account-ids :initarg :account-ids :initform
                         (common-lisp:error ":account-ids is required") :type
                         (common-lisp:or account-id-list common-lisp:null)
                         :accessor
                         struct-shape-delete-members-request-account-ids :shape
                         "AccountIdList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-members-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-members-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-members-request 'make-delete-members-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-members-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-members-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'graph-arn))
      (common-lisp:list
       (common-lisp:cons "GraphArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "AccountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-members-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-members-response common-lisp:nil
                       ((account-ids :initarg :account-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id-list common-lisp:null)
                         :accessor
                         struct-shape-delete-members-response-account-ids
                         :shape "AccountIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unprocessed-accounts :initarg :unprocessed-accounts
                         :initform common-lisp:nil :type
                         (common-lisp:or unprocessed-account-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-members-response-unprocessed-accounts
                         :shape "UnprocessedAccountList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-members-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-members-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-members-response 'make-delete-members-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-members-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-members-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "AccountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-accounts))
      (common-lisp:list
       (common-lisp:cons "UnprocessedAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-members-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-organization-configuration-request
                       common-lisp:nil
                       ((graph-arn :initarg :graph-arn :initform
                         (common-lisp:error ":graph-arn is required") :type
                         (common-lisp:or graph-arn common-lisp:null) :accessor
                         struct-shape-describe-organization-configuration-request-graph-arn
                         :shape "GraphArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-organization-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-organization-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-organization-configuration-request
                    'make-describe-organization-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'graph-arn))
      (common-lisp:list
       (common-lisp:cons "GraphArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-organization-configuration-response
                       common-lisp:nil
                       ((auto-enable :initarg :auto-enable :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-describe-organization-configuration-response-auto-enable
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-organization-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-organization-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-organization-configuration-response
                    'make-describe-organization-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-enable))
      (common-lisp:list
       (common-lisp:cons "AutoEnable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-membership-request common-lisp:nil
                       ((graph-arn :initarg :graph-arn :initform
                         (common-lisp:error ":graph-arn is required") :type
                         (common-lisp:or graph-arn common-lisp:null) :accessor
                         struct-shape-disassociate-membership-request-graph-arn
                         :shape "GraphArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-membership-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-membership-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-membership-request
                    'make-disassociate-membership-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-membership-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-membership-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'graph-arn))
      (common-lisp:list
       (common-lisp:cons "GraphArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-membership-request))
   common-lisp:nil))
(common-lisp:deftype email-address () 'common-lisp:string)
(common-lisp:deftype email-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass enable-organization-admin-account-request
                       common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         (common-lisp:error ":account-id is required") :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-enable-organization-admin-account-request-account-id
                         :shape "AccountId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-enable-organization-admin-account-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'enable-organization-admin-account-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'enable-organization-admin-account-request
                    'make-enable-organization-admin-account-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-organization-admin-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-organization-admin-account-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-organization-admin-account-request))
   common-lisp:nil))
(common-lisp:deftype entity-arn () 'common-lisp:string)
(common-lisp:deftype entity-type () 'common-lisp:string)
(common-lisp:deftype error-code () 'common-lisp:string)
(common-lisp:deftype error-code-reason () 'common-lisp:string)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype field () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass filter-criteria common-lisp:nil
                       ((severity :initarg :severity :initform common-lisp:nil
                         :type (common-lisp:or string-filter common-lisp:null)
                         :accessor struct-shape-filter-criteria-severity :shape
                         "StringFilter" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string-filter common-lisp:null)
                         :accessor struct-shape-filter-criteria-status :shape
                         "StringFilter" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or string-filter common-lisp:null)
                         :accessor struct-shape-filter-criteria-state :shape
                         "StringFilter" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (entity-arn :initarg :entity-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string-filter common-lisp:null)
                         :accessor struct-shape-filter-criteria-entity-arn
                         :shape "StringFilter" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-time :initarg :created-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date-filter common-lisp:null)
                         :accessor struct-shape-filter-criteria-created-time
                         :shape "DateFilter" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-filter-criteria
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'filter-criteria
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'filter-criteria 'make-filter-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "Severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-arn))
      (common-lisp:list
       (common-lisp:cons "EntityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter-criteria))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass flagged-ip-address-detail common-lisp:nil
                       ((ip-address :initarg :ip-address :initform
                         common-lisp:nil :type
                         (common-lisp:or ip-address common-lisp:null) :accessor
                         struct-shape-flagged-ip-address-detail-ip-address
                         :shape "IpAddress" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reason :initarg :reason :initform common-lisp:nil
                         :type (common-lisp:or reason common-lisp:null)
                         :accessor
                         struct-shape-flagged-ip-address-detail-reason :shape
                         "Reason" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-flagged-ip-address-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'flagged-ip-address-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'flagged-ip-address-detail
                    'make-flagged-ip-address-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          flagged-ip-address-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          flagged-ip-address-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "IpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          flagged-ip-address-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-investigation-request common-lisp:nil
                       ((graph-arn :initarg :graph-arn :initform
                         (common-lisp:error ":graph-arn is required") :type
                         (common-lisp:or graph-arn common-lisp:null) :accessor
                         struct-shape-get-investigation-request-graph-arn
                         :shape "GraphArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (investigation-id :initarg :investigation-id :initform
                         (common-lisp:error ":investigation-id is required")
                         :type
                         (common-lisp:or investigation-id common-lisp:null)
                         :accessor
                         struct-shape-get-investigation-request-investigation-id
                         :shape "InvestigationId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-investigation-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-investigation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-investigation-request
                    'make-get-investigation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-investigation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-investigation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'graph-arn))
      (common-lisp:list
       (common-lisp:cons "GraphArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'investigation-id))
      (common-lisp:list
       (common-lisp:cons "InvestigationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-investigation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-investigation-response common-lisp:nil
                       ((graph-arn :initarg :graph-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or graph-arn common-lisp:null) :accessor
                         struct-shape-get-investigation-response-graph-arn
                         :shape "GraphArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (investigation-id :initarg :investigation-id :initform
                         common-lisp:nil :type
                         (common-lisp:or investigation-id common-lisp:null)
                         :accessor
                         struct-shape-get-investigation-response-investigation-id
                         :shape "InvestigationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (entity-arn :initarg :entity-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or entity-arn common-lisp:null) :accessor
                         struct-shape-get-investigation-response-entity-arn
                         :shape "EntityArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (entity-type :initarg :entity-type :initform
                         common-lisp:nil :type
                         (common-lisp:or entity-type common-lisp:null)
                         :accessor
                         struct-shape-get-investigation-response-entity-type
                         :shape "EntityType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-time :initarg :created-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-investigation-response-created-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scope-start-time :initarg :scope-start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-investigation-response-scope-start-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scope-end-time :initarg :scope-end-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-investigation-response-scope-end-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or status common-lisp:null)
                         :accessor
                         struct-shape-get-investigation-response-status :shape
                         "Status" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (severity :initarg :severity :initform common-lisp:nil
                         :type (common-lisp:or severity common-lisp:null)
                         :accessor
                         struct-shape-get-investigation-response-severity
                         :shape "Severity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or state common-lisp:null) :accessor
                         struct-shape-get-investigation-response-state :shape
                         "State" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-investigation-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-investigation-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-investigation-response
                    'make-get-investigation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-investigation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-investigation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'graph-arn))
      (common-lisp:list
       (common-lisp:cons "GraphArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'investigation-id))
      (common-lisp:list
       (common-lisp:cons "InvestigationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-arn))
      (common-lisp:list
       (common-lisp:cons "EntityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-type))
      (common-lisp:list
       (common-lisp:cons "EntityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope-start-time))
      (common-lisp:list
       (common-lisp:cons "ScopeStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope-end-time))
      (common-lisp:list
       (common-lisp:cons "ScopeEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "Severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-investigation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-members-request common-lisp:nil
                       ((graph-arn :initarg :graph-arn :initform
                         (common-lisp:error ":graph-arn is required") :type
                         (common-lisp:or graph-arn common-lisp:null) :accessor
                         struct-shape-get-members-request-graph-arn :shape
                         "GraphArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (account-ids :initarg :account-ids :initform
                         (common-lisp:error ":account-ids is required") :type
                         (common-lisp:or account-id-list common-lisp:null)
                         :accessor struct-shape-get-members-request-account-ids
                         :shape "AccountIdList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-members-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-members-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-members-request 'make-get-members-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-members-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-members-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'graph-arn))
      (common-lisp:list
       (common-lisp:cons "GraphArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "AccountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-members-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-members-response common-lisp:nil
                       ((member-details :initarg :member-details :initform
                         common-lisp:nil :type
                         (common-lisp:or member-detail-list common-lisp:null)
                         :accessor
                         struct-shape-get-members-response-member-details
                         :shape "MemberDetailList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unprocessed-accounts :initarg :unprocessed-accounts
                         :initform common-lisp:nil :type
                         (common-lisp:or unprocessed-account-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-members-response-unprocessed-accounts
                         :shape "UnprocessedAccountList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-members-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-members-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-members-response 'make-get-members-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-members-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-members-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-details))
      (common-lisp:list
       (common-lisp:cons "MemberDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-accounts))
      (common-lisp:list
       (common-lisp:cons "UnprocessedAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-members-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass graph common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or graph-arn common-lisp:null) :accessor
                         struct-shape-graph-arn :shape "GraphArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-time :initarg :created-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-graph-created-time :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-graph
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'graph
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'graph 'make-graph))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input graph))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input graph))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input graph))
   common-lisp:nil))
(common-lisp:deftype graph-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype graph-arn-list () '(trivial-types:proper-list graph-arn))
 (common-lisp:defun make-graph-arn-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list graph-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype graph-list () '(trivial-types:proper-list graph))
 (common-lisp:defun make-graph-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list graph))
   aws-sdk/generator/shape::members))
(common-lisp:deftype hourly-time-delta () 'common-lisp:integer)
(common-lisp:deftype id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass impossible-travel-detail common-lisp:nil
                       ((starting-ip-address :initarg :starting-ip-address
                         :initform common-lisp:nil :type
                         (common-lisp:or ip-address common-lisp:null) :accessor
                         struct-shape-impossible-travel-detail-starting-ip-address
                         :shape "IpAddress" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ending-ip-address :initarg :ending-ip-address
                         :initform common-lisp:nil :type
                         (common-lisp:or ip-address common-lisp:null) :accessor
                         struct-shape-impossible-travel-detail-ending-ip-address
                         :shape "IpAddress" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (starting-location :initarg :starting-location
                         :initform common-lisp:nil :type
                         (common-lisp:or location common-lisp:null) :accessor
                         struct-shape-impossible-travel-detail-starting-location
                         :shape "Location" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ending-location :initarg :ending-location :initform
                         common-lisp:nil :type
                         (common-lisp:or location common-lisp:null) :accessor
                         struct-shape-impossible-travel-detail-ending-location
                         :shape "Location" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hourly-time-delta :initarg :hourly-time-delta
                         :initform common-lisp:nil :type
                         (common-lisp:or hourly-time-delta common-lisp:null)
                         :accessor
                         struct-shape-impossible-travel-detail-hourly-time-delta
                         :shape "HourlyTimeDelta" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-impossible-travel-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'impossible-travel-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'impossible-travel-detail 'make-impossible-travel-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          impossible-travel-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          impossible-travel-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'starting-ip-address))
      (common-lisp:list
       (common-lisp:cons "StartingIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ending-ip-address))
      (common-lisp:list
       (common-lisp:cons "EndingIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'starting-location))
      (common-lisp:list
       (common-lisp:cons "StartingLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ending-location))
      (common-lisp:list
       (common-lisp:cons "EndingLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hourly-time-delta))
      (common-lisp:list
       (common-lisp:cons "HourlyTimeDelta"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          impossible-travel-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass indicator common-lisp:nil
                       ((indicator-type :initarg :indicator-type :initform
                         common-lisp:nil :type
                         (common-lisp:or indicator-type common-lisp:null)
                         :accessor struct-shape-indicator-indicator-type :shape
                         "IndicatorType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (indicator-detail :initarg :indicator-detail :initform
                         common-lisp:nil :type
                         (common-lisp:or indicator-detail common-lisp:null)
                         :accessor struct-shape-indicator-indicator-detail
                         :shape "IndicatorDetail" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-indicator
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'indicator
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'indicator 'make-indicator))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input indicator))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input indicator))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'indicator-type))
      (common-lisp:list
       (common-lisp:cons "IndicatorType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'indicator-detail))
      (common-lisp:list
       (common-lisp:cons "IndicatorDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input indicator))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass indicator-detail common-lisp:nil
                       ((ttps-observed-detail :initarg :ttps-observed-detail
                         :initform common-lisp:nil :type
                         (common-lisp:or ttps-observed-detail common-lisp:null)
                         :accessor
                         struct-shape-indicator-detail-ttps-observed-detail
                         :shape "TTPsObservedDetail" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (impossible-travel-detail :initarg
                         :impossible-travel-detail :initform common-lisp:nil
                         :type
                         (common-lisp:or impossible-travel-detail
                                         common-lisp:null)
                         :accessor
                         struct-shape-indicator-detail-impossible-travel-detail
                         :shape "ImpossibleTravelDetail" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (flagged-ip-address-detail :initarg
                         :flagged-ip-address-detail :initform common-lisp:nil
                         :type
                         (common-lisp:or flagged-ip-address-detail
                                         common-lisp:null)
                         :accessor
                         struct-shape-indicator-detail-flagged-ip-address-detail
                         :shape "FlaggedIpAddressDetail" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (new-geolocation-detail :initarg
                         :new-geolocation-detail :initform common-lisp:nil
                         :type
                         (common-lisp:or new-geolocation-detail
                                         common-lisp:null)
                         :accessor
                         struct-shape-indicator-detail-new-geolocation-detail
                         :shape "NewGeolocationDetail" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (new-aso-detail :initarg :new-aso-detail :initform
                         common-lisp:nil :type
                         (common-lisp:or new-aso-detail common-lisp:null)
                         :accessor struct-shape-indicator-detail-new-aso-detail
                         :shape "NewAsoDetail" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (new-user-agent-detail :initarg :new-user-agent-detail
                         :initform common-lisp:nil :type
                         (common-lisp:or new-user-agent-detail
                                         common-lisp:null)
                         :accessor
                         struct-shape-indicator-detail-new-user-agent-detail
                         :shape "NewUserAgentDetail" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (related-finding-detail :initarg
                         :related-finding-detail :initform common-lisp:nil
                         :type
                         (common-lisp:or related-finding-detail
                                         common-lisp:null)
                         :accessor
                         struct-shape-indicator-detail-related-finding-detail
                         :shape "RelatedFindingDetail" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (related-finding-group-detail :initarg
                         :related-finding-group-detail :initform
                         common-lisp:nil :type
                         (common-lisp:or related-finding-group-detail
                                         common-lisp:null)
                         :accessor
                         struct-shape-indicator-detail-related-finding-group-detail
                         :shape "RelatedFindingGroupDetail" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-indicator-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'indicator-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'indicator-detail 'make-indicator-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input indicator-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input indicator-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ttps-observed-detail))
      (common-lisp:list
       (common-lisp:cons "TTPsObservedDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'impossible-travel-detail))
      (common-lisp:list
       (common-lisp:cons "ImpossibleTravelDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'flagged-ip-address-detail))
      (common-lisp:list
       (common-lisp:cons "FlaggedIpAddressDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'new-geolocation-detail))
      (common-lisp:list
       (common-lisp:cons "NewGeolocationDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-aso-detail))
      (common-lisp:list
       (common-lisp:cons "NewAsoDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'new-user-agent-detail))
      (common-lisp:list
       (common-lisp:cons "NewUserAgentDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'related-finding-detail))
      (common-lisp:list
       (common-lisp:cons "RelatedFindingDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'related-finding-group-detail))
      (common-lisp:list
       (common-lisp:cons "RelatedFindingGroupDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input indicator-detail))
   common-lisp:nil))
(common-lisp:deftype indicator-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype indicators () '(trivial-types:proper-list indicator))
 (common-lisp:defun make-indicators
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list indicator))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (detective-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:defclass investigation-detail common-lisp:nil
                       ((investigation-id :initarg :investigation-id :initform
                         common-lisp:nil :type
                         (common-lisp:or investigation-id common-lisp:null)
                         :accessor
                         struct-shape-investigation-detail-investigation-id
                         :shape "InvestigationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (severity :initarg :severity :initform common-lisp:nil
                         :type (common-lisp:or severity common-lisp:null)
                         :accessor struct-shape-investigation-detail-severity
                         :shape "Severity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or status common-lisp:null)
                         :accessor struct-shape-investigation-detail-status
                         :shape "Status" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or state common-lisp:null) :accessor
                         struct-shape-investigation-detail-state :shape "State"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-time :initarg :created-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-investigation-detail-created-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (entity-arn :initarg :entity-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or entity-arn common-lisp:null) :accessor
                         struct-shape-investigation-detail-entity-arn :shape
                         "EntityArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (entity-type :initarg :entity-type :initform
                         common-lisp:nil :type
                         (common-lisp:or entity-type common-lisp:null)
                         :accessor
                         struct-shape-investigation-detail-entity-type :shape
                         "EntityType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-investigation-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'investigation-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'investigation-detail 'make-investigation-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input investigation-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input investigation-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'investigation-id))
      (common-lisp:list
       (common-lisp:cons "InvestigationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "Severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-arn))
      (common-lisp:list
       (common-lisp:cons "EntityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-type))
      (common-lisp:list
       (common-lisp:cons "EntityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input investigation-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype investigation-details ()
   '(trivial-types:proper-list investigation-detail))
 (common-lisp:defun make-investigation-details
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list investigation-detail))
   aws-sdk/generator/shape::members))
(common-lisp:deftype investigation-id () 'common-lisp:string)
(common-lisp:deftype invitation-type () 'common-lisp:string)
(common-lisp:deftype ip-address () 'common-lisp:string)
(common-lisp:deftype is-new-for-entire-account () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:deftype last-ingest-state-change-dates ()
   'common-lisp:hash-table)
 (common-lisp:defun make-last-ingest-state-change-dates
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass list-datasource-packages-request common-lisp:nil
                       ((graph-arn :initarg :graph-arn :initform
                         (common-lisp:error ":graph-arn is required") :type
                         (common-lisp:or graph-arn common-lisp:null) :accessor
                         struct-shape-list-datasource-packages-request-graph-arn
                         :shape "GraphArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-datasource-packages-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or member-results-limit common-lisp:null)
                         :accessor
                         struct-shape-list-datasource-packages-request-max-results
                         :shape "MemberResultsLimit" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-datasource-packages-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-datasource-packages-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-datasource-packages-request
                    'make-list-datasource-packages-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-datasource-packages-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-datasource-packages-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'graph-arn))
      (common-lisp:list
       (common-lisp:cons "GraphArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-datasource-packages-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-datasource-packages-response common-lisp:nil
                       ((datasource-packages :initarg :datasource-packages
                         :initform common-lisp:nil :type
                         (common-lisp:or datasource-package-ingest-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-datasource-packages-response-datasource-packages
                         :shape "DatasourcePackageIngestDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-datasource-packages-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-datasource-packages-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-datasource-packages-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-datasource-packages-response
                    'make-list-datasource-packages-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-datasource-packages-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-datasource-packages-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datasource-packages))
      (common-lisp:list
       (common-lisp:cons "DatasourcePackages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-datasource-packages-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-graphs-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor struct-shape-list-graphs-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or member-results-limit common-lisp:null)
                         :accessor struct-shape-list-graphs-request-max-results
                         :shape "MemberResultsLimit" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-graphs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-graphs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-graphs-request 'make-list-graphs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-graphs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-graphs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-graphs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-graphs-response common-lisp:nil
                       ((graph-list :initarg :graph-list :initform
                         common-lisp:nil :type
                         (common-lisp:or graph-list common-lisp:null) :accessor
                         struct-shape-list-graphs-response-graph-list :shape
                         "GraphList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor struct-shape-list-graphs-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-graphs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-graphs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-graphs-response 'make-list-graphs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-graphs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-graphs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'graph-list))
      (common-lisp:list
       (common-lisp:cons "GraphList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-graphs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-indicators-request common-lisp:nil
                       ((graph-arn :initarg :graph-arn :initform
                         (common-lisp:error ":graph-arn is required") :type
                         (common-lisp:or graph-arn common-lisp:null) :accessor
                         struct-shape-list-indicators-request-graph-arn :shape
                         "GraphArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (investigation-id :initarg :investigation-id :initform
                         (common-lisp:error ":investigation-id is required")
                         :type
                         (common-lisp:or investigation-id common-lisp:null)
                         :accessor
                         struct-shape-list-indicators-request-investigation-id
                         :shape "InvestigationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (indicator-type :initarg :indicator-type :initform
                         common-lisp:nil :type
                         (common-lisp:or indicator-type common-lisp:null)
                         :accessor
                         struct-shape-list-indicators-request-indicator-type
                         :shape "IndicatorType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or ai-pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-indicators-request-next-token :shape
                         "AiPaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-indicators-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-indicators-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-indicators-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-indicators-request 'make-list-indicators-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-indicators-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-indicators-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'graph-arn))
      (common-lisp:list
       (common-lisp:cons "GraphArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'investigation-id))
      (common-lisp:list
       (common-lisp:cons "InvestigationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'indicator-type))
      (common-lisp:list
       (common-lisp:cons "IndicatorType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-indicators-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-indicators-response common-lisp:nil
                       ((graph-arn :initarg :graph-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or graph-arn common-lisp:null) :accessor
                         struct-shape-list-indicators-response-graph-arn :shape
                         "GraphArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (investigation-id :initarg :investigation-id :initform
                         common-lisp:nil :type
                         (common-lisp:or investigation-id common-lisp:null)
                         :accessor
                         struct-shape-list-indicators-response-investigation-id
                         :shape "InvestigationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or ai-pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-indicators-response-next-token
                         :shape "AiPaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (indicators :initarg :indicators :initform
                         common-lisp:nil :type
                         (common-lisp:or indicators common-lisp:null) :accessor
                         struct-shape-list-indicators-response-indicators
                         :shape "Indicators" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-indicators-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-indicators-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-indicators-response 'make-list-indicators-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-indicators-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-indicators-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'graph-arn))
      (common-lisp:list
       (common-lisp:cons "GraphArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'investigation-id))
      (common-lisp:list
       (common-lisp:cons "InvestigationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'indicators))
      (common-lisp:list
       (common-lisp:cons "Indicators"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-indicators-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-investigations-request common-lisp:nil
                       ((graph-arn :initarg :graph-arn :initform
                         (common-lisp:error ":graph-arn is required") :type
                         (common-lisp:or graph-arn common-lisp:null) :accessor
                         struct-shape-list-investigations-request-graph-arn
                         :shape "GraphArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or ai-pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-investigations-request-next-token
                         :shape "AiPaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-investigations-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filter-criteria :initarg :filter-criteria :initform
                         common-lisp:nil :type
                         (common-lisp:or filter-criteria common-lisp:null)
                         :accessor
                         struct-shape-list-investigations-request-filter-criteria
                         :shape "FilterCriteria" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sort-criteria :initarg :sort-criteria :initform
                         common-lisp:nil :type
                         (common-lisp:or sort-criteria common-lisp:null)
                         :accessor
                         struct-shape-list-investigations-request-sort-criteria
                         :shape "SortCriteria" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-investigations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-investigations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-investigations-request
                    'make-list-investigations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-investigations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-investigations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'graph-arn))
      (common-lisp:list
       (common-lisp:cons "GraphArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-criteria))
      (common-lisp:list
       (common-lisp:cons "FilterCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-criteria))
      (common-lisp:list
       (common-lisp:cons "SortCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-investigations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-investigations-response common-lisp:nil
                       ((investigation-details :initarg :investigation-details
                         :initform common-lisp:nil :type
                         (common-lisp:or investigation-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-investigations-response-investigation-details
                         :shape "InvestigationDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or ai-pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-investigations-response-next-token
                         :shape "AiPaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-investigations-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-investigations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-investigations-response
                    'make-list-investigations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-investigations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-investigations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'investigation-details))
      (common-lisp:list
       (common-lisp:cons "InvestigationDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-investigations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-invitations-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-invitations-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or member-results-limit common-lisp:null)
                         :accessor
                         struct-shape-list-invitations-request-max-results
                         :shape "MemberResultsLimit" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-invitations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-invitations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-invitations-request 'make-list-invitations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-invitations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-invitations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-invitations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-invitations-response common-lisp:nil
                       ((invitations :initarg :invitations :initform
                         common-lisp:nil :type
                         (common-lisp:or member-detail-list common-lisp:null)
                         :accessor
                         struct-shape-list-invitations-response-invitations
                         :shape "MemberDetailList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-invitations-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-invitations-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-invitations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-invitations-response
                    'make-list-invitations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-invitations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-invitations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invitations))
      (common-lisp:list
       (common-lisp:cons "Invitations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-invitations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-members-request common-lisp:nil
                       ((graph-arn :initarg :graph-arn :initform
                         (common-lisp:error ":graph-arn is required") :type
                         (common-lisp:or graph-arn common-lisp:null) :accessor
                         struct-shape-list-members-request-graph-arn :shape
                         "GraphArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor struct-shape-list-members-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or member-results-limit common-lisp:null)
                         :accessor
                         struct-shape-list-members-request-max-results :shape
                         "MemberResultsLimit" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-members-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-members-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-members-request 'make-list-members-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-members-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-members-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'graph-arn))
      (common-lisp:list
       (common-lisp:cons "GraphArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-members-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-members-response common-lisp:nil
                       ((member-details :initarg :member-details :initform
                         common-lisp:nil :type
                         (common-lisp:or member-detail-list common-lisp:null)
                         :accessor
                         struct-shape-list-members-response-member-details
                         :shape "MemberDetailList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-members-response-next-token :shape
                         "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-members-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-members-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-members-response 'make-list-members-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-members-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-members-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-details))
      (common-lisp:list
       (common-lisp:cons "MemberDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-members-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-organization-admin-accounts-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-organization-admin-accounts-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or member-results-limit common-lisp:null)
                         :accessor
                         struct-shape-list-organization-admin-accounts-request-max-results
                         :shape "MemberResultsLimit" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-organization-admin-accounts-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-organization-admin-accounts-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-organization-admin-accounts-request
                    'make-list-organization-admin-accounts-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-organization-admin-accounts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-organization-admin-accounts-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-organization-admin-accounts-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-organization-admin-accounts-response
                       common-lisp:nil
                       ((administrators :initarg :administrators :initform
                         common-lisp:nil :type
                         (common-lisp:or administrator-list common-lisp:null)
                         :accessor
                         struct-shape-list-organization-admin-accounts-response-administrators
                         :shape "AdministratorList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-organization-admin-accounts-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-organization-admin-accounts-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-organization-admin-accounts-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-organization-admin-accounts-response
                    'make-list-organization-admin-accounts-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-organization-admin-accounts-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-organization-admin-accounts-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'administrators))
      (common-lisp:list
       (common-lisp:cons "Administrators"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-organization-admin-accounts-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or graph-arn common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-request-resource-arn
                         :shape "GraphArn" :location "uri" :location-name
                         "ResourceArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype location () 'common-lisp:string)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass member-detail common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-member-detail-account-id :shape
                         "AccountId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (email-address :initarg :email-address :initform
                         common-lisp:nil :type
                         (common-lisp:or email-address common-lisp:null)
                         :accessor struct-shape-member-detail-email-address
                         :shape "EmailAddress" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (graph-arn :initarg :graph-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or graph-arn common-lisp:null) :accessor
                         struct-shape-member-detail-graph-arn :shape "GraphArn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (master-id :initarg :master-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-member-detail-master-id :shape
                         "AccountId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (administrator-id :initarg :administrator-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-member-detail-administrator-id :shape
                         "AccountId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or member-status common-lisp:null)
                         :accessor struct-shape-member-detail-status :shape
                         "MemberStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (disabled-reason :initarg :disabled-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or member-disabled-reason
                                         common-lisp:null)
                         :accessor struct-shape-member-detail-disabled-reason
                         :shape "MemberDisabledReason" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (invited-time :initarg :invited-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-member-detail-invited-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated-time :initarg :updated-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-member-detail-updated-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (volume-usage-in-bytes :initarg :volume-usage-in-bytes
                         :initform common-lisp:nil :type
                         (common-lisp:or byte-value common-lisp:null) :accessor
                         struct-shape-member-detail-volume-usage-in-bytes
                         :shape "ByteValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (volume-usage-updated-time :initarg
                         :volume-usage-updated-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-member-detail-volume-usage-updated-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (percent-of-graph-utilization :initarg
                         :percent-of-graph-utilization :initform
                         common-lisp:nil :type
                         (common-lisp:or percentage common-lisp:null) :accessor
                         struct-shape-member-detail-percent-of-graph-utilization
                         :shape "Percentage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (percent-of-graph-utilization-updated-time :initarg
                         :percent-of-graph-utilization-updated-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-member-detail-percent-of-graph-utilization-updated-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (invitation-type :initarg :invitation-type :initform
                         common-lisp:nil :type
                         (common-lisp:or invitation-type common-lisp:null)
                         :accessor struct-shape-member-detail-invitation-type
                         :shape "InvitationType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (volume-usage-by-datasource-package :initarg
                         :volume-usage-by-datasource-package :initform
                         common-lisp:nil :type
                         (common-lisp:or volume-usage-by-datasource-package
                                         common-lisp:null)
                         :accessor
                         struct-shape-member-detail-volume-usage-by-datasource-package
                         :shape "VolumeUsageByDatasourcePackage" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (datasource-package-ingest-states :initarg
                         :datasource-package-ingest-states :initform
                         common-lisp:nil :type
                         (common-lisp:or datasource-package-ingest-states
                                         common-lisp:null)
                         :accessor
                         struct-shape-member-detail-datasource-package-ingest-states
                         :shape "DatasourcePackageIngestStates" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-member-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'member-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'member-detail 'make-member-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input member-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input member-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-address))
      (common-lisp:list
       (common-lisp:cons "EmailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'graph-arn))
      (common-lisp:list
       (common-lisp:cons "GraphArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-id))
      (common-lisp:list
       (common-lisp:cons "MasterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'administrator-id))
      (common-lisp:list
       (common-lisp:cons "AdministratorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disabled-reason))
      (common-lisp:list
       (common-lisp:cons "DisabledReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invited-time))
      (common-lisp:list
       (common-lisp:cons "InvitedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-time))
      (common-lisp:list
       (common-lisp:cons "UpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'volume-usage-in-bytes))
      (common-lisp:list
       (common-lisp:cons "VolumeUsageInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'volume-usage-updated-time))
      (common-lisp:list
       (common-lisp:cons "VolumeUsageUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'percent-of-graph-utilization))
      (common-lisp:list
       (common-lisp:cons "PercentOfGraphUtilization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'percent-of-graph-utilization-updated-time))
      (common-lisp:list
       (common-lisp:cons "PercentOfGraphUtilizationUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invitation-type))
      (common-lisp:list
       (common-lisp:cons "InvitationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'volume-usage-by-datasource-package))
      (common-lisp:list
       (common-lisp:cons "VolumeUsageByDatasourcePackage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'datasource-package-ingest-states))
      (common-lisp:list
       (common-lisp:cons "DatasourcePackageIngestStates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input member-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype member-detail-list ()
   '(trivial-types:proper-list member-detail))
 (common-lisp:defun make-member-detail-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list member-detail))
   aws-sdk/generator/shape::members))
(common-lisp:deftype member-disabled-reason () 'common-lisp:string)
(common-lisp:deftype member-results-limit () 'common-lisp:integer)
(common-lisp:deftype member-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass membership-datasources common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-membership-datasources-account-id :shape
                         "AccountId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (graph-arn :initarg :graph-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or graph-arn common-lisp:null) :accessor
                         struct-shape-membership-datasources-graph-arn :shape
                         "GraphArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (datasource-package-ingest-history :initarg
                         :datasource-package-ingest-history :initform
                         common-lisp:nil :type
                         (common-lisp:or datasource-package-ingest-history
                                         common-lisp:null)
                         :accessor
                         struct-shape-membership-datasources-datasource-package-ingest-history
                         :shape "DatasourcePackageIngestHistory" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-membership-datasources
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'membership-datasources
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'membership-datasources 'make-membership-datasources))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          membership-datasources))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          membership-datasources))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'graph-arn))
      (common-lisp:list
       (common-lisp:cons "GraphArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'datasource-package-ingest-history))
      (common-lisp:list
       (common-lisp:cons "DatasourcePackageIngestHistory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          membership-datasources))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype membership-datasources-list ()
   '(trivial-types:proper-list membership-datasources))
 (common-lisp:defun make-membership-datasources-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list membership-datasources))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass new-aso-detail common-lisp:nil
                       ((aso :initarg :aso :initform common-lisp:nil :type
                         (common-lisp:or aso common-lisp:null) :accessor
                         struct-shape-new-aso-detail-aso :shape "Aso" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (is-new-for-entire-account :initarg
                         :is-new-for-entire-account :initform common-lisp:nil
                         :type
                         (common-lisp:or is-new-for-entire-account
                                         common-lisp:null)
                         :accessor
                         struct-shape-new-aso-detail-is-new-for-entire-account
                         :shape "IsNewForEntireAccount" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-new-aso-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'new-aso-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'new-aso-detail 'make-new-aso-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input new-aso-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input new-aso-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aso))
      (common-lisp:list
       (common-lisp:cons "Aso"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-new-for-entire-account))
      (common-lisp:list
       (common-lisp:cons "IsNewForEntireAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input new-aso-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass new-geolocation-detail common-lisp:nil
                       ((location :initarg :location :initform common-lisp:nil
                         :type (common-lisp:or location common-lisp:null)
                         :accessor struct-shape-new-geolocation-detail-location
                         :shape "Location" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ip-address :initarg :ip-address :initform
                         common-lisp:nil :type
                         (common-lisp:or ip-address common-lisp:null) :accessor
                         struct-shape-new-geolocation-detail-ip-address :shape
                         "IpAddress" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (is-new-for-entire-account :initarg
                         :is-new-for-entire-account :initform common-lisp:nil
                         :type
                         (common-lisp:or is-new-for-entire-account
                                         common-lisp:null)
                         :accessor
                         struct-shape-new-geolocation-detail-is-new-for-entire-account
                         :shape "IsNewForEntireAccount" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-new-geolocation-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'new-geolocation-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'new-geolocation-detail 'make-new-geolocation-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          new-geolocation-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          new-geolocation-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "IpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-new-for-entire-account))
      (common-lisp:list
       (common-lisp:cons "IsNewForEntireAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          new-geolocation-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass new-user-agent-detail common-lisp:nil
                       ((user-agent :initarg :user-agent :initform
                         common-lisp:nil :type
                         (common-lisp:or user-agent common-lisp:null) :accessor
                         struct-shape-new-user-agent-detail-user-agent :shape
                         "UserAgent" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (is-new-for-entire-account :initarg
                         :is-new-for-entire-account :initform common-lisp:nil
                         :type
                         (common-lisp:or is-new-for-entire-account
                                         common-lisp:null)
                         :accessor
                         struct-shape-new-user-agent-detail-is-new-for-entire-account
                         :shape "IsNewForEntireAccount" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-new-user-agent-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'new-user-agent-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'new-user-agent-detail 'make-new-user-agent-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          new-user-agent-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          new-user-agent-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-agent))
      (common-lisp:list
       (common-lisp:cons "UserAgent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-new-for-entire-account))
      (common-lisp:list
       (common-lisp:cons "IsNewForEntireAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          new-user-agent-detail))
   common-lisp:nil))
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:deftype percentage () 'common-lisp:double-float)
(common-lisp:deftype procedure () 'common-lisp:string)
(common-lisp:deftype reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass reject-invitation-request common-lisp:nil
                       ((graph-arn :initarg :graph-arn :initform
                         (common-lisp:error ":graph-arn is required") :type
                         (common-lisp:or graph-arn common-lisp:null) :accessor
                         struct-shape-reject-invitation-request-graph-arn
                         :shape "GraphArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reject-invitation-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reject-invitation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reject-invitation-request
                    'make-reject-invitation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reject-invitation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reject-invitation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'graph-arn))
      (common-lisp:list
       (common-lisp:cons "GraphArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reject-invitation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass related-finding-detail common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or entity-arn common-lisp:null) :accessor
                         struct-shape-related-finding-detail-arn :shape
                         "EntityArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or type common-lisp:null) :accessor
                         struct-shape-related-finding-detail-type :shape "Type"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ip-address :initarg :ip-address :initform
                         common-lisp:nil :type
                         (common-lisp:or ip-address common-lisp:null) :accessor
                         struct-shape-related-finding-detail-ip-address :shape
                         "IpAddress" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-related-finding-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'related-finding-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'related-finding-detail 'make-related-finding-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          related-finding-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          related-finding-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "IpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          related-finding-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass related-finding-group-detail common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-related-finding-group-detail-id :shape
                         "Id" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-related-finding-group-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'related-finding-group-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'related-finding-group-detail
                    'make-related-finding-group-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          related-finding-group-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          related-finding-group-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          related-finding-group-detail))
   common-lisp:nil))
(common-lisp:deftype resource () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-list () '(trivial-types:proper-list resource))
 (common-lisp:defun make-resource-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (detective-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (detective-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)
      (resources :initarg :resources :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resources)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message
                    'service-quota-exceeded-exception-resources)))
(common-lisp:deftype severity () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass sort-criteria common-lisp:nil
                       ((field :initarg :field :initform common-lisp:nil :type
                         (common-lisp:or field common-lisp:null) :accessor
                         struct-shape-sort-criteria-field :shape "Field"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sort-order :initarg :sort-order :initform
                         common-lisp:nil :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         struct-shape-sort-criteria-sort-order :shape
                         "SortOrder" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sort-criteria
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sort-criteria
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'sort-criteria 'make-sort-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sort-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sort-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field))
      (common-lisp:list
       (common-lisp:cons "Field"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sort-criteria))
   common-lisp:nil))
(common-lisp:deftype sort-order () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass start-investigation-request common-lisp:nil
                       ((graph-arn :initarg :graph-arn :initform
                         (common-lisp:error ":graph-arn is required") :type
                         (common-lisp:or graph-arn common-lisp:null) :accessor
                         struct-shape-start-investigation-request-graph-arn
                         :shape "GraphArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (entity-arn :initarg :entity-arn :initform
                         (common-lisp:error ":entity-arn is required") :type
                         (common-lisp:or entity-arn common-lisp:null) :accessor
                         struct-shape-start-investigation-request-entity-arn
                         :shape "EntityArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scope-start-time :initarg :scope-start-time :initform
                         (common-lisp:error ":scope-start-time is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-start-investigation-request-scope-start-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scope-end-time :initarg :scope-end-time :initform
                         (common-lisp:error ":scope-end-time is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-start-investigation-request-scope-end-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-investigation-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-investigation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-investigation-request
                    'make-start-investigation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-investigation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-investigation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'graph-arn))
      (common-lisp:list
       (common-lisp:cons "GraphArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-arn))
      (common-lisp:list
       (common-lisp:cons "EntityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope-start-time))
      (common-lisp:list
       (common-lisp:cons "ScopeStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope-end-time))
      (common-lisp:list
       (common-lisp:cons "ScopeEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-investigation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-investigation-response common-lisp:nil
                       ((investigation-id :initarg :investigation-id :initform
                         common-lisp:nil :type
                         (common-lisp:or investigation-id common-lisp:null)
                         :accessor
                         struct-shape-start-investigation-response-investigation-id
                         :shape "InvestigationId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-investigation-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-investigation-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-investigation-response
                    'make-start-investigation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-investigation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-investigation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'investigation-id))
      (common-lisp:list
       (common-lisp:cons "InvestigationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-investigation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-monitoring-member-request common-lisp:nil
                       ((graph-arn :initarg :graph-arn :initform
                         (common-lisp:error ":graph-arn is required") :type
                         (common-lisp:or graph-arn common-lisp:null) :accessor
                         struct-shape-start-monitoring-member-request-graph-arn
                         :shape "GraphArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (account-id :initarg :account-id :initform
                         (common-lisp:error ":account-id is required") :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-start-monitoring-member-request-account-id
                         :shape "AccountId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-monitoring-member-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-monitoring-member-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-monitoring-member-request
                    'make-start-monitoring-member-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-monitoring-member-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-monitoring-member-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'graph-arn))
      (common-lisp:list
       (common-lisp:cons "GraphArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-monitoring-member-request))
   common-lisp:nil))
(common-lisp:deftype state () 'common-lisp:string)
(common-lisp:deftype status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass string-filter common-lisp:nil
                       ((value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or value common-lisp:null) :accessor
                         struct-shape-string-filter-value :shape "Value"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-string-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'string-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'string-filter 'make-string-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input string-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input string-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input string-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ttps-observed-detail common-lisp:nil
                       ((tactic :initarg :tactic :initform common-lisp:nil
                         :type (common-lisp:or tactic common-lisp:null)
                         :accessor struct-shape-ttps-observed-detail-tactic
                         :shape "Tactic" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (technique :initarg :technique :initform
                         common-lisp:nil :type
                         (common-lisp:or technique common-lisp:null) :accessor
                         struct-shape-ttps-observed-detail-technique :shape
                         "Technique" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (procedure :initarg :procedure :initform
                         common-lisp:nil :type
                         (common-lisp:or procedure common-lisp:null) :accessor
                         struct-shape-ttps-observed-detail-procedure :shape
                         "Procedure" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ip-address :initarg :ip-address :initform
                         common-lisp:nil :type
                         (common-lisp:or ip-address common-lisp:null) :accessor
                         struct-shape-ttps-observed-detail-ip-address :shape
                         "IpAddress" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (apiname :initarg :apiname :initform common-lisp:nil
                         :type (common-lisp:or apiname common-lisp:null)
                         :accessor struct-shape-ttps-observed-detail-apiname
                         :shape "APIName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (apisuccess-count :initarg :apisuccess-count :initform
                         common-lisp:nil :type
                         (common-lisp:or apisuccess-count common-lisp:null)
                         :accessor
                         struct-shape-ttps-observed-detail-apisuccess-count
                         :shape "APISuccessCount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (apifailure-count :initarg :apifailure-count :initform
                         common-lisp:nil :type
                         (common-lisp:or apifailure-count common-lisp:null)
                         :accessor
                         struct-shape-ttps-observed-detail-apifailure-count
                         :shape "APIFailureCount" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ttps-observed-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ttps-observed-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ttps-observed-detail 'make-ttps-observed-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ttps-observed-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ttps-observed-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tactic))
      (common-lisp:list
       (common-lisp:cons "Tactic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'technique))
      (common-lisp:list
       (common-lisp:cons "Technique"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'procedure))
      (common-lisp:list
       (common-lisp:cons "Procedure"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "IpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apiname))
      (common-lisp:list
       (common-lisp:cons "APIName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apisuccess-count))
      (common-lisp:list
       (common-lisp:cons "APISuccessCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apifailure-count))
      (common-lisp:list
       (common-lisp:cons "APIFailureCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ttps-observed-detail))
   common-lisp:nil))
(common-lisp:deftype tactic () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun make-tag-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or graph-arn common-lisp:null) :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "GraphArn" :location "uri" :location-name
                         "ResourceArn")
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape "TagMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype technique () 'common-lisp:string)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass timestamp-for-collection common-lisp:nil
                       ((timestamp :initarg :timestamp :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-timestamp-for-collection-timestamp :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-timestamp-for-collection
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'timestamp-for-collection
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'timestamp-for-collection 'make-timestamp-for-collection))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          timestamp-for-collection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          timestamp-for-collection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "Timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          timestamp-for-collection))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition too-many-requests-exception
     (detective-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-requests-exception-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-requests-exception
                    'too-many-requests-exception-message)))
(common-lisp:deftype type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass unprocessed-account common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-unprocessed-account-account-id :shape
                         "AccountId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (reason :initarg :reason :initform common-lisp:nil
                         :type
                         (common-lisp:or unprocessed-reason common-lisp:null)
                         :accessor struct-shape-unprocessed-account-reason
                         :shape "UnprocessedReason" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-unprocessed-account
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'unprocessed-account
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'unprocessed-account 'make-unprocessed-account))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input unprocessed-account))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input unprocessed-account))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input unprocessed-account))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype unprocessed-account-list ()
   '(trivial-types:proper-list unprocessed-account))
 (common-lisp:defun make-unprocessed-account-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list unprocessed-account))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass unprocessed-graph common-lisp:nil
                       ((graph-arn :initarg :graph-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or graph-arn common-lisp:null) :accessor
                         struct-shape-unprocessed-graph-graph-arn :shape
                         "GraphArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (reason :initarg :reason :initform common-lisp:nil
                         :type
                         (common-lisp:or unprocessed-reason common-lisp:null)
                         :accessor struct-shape-unprocessed-graph-reason :shape
                         "UnprocessedReason" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-unprocessed-graph
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'unprocessed-graph
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'unprocessed-graph 'make-unprocessed-graph))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input unprocessed-graph))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input unprocessed-graph))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'graph-arn))
      (common-lisp:list
       (common-lisp:cons "GraphArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input unprocessed-graph))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype unprocessed-graph-list ()
   '(trivial-types:proper-list unprocessed-graph))
 (common-lisp:defun make-unprocessed-graph-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list unprocessed-graph))
   aws-sdk/generator/shape::members))
(common-lisp:deftype unprocessed-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or graph-arn common-lisp:null) :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "GraphArn" :location "uri" :location-name
                         "ResourceArn")
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tag-keys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-untag-resource-request-tag-keys
                         :shape "TagKeyList" :location "querystring"
                         :location-name "tagKeys"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-datasource-packages-request common-lisp:nil
                       ((graph-arn :initarg :graph-arn :initform
                         (common-lisp:error ":graph-arn is required") :type
                         (common-lisp:or graph-arn common-lisp:null) :accessor
                         struct-shape-update-datasource-packages-request-graph-arn
                         :shape "GraphArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (datasource-packages :initarg :datasource-packages
                         :initform
                         (common-lisp:error ":datasource-packages is required")
                         :type
                         (common-lisp:or datasource-package-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-datasource-packages-request-datasource-packages
                         :shape "DatasourcePackageList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-datasource-packages-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-datasource-packages-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-datasource-packages-request
                    'make-update-datasource-packages-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-datasource-packages-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-datasource-packages-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'graph-arn))
      (common-lisp:list
       (common-lisp:cons "GraphArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datasource-packages))
      (common-lisp:list
       (common-lisp:cons "DatasourcePackages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-datasource-packages-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-investigation-state-request common-lisp:nil
                       ((graph-arn :initarg :graph-arn :initform
                         (common-lisp:error ":graph-arn is required") :type
                         (common-lisp:or graph-arn common-lisp:null) :accessor
                         struct-shape-update-investigation-state-request-graph-arn
                         :shape "GraphArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (investigation-id :initarg :investigation-id :initform
                         (common-lisp:error ":investigation-id is required")
                         :type
                         (common-lisp:or investigation-id common-lisp:null)
                         :accessor
                         struct-shape-update-investigation-state-request-investigation-id
                         :shape "InvestigationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform
                         (common-lisp:error ":state is required") :type
                         (common-lisp:or state common-lisp:null) :accessor
                         struct-shape-update-investigation-state-request-state
                         :shape "State" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-investigation-state-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-investigation-state-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-investigation-state-request
                    'make-update-investigation-state-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-investigation-state-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-investigation-state-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'graph-arn))
      (common-lisp:list
       (common-lisp:cons "GraphArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'investigation-id))
      (common-lisp:list
       (common-lisp:cons "InvestigationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-investigation-state-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-organization-configuration-request
                       common-lisp:nil
                       ((graph-arn :initarg :graph-arn :initform
                         (common-lisp:error ":graph-arn is required") :type
                         (common-lisp:or graph-arn common-lisp:null) :accessor
                         struct-shape-update-organization-configuration-request-graph-arn
                         :shape "GraphArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-enable :initarg :auto-enable :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-update-organization-configuration-request-auto-enable
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-organization-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-organization-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-organization-configuration-request
                    'make-update-organization-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-organization-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-organization-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'graph-arn))
      (common-lisp:list
       (common-lisp:cons "GraphArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-enable))
      (common-lisp:list
       (common-lisp:cons "AutoEnable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-organization-configuration-request))
   common-lisp:nil))
(common-lisp:deftype user-agent () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (detective-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)
      (error-code :initarg :error-code :initform common-lisp:nil :reader
       validation-exception-error-code)
      (error-code-reason :initarg :error-code-reason :initform common-lisp:nil
       :reader validation-exception-error-code-reason)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message
                    'validation-exception-error-code
                    'validation-exception-error-code-reason)))
(common-lisp:deftype value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype volume-usage-by-datasource-package ()
   'common-lisp:hash-table)
 (common-lisp:defun make-volume-usage-by-datasource-package
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defun accept-invitation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key graph-arn)
   (common-lisp:declare (common-lisp:ignorable graph-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-accept-invitation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'detective-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" "/invitation"
                                                        "AcceptInvitation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'accept-invitation))
(common-lisp:progn
 (common-lisp:defun batch-get-graph-member-datasources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key graph-arn account-ids)
   (common-lisp:declare (common-lisp:ignorable graph-arn account-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-get-graph-member-datasources-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'detective-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/graph/datasources/get"
                                                        "BatchGetGraphMemberDatasources"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-get-graph-member-datasources))
(common-lisp:progn
 (common-lisp:defun batch-get-membership-datasources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key graph-arns)
   (common-lisp:declare (common-lisp:ignorable graph-arns))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-get-membership-datasources-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'detective-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/membership/datasources/get"
                                                        "BatchGetMembershipDatasources"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-get-membership-datasources))
(common-lisp:progn
 (common-lisp:defun create-graph
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key tags)
   (common-lisp:declare (common-lisp:ignorable tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-graph-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'detective-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/graph"
                                                        "CreateGraph"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-graph))
(common-lisp:progn
 (common-lisp:defun create-members
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key graph-arn message
                     disable-email-notification accounts)
   (common-lisp:declare
    (common-lisp:ignorable graph-arn message disable-email-notification
     accounts))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-members-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'detective-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/graph/members"
                                                        "CreateMembers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-members))
(common-lisp:progn
 (common-lisp:defun delete-graph
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key graph-arn)
   (common-lisp:declare (common-lisp:ignorable graph-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-graph-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'detective-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/graph/removal"
                                                        "DeleteGraph"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-graph))
(common-lisp:progn
 (common-lisp:defun delete-members
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key graph-arn account-ids)
   (common-lisp:declare (common-lisp:ignorable graph-arn account-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-members-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'detective-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/graph/members/removal"
                                                        "DeleteMembers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-members))
(common-lisp:progn
 (common-lisp:defun describe-organization-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key graph-arn)
   (common-lisp:declare (common-lisp:ignorable graph-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-organization-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'detective-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/orgs/describeOrganizationConfiguration"
                                                        "DescribeOrganizationConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-organization-configuration))
(common-lisp:progn
 (common-lisp:defun disable-organization-admin-account ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'detective-request :method "POST" :path
                                "/orgs/disableAdminAccount" :operation
                                "DisableOrganizationAdminAccount"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'disable-organization-admin-account))
(common-lisp:progn
 (common-lisp:defun disassociate-membership
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key graph-arn)
   (common-lisp:declare (common-lisp:ignorable graph-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disassociate-membership-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'detective-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/membership/removal"
                                                        "DisassociateMembership"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disassociate-membership))
(common-lisp:progn
 (common-lisp:defun enable-organization-admin-account
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id)
   (common-lisp:declare (common-lisp:ignorable account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-enable-organization-admin-account-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'detective-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/orgs/enableAdminAccount"
                                                        "EnableOrganizationAdminAccount"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'enable-organization-admin-account))
(common-lisp:progn
 (common-lisp:defun get-investigation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key graph-arn investigation-id)
   (common-lisp:declare (common-lisp:ignorable graph-arn investigation-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-investigation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'detective-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/investigations/getInvestigation"
                                                        "GetInvestigation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-investigation))
(common-lisp:progn
 (common-lisp:defun get-members
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key graph-arn account-ids)
   (common-lisp:declare (common-lisp:ignorable graph-arn account-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-members-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'detective-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/graph/members/get"
                                                        "GetMembers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-members))
(common-lisp:progn
 (common-lisp:defun list-datasource-packages
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key graph-arn next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable graph-arn next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-datasource-packages-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'detective-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/graph/datasources/list"
                                                        "ListDatasourcePackages"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-datasource-packages))
(common-lisp:progn
 (common-lisp:defun list-graphs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-graphs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'detective-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/graphs/list"
                                                        "ListGraphs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-graphs))
(common-lisp:progn
 (common-lisp:defun list-indicators
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key graph-arn investigation-id indicator-type
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable graph-arn investigation-id indicator-type next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-indicators-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'detective-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/investigations/listIndicators"
                                                        "ListIndicators"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-indicators))
(common-lisp:progn
 (common-lisp:defun list-investigations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key graph-arn next-token max-results
                     filter-criteria sort-criteria)
   (common-lisp:declare
    (common-lisp:ignorable graph-arn next-token max-results filter-criteria
     sort-criteria))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-investigations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'detective-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/investigations/listInvestigations"
                                                        "ListInvestigations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-investigations))
(common-lisp:progn
 (common-lisp:defun list-invitations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-invitations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'detective-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/invitations/list"
                                                        "ListInvitations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-invitations))
(common-lisp:progn
 (common-lisp:defun list-members
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key graph-arn next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable graph-arn next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-members-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'detective-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/graph/members/list"
                                                        "ListMembers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-members))
(common-lisp:progn
 (common-lisp:defun list-organization-admin-accounts
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-organization-admin-accounts-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'detective-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/orgs/adminAccountslist"
                                                        "ListOrganizationAdminAccounts"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-organization-admin-accounts))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'detective-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun reject-invitation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key graph-arn)
   (common-lisp:declare (common-lisp:ignorable graph-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reject-invitation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'detective-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/invitation/removal"
                                                        "RejectInvitation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'reject-invitation))
(common-lisp:progn
 (common-lisp:defun start-investigation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key graph-arn entity-arn scope-start-time
                     scope-end-time)
   (common-lisp:declare
    (common-lisp:ignorable graph-arn entity-arn scope-start-time
     scope-end-time))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-investigation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'detective-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/investigations/startInvestigation"
                                                        "StartInvestigation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-investigation))
(common-lisp:progn
 (common-lisp:defun start-monitoring-member
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key graph-arn account-id)
   (common-lisp:declare (common-lisp:ignorable graph-arn account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-monitoring-member-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'detective-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/graph/member/monitoringstate"
                                                        "StartMonitoringMember"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-monitoring-member))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'detective-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'detective-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-datasource-packages
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key graph-arn datasource-packages)
   (common-lisp:declare (common-lisp:ignorable graph-arn datasource-packages))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-datasource-packages-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'detective-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/graph/datasources/update"
                                                        "UpdateDatasourcePackages"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-datasource-packages))
(common-lisp:progn
 (common-lisp:defun update-investigation-state
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key graph-arn investigation-id state)
   (common-lisp:declare
    (common-lisp:ignorable graph-arn investigation-id state))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-investigation-state-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'detective-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/investigations/updateInvestigationState"
                                                        "UpdateInvestigationState"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-investigation-state))
(common-lisp:progn
 (common-lisp:defun update-organization-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key graph-arn auto-enable)
   (common-lisp:declare (common-lisp:ignorable graph-arn auto-enable))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-organization-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'detective-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/orgs/updateOrganizationConfiguration"
                                                        "UpdateOrganizationConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-organization-configuration))
