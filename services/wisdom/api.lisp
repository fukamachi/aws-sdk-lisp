;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/wisdom/api
  (:use)
  (:nicknames #:aws/wisdom)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/wisdom/api)
(common-lisp:progn
 (common-lisp:define-condition wisdom-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'wisdom-error))
(common-lisp:progn
 (common-lisp:defclass wisdom-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "wisdom" :api-version
                        "2020-10-19" :host-prefix "wisdom" :signing-name
                        "wisdom" :global-host common-lisp:nil))
 (common-lisp:export 'wisdom-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("PreconditionFailedException" . precondition-failed-exception)
    ("RequestTimeoutException" . request-timeout-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("TooManyTagsException" . too-many-tags-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (wisdom-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defclass app-integrations-configuration common-lisp:nil
                       ((app-integration-arn :initarg :app-integration-arn
                         :initform
                         (common-lisp:error ":appintegrationarn is required")
                         :type (common-lisp:or generic-arn common-lisp:null)
                         :accessor
                         struct-shape-app-integrations-configuration-app-integration-arn
                         :shape "GenericArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (object-fields :initarg :object-fields :initform
                         common-lisp:nil :type
                         (common-lisp:or object-fields-list common-lisp:null)
                         :accessor
                         struct-shape-app-integrations-configuration-object-fields
                         :shape "ObjectFieldsList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-app-integrations-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'app-integrations-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'app-integrations-configuration
                    'make-app-integrations-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          app-integrations-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          app-integrations-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-integration-arn))
      (common-lisp:list
       (common-lisp:cons "appIntegrationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-fields))
      (common-lisp:list
       (common-lisp:cons "objectFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          app-integrations-configuration))
   common-lisp:nil))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass assistant-association-data common-lisp:nil
                       ((assistant-arn :initarg :assistant-arn :initform
                         (common-lisp:error ":assistantarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-assistant-association-data-assistant-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (assistant-association-arn :initarg
                         :assistant-association-arn :initform
                         (common-lisp:error
                          ":assistantassociationarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-assistant-association-data-assistant-association-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (assistant-association-id :initarg
                         :assistant-association-id :initform
                         (common-lisp:error
                          ":assistantassociationid is required")
                         :type (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-assistant-association-data-assistant-association-id
                         :shape "Uuid" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (assistant-id :initarg :assistant-id :initform
                         (common-lisp:error ":assistantid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-assistant-association-data-assistant-id
                         :shape "Uuid" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (association-data :initarg :association-data :initform
                         (common-lisp:error ":associationdata is required")
                         :type
                         (common-lisp:or assistant-association-output-data
                                         common-lisp:null)
                         :accessor
                         struct-shape-assistant-association-data-association-data
                         :shape "AssistantAssociationOutputData" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (association-type :initarg :association-type :initform
                         (common-lisp:error ":associationtype is required")
                         :type
                         (common-lisp:or association-type common-lisp:null)
                         :accessor
                         struct-shape-assistant-association-data-association-type
                         :shape "AssociationType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-assistant-association-data-tags :shape
                         "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-assistant-association-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'assistant-association-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'assistant-association-data
                    'make-assistant-association-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assistant-association-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assistant-association-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assistant-arn))
      (common-lisp:list
       (common-lisp:cons "assistantArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assistant-association-arn))
      (common-lisp:list
       (common-lisp:cons "assistantAssociationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assistant-association-id))
      (common-lisp:list
       (common-lisp:cons "assistantAssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assistant-id))
      (common-lisp:list
       (common-lisp:cons "assistantId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-data))
      (common-lisp:list
       (common-lisp:cons "associationData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-type))
      (common-lisp:list
       (common-lisp:cons "associationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assistant-association-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass assistant-association-input-data common-lisp:nil
                       ((knowledge-base-id :initarg :knowledge-base-id
                         :initform common-lisp:nil :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-assistant-association-input-data-knowledge-base-id
                         :shape "Uuid" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-assistant-association-input-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'assistant-association-input-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'assistant-association-input-data
                    'make-assistant-association-input-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assistant-association-input-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assistant-association-input-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-id))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assistant-association-input-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass assistant-association-output-data common-lisp:nil
                       ((knowledge-base-association :initarg
                         :knowledge-base-association :initform common-lisp:nil
                         :type
                         (common-lisp:or knowledge-base-association-data
                                         common-lisp:null)
                         :accessor
                         struct-shape-assistant-association-output-data-knowledge-base-association
                         :shape "KnowledgeBaseAssociationData" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-assistant-association-output-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'assistant-association-output-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'assistant-association-output-data
                    'make-assistant-association-output-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assistant-association-output-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assistant-association-output-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'knowledge-base-association))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assistant-association-output-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass assistant-association-summary common-lisp:nil
                       ((assistant-arn :initarg :assistant-arn :initform
                         (common-lisp:error ":assistantarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-assistant-association-summary-assistant-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (assistant-association-arn :initarg
                         :assistant-association-arn :initform
                         (common-lisp:error
                          ":assistantassociationarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-assistant-association-summary-assistant-association-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (assistant-association-id :initarg
                         :assistant-association-id :initform
                         (common-lisp:error
                          ":assistantassociationid is required")
                         :type (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-assistant-association-summary-assistant-association-id
                         :shape "Uuid" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (assistant-id :initarg :assistant-id :initform
                         (common-lisp:error ":assistantid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-assistant-association-summary-assistant-id
                         :shape "Uuid" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (association-data :initarg :association-data :initform
                         (common-lisp:error ":associationdata is required")
                         :type
                         (common-lisp:or assistant-association-output-data
                                         common-lisp:null)
                         :accessor
                         struct-shape-assistant-association-summary-association-data
                         :shape "AssistantAssociationOutputData" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (association-type :initarg :association-type :initform
                         (common-lisp:error ":associationtype is required")
                         :type
                         (common-lisp:or association-type common-lisp:null)
                         :accessor
                         struct-shape-assistant-association-summary-association-type
                         :shape "AssociationType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-assistant-association-summary-tags :shape
                         "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-assistant-association-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'assistant-association-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'assistant-association-summary
                    'make-assistant-association-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assistant-association-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assistant-association-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assistant-arn))
      (common-lisp:list
       (common-lisp:cons "assistantArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assistant-association-arn))
      (common-lisp:list
       (common-lisp:cons "assistantAssociationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assistant-association-id))
      (common-lisp:list
       (common-lisp:cons "assistantAssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assistant-id))
      (common-lisp:list
       (common-lisp:cons "assistantId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-data))
      (common-lisp:list
       (common-lisp:cons "associationData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-type))
      (common-lisp:list
       (common-lisp:cons "associationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assistant-association-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype assistant-association-summary-list ()
   '(trivial-types:proper-list assistant-association-summary))
 (common-lisp:defun make-assistant-association-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            assistant-association-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass assistant-data common-lisp:nil
                       ((assistant-arn :initarg :assistant-arn :initform
                         (common-lisp:error ":assistantarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-assistant-data-assistant-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (assistant-id :initarg :assistant-id :initform
                         (common-lisp:error ":assistantid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-assistant-data-assistant-id :shape "Uuid"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-assistant-data-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (integration-configuration :initarg
                         :integration-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or assistant-integration-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-assistant-data-integration-configuration
                         :shape "AssistantIntegrationConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-assistant-data-name :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (server-side-encryption-configuration :initarg
                         :server-side-encryption-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or server-side-encryption-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-assistant-data-server-side-encryption-configuration
                         :shape "ServerSideEncryptionConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or assistant-status common-lisp:null)
                         :accessor struct-shape-assistant-data-status :shape
                         "AssistantStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-assistant-data-tags :shape "Tags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or assistant-type common-lisp:null)
                         :accessor struct-shape-assistant-data-type :shape
                         "AssistantType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-assistant-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'assistant-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'assistant-data 'make-assistant-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input assistant-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input assistant-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assistant-arn))
      (common-lisp:list
       (common-lisp:cons "assistantArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assistant-id))
      (common-lisp:list
       (common-lisp:cons "assistantId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'integration-configuration))
      (common-lisp:list
       (common-lisp:cons "integrationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "serverSideEncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input assistant-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass assistant-integration-configuration common-lisp:nil
                       ((topic-integration-arn :initarg :topic-integration-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-arn common-lisp:null)
                         :accessor
                         struct-shape-assistant-integration-configuration-topic-integration-arn
                         :shape "GenericArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-assistant-integration-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'assistant-integration-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'assistant-integration-configuration
                    'make-assistant-integration-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assistant-integration-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assistant-integration-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'topic-integration-arn))
      (common-lisp:list
       (common-lisp:cons "topicIntegrationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assistant-integration-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype assistant-list ()
   '(trivial-types:proper-list assistant-summary))
 (common-lisp:defun make-assistant-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list assistant-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype assistant-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass assistant-summary common-lisp:nil
                       ((assistant-arn :initarg :assistant-arn :initform
                         (common-lisp:error ":assistantarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-assistant-summary-assistant-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (assistant-id :initarg :assistant-id :initform
                         (common-lisp:error ":assistantid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-assistant-summary-assistant-id :shape
                         "Uuid" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-assistant-summary-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (integration-configuration :initarg
                         :integration-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or assistant-integration-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-assistant-summary-integration-configuration
                         :shape "AssistantIntegrationConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-assistant-summary-name :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (server-side-encryption-configuration :initarg
                         :server-side-encryption-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or server-side-encryption-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-assistant-summary-server-side-encryption-configuration
                         :shape "ServerSideEncryptionConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or assistant-status common-lisp:null)
                         :accessor struct-shape-assistant-summary-status :shape
                         "AssistantStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-assistant-summary-tags :shape "Tags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or assistant-type common-lisp:null)
                         :accessor struct-shape-assistant-summary-type :shape
                         "AssistantType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-assistant-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'assistant-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'assistant-summary 'make-assistant-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input assistant-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input assistant-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assistant-arn))
      (common-lisp:list
       (common-lisp:cons "assistantArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assistant-id))
      (common-lisp:list
       (common-lisp:cons "assistantId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'integration-configuration))
      (common-lisp:list
       (common-lisp:cons "integrationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "serverSideEncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input assistant-summary))
   common-lisp:nil))
(common-lisp:deftype assistant-type () 'common-lisp:string)
(common-lisp:deftype association-type () 'common-lisp:string)
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype channel () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype channels () '(trivial-types:proper-list channel))
 (common-lisp:defun make-channels
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list channel))
   aws-sdk/generator/shape::members))
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass configuration common-lisp:nil
                       ((connect-configuration :initarg :connect-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or connect-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-configuration-connect-configuration
                         :shape "ConnectConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'configuration 'make-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connect-configuration))
      (common-lisp:list
       (common-lisp:cons "connectConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (wisdom-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defclass connect-configuration common-lisp:nil
                       ((instance-id :initarg :instance-id :initform
                         common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-connect-configuration-instance-id :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-connect-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'connect-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'connect-configuration 'make-connect-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          connect-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          connect-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "instanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          connect-configuration))
   common-lisp:nil))
(common-lisp:deftype contact-attribute-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype contact-attribute-keys ()
   '(trivial-types:proper-list contact-attribute-key))
 (common-lisp:defun make-contact-attribute-keys
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list contact-attribute-key))
   aws-sdk/generator/shape::members))
(common-lisp:deftype contact-attribute-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype contact-attributes () 'common-lisp:hash-table)
 (common-lisp:defun make-contact-attributes
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass content-data common-lisp:nil
                       ((content-arn :initarg :content-arn :initform
                         (common-lisp:error ":contentarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-content-data-content-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (content-id :initarg :content-id :initform
                         (common-lisp:error ":contentid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-content-data-content-id :shape "Uuid"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (content-type :initarg :content-type :initform
                         (common-lisp:error ":contenttype is required") :type
                         (common-lisp:or content-type common-lisp:null)
                         :accessor struct-shape-content-data-content-type
                         :shape "ContentType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (knowledge-base-arn :initarg :knowledge-base-arn
                         :initform
                         (common-lisp:error ":knowledgebasearn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-content-data-knowledge-base-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (knowledge-base-id :initarg :knowledge-base-id
                         :initform
                         (common-lisp:error ":knowledgebaseid is required")
                         :type (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-content-data-knowledge-base-id :shape
                         "Uuid" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (link-out-uri :initarg :link-out-uri :initform
                         common-lisp:nil :type
                         (common-lisp:or uri common-lisp:null) :accessor
                         struct-shape-content-data-link-out-uri :shape "Uri"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (metadata :initarg :metadata :initform
                         (common-lisp:error ":metadata is required") :type
                         (common-lisp:or content-metadata common-lisp:null)
                         :accessor struct-shape-content-data-metadata :shape
                         "ContentMetadata" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-content-data-name :shape "Name" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (revision-id :initarg :revision-id :initform
                         (common-lisp:error ":revisionid is required") :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-content-data-revision-id :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or content-status common-lisp:null)
                         :accessor struct-shape-content-data-status :shape
                         "ContentStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-content-data-tags :shape "Tags" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (title :initarg :title :initform
                         (common-lisp:error ":title is required") :type
                         (common-lisp:or content-title common-lisp:null)
                         :accessor struct-shape-content-data-title :shape
                         "ContentTitle" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (url :initarg :url :initform
                         (common-lisp:error ":url is required") :type
                         (common-lisp:or url common-lisp:null) :accessor
                         struct-shape-content-data-url :shape "Url" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (url-expiry :initarg :url-expiry :initform
                         (common-lisp:error ":urlexpiry is required") :type
                         (common-lisp:or synthetic-timestamp-epoch-seconds
                                         common-lisp:null)
                         :accessor struct-shape-content-data-url-expiry :shape
                         "SyntheticTimestamp_epoch_seconds" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-content-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'content-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'content-data 'make-content-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input content-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input content-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-arn))
      (common-lisp:list
       (common-lisp:cons "contentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-id))
      (common-lisp:list
       (common-lisp:cons "contentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "contentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-arn))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-id))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'link-out-uri))
      (common-lisp:list
       (common-lisp:cons "linkOutUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "revisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url-expiry))
      (common-lisp:list
       (common-lisp:cons "urlExpiry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input content-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype content-metadata () 'common-lisp:hash-table)
 (common-lisp:defun make-content-metadata (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass content-reference common-lisp:nil
                       ((content-arn :initarg :content-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-content-reference-content-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (content-id :initarg :content-id :initform
                         common-lisp:nil :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-content-reference-content-id :shape
                         "Uuid" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (knowledge-base-arn :initarg :knowledge-base-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-content-reference-knowledge-base-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (knowledge-base-id :initarg :knowledge-base-id
                         :initform common-lisp:nil :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-content-reference-knowledge-base-id
                         :shape "Uuid" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-content-reference
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'content-reference
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'content-reference 'make-content-reference))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input content-reference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input content-reference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-arn))
      (common-lisp:list
       (common-lisp:cons "contentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-id))
      (common-lisp:list
       (common-lisp:cons "contentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-arn))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-id))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input content-reference))
   common-lisp:nil))
(common-lisp:deftype content-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass content-summary common-lisp:nil
                       ((content-arn :initarg :content-arn :initform
                         (common-lisp:error ":contentarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-content-summary-content-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (content-id :initarg :content-id :initform
                         (common-lisp:error ":contentid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-content-summary-content-id :shape "Uuid"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (content-type :initarg :content-type :initform
                         (common-lisp:error ":contenttype is required") :type
                         (common-lisp:or content-type common-lisp:null)
                         :accessor struct-shape-content-summary-content-type
                         :shape "ContentType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (knowledge-base-arn :initarg :knowledge-base-arn
                         :initform
                         (common-lisp:error ":knowledgebasearn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-content-summary-knowledge-base-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (knowledge-base-id :initarg :knowledge-base-id
                         :initform
                         (common-lisp:error ":knowledgebaseid is required")
                         :type (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-content-summary-knowledge-base-id :shape
                         "Uuid" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (metadata :initarg :metadata :initform
                         (common-lisp:error ":metadata is required") :type
                         (common-lisp:or content-metadata common-lisp:null)
                         :accessor struct-shape-content-summary-metadata :shape
                         "ContentMetadata" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-content-summary-name :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (revision-id :initarg :revision-id :initform
                         (common-lisp:error ":revisionid is required") :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-content-summary-revision-id
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or content-status common-lisp:null)
                         :accessor struct-shape-content-summary-status :shape
                         "ContentStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-content-summary-tags :shape "Tags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (title :initarg :title :initform
                         (common-lisp:error ":title is required") :type
                         (common-lisp:or content-title common-lisp:null)
                         :accessor struct-shape-content-summary-title :shape
                         "ContentTitle" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-content-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'content-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'content-summary 'make-content-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input content-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input content-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-arn))
      (common-lisp:list
       (common-lisp:cons "contentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-id))
      (common-lisp:list
       (common-lisp:cons "contentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "contentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-arn))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-id))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "revisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input content-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype content-summary-list ()
   '(trivial-types:proper-list content-summary))
 (common-lisp:defun make-content-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list content-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype content-title () 'common-lisp:string)
(common-lisp:deftype content-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-assistant-association-request common-lisp:nil
                       ((assistant-id :initarg :assistant-id :initform
                         (common-lisp:error ":assistantid is required") :type
                         (common-lisp:or uuid-or-arn common-lisp:null)
                         :accessor
                         struct-shape-create-assistant-association-request-assistant-id
                         :shape "UuidOrArn" :location "uri" :location-name
                         "assistantId")
                        (association :initarg :association :initform
                         (common-lisp:error ":association is required") :type
                         (common-lisp:or assistant-association-input-data
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-assistant-association-request-association
                         :shape "AssistantAssociationInputData" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (association-type :initarg :association-type :initform
                         (common-lisp:error ":associationtype is required")
                         :type
                         (common-lisp:or association-type common-lisp:null)
                         :accessor
                         struct-shape-create-assistant-association-request-association-type
                         :shape "AssociationType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-assistant-association-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-create-assistant-association-request-tags
                         :shape "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-assistant-association-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-assistant-association-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-assistant-association-request
                    'make-create-assistant-association-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-assistant-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-assistant-association-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association))
      (common-lisp:list
       (common-lisp:cons "association"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-type))
      (common-lisp:list
       (common-lisp:cons "associationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-assistant-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-assistant-association-response common-lisp:nil
                       ((assistant-association :initarg :assistant-association
                         :initform common-lisp:nil :type
                         (common-lisp:or assistant-association-data
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-assistant-association-response-assistant-association
                         :shape "AssistantAssociationData" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-assistant-association-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-assistant-association-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-assistant-association-response
                    'make-create-assistant-association-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-assistant-association-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-assistant-association-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assistant-association))
      (common-lisp:list
       (common-lisp:cons "assistantAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-assistant-association-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-assistant-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-assistant-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-assistant-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-assistant-request-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (server-side-encryption-configuration :initarg
                         :server-side-encryption-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or server-side-encryption-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-assistant-request-server-side-encryption-configuration
                         :shape "ServerSideEncryptionConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-create-assistant-request-tags :shape
                         "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or assistant-type common-lisp:null)
                         :accessor struct-shape-create-assistant-request-type
                         :shape "AssistantType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-assistant-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-assistant-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-assistant-request 'make-create-assistant-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-assistant-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-assistant-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "serverSideEncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-assistant-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-assistant-response common-lisp:nil
                       ((assistant :initarg :assistant :initform
                         common-lisp:nil :type
                         (common-lisp:or assistant-data common-lisp:null)
                         :accessor
                         struct-shape-create-assistant-response-assistant
                         :shape "AssistantData" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-assistant-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-assistant-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-assistant-response
                    'make-create-assistant-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-assistant-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-assistant-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assistant))
      (common-lisp:list
       (common-lisp:cons "assistant"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-assistant-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-content-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-create-content-request-client-token
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (knowledge-base-id :initarg :knowledge-base-id
                         :initform
                         (common-lisp:error ":knowledgebaseid is required")
                         :type (common-lisp:or uuid-or-arn common-lisp:null)
                         :accessor
                         struct-shape-create-content-request-knowledge-base-id
                         :shape "UuidOrArn" :location "uri" :location-name
                         "knowledgeBaseId")
                        (metadata :initarg :metadata :initform common-lisp:nil
                         :type
                         (common-lisp:or content-metadata common-lisp:null)
                         :accessor struct-shape-create-content-request-metadata
                         :shape "ContentMetadata" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-content-request-name :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (override-link-out-uri :initarg :override-link-out-uri
                         :initform common-lisp:nil :type
                         (common-lisp:or uri common-lisp:null) :accessor
                         struct-shape-create-content-request-override-link-out-uri
                         :shape "Uri" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-create-content-request-tags :shape "Tags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (title :initarg :title :initform common-lisp:nil :type
                         (common-lisp:or content-title common-lisp:null)
                         :accessor struct-shape-create-content-request-title
                         :shape "ContentTitle" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (upload-id :initarg :upload-id :initform
                         (common-lisp:error ":uploadid is required") :type
                         (common-lisp:or upload-id common-lisp:null) :accessor
                         struct-shape-create-content-request-upload-id :shape
                         "UploadId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-content-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-content-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-content-request 'make-create-content-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-content-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-content-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'override-link-out-uri))
      (common-lisp:list
       (common-lisp:cons "overrideLinkOutUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-id))
      (common-lisp:list
       (common-lisp:cons "uploadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-content-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-content-response common-lisp:nil
                       ((content :initarg :content :initform common-lisp:nil
                         :type (common-lisp:or content-data common-lisp:null)
                         :accessor struct-shape-create-content-response-content
                         :shape "ContentData" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-content-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-content-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-content-response 'make-create-content-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-content-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-content-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-content-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-knowledge-base-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-create-knowledge-base-request-client-token
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-knowledge-base-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (knowledge-base-type :initarg :knowledge-base-type
                         :initform
                         (common-lisp:error ":knowledgebasetype is required")
                         :type
                         (common-lisp:or knowledge-base-type common-lisp:null)
                         :accessor
                         struct-shape-create-knowledge-base-request-knowledge-base-type
                         :shape "KnowledgeBaseType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-knowledge-base-request-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (rendering-configuration :initarg
                         :rendering-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or rendering-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-knowledge-base-request-rendering-configuration
                         :shape "RenderingConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (server-side-encryption-configuration :initarg
                         :server-side-encryption-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or server-side-encryption-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-knowledge-base-request-server-side-encryption-configuration
                         :shape "ServerSideEncryptionConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (source-configuration :initarg :source-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or source-configuration common-lisp:null)
                         :accessor
                         struct-shape-create-knowledge-base-request-source-configuration
                         :shape "SourceConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-create-knowledge-base-request-tags :shape
                         "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-knowledge-base-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-knowledge-base-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-knowledge-base-request
                    'make-create-knowledge-base-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-knowledge-base-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-knowledge-base-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-type))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rendering-configuration))
      (common-lisp:list
       (common-lisp:cons "renderingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "serverSideEncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-configuration))
      (common-lisp:list
       (common-lisp:cons "sourceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-knowledge-base-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-knowledge-base-response common-lisp:nil
                       ((knowledge-base :initarg :knowledge-base :initform
                         common-lisp:nil :type
                         (common-lisp:or knowledge-base-data common-lisp:null)
                         :accessor
                         struct-shape-create-knowledge-base-response-knowledge-base
                         :shape "KnowledgeBaseData" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-knowledge-base-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-knowledge-base-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-knowledge-base-response
                    'make-create-knowledge-base-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-knowledge-base-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-knowledge-base-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base))
      (common-lisp:list
       (common-lisp:cons "knowledgeBase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-knowledge-base-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-quick-response-request common-lisp:nil
                       ((channels :initarg :channels :initform common-lisp:nil
                         :type (common-lisp:or channels common-lisp:null)
                         :accessor
                         struct-shape-create-quick-response-request-channels
                         :shape "Channels" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-create-quick-response-request-client-token
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (content :initarg :content :initform
                         (common-lisp:error ":content is required") :type
                         (common-lisp:or quick-response-data-provider
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-quick-response-request-content
                         :shape "QuickResponseDataProvider" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (content-type :initarg :content-type :initform
                         common-lisp:nil :type
                         (common-lisp:or quick-response-type common-lisp:null)
                         :accessor
                         struct-shape-create-quick-response-request-content-type
                         :shape "QuickResponseType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or quick-response-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-quick-response-request-description
                         :shape "QuickResponseDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (grouping-configuration :initarg
                         :grouping-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or grouping-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-quick-response-request-grouping-configuration
                         :shape "GroupingConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (is-active :initarg :is-active :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-create-quick-response-request-is-active
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (knowledge-base-id :initarg :knowledge-base-id
                         :initform
                         (common-lisp:error ":knowledgebaseid is required")
                         :type (common-lisp:or uuid-or-arn common-lisp:null)
                         :accessor
                         struct-shape-create-quick-response-request-knowledge-base-id
                         :shape "UuidOrArn" :location "uri" :location-name
                         "knowledgeBaseId")
                        (language :initarg :language :initform common-lisp:nil
                         :type (common-lisp:or language-code common-lisp:null)
                         :accessor
                         struct-shape-create-quick-response-request-language
                         :shape "LanguageCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or quick-response-name common-lisp:null)
                         :accessor
                         struct-shape-create-quick-response-request-name :shape
                         "QuickResponseName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (shortcut-key :initarg :shortcut-key :initform
                         common-lisp:nil :type
                         (common-lisp:or short-cut-key common-lisp:null)
                         :accessor
                         struct-shape-create-quick-response-request-shortcut-key
                         :shape "ShortCutKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-create-quick-response-request-tags :shape
                         "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-quick-response-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-quick-response-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-quick-response-request
                    'make-create-quick-response-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-quick-response-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-quick-response-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channels))
      (common-lisp:list
       (common-lisp:cons "channels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "contentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'grouping-configuration))
      (common-lisp:list
       (common-lisp:cons "groupingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-active))
      (common-lisp:list
       (common-lisp:cons "isActive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language))
      (common-lisp:list
       (common-lisp:cons "language"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shortcut-key))
      (common-lisp:list
       (common-lisp:cons "shortcutKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-quick-response-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-quick-response-response common-lisp:nil
                       ((quick-response :initarg :quick-response :initform
                         common-lisp:nil :type
                         (common-lisp:or quick-response-data common-lisp:null)
                         :accessor
                         struct-shape-create-quick-response-response-quick-response
                         :shape "QuickResponseData" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-quick-response-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-quick-response-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-quick-response-response
                    'make-create-quick-response-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-quick-response-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-quick-response-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quick-response))
      (common-lisp:list
       (common-lisp:cons "quickResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-quick-response-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-session-request common-lisp:nil
                       ((assistant-id :initarg :assistant-id :initform
                         (common-lisp:error ":assistantid is required") :type
                         (common-lisp:or uuid-or-arn common-lisp:null)
                         :accessor
                         struct-shape-create-session-request-assistant-id
                         :shape "UuidOrArn" :location "uri" :location-name
                         "assistantId")
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-session-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-session-request-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-session-request-name :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-create-session-request-tags :shape "Tags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-session-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-session-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-session-request 'make-create-session-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-session-response common-lisp:nil
                       ((session :initarg :session :initform common-lisp:nil
                         :type (common-lisp:or session-data common-lisp:null)
                         :accessor struct-shape-create-session-response-session
                         :shape "SessionData" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-session-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-session-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-session-response 'make-create-session-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-session-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session))
      (common-lisp:list
       (common-lisp:cons "session"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-session-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-assistant-association-request common-lisp:nil
                       ((assistant-association-id :initarg
                         :assistant-association-id :initform
                         (common-lisp:error
                          ":assistantassociationid is required")
                         :type (common-lisp:or uuid-or-arn common-lisp:null)
                         :accessor
                         struct-shape-delete-assistant-association-request-assistant-association-id
                         :shape "UuidOrArn" :location "uri" :location-name
                         "assistantAssociationId")
                        (assistant-id :initarg :assistant-id :initform
                         (common-lisp:error ":assistantid is required") :type
                         (common-lisp:or uuid-or-arn common-lisp:null)
                         :accessor
                         struct-shape-delete-assistant-association-request-assistant-id
                         :shape "UuidOrArn" :location "uri" :location-name
                         "assistantId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-assistant-association-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-assistant-association-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-assistant-association-request
                    'make-delete-assistant-association-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-assistant-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-assistant-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-assistant-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-assistant-association-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-assistant-association-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-assistant-association-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-assistant-association-response
                    'make-delete-assistant-association-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-assistant-association-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-assistant-association-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-assistant-association-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-assistant-request common-lisp:nil
                       ((assistant-id :initarg :assistant-id :initform
                         (common-lisp:error ":assistantid is required") :type
                         (common-lisp:or uuid-or-arn common-lisp:null)
                         :accessor
                         struct-shape-delete-assistant-request-assistant-id
                         :shape "UuidOrArn" :location "uri" :location-name
                         "assistantId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-assistant-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-assistant-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-assistant-request 'make-delete-assistant-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-assistant-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-assistant-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-assistant-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-assistant-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-assistant-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-assistant-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-assistant-response
                    'make-delete-assistant-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-assistant-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-assistant-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-assistant-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-content-request common-lisp:nil
                       ((content-id :initarg :content-id :initform
                         (common-lisp:error ":contentid is required") :type
                         (common-lisp:or uuid-or-arn common-lisp:null)
                         :accessor
                         struct-shape-delete-content-request-content-id :shape
                         "UuidOrArn" :location "uri" :location-name
                         "contentId")
                        (knowledge-base-id :initarg :knowledge-base-id
                         :initform
                         (common-lisp:error ":knowledgebaseid is required")
                         :type (common-lisp:or uuid-or-arn common-lisp:null)
                         :accessor
                         struct-shape-delete-content-request-knowledge-base-id
                         :shape "UuidOrArn" :location "uri" :location-name
                         "knowledgeBaseId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-content-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-content-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-content-request 'make-delete-content-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-content-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-content-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-content-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-content-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-content-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-content-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-content-response 'make-delete-content-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-content-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-content-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-content-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-import-job-request common-lisp:nil
                       ((import-job-id :initarg :import-job-id :initform
                         (common-lisp:error ":importjobid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-delete-import-job-request-import-job-id
                         :shape "Uuid" :location "uri" :location-name
                         "importJobId")
                        (knowledge-base-id :initarg :knowledge-base-id
                         :initform
                         (common-lisp:error ":knowledgebaseid is required")
                         :type (common-lisp:or uuid-or-arn common-lisp:null)
                         :accessor
                         struct-shape-delete-import-job-request-knowledge-base-id
                         :shape "UuidOrArn" :location "uri" :location-name
                         "knowledgeBaseId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-import-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-import-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-import-job-request
                    'make-delete-import-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-import-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-import-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-import-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-import-job-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-import-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-import-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-import-job-response
                    'make-delete-import-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-import-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-import-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-import-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-knowledge-base-request common-lisp:nil
                       ((knowledge-base-id :initarg :knowledge-base-id
                         :initform
                         (common-lisp:error ":knowledgebaseid is required")
                         :type (common-lisp:or uuid-or-arn common-lisp:null)
                         :accessor
                         struct-shape-delete-knowledge-base-request-knowledge-base-id
                         :shape "UuidOrArn" :location "uri" :location-name
                         "knowledgeBaseId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-knowledge-base-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-knowledge-base-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-knowledge-base-request
                    'make-delete-knowledge-base-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-knowledge-base-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-knowledge-base-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-knowledge-base-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-knowledge-base-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-knowledge-base-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-knowledge-base-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-knowledge-base-response
                    'make-delete-knowledge-base-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-knowledge-base-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-knowledge-base-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-knowledge-base-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-quick-response-request common-lisp:nil
                       ((knowledge-base-id :initarg :knowledge-base-id
                         :initform
                         (common-lisp:error ":knowledgebaseid is required")
                         :type (common-lisp:or uuid-or-arn common-lisp:null)
                         :accessor
                         struct-shape-delete-quick-response-request-knowledge-base-id
                         :shape "UuidOrArn" :location "uri" :location-name
                         "knowledgeBaseId")
                        (quick-response-id :initarg :quick-response-id
                         :initform
                         (common-lisp:error ":quickresponseid is required")
                         :type (common-lisp:or uuid-or-arn common-lisp:null)
                         :accessor
                         struct-shape-delete-quick-response-request-quick-response-id
                         :shape "UuidOrArn" :location "uri" :location-name
                         "quickResponseId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-quick-response-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-quick-response-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-quick-response-request
                    'make-delete-quick-response-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-quick-response-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-quick-response-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-quick-response-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-quick-response-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-quick-response-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-quick-response-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-quick-response-response
                    'make-delete-quick-response-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-quick-response-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-quick-response-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-quick-response-response))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass document common-lisp:nil
                       ((content-reference :initarg :content-reference
                         :initform
                         (common-lisp:error ":contentreference is required")
                         :type
                         (common-lisp:or content-reference common-lisp:null)
                         :accessor struct-shape-document-content-reference
                         :shape "ContentReference" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (excerpt :initarg :excerpt :initform common-lisp:nil
                         :type (common-lisp:or document-text common-lisp:null)
                         :accessor struct-shape-document-excerpt :shape
                         "DocumentText" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (title :initarg :title :initform common-lisp:nil :type
                         (common-lisp:or document-text common-lisp:null)
                         :accessor struct-shape-document-title :shape
                         "DocumentText" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-document
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'document
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'document 'make-document))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input document))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input document))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-reference))
      (common-lisp:list
       (common-lisp:cons "contentReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'excerpt))
      (common-lisp:list
       (common-lisp:cons "excerpt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input document))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass document-text common-lisp:nil
                       ((highlights :initarg :highlights :initform
                         common-lisp:nil :type
                         (common-lisp:or highlights common-lisp:null) :accessor
                         struct-shape-document-text-highlights :shape
                         "Highlights" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (text :initarg :text :initform common-lisp:nil :type
                         (common-lisp:or sensitive-string common-lisp:null)
                         :accessor struct-shape-document-text-text :shape
                         "SensitiveString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-document-text
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'document-text
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'document-text 'make-document-text))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input document-text))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input document-text))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'highlights))
      (common-lisp:list
       (common-lisp:cons "highlights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input document-text))
   common-lisp:nil))
(common-lisp:deftype external-source () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass external-source-configuration common-lisp:nil
                       ((configuration :initarg :configuration :initform
                         (common-lisp:error ":configuration is required") :type
                         (common-lisp:or configuration common-lisp:null)
                         :accessor
                         struct-shape-external-source-configuration-configuration
                         :shape "Configuration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source :initarg :source :initform
                         (common-lisp:error ":source is required") :type
                         (common-lisp:or external-source common-lisp:null)
                         :accessor
                         struct-shape-external-source-configuration-source
                         :shape "ExternalSource" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-external-source-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'external-source-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'external-source-configuration
                    'make-external-source-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          external-source-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          external-source-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          external-source-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass filter common-lisp:nil
                       ((field :initarg :field :initform
                         (common-lisp:error ":field is required") :type
                         (common-lisp:or filter-field common-lisp:null)
                         :accessor struct-shape-filter-field :shape
                         "FilterField" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (operator :initarg :operator :initform
                         (common-lisp:error ":operator is required") :type
                         (common-lisp:or filter-operator common-lisp:null)
                         :accessor struct-shape-filter-operator :shape
                         "FilterOperator" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-filter-value :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'filter 'make-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field))
      (common-lisp:list
       (common-lisp:cons "field"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter))
   common-lisp:nil))
(common-lisp:deftype filter-field () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype filter-list () '(trivial-types:proper-list filter))
 (common-lisp:defun make-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype filter-operator () 'common-lisp:string)
(common-lisp:deftype generic-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-assistant-association-request common-lisp:nil
                       ((assistant-association-id :initarg
                         :assistant-association-id :initform
                         (common-lisp:error
                          ":assistantassociationid is required")
                         :type (common-lisp:or uuid-or-arn common-lisp:null)
                         :accessor
                         struct-shape-get-assistant-association-request-assistant-association-id
                         :shape "UuidOrArn" :location "uri" :location-name
                         "assistantAssociationId")
                        (assistant-id :initarg :assistant-id :initform
                         (common-lisp:error ":assistantid is required") :type
                         (common-lisp:or uuid-or-arn common-lisp:null)
                         :accessor
                         struct-shape-get-assistant-association-request-assistant-id
                         :shape "UuidOrArn" :location "uri" :location-name
                         "assistantId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-assistant-association-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-assistant-association-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-assistant-association-request
                    'make-get-assistant-association-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-assistant-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-assistant-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-assistant-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-assistant-association-response common-lisp:nil
                       ((assistant-association :initarg :assistant-association
                         :initform common-lisp:nil :type
                         (common-lisp:or assistant-association-data
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-assistant-association-response-assistant-association
                         :shape "AssistantAssociationData" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-assistant-association-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-assistant-association-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-assistant-association-response
                    'make-get-assistant-association-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-assistant-association-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-assistant-association-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assistant-association))
      (common-lisp:list
       (common-lisp:cons "assistantAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-assistant-association-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-assistant-request common-lisp:nil
                       ((assistant-id :initarg :assistant-id :initform
                         (common-lisp:error ":assistantid is required") :type
                         (common-lisp:or uuid-or-arn common-lisp:null)
                         :accessor
                         struct-shape-get-assistant-request-assistant-id :shape
                         "UuidOrArn" :location "uri" :location-name
                         "assistantId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-assistant-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-assistant-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-assistant-request 'make-get-assistant-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-assistant-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-assistant-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-assistant-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-assistant-response common-lisp:nil
                       ((assistant :initarg :assistant :initform
                         common-lisp:nil :type
                         (common-lisp:or assistant-data common-lisp:null)
                         :accessor
                         struct-shape-get-assistant-response-assistant :shape
                         "AssistantData" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-assistant-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-assistant-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-assistant-response 'make-get-assistant-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-assistant-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-assistant-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assistant))
      (common-lisp:list
       (common-lisp:cons "assistant"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-assistant-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-content-request common-lisp:nil
                       ((content-id :initarg :content-id :initform
                         (common-lisp:error ":contentid is required") :type
                         (common-lisp:or uuid-or-arn common-lisp:null)
                         :accessor struct-shape-get-content-request-content-id
                         :shape "UuidOrArn" :location "uri" :location-name
                         "contentId")
                        (knowledge-base-id :initarg :knowledge-base-id
                         :initform
                         (common-lisp:error ":knowledgebaseid is required")
                         :type (common-lisp:or uuid-or-arn common-lisp:null)
                         :accessor
                         struct-shape-get-content-request-knowledge-base-id
                         :shape "UuidOrArn" :location "uri" :location-name
                         "knowledgeBaseId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-content-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-content-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-content-request 'make-get-content-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-content-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-content-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-content-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-content-response common-lisp:nil
                       ((content :initarg :content :initform common-lisp:nil
                         :type (common-lisp:or content-data common-lisp:null)
                         :accessor struct-shape-get-content-response-content
                         :shape "ContentData" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-content-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-content-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-content-response 'make-get-content-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-content-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-content-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-content-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-content-summary-request common-lisp:nil
                       ((content-id :initarg :content-id :initform
                         (common-lisp:error ":contentid is required") :type
                         (common-lisp:or uuid-or-arn common-lisp:null)
                         :accessor
                         struct-shape-get-content-summary-request-content-id
                         :shape "UuidOrArn" :location "uri" :location-name
                         "contentId")
                        (knowledge-base-id :initarg :knowledge-base-id
                         :initform
                         (common-lisp:error ":knowledgebaseid is required")
                         :type (common-lisp:or uuid-or-arn common-lisp:null)
                         :accessor
                         struct-shape-get-content-summary-request-knowledge-base-id
                         :shape "UuidOrArn" :location "uri" :location-name
                         "knowledgeBaseId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-content-summary-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-content-summary-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-content-summary-request
                    'make-get-content-summary-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-content-summary-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-content-summary-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-content-summary-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-content-summary-response common-lisp:nil
                       ((content-summary :initarg :content-summary :initform
                         common-lisp:nil :type
                         (common-lisp:or content-summary common-lisp:null)
                         :accessor
                         struct-shape-get-content-summary-response-content-summary
                         :shape "ContentSummary" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-content-summary-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-content-summary-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-content-summary-response
                    'make-get-content-summary-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-content-summary-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-content-summary-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-summary))
      (common-lisp:list
       (common-lisp:cons "contentSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-content-summary-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-import-job-request common-lisp:nil
                       ((import-job-id :initarg :import-job-id :initform
                         (common-lisp:error ":importjobid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-get-import-job-request-import-job-id
                         :shape "Uuid" :location "uri" :location-name
                         "importJobId")
                        (knowledge-base-id :initarg :knowledge-base-id
                         :initform
                         (common-lisp:error ":knowledgebaseid is required")
                         :type (common-lisp:or uuid-or-arn common-lisp:null)
                         :accessor
                         struct-shape-get-import-job-request-knowledge-base-id
                         :shape "UuidOrArn" :location "uri" :location-name
                         "knowledgeBaseId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-import-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-import-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-import-job-request 'make-get-import-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-import-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-import-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-import-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-import-job-response common-lisp:nil
                       ((import-job :initarg :import-job :initform
                         common-lisp:nil :type
                         (common-lisp:or import-job-data common-lisp:null)
                         :accessor
                         struct-shape-get-import-job-response-import-job :shape
                         "ImportJobData" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-import-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-import-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-import-job-response 'make-get-import-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-import-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-import-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-job))
      (common-lisp:list
       (common-lisp:cons "importJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-import-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-knowledge-base-request common-lisp:nil
                       ((knowledge-base-id :initarg :knowledge-base-id
                         :initform
                         (common-lisp:error ":knowledgebaseid is required")
                         :type (common-lisp:or uuid-or-arn common-lisp:null)
                         :accessor
                         struct-shape-get-knowledge-base-request-knowledge-base-id
                         :shape "UuidOrArn" :location "uri" :location-name
                         "knowledgeBaseId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-knowledge-base-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-knowledge-base-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-knowledge-base-request
                    'make-get-knowledge-base-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-knowledge-base-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-knowledge-base-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-knowledge-base-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-knowledge-base-response common-lisp:nil
                       ((knowledge-base :initarg :knowledge-base :initform
                         common-lisp:nil :type
                         (common-lisp:or knowledge-base-data common-lisp:null)
                         :accessor
                         struct-shape-get-knowledge-base-response-knowledge-base
                         :shape "KnowledgeBaseData" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-knowledge-base-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-knowledge-base-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-knowledge-base-response
                    'make-get-knowledge-base-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-knowledge-base-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-knowledge-base-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base))
      (common-lisp:list
       (common-lisp:cons "knowledgeBase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-knowledge-base-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-quick-response-request common-lisp:nil
                       ((knowledge-base-id :initarg :knowledge-base-id
                         :initform
                         (common-lisp:error ":knowledgebaseid is required")
                         :type (common-lisp:or uuid-or-arn common-lisp:null)
                         :accessor
                         struct-shape-get-quick-response-request-knowledge-base-id
                         :shape "UuidOrArn" :location "uri" :location-name
                         "knowledgeBaseId")
                        (quick-response-id :initarg :quick-response-id
                         :initform
                         (common-lisp:error ":quickresponseid is required")
                         :type (common-lisp:or uuid-or-arn common-lisp:null)
                         :accessor
                         struct-shape-get-quick-response-request-quick-response-id
                         :shape "UuidOrArn" :location "uri" :location-name
                         "quickResponseId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-quick-response-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-quick-response-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-quick-response-request
                    'make-get-quick-response-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-quick-response-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-quick-response-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-quick-response-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-quick-response-response common-lisp:nil
                       ((quick-response :initarg :quick-response :initform
                         common-lisp:nil :type
                         (common-lisp:or quick-response-data common-lisp:null)
                         :accessor
                         struct-shape-get-quick-response-response-quick-response
                         :shape "QuickResponseData" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-quick-response-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-quick-response-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-quick-response-response
                    'make-get-quick-response-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-quick-response-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-quick-response-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quick-response))
      (common-lisp:list
       (common-lisp:cons "quickResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-quick-response-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-recommendations-request common-lisp:nil
                       ((assistant-id :initarg :assistant-id :initform
                         (common-lisp:error ":assistantid is required") :type
                         (common-lisp:or uuid-or-arn common-lisp:null)
                         :accessor
                         struct-shape-get-recommendations-request-assistant-id
                         :shape "UuidOrArn" :location "uri" :location-name
                         "assistantId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-get-recommendations-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (session-id :initarg :session-id :initform
                         (common-lisp:error ":sessionid is required") :type
                         (common-lisp:or uuid-or-arn common-lisp:null)
                         :accessor
                         struct-shape-get-recommendations-request-session-id
                         :shape "UuidOrArn" :location "uri" :location-name
                         "sessionId")
                        (wait-time-seconds :initarg :wait-time-seconds
                         :initform common-lisp:nil :type
                         (common-lisp:or wait-time-seconds common-lisp:null)
                         :accessor
                         struct-shape-get-recommendations-request-wait-time-seconds
                         :shape "WaitTimeSeconds" :location "querystring"
                         :location-name "waitTimeSeconds"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-recommendations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-recommendations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-recommendations-request
                    'make-get-recommendations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-recommendations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-recommendations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-recommendations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-recommendations-response common-lisp:nil
                       ((recommendations :initarg :recommendations :initform
                         (common-lisp:error ":recommendations is required")
                         :type
                         (common-lisp:or recommendation-list common-lisp:null)
                         :accessor
                         struct-shape-get-recommendations-response-recommendations
                         :shape "RecommendationList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (triggers :initarg :triggers :initform common-lisp:nil
                         :type
                         (common-lisp:or recommendation-trigger-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-recommendations-response-triggers
                         :shape "RecommendationTriggerList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-recommendations-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-recommendations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-recommendations-response
                    'make-get-recommendations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-recommendations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-recommendations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendations))
      (common-lisp:list
       (common-lisp:cons "recommendations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'triggers))
      (common-lisp:list
       (common-lisp:cons "triggers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-recommendations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-session-request common-lisp:nil
                       ((assistant-id :initarg :assistant-id :initform
                         (common-lisp:error ":assistantid is required") :type
                         (common-lisp:or uuid-or-arn common-lisp:null)
                         :accessor
                         struct-shape-get-session-request-assistant-id :shape
                         "UuidOrArn" :location "uri" :location-name
                         "assistantId")
                        (session-id :initarg :session-id :initform
                         (common-lisp:error ":sessionid is required") :type
                         (common-lisp:or uuid-or-arn common-lisp:null)
                         :accessor struct-shape-get-session-request-session-id
                         :shape "UuidOrArn" :location "uri" :location-name
                         "sessionId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-session-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-session-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-session-request 'make-get-session-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-session-response common-lisp:nil
                       ((session :initarg :session :initform common-lisp:nil
                         :type (common-lisp:or session-data common-lisp:null)
                         :accessor struct-shape-get-session-response-session
                         :shape "SessionData" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-session-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-session-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-session-response 'make-get-session-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-session-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session))
      (common-lisp:list
       (common-lisp:cons "session"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-session-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass grouping-configuration common-lisp:nil
                       ((criteria :initarg :criteria :initform common-lisp:nil
                         :type
                         (common-lisp:or grouping-criteria common-lisp:null)
                         :accessor struct-shape-grouping-configuration-criteria
                         :shape "GroupingCriteria" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (values :initarg :values :initform common-lisp:nil
                         :type
                         (common-lisp:or grouping-values common-lisp:null)
                         :accessor struct-shape-grouping-configuration-values
                         :shape "GroupingValues" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-grouping-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'grouping-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'grouping-configuration 'make-grouping-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          grouping-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          grouping-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'criteria))
      (common-lisp:list
       (common-lisp:cons "criteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          grouping-configuration))
   common-lisp:nil))
(common-lisp:deftype grouping-criteria () 'common-lisp:string)
(common-lisp:deftype grouping-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype grouping-values ()
   '(trivial-types:proper-list grouping-value))
 (common-lisp:defun make-grouping-values
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list grouping-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype headers () 'common-lisp:hash-table)
 (common-lisp:defun make-headers (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass highlight common-lisp:nil
                       ((begin-offset-inclusive :initarg
                         :begin-offset-inclusive :initform common-lisp:nil
                         :type
                         (common-lisp:or highlight-offset common-lisp:null)
                         :accessor
                         struct-shape-highlight-begin-offset-inclusive :shape
                         "HighlightOffset" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-offset-exclusive :initarg :end-offset-exclusive
                         :initform common-lisp:nil :type
                         (common-lisp:or highlight-offset common-lisp:null)
                         :accessor struct-shape-highlight-end-offset-exclusive
                         :shape "HighlightOffset" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-highlight
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'highlight
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'highlight 'make-highlight))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input highlight))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input highlight))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'begin-offset-inclusive))
      (common-lisp:list
       (common-lisp:cons "beginOffsetInclusive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'end-offset-exclusive))
      (common-lisp:list
       (common-lisp:cons "endOffsetExclusive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input highlight))
   common-lisp:nil))
(common-lisp:deftype highlight-offset () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype highlights () '(trivial-types:proper-list highlight))
 (common-lisp:defun make-highlights
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list highlight))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass import-job-data common-lisp:nil
                       ((created-time :initarg :created-time :initform
                         (common-lisp:error ":createdtime is required") :type
                         (common-lisp:or synthetic-timestamp-epoch-seconds
                                         common-lisp:null)
                         :accessor struct-shape-import-job-data-created-time
                         :shape "SyntheticTimestamp_epoch_seconds" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (external-source-configuration :initarg
                         :external-source-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or external-source-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-import-job-data-external-source-configuration
                         :shape "ExternalSourceConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (failed-record-report :initarg :failed-record-report
                         :initform common-lisp:nil :type
                         (common-lisp:or url common-lisp:null) :accessor
                         struct-shape-import-job-data-failed-record-report
                         :shape "Url" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (import-job-id :initarg :import-job-id :initform
                         (common-lisp:error ":importjobid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-import-job-data-import-job-id :shape
                         "Uuid" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (import-job-type :initarg :import-job-type :initform
                         (common-lisp:error ":importjobtype is required") :type
                         (common-lisp:or import-job-type common-lisp:null)
                         :accessor struct-shape-import-job-data-import-job-type
                         :shape "ImportJobType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (knowledge-base-arn :initarg :knowledge-base-arn
                         :initform
                         (common-lisp:error ":knowledgebasearn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-import-job-data-knowledge-base-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (knowledge-base-id :initarg :knowledge-base-id
                         :initform
                         (common-lisp:error ":knowledgebaseid is required")
                         :type (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-import-job-data-knowledge-base-id :shape
                         "Uuid" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-modified-time :initarg :last-modified-time
                         :initform
                         (common-lisp:error ":lastmodifiedtime is required")
                         :type
                         (common-lisp:or synthetic-timestamp-epoch-seconds
                                         common-lisp:null)
                         :accessor
                         struct-shape-import-job-data-last-modified-time :shape
                         "SyntheticTimestamp_epoch_seconds" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (metadata :initarg :metadata :initform common-lisp:nil
                         :type
                         (common-lisp:or content-metadata common-lisp:null)
                         :accessor struct-shape-import-job-data-metadata :shape
                         "ContentMetadata" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or import-job-status common-lisp:null)
                         :accessor struct-shape-import-job-data-status :shape
                         "ImportJobStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (upload-id :initarg :upload-id :initform
                         (common-lisp:error ":uploadid is required") :type
                         (common-lisp:or upload-id common-lisp:null) :accessor
                         struct-shape-import-job-data-upload-id :shape
                         "UploadId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (url :initarg :url :initform
                         (common-lisp:error ":url is required") :type
                         (common-lisp:or url common-lisp:null) :accessor
                         struct-shape-import-job-data-url :shape "Url"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (url-expiry :initarg :url-expiry :initform
                         (common-lisp:error ":urlexpiry is required") :type
                         (common-lisp:or synthetic-timestamp-epoch-seconds
                                         common-lisp:null)
                         :accessor struct-shape-import-job-data-url-expiry
                         :shape "SyntheticTimestamp_epoch_seconds" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-import-job-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'import-job-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'import-job-data 'make-import-job-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input import-job-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input import-job-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "createdTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-source-configuration))
      (common-lisp:list
       (common-lisp:cons "externalSourceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'failed-record-report))
      (common-lisp:list
       (common-lisp:cons "failedRecordReport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-job-id))
      (common-lisp:list
       (common-lisp:cons "importJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-job-type))
      (common-lisp:list
       (common-lisp:cons "importJobType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-arn))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-id))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "lastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-id))
      (common-lisp:list
       (common-lisp:cons "uploadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url-expiry))
      (common-lisp:list
       (common-lisp:cons "urlExpiry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input import-job-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype import-job-list ()
   '(trivial-types:proper-list import-job-summary))
 (common-lisp:defun make-import-job-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list import-job-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype import-job-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass import-job-summary common-lisp:nil
                       ((created-time :initarg :created-time :initform
                         (common-lisp:error ":createdtime is required") :type
                         (common-lisp:or synthetic-timestamp-epoch-seconds
                                         common-lisp:null)
                         :accessor struct-shape-import-job-summary-created-time
                         :shape "SyntheticTimestamp_epoch_seconds" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (external-source-configuration :initarg
                         :external-source-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or external-source-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-import-job-summary-external-source-configuration
                         :shape "ExternalSourceConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (import-job-id :initarg :import-job-id :initform
                         (common-lisp:error ":importjobid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-import-job-summary-import-job-id :shape
                         "Uuid" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (import-job-type :initarg :import-job-type :initform
                         (common-lisp:error ":importjobtype is required") :type
                         (common-lisp:or import-job-type common-lisp:null)
                         :accessor
                         struct-shape-import-job-summary-import-job-type :shape
                         "ImportJobType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (knowledge-base-arn :initarg :knowledge-base-arn
                         :initform
                         (common-lisp:error ":knowledgebasearn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-import-job-summary-knowledge-base-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (knowledge-base-id :initarg :knowledge-base-id
                         :initform
                         (common-lisp:error ":knowledgebaseid is required")
                         :type (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-import-job-summary-knowledge-base-id
                         :shape "Uuid" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-modified-time :initarg :last-modified-time
                         :initform
                         (common-lisp:error ":lastmodifiedtime is required")
                         :type
                         (common-lisp:or synthetic-timestamp-epoch-seconds
                                         common-lisp:null)
                         :accessor
                         struct-shape-import-job-summary-last-modified-time
                         :shape "SyntheticTimestamp_epoch_seconds" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (metadata :initarg :metadata :initform common-lisp:nil
                         :type
                         (common-lisp:or content-metadata common-lisp:null)
                         :accessor struct-shape-import-job-summary-metadata
                         :shape "ContentMetadata" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or import-job-status common-lisp:null)
                         :accessor struct-shape-import-job-summary-status
                         :shape "ImportJobStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (upload-id :initarg :upload-id :initform
                         (common-lisp:error ":uploadid is required") :type
                         (common-lisp:or upload-id common-lisp:null) :accessor
                         struct-shape-import-job-summary-upload-id :shape
                         "UploadId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-import-job-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'import-job-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'import-job-summary 'make-import-job-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input import-job-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input import-job-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "createdTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-source-configuration))
      (common-lisp:list
       (common-lisp:cons "externalSourceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-job-id))
      (common-lisp:list
       (common-lisp:cons "importJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-job-type))
      (common-lisp:list
       (common-lisp:cons "importJobType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-arn))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-id))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "lastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-id))
      (common-lisp:list
       (common-lisp:cons "uploadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input import-job-summary))
   common-lisp:nil))
(common-lisp:deftype import-job-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass knowledge-base-association-data common-lisp:nil
                       ((knowledge-base-arn :initarg :knowledge-base-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-knowledge-base-association-data-knowledge-base-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (knowledge-base-id :initarg :knowledge-base-id
                         :initform common-lisp:nil :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-knowledge-base-association-data-knowledge-base-id
                         :shape "Uuid" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-knowledge-base-association-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'knowledge-base-association-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'knowledge-base-association-data
                    'make-knowledge-base-association-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          knowledge-base-association-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          knowledge-base-association-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-arn))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-id))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          knowledge-base-association-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass knowledge-base-data common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-knowledge-base-data-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (knowledge-base-arn :initarg :knowledge-base-arn
                         :initform
                         (common-lisp:error ":knowledgebasearn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-knowledge-base-data-knowledge-base-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (knowledge-base-id :initarg :knowledge-base-id
                         :initform
                         (common-lisp:error ":knowledgebaseid is required")
                         :type (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-knowledge-base-data-knowledge-base-id
                         :shape "Uuid" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (knowledge-base-type :initarg :knowledge-base-type
                         :initform
                         (common-lisp:error ":knowledgebasetype is required")
                         :type
                         (common-lisp:or knowledge-base-type common-lisp:null)
                         :accessor
                         struct-shape-knowledge-base-data-knowledge-base-type
                         :shape "KnowledgeBaseType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-content-modification-time :initarg
                         :last-content-modification-time :initform
                         common-lisp:nil :type
                         (common-lisp:or synthetic-timestamp-epoch-seconds
                                         common-lisp:null)
                         :accessor
                         struct-shape-knowledge-base-data-last-content-modification-time
                         :shape "SyntheticTimestamp_epoch_seconds" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-knowledge-base-data-name :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (rendering-configuration :initarg
                         :rendering-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or rendering-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-knowledge-base-data-rendering-configuration
                         :shape "RenderingConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (server-side-encryption-configuration :initarg
                         :server-side-encryption-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or server-side-encryption-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-knowledge-base-data-server-side-encryption-configuration
                         :shape "ServerSideEncryptionConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (source-configuration :initarg :source-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or source-configuration common-lisp:null)
                         :accessor
                         struct-shape-knowledge-base-data-source-configuration
                         :shape "SourceConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or knowledge-base-status
                                         common-lisp:null)
                         :accessor struct-shape-knowledge-base-data-status
                         :shape "KnowledgeBaseStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-knowledge-base-data-tags :shape "Tags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-knowledge-base-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'knowledge-base-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'knowledge-base-data 'make-knowledge-base-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input knowledge-base-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input knowledge-base-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-arn))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-id))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-type))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-content-modification-time))
      (common-lisp:list
       (common-lisp:cons "lastContentModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rendering-configuration))
      (common-lisp:list
       (common-lisp:cons "renderingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "serverSideEncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-configuration))
      (common-lisp:list
       (common-lisp:cons "sourceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input knowledge-base-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype knowledge-base-list ()
   '(trivial-types:proper-list knowledge-base-summary))
 (common-lisp:defun make-knowledge-base-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list knowledge-base-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype knowledge-base-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass knowledge-base-summary common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-knowledge-base-summary-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (knowledge-base-arn :initarg :knowledge-base-arn
                         :initform
                         (common-lisp:error ":knowledgebasearn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-knowledge-base-summary-knowledge-base-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (knowledge-base-id :initarg :knowledge-base-id
                         :initform
                         (common-lisp:error ":knowledgebaseid is required")
                         :type (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-knowledge-base-summary-knowledge-base-id
                         :shape "Uuid" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (knowledge-base-type :initarg :knowledge-base-type
                         :initform
                         (common-lisp:error ":knowledgebasetype is required")
                         :type
                         (common-lisp:or knowledge-base-type common-lisp:null)
                         :accessor
                         struct-shape-knowledge-base-summary-knowledge-base-type
                         :shape "KnowledgeBaseType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-knowledge-base-summary-name :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (rendering-configuration :initarg
                         :rendering-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or rendering-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-knowledge-base-summary-rendering-configuration
                         :shape "RenderingConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (server-side-encryption-configuration :initarg
                         :server-side-encryption-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or server-side-encryption-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-knowledge-base-summary-server-side-encryption-configuration
                         :shape "ServerSideEncryptionConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (source-configuration :initarg :source-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or source-configuration common-lisp:null)
                         :accessor
                         struct-shape-knowledge-base-summary-source-configuration
                         :shape "SourceConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or knowledge-base-status
                                         common-lisp:null)
                         :accessor struct-shape-knowledge-base-summary-status
                         :shape "KnowledgeBaseStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-knowledge-base-summary-tags :shape "Tags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-knowledge-base-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'knowledge-base-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'knowledge-base-summary 'make-knowledge-base-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          knowledge-base-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          knowledge-base-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-arn))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-id))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-type))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rendering-configuration))
      (common-lisp:list
       (common-lisp:cons "renderingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "serverSideEncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-configuration))
      (common-lisp:list
       (common-lisp:cons "sourceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          knowledge-base-summary))
   common-lisp:nil))
(common-lisp:deftype knowledge-base-type () 'common-lisp:string)
(common-lisp:deftype language-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-assistant-associations-request common-lisp:nil
                       ((assistant-id :initarg :assistant-id :initform
                         (common-lisp:error ":assistantid is required") :type
                         (common-lisp:or uuid-or-arn common-lisp:null)
                         :accessor
                         struct-shape-list-assistant-associations-request-assistant-id
                         :shape "UuidOrArn" :location "uri" :location-name
                         "assistantId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-assistant-associations-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-assistant-associations-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-assistant-associations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-assistant-associations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-assistant-associations-request
                    'make-list-assistant-associations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-assistant-associations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-assistant-associations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-assistant-associations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-assistant-associations-response common-lisp:nil
                       ((assistant-association-summaries :initarg
                         :assistant-association-summaries :initform
                         (common-lisp:error
                          ":assistantassociationsummaries is required")
                         :type
                         (common-lisp:or assistant-association-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-assistant-associations-response-assistant-association-summaries
                         :shape "AssistantAssociationSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-assistant-associations-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-assistant-associations-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-assistant-associations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-assistant-associations-response
                    'make-list-assistant-associations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-assistant-associations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-assistant-associations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assistant-association-summaries))
      (common-lisp:list
       (common-lisp:cons "assistantAssociationSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-assistant-associations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-assistants-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-assistants-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-assistants-request-next-token :shape
                         "NextToken" :location "querystring" :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-assistants-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-assistants-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-assistants-request 'make-list-assistants-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-assistants-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-assistants-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-assistants-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-assistants-response common-lisp:nil
                       ((assistant-summaries :initarg :assistant-summaries
                         :initform
                         (common-lisp:error ":assistantsummaries is required")
                         :type (common-lisp:or assistant-list common-lisp:null)
                         :accessor
                         struct-shape-list-assistants-response-assistant-summaries
                         :shape "AssistantList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-assistants-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-assistants-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-assistants-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-assistants-response 'make-list-assistants-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-assistants-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-assistants-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assistant-summaries))
      (common-lisp:list
       (common-lisp:cons "assistantSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-assistants-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-contents-request common-lisp:nil
                       ((knowledge-base-id :initarg :knowledge-base-id
                         :initform
                         (common-lisp:error ":knowledgebaseid is required")
                         :type (common-lisp:or uuid-or-arn common-lisp:null)
                         :accessor
                         struct-shape-list-contents-request-knowledge-base-id
                         :shape "UuidOrArn" :location "uri" :location-name
                         "knowledgeBaseId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-contents-request-max-results :shape
                         "MaxResults" :location "querystring" :location-name
                         "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-contents-request-next-token :shape
                         "NextToken" :location "querystring" :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-contents-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-contents-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-contents-request 'make-list-contents-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-contents-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-contents-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-contents-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-contents-response common-lisp:nil
                       ((content-summaries :initarg :content-summaries
                         :initform
                         (common-lisp:error ":contentsummaries is required")
                         :type
                         (common-lisp:or content-summary-list common-lisp:null)
                         :accessor
                         struct-shape-list-contents-response-content-summaries
                         :shape "ContentSummaryList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-contents-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-contents-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-contents-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-contents-response 'make-list-contents-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-contents-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-contents-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-summaries))
      (common-lisp:list
       (common-lisp:cons "contentSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-contents-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-import-jobs-request common-lisp:nil
                       ((knowledge-base-id :initarg :knowledge-base-id
                         :initform
                         (common-lisp:error ":knowledgebaseid is required")
                         :type (common-lisp:or uuid-or-arn common-lisp:null)
                         :accessor
                         struct-shape-list-import-jobs-request-knowledge-base-id
                         :shape "UuidOrArn" :location "uri" :location-name
                         "knowledgeBaseId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-import-jobs-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-list-import-jobs-request-next-token
                         :shape "NonEmptyString" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-import-jobs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-import-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-import-jobs-request 'make-list-import-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-import-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-import-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-import-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-import-jobs-response common-lisp:nil
                       ((import-job-summaries :initarg :import-job-summaries
                         :initform
                         (common-lisp:error ":importjobsummaries is required")
                         :type
                         (common-lisp:or import-job-list common-lisp:null)
                         :accessor
                         struct-shape-list-import-jobs-response-import-job-summaries
                         :shape "ImportJobList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-list-import-jobs-response-next-token
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-import-jobs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-import-jobs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-import-jobs-response
                    'make-list-import-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-import-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-import-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'import-job-summaries))
      (common-lisp:list
       (common-lisp:cons "importJobSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-import-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-knowledge-bases-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-knowledge-bases-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-list-knowledge-bases-request-next-token
                         :shape "NonEmptyString" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-knowledge-bases-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-knowledge-bases-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-knowledge-bases-request
                    'make-list-knowledge-bases-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-knowledge-bases-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-knowledge-bases-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-knowledge-bases-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-knowledge-bases-response common-lisp:nil
                       ((knowledge-base-summaries :initarg
                         :knowledge-base-summaries :initform
                         (common-lisp:error
                          ":knowledgebasesummaries is required")
                         :type
                         (common-lisp:or knowledge-base-list common-lisp:null)
                         :accessor
                         struct-shape-list-knowledge-bases-response-knowledge-base-summaries
                         :shape "KnowledgeBaseList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-list-knowledge-bases-response-next-token
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-knowledge-bases-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-knowledge-bases-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-knowledge-bases-response
                    'make-list-knowledge-bases-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-knowledge-bases-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-knowledge-bases-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'knowledge-base-summaries))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-knowledge-bases-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-quick-responses-request common-lisp:nil
                       ((knowledge-base-id :initarg :knowledge-base-id
                         :initform
                         (common-lisp:error ":knowledgebaseid is required")
                         :type (common-lisp:or uuid-or-arn common-lisp:null)
                         :accessor
                         struct-shape-list-quick-responses-request-knowledge-base-id
                         :shape "UuidOrArn" :location "uri" :location-name
                         "knowledgeBaseId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-quick-responses-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-list-quick-responses-request-next-token
                         :shape "NonEmptyString" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-quick-responses-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-quick-responses-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-quick-responses-request
                    'make-list-quick-responses-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-quick-responses-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-quick-responses-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-quick-responses-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-quick-responses-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-list-quick-responses-response-next-token
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (quick-response-summaries :initarg
                         :quick-response-summaries :initform
                         (common-lisp:error
                          ":quickresponsesummaries is required")
                         :type
                         (common-lisp:or quick-response-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-quick-responses-response-quick-response-summaries
                         :shape "QuickResponseSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-quick-responses-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-quick-responses-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-quick-responses-response
                    'make-list-quick-responses-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-quick-responses-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-quick-responses-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'quick-response-summaries))
      (common-lisp:list
       (common-lisp:cons "quickResponseSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-quick-responses-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-request-resource-arn
                         :shape "Arn" :location "uri" :location-name
                         "resourceArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-tags
                         :shape "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype name () 'common-lisp:string)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype non-empty-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass notify-recommendations-received-error common-lisp:nil
                       ((message :initarg :message :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          notify-recommendations-received-error-message
                          common-lisp:null)
                         :accessor
                         struct-shape-notify-recommendations-received-error-message
                         :shape "NotifyRecommendationsReceivedErrorMessage"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (recommendation-id :initarg :recommendation-id
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-notify-recommendations-received-error-recommendation-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-notify-recommendations-received-error
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'notify-recommendations-received-error
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'notify-recommendations-received-error
                    'make-notify-recommendations-received-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notify-recommendations-received-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notify-recommendations-received-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation-id))
      (common-lisp:list
       (common-lisp:cons "recommendationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notify-recommendations-received-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype notify-recommendations-received-error-list ()
   '(trivial-types:proper-list notify-recommendations-received-error))
 (common-lisp:defun make-notify-recommendations-received-error-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            notify-recommendations-received-error))
   aws-sdk/generator/shape::members))
(common-lisp:deftype notify-recommendations-received-error-message ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass notify-recommendations-received-request common-lisp:nil
                       ((assistant-id :initarg :assistant-id :initform
                         (common-lisp:error ":assistantid is required") :type
                         (common-lisp:or uuid-or-arn common-lisp:null)
                         :accessor
                         struct-shape-notify-recommendations-received-request-assistant-id
                         :shape "UuidOrArn" :location "uri" :location-name
                         "assistantId")
                        (recommendation-ids :initarg :recommendation-ids
                         :initform
                         (common-lisp:error ":recommendationids is required")
                         :type
                         (common-lisp:or recommendation-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-notify-recommendations-received-request-recommendation-ids
                         :shape "RecommendationIdList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (session-id :initarg :session-id :initform
                         (common-lisp:error ":sessionid is required") :type
                         (common-lisp:or uuid-or-arn common-lisp:null)
                         :accessor
                         struct-shape-notify-recommendations-received-request-session-id
                         :shape "UuidOrArn" :location "uri" :location-name
                         "sessionId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-notify-recommendations-received-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'notify-recommendations-received-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'notify-recommendations-received-request
                    'make-notify-recommendations-received-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notify-recommendations-received-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notify-recommendations-received-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation-ids))
      (common-lisp:list
       (common-lisp:cons "recommendationIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notify-recommendations-received-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass notify-recommendations-received-response common-lisp:nil
                       ((errors :initarg :errors :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          notify-recommendations-received-error-list
                          common-lisp:null)
                         :accessor
                         struct-shape-notify-recommendations-received-response-errors
                         :shape "NotifyRecommendationsReceivedErrorList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (recommendation-ids :initarg :recommendation-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or recommendation-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-notify-recommendations-received-response-recommendation-ids
                         :shape "RecommendationIdList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-notify-recommendations-received-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'notify-recommendations-received-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'notify-recommendations-received-response
                    'make-notify-recommendations-received-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notify-recommendations-received-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notify-recommendations-received-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation-ids))
      (common-lisp:list
       (common-lisp:cons "recommendationIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notify-recommendations-received-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype object-fields-list ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun make-object-fields-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype order () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition precondition-failed-exception
     (wisdom-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       precondition-failed-exception-message)))
 (common-lisp:export
  (common-lisp:list 'precondition-failed-exception
                    'precondition-failed-exception-message)))
(common-lisp:deftype priority () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass query-assistant-request common-lisp:nil
                       ((assistant-id :initarg :assistant-id :initform
                         (common-lisp:error ":assistantid is required") :type
                         (common-lisp:or uuid-or-arn common-lisp:null)
                         :accessor
                         struct-shape-query-assistant-request-assistant-id
                         :shape "UuidOrArn" :location "uri" :location-name
                         "assistantId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-query-assistant-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-query-assistant-request-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (query-text :initarg :query-text :initform
                         (common-lisp:error ":querytext is required") :type
                         (common-lisp:or query-text common-lisp:null) :accessor
                         struct-shape-query-assistant-request-query-text :shape
                         "QueryText" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-query-assistant-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'query-assistant-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'query-assistant-request 'make-query-assistant-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          query-assistant-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          query-assistant-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-text))
      (common-lisp:list
       (common-lisp:cons "queryText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          query-assistant-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass query-assistant-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-query-assistant-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (results :initarg :results :initform
                         (common-lisp:error ":results is required") :type
                         (common-lisp:or query-results-list common-lisp:null)
                         :accessor
                         struct-shape-query-assistant-response-results :shape
                         "QueryResultsList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-query-assistant-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'query-assistant-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'query-assistant-response 'make-query-assistant-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          query-assistant-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          query-assistant-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results))
      (common-lisp:list
       (common-lisp:cons "results"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          query-assistant-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass query-recommendation-trigger-data common-lisp:nil
                       ((text :initarg :text :initform common-lisp:nil :type
                         (common-lisp:or query-text common-lisp:null) :accessor
                         struct-shape-query-recommendation-trigger-data-text
                         :shape "QueryText" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-query-recommendation-trigger-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'query-recommendation-trigger-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'query-recommendation-trigger-data
                    'make-query-recommendation-trigger-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          query-recommendation-trigger-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          query-recommendation-trigger-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          query-recommendation-trigger-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype query-results-list ()
   '(trivial-types:proper-list result-data))
 (common-lisp:defun make-query-results-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list result-data))
   aws-sdk/generator/shape::members))
(common-lisp:deftype query-text () 'common-lisp:string)
(common-lisp:deftype quick-response-content () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass quick-response-content-provider common-lisp:nil
                       ((content :initarg :content :initform common-lisp:nil
                         :type
                         (common-lisp:or quick-response-content
                                         common-lisp:null)
                         :accessor
                         struct-shape-quick-response-content-provider-content
                         :shape "QuickResponseContent" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-quick-response-content-provider
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'quick-response-content-provider
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'quick-response-content-provider
                    'make-quick-response-content-provider))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          quick-response-content-provider))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          quick-response-content-provider))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          quick-response-content-provider))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass quick-response-contents common-lisp:nil
                       ((markdown :initarg :markdown :initform common-lisp:nil
                         :type
                         (common-lisp:or quick-response-content-provider
                                         common-lisp:null)
                         :accessor
                         struct-shape-quick-response-contents-markdown :shape
                         "QuickResponseContentProvider" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (plain-text :initarg :plain-text :initform
                         common-lisp:nil :type
                         (common-lisp:or quick-response-content-provider
                                         common-lisp:null)
                         :accessor
                         struct-shape-quick-response-contents-plain-text :shape
                         "QuickResponseContentProvider" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-quick-response-contents
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'quick-response-contents
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'quick-response-contents 'make-quick-response-contents))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          quick-response-contents))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          quick-response-contents))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'markdown))
      (common-lisp:list
       (common-lisp:cons "markdown"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plain-text))
      (common-lisp:list
       (common-lisp:cons "plainText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          quick-response-contents))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass quick-response-data common-lisp:nil
                       ((channels :initarg :channels :initform common-lisp:nil
                         :type (common-lisp:or channels common-lisp:null)
                         :accessor struct-shape-quick-response-data-channels
                         :shape "Channels" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (content-type :initarg :content-type :initform
                         (common-lisp:error ":contenttype is required") :type
                         (common-lisp:or quick-response-type common-lisp:null)
                         :accessor
                         struct-shape-quick-response-data-content-type :shape
                         "QuickResponseType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (contents :initarg :contents :initform common-lisp:nil
                         :type
                         (common-lisp:or quick-response-contents
                                         common-lisp:null)
                         :accessor struct-shape-quick-response-data-contents
                         :shape "QuickResponseContents" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-time :initarg :created-time :initform
                         (common-lisp:error ":createdtime is required") :type
                         (common-lisp:or synthetic-timestamp-epoch-seconds
                                         common-lisp:null)
                         :accessor
                         struct-shape-quick-response-data-created-time :shape
                         "SyntheticTimestamp_epoch_seconds" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or quick-response-description
                                         common-lisp:null)
                         :accessor struct-shape-quick-response-data-description
                         :shape "QuickResponseDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (grouping-configuration :initarg
                         :grouping-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or grouping-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-quick-response-data-grouping-configuration
                         :shape "GroupingConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (is-active :initarg :is-active :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-quick-response-data-is-active :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (knowledge-base-arn :initarg :knowledge-base-arn
                         :initform
                         (common-lisp:error ":knowledgebasearn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-quick-response-data-knowledge-base-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (knowledge-base-id :initarg :knowledge-base-id
                         :initform
                         (common-lisp:error ":knowledgebaseid is required")
                         :type (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-quick-response-data-knowledge-base-id
                         :shape "Uuid" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (language :initarg :language :initform common-lisp:nil
                         :type (common-lisp:or language-code common-lisp:null)
                         :accessor struct-shape-quick-response-data-language
                         :shape "LanguageCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-by :initarg :last-modified-by :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-arn common-lisp:null)
                         :accessor
                         struct-shape-quick-response-data-last-modified-by
                         :shape "GenericArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-time :initarg :last-modified-time
                         :initform
                         (common-lisp:error ":lastmodifiedtime is required")
                         :type
                         (common-lisp:or synthetic-timestamp-epoch-seconds
                                         common-lisp:null)
                         :accessor
                         struct-shape-quick-response-data-last-modified-time
                         :shape "SyntheticTimestamp_epoch_seconds" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or quick-response-name common-lisp:null)
                         :accessor struct-shape-quick-response-data-name :shape
                         "QuickResponseName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (quick-response-arn :initarg :quick-response-arn
                         :initform
                         (common-lisp:error ":quickresponsearn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-quick-response-data-quick-response-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (quick-response-id :initarg :quick-response-id
                         :initform
                         (common-lisp:error ":quickresponseid is required")
                         :type (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-quick-response-data-quick-response-id
                         :shape "Uuid" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (shortcut-key :initarg :shortcut-key :initform
                         common-lisp:nil :type
                         (common-lisp:or short-cut-key common-lisp:null)
                         :accessor
                         struct-shape-quick-response-data-shortcut-key :shape
                         "ShortCutKey" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or quick-response-status
                                         common-lisp:null)
                         :accessor struct-shape-quick-response-data-status
                         :shape "QuickResponseStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-quick-response-data-tags :shape "Tags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-quick-response-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'quick-response-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'quick-response-data 'make-quick-response-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input quick-response-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input quick-response-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channels))
      (common-lisp:list
       (common-lisp:cons "channels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "contentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contents))
      (common-lisp:list
       (common-lisp:cons "contents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "createdTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'grouping-configuration))
      (common-lisp:list
       (common-lisp:cons "groupingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-active))
      (common-lisp:list
       (common-lisp:cons "isActive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-arn))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-id))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language))
      (common-lisp:list
       (common-lisp:cons "language"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-by))
      (common-lisp:list
       (common-lisp:cons "lastModifiedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "lastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quick-response-arn))
      (common-lisp:list
       (common-lisp:cons "quickResponseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quick-response-id))
      (common-lisp:list
       (common-lisp:cons "quickResponseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shortcut-key))
      (common-lisp:list
       (common-lisp:cons "shortcutKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input quick-response-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass quick-response-data-provider common-lisp:nil
                       ((content :initarg :content :initform common-lisp:nil
                         :type
                         (common-lisp:or quick-response-content
                                         common-lisp:null)
                         :accessor
                         struct-shape-quick-response-data-provider-content
                         :shape "QuickResponseContent" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-quick-response-data-provider
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'quick-response-data-provider
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'quick-response-data-provider
                    'make-quick-response-data-provider))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          quick-response-data-provider))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          quick-response-data-provider))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          quick-response-data-provider))
   common-lisp:nil))
(common-lisp:deftype quick-response-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass quick-response-filter-field common-lisp:nil
                       ((include-no-existence :initarg :include-no-existence
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-quick-response-filter-field-include-no-existence
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-quick-response-filter-field-name :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (operator :initarg :operator :initform
                         (common-lisp:error ":operator is required") :type
                         (common-lisp:or quick-response-filter-operator
                                         common-lisp:null)
                         :accessor
                         struct-shape-quick-response-filter-field-operator
                         :shape "QuickResponseFilterOperator" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (values :initarg :values :initform common-lisp:nil
                         :type
                         (common-lisp:or quick-response-filter-value-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-quick-response-filter-field-values :shape
                         "QuickResponseFilterValueList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-quick-response-filter-field
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'quick-response-filter-field
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'quick-response-filter-field
                    'make-quick-response-filter-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          quick-response-filter-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          quick-response-filter-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-no-existence))
      (common-lisp:list
       (common-lisp:cons "includeNoExistence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          quick-response-filter-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype quick-response-filter-field-list ()
   '(trivial-types:proper-list quick-response-filter-field))
 (common-lisp:defun make-quick-response-filter-field-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            quick-response-filter-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype quick-response-filter-operator () 'common-lisp:string)
(common-lisp:deftype quick-response-filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype quick-response-filter-value-list ()
   '(trivial-types:proper-list quick-response-filter-value))
 (common-lisp:defun make-quick-response-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            quick-response-filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype quick-response-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass quick-response-order-field common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-quick-response-order-field-name
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (order :initarg :order :initform common-lisp:nil :type
                         (common-lisp:or order common-lisp:null) :accessor
                         struct-shape-quick-response-order-field-order :shape
                         "Order" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-quick-response-order-field
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'quick-response-order-field
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'quick-response-order-field
                    'make-quick-response-order-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          quick-response-order-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          quick-response-order-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          quick-response-order-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass quick-response-query-field common-lisp:nil
                       ((allow-fuzziness :initarg :allow-fuzziness :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-quick-response-query-field-allow-fuzziness
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-quick-response-query-field-name
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (operator :initarg :operator :initform
                         (common-lisp:error ":operator is required") :type
                         (common-lisp:or quick-response-query-operator
                                         common-lisp:null)
                         :accessor
                         struct-shape-quick-response-query-field-operator
                         :shape "QuickResponseQueryOperator" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (priority :initarg :priority :initform common-lisp:nil
                         :type (common-lisp:or priority common-lisp:null)
                         :accessor
                         struct-shape-quick-response-query-field-priority
                         :shape "Priority" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (values :initarg :values :initform
                         (common-lisp:error ":values is required") :type
                         (common-lisp:or quick-response-query-value-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-quick-response-query-field-values :shape
                         "QuickResponseQueryValueList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-quick-response-query-field
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'quick-response-query-field
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'quick-response-query-field
                    'make-quick-response-query-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          quick-response-query-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          quick-response-query-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-fuzziness))
      (common-lisp:list
       (common-lisp:cons "allowFuzziness"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          quick-response-query-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype quick-response-query-field-list ()
   '(trivial-types:proper-list quick-response-query-field))
 (common-lisp:defun make-quick-response-query-field-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            quick-response-query-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype quick-response-query-operator () 'common-lisp:string)
(common-lisp:deftype quick-response-query-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype quick-response-query-value-list ()
   '(trivial-types:proper-list quick-response-query-value))
 (common-lisp:defun make-quick-response-query-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            quick-response-query-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass quick-response-search-expression common-lisp:nil
                       ((filters :initarg :filters :initform common-lisp:nil
                         :type
                         (common-lisp:or quick-response-filter-field-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-quick-response-search-expression-filters
                         :shape "QuickResponseFilterFieldList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (order-on-field :initarg :order-on-field :initform
                         common-lisp:nil :type
                         (common-lisp:or quick-response-order-field
                                         common-lisp:null)
                         :accessor
                         struct-shape-quick-response-search-expression-order-on-field
                         :shape "QuickResponseOrderField" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (queries :initarg :queries :initform common-lisp:nil
                         :type
                         (common-lisp:or quick-response-query-field-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-quick-response-search-expression-queries
                         :shape "QuickResponseQueryFieldList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-quick-response-search-expression
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'quick-response-search-expression
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'quick-response-search-expression
                    'make-quick-response-search-expression))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          quick-response-search-expression))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          quick-response-search-expression))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order-on-field))
      (common-lisp:list
       (common-lisp:cons "orderOnField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queries))
      (common-lisp:list
       (common-lisp:cons "queries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          quick-response-search-expression))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass quick-response-search-result-data common-lisp:nil
                       ((attributes-interpolated :initarg
                         :attributes-interpolated :initform common-lisp:nil
                         :type
                         (common-lisp:or contact-attribute-keys
                                         common-lisp:null)
                         :accessor
                         struct-shape-quick-response-search-result-data-attributes-interpolated
                         :shape "ContactAttributeKeys" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (attributes-not-interpolated :initarg
                         :attributes-not-interpolated :initform common-lisp:nil
                         :type
                         (common-lisp:or contact-attribute-keys
                                         common-lisp:null)
                         :accessor
                         struct-shape-quick-response-search-result-data-attributes-not-interpolated
                         :shape "ContactAttributeKeys" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (channels :initarg :channels :initform common-lisp:nil
                         :type (common-lisp:or channels common-lisp:null)
                         :accessor
                         struct-shape-quick-response-search-result-data-channels
                         :shape "Channels" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (content-type :initarg :content-type :initform
                         (common-lisp:error ":contenttype is required") :type
                         (common-lisp:or quick-response-type common-lisp:null)
                         :accessor
                         struct-shape-quick-response-search-result-data-content-type
                         :shape "QuickResponseType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (contents :initarg :contents :initform
                         (common-lisp:error ":contents is required") :type
                         (common-lisp:or quick-response-contents
                                         common-lisp:null)
                         :accessor
                         struct-shape-quick-response-search-result-data-contents
                         :shape "QuickResponseContents" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-time :initarg :created-time :initform
                         (common-lisp:error ":createdtime is required") :type
                         (common-lisp:or synthetic-timestamp-epoch-seconds
                                         common-lisp:null)
                         :accessor
                         struct-shape-quick-response-search-result-data-created-time
                         :shape "SyntheticTimestamp_epoch_seconds" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or quick-response-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-quick-response-search-result-data-description
                         :shape "QuickResponseDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (grouping-configuration :initarg
                         :grouping-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or grouping-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-quick-response-search-result-data-grouping-configuration
                         :shape "GroupingConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (is-active :initarg :is-active :initform
                         (common-lisp:error ":isactive is required") :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-quick-response-search-result-data-is-active
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (knowledge-base-arn :initarg :knowledge-base-arn
                         :initform
                         (common-lisp:error ":knowledgebasearn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-quick-response-search-result-data-knowledge-base-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (knowledge-base-id :initarg :knowledge-base-id
                         :initform
                         (common-lisp:error ":knowledgebaseid is required")
                         :type (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-quick-response-search-result-data-knowledge-base-id
                         :shape "Uuid" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (language :initarg :language :initform common-lisp:nil
                         :type (common-lisp:or language-code common-lisp:null)
                         :accessor
                         struct-shape-quick-response-search-result-data-language
                         :shape "LanguageCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-by :initarg :last-modified-by :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-arn common-lisp:null)
                         :accessor
                         struct-shape-quick-response-search-result-data-last-modified-by
                         :shape "GenericArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-time :initarg :last-modified-time
                         :initform
                         (common-lisp:error ":lastmodifiedtime is required")
                         :type
                         (common-lisp:or synthetic-timestamp-epoch-seconds
                                         common-lisp:null)
                         :accessor
                         struct-shape-quick-response-search-result-data-last-modified-time
                         :shape "SyntheticTimestamp_epoch_seconds" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or quick-response-name common-lisp:null)
                         :accessor
                         struct-shape-quick-response-search-result-data-name
                         :shape "QuickResponseName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (quick-response-arn :initarg :quick-response-arn
                         :initform
                         (common-lisp:error ":quickresponsearn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-quick-response-search-result-data-quick-response-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (quick-response-id :initarg :quick-response-id
                         :initform
                         (common-lisp:error ":quickresponseid is required")
                         :type (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-quick-response-search-result-data-quick-response-id
                         :shape "Uuid" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (shortcut-key :initarg :shortcut-key :initform
                         common-lisp:nil :type
                         (common-lisp:or short-cut-key common-lisp:null)
                         :accessor
                         struct-shape-quick-response-search-result-data-shortcut-key
                         :shape "ShortCutKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or quick-response-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-quick-response-search-result-data-status
                         :shape "QuickResponseStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-quick-response-search-result-data-tags
                         :shape "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-quick-response-search-result-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'quick-response-search-result-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'quick-response-search-result-data
                    'make-quick-response-search-result-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          quick-response-search-result-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          quick-response-search-result-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attributes-interpolated))
      (common-lisp:list
       (common-lisp:cons "attributesInterpolated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attributes-not-interpolated))
      (common-lisp:list
       (common-lisp:cons "attributesNotInterpolated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channels))
      (common-lisp:list
       (common-lisp:cons "channels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "contentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contents))
      (common-lisp:list
       (common-lisp:cons "contents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "createdTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'grouping-configuration))
      (common-lisp:list
       (common-lisp:cons "groupingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-active))
      (common-lisp:list
       (common-lisp:cons "isActive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-arn))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-id))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language))
      (common-lisp:list
       (common-lisp:cons "language"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-by))
      (common-lisp:list
       (common-lisp:cons "lastModifiedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "lastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quick-response-arn))
      (common-lisp:list
       (common-lisp:cons "quickResponseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quick-response-id))
      (common-lisp:list
       (common-lisp:cons "quickResponseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shortcut-key))
      (common-lisp:list
       (common-lisp:cons "shortcutKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          quick-response-search-result-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype quick-response-search-results-list ()
   '(trivial-types:proper-list quick-response-search-result-data))
 (common-lisp:defun make-quick-response-search-results-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            quick-response-search-result-data))
   aws-sdk/generator/shape::members))
(common-lisp:deftype quick-response-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass quick-response-summary common-lisp:nil
                       ((channels :initarg :channels :initform common-lisp:nil
                         :type (common-lisp:or channels common-lisp:null)
                         :accessor struct-shape-quick-response-summary-channels
                         :shape "Channels" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (content-type :initarg :content-type :initform
                         (common-lisp:error ":contenttype is required") :type
                         (common-lisp:or quick-response-type common-lisp:null)
                         :accessor
                         struct-shape-quick-response-summary-content-type
                         :shape "QuickResponseType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-time :initarg :created-time :initform
                         (common-lisp:error ":createdtime is required") :type
                         (common-lisp:or synthetic-timestamp-epoch-seconds
                                         common-lisp:null)
                         :accessor
                         struct-shape-quick-response-summary-created-time
                         :shape "SyntheticTimestamp_epoch_seconds" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or quick-response-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-quick-response-summary-description :shape
                         "QuickResponseDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-active :initarg :is-active :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-quick-response-summary-is-active :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (knowledge-base-arn :initarg :knowledge-base-arn
                         :initform
                         (common-lisp:error ":knowledgebasearn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-quick-response-summary-knowledge-base-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (knowledge-base-id :initarg :knowledge-base-id
                         :initform
                         (common-lisp:error ":knowledgebaseid is required")
                         :type (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-quick-response-summary-knowledge-base-id
                         :shape "Uuid" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-modified-by :initarg :last-modified-by :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-arn common-lisp:null)
                         :accessor
                         struct-shape-quick-response-summary-last-modified-by
                         :shape "GenericArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-time :initarg :last-modified-time
                         :initform
                         (common-lisp:error ":lastmodifiedtime is required")
                         :type
                         (common-lisp:or synthetic-timestamp-epoch-seconds
                                         common-lisp:null)
                         :accessor
                         struct-shape-quick-response-summary-last-modified-time
                         :shape "SyntheticTimestamp_epoch_seconds" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or quick-response-name common-lisp:null)
                         :accessor struct-shape-quick-response-summary-name
                         :shape "QuickResponseName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (quick-response-arn :initarg :quick-response-arn
                         :initform
                         (common-lisp:error ":quickresponsearn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-quick-response-summary-quick-response-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (quick-response-id :initarg :quick-response-id
                         :initform
                         (common-lisp:error ":quickresponseid is required")
                         :type (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-quick-response-summary-quick-response-id
                         :shape "Uuid" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or quick-response-status
                                         common-lisp:null)
                         :accessor struct-shape-quick-response-summary-status
                         :shape "QuickResponseStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-quick-response-summary-tags :shape "Tags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-quick-response-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'quick-response-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'quick-response-summary 'make-quick-response-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          quick-response-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          quick-response-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channels))
      (common-lisp:list
       (common-lisp:cons "channels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "contentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "createdTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-active))
      (common-lisp:list
       (common-lisp:cons "isActive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-arn))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-id))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-by))
      (common-lisp:list
       (common-lisp:cons "lastModifiedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "lastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quick-response-arn))
      (common-lisp:list
       (common-lisp:cons "quickResponseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quick-response-id))
      (common-lisp:list
       (common-lisp:cons "quickResponseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          quick-response-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype quick-response-summary-list ()
   '(trivial-types:proper-list quick-response-summary))
 (common-lisp:defun make-quick-response-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list quick-response-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype quick-response-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass recommendation-data common-lisp:nil
                       ((document :initarg :document :initform
                         (common-lisp:error ":document is required") :type
                         (common-lisp:or document common-lisp:null) :accessor
                         struct-shape-recommendation-data-document :shape
                         "Document" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (recommendation-id :initarg :recommendation-id
                         :initform
                         (common-lisp:error ":recommendationid is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-recommendation-data-recommendation-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (relevance-level :initarg :relevance-level :initform
                         common-lisp:nil :type
                         (common-lisp:or relevance-level common-lisp:null)
                         :accessor
                         struct-shape-recommendation-data-relevance-level
                         :shape "RelevanceLevel" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (relevance-score :initarg :relevance-score :initform
                         common-lisp:nil :type
                         (common-lisp:or relevance-score common-lisp:null)
                         :accessor
                         struct-shape-recommendation-data-relevance-score
                         :shape "RelevanceScore" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or recommendation-type common-lisp:null)
                         :accessor struct-shape-recommendation-data-type :shape
                         "RecommendationType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-recommendation-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'recommendation-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'recommendation-data 'make-recommendation-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input recommendation-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input recommendation-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document))
      (common-lisp:list
       (common-lisp:cons "document"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation-id))
      (common-lisp:list
       (common-lisp:cons "recommendationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relevance-level))
      (common-lisp:list
       (common-lisp:cons "relevanceLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relevance-score))
      (common-lisp:list
       (common-lisp:cons "relevanceScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input recommendation-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype recommendation-id-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-recommendation-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype recommendation-list ()
   '(trivial-types:proper-list recommendation-data))
 (common-lisp:defun make-recommendation-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list recommendation-data))
   aws-sdk/generator/shape::members))
(common-lisp:deftype recommendation-source-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass recommendation-trigger common-lisp:nil
                       ((data :initarg :data :initform
                         (common-lisp:error ":data is required") :type
                         (common-lisp:or recommendation-trigger-data
                                         common-lisp:null)
                         :accessor struct-shape-recommendation-trigger-data
                         :shape "RecommendationTriggerData" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-recommendation-trigger-id :shape "Uuid"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (recommendation-ids :initarg :recommendation-ids
                         :initform
                         (common-lisp:error ":recommendationids is required")
                         :type
                         (common-lisp:or recommendation-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-recommendation-trigger-recommendation-ids
                         :shape "RecommendationIdList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (source :initarg :source :initform
                         (common-lisp:error ":source is required") :type
                         (common-lisp:or recommendation-source-type
                                         common-lisp:null)
                         :accessor struct-shape-recommendation-trigger-source
                         :shape "RecommendationSourceType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or recommendation-trigger-type
                                         common-lisp:null)
                         :accessor struct-shape-recommendation-trigger-type
                         :shape "RecommendationTriggerType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-recommendation-trigger
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'recommendation-trigger
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'recommendation-trigger 'make-recommendation-trigger))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-trigger))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-trigger))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation-ids))
      (common-lisp:list
       (common-lisp:cons "recommendationIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-trigger))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass recommendation-trigger-data common-lisp:nil
                       ((query :initarg :query :initform common-lisp:nil :type
                         (common-lisp:or query-recommendation-trigger-data
                                         common-lisp:null)
                         :accessor
                         struct-shape-recommendation-trigger-data-query :shape
                         "QueryRecommendationTriggerData" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-recommendation-trigger-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'recommendation-trigger-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'recommendation-trigger-data
                    'make-recommendation-trigger-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-trigger-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-trigger-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query))
      (common-lisp:list
       (common-lisp:cons "query"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-trigger-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype recommendation-trigger-list ()
   '(trivial-types:proper-list recommendation-trigger))
 (common-lisp:defun make-recommendation-trigger-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list recommendation-trigger))
   aws-sdk/generator/shape::members))
(common-lisp:deftype recommendation-trigger-type () 'common-lisp:string)
(common-lisp:deftype recommendation-type () 'common-lisp:string)
(common-lisp:deftype relevance-level () 'common-lisp:string)
(common-lisp:deftype relevance-score () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defclass remove-knowledge-base-template-uri-request
                       common-lisp:nil
                       ((knowledge-base-id :initarg :knowledge-base-id
                         :initform
                         (common-lisp:error ":knowledgebaseid is required")
                         :type (common-lisp:or uuid-or-arn common-lisp:null)
                         :accessor
                         struct-shape-remove-knowledge-base-template-uri-request-knowledge-base-id
                         :shape "UuidOrArn" :location "uri" :location-name
                         "knowledgeBaseId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-knowledge-base-template-uri-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-knowledge-base-template-uri-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-knowledge-base-template-uri-request
                    'make-remove-knowledge-base-template-uri-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-knowledge-base-template-uri-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-knowledge-base-template-uri-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-knowledge-base-template-uri-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-knowledge-base-template-uri-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-knowledge-base-template-uri-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-knowledge-base-template-uri-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-knowledge-base-template-uri-response
                    'make-remove-knowledge-base-template-uri-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-knowledge-base-template-uri-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-knowledge-base-template-uri-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-knowledge-base-template-uri-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass rendering-configuration common-lisp:nil
                       ((template-uri :initarg :template-uri :initform
                         common-lisp:nil :type
                         (common-lisp:or uri common-lisp:null) :accessor
                         struct-shape-rendering-configuration-template-uri
                         :shape "Uri" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rendering-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'rendering-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'rendering-configuration 'make-rendering-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rendering-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rendering-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-uri))
      (common-lisp:list
       (common-lisp:cons "templateUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rendering-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition request-timeout-exception
     (wisdom-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       request-timeout-exception-message)))
 (common-lisp:export
  (common-lisp:list 'request-timeout-exception
                    'request-timeout-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (wisdom-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-name :initarg :resource-name :initform common-lisp:nil :reader
       resource-not-found-exception-resource-name)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-name)))
(common-lisp:progn
 (common-lisp:defclass result-data common-lisp:nil
                       ((document :initarg :document :initform
                         (common-lisp:error ":document is required") :type
                         (common-lisp:or document common-lisp:null) :accessor
                         struct-shape-result-data-document :shape "Document"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (relevance-score :initarg :relevance-score :initform
                         common-lisp:nil :type
                         (common-lisp:or relevance-score common-lisp:null)
                         :accessor struct-shape-result-data-relevance-score
                         :shape "RelevanceScore" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (result-id :initarg :result-id :initform
                         (common-lisp:error ":resultid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-result-data-result-id :shape "Uuid"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-result-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'result-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'result-data 'make-result-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input result-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input result-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document))
      (common-lisp:list
       (common-lisp:cons "document"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relevance-score))
      (common-lisp:list
       (common-lisp:cons "relevanceScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-id))
      (common-lisp:list
       (common-lisp:cons "resultId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input result-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-content-request common-lisp:nil
                       ((knowledge-base-id :initarg :knowledge-base-id
                         :initform
                         (common-lisp:error ":knowledgebaseid is required")
                         :type (common-lisp:or uuid-or-arn common-lisp:null)
                         :accessor
                         struct-shape-search-content-request-knowledge-base-id
                         :shape "UuidOrArn" :location "uri" :location-name
                         "knowledgeBaseId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-search-content-request-max-results :shape
                         "MaxResults" :location "querystring" :location-name
                         "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-search-content-request-next-token :shape
                         "NextToken" :location "querystring" :location-name
                         "nextToken")
                        (search-expression :initarg :search-expression
                         :initform
                         (common-lisp:error ":searchexpression is required")
                         :type
                         (common-lisp:or search-expression common-lisp:null)
                         :accessor
                         struct-shape-search-content-request-search-expression
                         :shape "SearchExpression" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-content-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-content-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-content-request 'make-search-content-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-content-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-content-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-expression))
      (common-lisp:list
       (common-lisp:cons "searchExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-content-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-content-response common-lisp:nil
                       ((content-summaries :initarg :content-summaries
                         :initform
                         (common-lisp:error ":contentsummaries is required")
                         :type
                         (common-lisp:or content-summary-list common-lisp:null)
                         :accessor
                         struct-shape-search-content-response-content-summaries
                         :shape "ContentSummaryList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-search-content-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-content-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-content-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-content-response 'make-search-content-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-content-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-content-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-summaries))
      (common-lisp:list
       (common-lisp:cons "contentSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-content-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-expression common-lisp:nil
                       ((filters :initarg :filters :initform
                         (common-lisp:error ":filters is required") :type
                         (common-lisp:or filter-list common-lisp:null)
                         :accessor struct-shape-search-expression-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-expression
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-expression
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-expression 'make-search-expression))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input search-expression))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input search-expression))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input search-expression))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-quick-responses-request common-lisp:nil
                       ((attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or contact-attributes common-lisp:null)
                         :accessor
                         struct-shape-search-quick-responses-request-attributes
                         :shape "ContactAttributes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (knowledge-base-id :initarg :knowledge-base-id
                         :initform
                         (common-lisp:error ":knowledgebaseid is required")
                         :type (common-lisp:or uuid-or-arn common-lisp:null)
                         :accessor
                         struct-shape-search-quick-responses-request-knowledge-base-id
                         :shape "UuidOrArn" :location "uri" :location-name
                         "knowledgeBaseId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-search-quick-responses-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-search-quick-responses-request-next-token
                         :shape "NonEmptyString" :location "querystring"
                         :location-name "nextToken")
                        (search-expression :initarg :search-expression
                         :initform
                         (common-lisp:error ":searchexpression is required")
                         :type
                         (common-lisp:or quick-response-search-expression
                                         common-lisp:null)
                         :accessor
                         struct-shape-search-quick-responses-request-search-expression
                         :shape "QuickResponseSearchExpression" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-quick-responses-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'search-quick-responses-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-quick-responses-request
                    'make-search-quick-responses-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-quick-responses-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-quick-responses-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-expression))
      (common-lisp:list
       (common-lisp:cons "searchExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-quick-responses-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-quick-responses-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-search-quick-responses-response-next-token
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (results :initarg :results :initform
                         (common-lisp:error ":results is required") :type
                         (common-lisp:or quick-response-search-results-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-search-quick-responses-response-results
                         :shape "QuickResponseSearchResultsList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-quick-responses-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'search-quick-responses-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-quick-responses-response
                    'make-search-quick-responses-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-quick-responses-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-quick-responses-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results))
      (common-lisp:list
       (common-lisp:cons "results"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-quick-responses-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-sessions-request common-lisp:nil
                       ((assistant-id :initarg :assistant-id :initform
                         (common-lisp:error ":assistantid is required") :type
                         (common-lisp:or uuid-or-arn common-lisp:null)
                         :accessor
                         struct-shape-search-sessions-request-assistant-id
                         :shape "UuidOrArn" :location "uri" :location-name
                         "assistantId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-search-sessions-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-search-sessions-request-next-token :shape
                         "NextToken" :location "querystring" :location-name
                         "nextToken")
                        (search-expression :initarg :search-expression
                         :initform
                         (common-lisp:error ":searchexpression is required")
                         :type
                         (common-lisp:or search-expression common-lisp:null)
                         :accessor
                         struct-shape-search-sessions-request-search-expression
                         :shape "SearchExpression" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-sessions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-sessions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-sessions-request 'make-search-sessions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-sessions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-sessions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-expression))
      (common-lisp:list
       (common-lisp:cons "searchExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-sessions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-sessions-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-search-sessions-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (session-summaries :initarg :session-summaries
                         :initform
                         (common-lisp:error ":sessionsummaries is required")
                         :type
                         (common-lisp:or session-summaries common-lisp:null)
                         :accessor
                         struct-shape-search-sessions-response-session-summaries
                         :shape "SessionSummaries" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-sessions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-sessions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-sessions-response 'make-search-sessions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-sessions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-sessions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-summaries))
      (common-lisp:list
       (common-lisp:cons "sessionSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-sessions-response))
   common-lisp:nil))
(common-lisp:deftype sensitive-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass server-side-encryption-configuration common-lisp:nil
                       ((kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-server-side-encryption-configuration-kms-key-id
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-server-side-encryption-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'server-side-encryption-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'server-side-encryption-configuration
                    'make-server-side-encryption-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          server-side-encryption-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          server-side-encryption-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          server-side-encryption-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (wisdom-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass session-data common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-session-data-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (integration-configuration :initarg
                         :integration-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or session-integration-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-session-data-integration-configuration
                         :shape "SessionIntegrationConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-session-data-name :shape "Name" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (session-arn :initarg :session-arn :initform
                         (common-lisp:error ":sessionarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-session-data-session-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (session-id :initarg :session-id :initform
                         (common-lisp:error ":sessionid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-session-data-session-id :shape "Uuid"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-session-data-tags :shape "Tags" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-session-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'session-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'session-data 'make-session-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input session-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input session-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'integration-configuration))
      (common-lisp:list
       (common-lisp:cons "integrationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-arn))
      (common-lisp:list
       (common-lisp:cons "sessionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "sessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input session-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass session-integration-configuration common-lisp:nil
                       ((topic-integration-arn :initarg :topic-integration-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-arn common-lisp:null)
                         :accessor
                         struct-shape-session-integration-configuration-topic-integration-arn
                         :shape "GenericArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-session-integration-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'session-integration-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'session-integration-configuration
                    'make-session-integration-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          session-integration-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          session-integration-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'topic-integration-arn))
      (common-lisp:list
       (common-lisp:cons "topicIntegrationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          session-integration-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype session-summaries ()
   '(trivial-types:proper-list session-summary))
 (common-lisp:defun make-session-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list session-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass session-summary common-lisp:nil
                       ((assistant-arn :initarg :assistant-arn :initform
                         (common-lisp:error ":assistantarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-session-summary-assistant-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (assistant-id :initarg :assistant-id :initform
                         (common-lisp:error ":assistantid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-session-summary-assistant-id :shape
                         "Uuid" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (session-arn :initarg :session-arn :initform
                         (common-lisp:error ":sessionarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-session-summary-session-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (session-id :initarg :session-id :initform
                         (common-lisp:error ":sessionid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-session-summary-session-id :shape "Uuid"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-session-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'session-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'session-summary 'make-session-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input session-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input session-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assistant-arn))
      (common-lisp:list
       (common-lisp:cons "assistantArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assistant-id))
      (common-lisp:list
       (common-lisp:cons "assistantId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-arn))
      (common-lisp:list
       (common-lisp:cons "sessionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "sessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input session-summary))
   common-lisp:nil))
(common-lisp:deftype short-cut-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass source-configuration common-lisp:nil
                       ((app-integrations :initarg :app-integrations :initform
                         common-lisp:nil :type
                         (common-lisp:or app-integrations-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-source-configuration-app-integrations
                         :shape "AppIntegrationsConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-source-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'source-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'source-configuration 'make-source-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input source-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input source-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-integrations))
      (common-lisp:list
       (common-lisp:cons "appIntegrations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input source-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-content-upload-request common-lisp:nil
                       ((content-type :initarg :content-type :initform
                         (common-lisp:error ":contenttype is required") :type
                         (common-lisp:or content-type common-lisp:null)
                         :accessor
                         struct-shape-start-content-upload-request-content-type
                         :shape "ContentType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (knowledge-base-id :initarg :knowledge-base-id
                         :initform
                         (common-lisp:error ":knowledgebaseid is required")
                         :type (common-lisp:or uuid-or-arn common-lisp:null)
                         :accessor
                         struct-shape-start-content-upload-request-knowledge-base-id
                         :shape "UuidOrArn" :location "uri" :location-name
                         "knowledgeBaseId")
                        (presigned-url-time-to-live :initarg
                         :presigned-url-time-to-live :initform common-lisp:nil
                         :type (common-lisp:or time-to-live common-lisp:null)
                         :accessor
                         struct-shape-start-content-upload-request-presigned-url-time-to-live
                         :shape "TimeToLive" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-content-upload-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-content-upload-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-content-upload-request
                    'make-start-content-upload-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-content-upload-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-content-upload-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "contentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'presigned-url-time-to-live))
      (common-lisp:list
       (common-lisp:cons "presignedUrlTimeToLive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-content-upload-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-content-upload-response common-lisp:nil
                       ((headers-to-include :initarg :headers-to-include
                         :initform
                         (common-lisp:error ":headerstoinclude is required")
                         :type (common-lisp:or headers common-lisp:null)
                         :accessor
                         struct-shape-start-content-upload-response-headers-to-include
                         :shape "Headers" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (upload-id :initarg :upload-id :initform
                         (common-lisp:error ":uploadid is required") :type
                         (common-lisp:or upload-id common-lisp:null) :accessor
                         struct-shape-start-content-upload-response-upload-id
                         :shape "UploadId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (url :initarg :url :initform
                         (common-lisp:error ":url is required") :type
                         (common-lisp:or url common-lisp:null) :accessor
                         struct-shape-start-content-upload-response-url :shape
                         "Url" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (url-expiry :initarg :url-expiry :initform
                         (common-lisp:error ":urlexpiry is required") :type
                         (common-lisp:or synthetic-timestamp-epoch-seconds
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-content-upload-response-url-expiry
                         :shape "SyntheticTimestamp_epoch_seconds" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-content-upload-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-content-upload-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-content-upload-response
                    'make-start-content-upload-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-content-upload-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-content-upload-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'headers-to-include))
      (common-lisp:list
       (common-lisp:cons "headersToInclude"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-id))
      (common-lisp:list
       (common-lisp:cons "uploadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url-expiry))
      (common-lisp:list
       (common-lisp:cons "urlExpiry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-content-upload-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-import-job-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-start-import-job-request-client-token
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (external-source-configuration :initarg
                         :external-source-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or external-source-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-import-job-request-external-source-configuration
                         :shape "ExternalSourceConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (import-job-type :initarg :import-job-type :initform
                         (common-lisp:error ":importjobtype is required") :type
                         (common-lisp:or import-job-type common-lisp:null)
                         :accessor
                         struct-shape-start-import-job-request-import-job-type
                         :shape "ImportJobType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (knowledge-base-id :initarg :knowledge-base-id
                         :initform
                         (common-lisp:error ":knowledgebaseid is required")
                         :type (common-lisp:or uuid-or-arn common-lisp:null)
                         :accessor
                         struct-shape-start-import-job-request-knowledge-base-id
                         :shape "UuidOrArn" :location "uri" :location-name
                         "knowledgeBaseId")
                        (metadata :initarg :metadata :initform common-lisp:nil
                         :type
                         (common-lisp:or content-metadata common-lisp:null)
                         :accessor
                         struct-shape-start-import-job-request-metadata :shape
                         "ContentMetadata" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (upload-id :initarg :upload-id :initform
                         (common-lisp:error ":uploadid is required") :type
                         (common-lisp:or upload-id common-lisp:null) :accessor
                         struct-shape-start-import-job-request-upload-id :shape
                         "UploadId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-import-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-import-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-import-job-request 'make-start-import-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-import-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-import-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-source-configuration))
      (common-lisp:list
       (common-lisp:cons "externalSourceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-job-type))
      (common-lisp:list
       (common-lisp:cons "importJobType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-id))
      (common-lisp:list
       (common-lisp:cons "uploadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-import-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-import-job-response common-lisp:nil
                       ((import-job :initarg :import-job :initform
                         common-lisp:nil :type
                         (common-lisp:or import-job-data common-lisp:null)
                         :accessor
                         struct-shape-start-import-job-response-import-job
                         :shape "ImportJobData" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-import-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-import-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-import-job-response
                    'make-start-import-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-import-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-import-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-job))
      (common-lisp:list
       (common-lisp:cons "importJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-import-job-response))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype synthetic-timestamp-epoch-seconds () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "Arn" :location "uri" :location-name "resourceArn")
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape "Tags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags () 'common-lisp:hash-table)
 (common-lisp:defun make-tags (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype time-to-live () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition too-many-tags-exception
     (wisdom-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-tags-exception-message)
      (resource-name :initarg :resource-name :initform common-lisp:nil :reader
       too-many-tags-exception-resource-name)))
 (common-lisp:export
  (common-lisp:list 'too-many-tags-exception 'too-many-tags-exception-message
                    'too-many-tags-exception-resource-name)))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "Arn" :location "uri" :location-name
                         "resourceArn")
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tagkeys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-untag-resource-request-tag-keys
                         :shape "TagKeyList" :location "querystring"
                         :location-name "tagKeys"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-content-request common-lisp:nil
                       ((content-id :initarg :content-id :initform
                         (common-lisp:error ":contentid is required") :type
                         (common-lisp:or uuid-or-arn common-lisp:null)
                         :accessor
                         struct-shape-update-content-request-content-id :shape
                         "UuidOrArn" :location "uri" :location-name
                         "contentId")
                        (knowledge-base-id :initarg :knowledge-base-id
                         :initform
                         (common-lisp:error ":knowledgebaseid is required")
                         :type (common-lisp:or uuid-or-arn common-lisp:null)
                         :accessor
                         struct-shape-update-content-request-knowledge-base-id
                         :shape "UuidOrArn" :location "uri" :location-name
                         "knowledgeBaseId")
                        (metadata :initarg :metadata :initform common-lisp:nil
                         :type
                         (common-lisp:or content-metadata common-lisp:null)
                         :accessor struct-shape-update-content-request-metadata
                         :shape "ContentMetadata" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (override-link-out-uri :initarg :override-link-out-uri
                         :initform common-lisp:nil :type
                         (common-lisp:or uri common-lisp:null) :accessor
                         struct-shape-update-content-request-override-link-out-uri
                         :shape "Uri" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (remove-override-link-out-uri :initarg
                         :remove-override-link-out-uri :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-update-content-request-remove-override-link-out-uri
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (revision-id :initarg :revision-id :initform
                         common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-update-content-request-revision-id :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (title :initarg :title :initform common-lisp:nil :type
                         (common-lisp:or content-title common-lisp:null)
                         :accessor struct-shape-update-content-request-title
                         :shape "ContentTitle" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (upload-id :initarg :upload-id :initform
                         common-lisp:nil :type
                         (common-lisp:or upload-id common-lisp:null) :accessor
                         struct-shape-update-content-request-upload-id :shape
                         "UploadId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-content-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-content-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-content-request 'make-update-content-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-content-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-content-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'override-link-out-uri))
      (common-lisp:list
       (common-lisp:cons "overrideLinkOutUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remove-override-link-out-uri))
      (common-lisp:list
       (common-lisp:cons "removeOverrideLinkOutUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "revisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-id))
      (common-lisp:list
       (common-lisp:cons "uploadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-content-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-content-response common-lisp:nil
                       ((content :initarg :content :initform common-lisp:nil
                         :type (common-lisp:or content-data common-lisp:null)
                         :accessor struct-shape-update-content-response-content
                         :shape "ContentData" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-content-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-content-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-content-response 'make-update-content-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-content-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-content-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-content-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-knowledge-base-template-uri-request
                       common-lisp:nil
                       ((knowledge-base-id :initarg :knowledge-base-id
                         :initform
                         (common-lisp:error ":knowledgebaseid is required")
                         :type (common-lisp:or uuid-or-arn common-lisp:null)
                         :accessor
                         struct-shape-update-knowledge-base-template-uri-request-knowledge-base-id
                         :shape "UuidOrArn" :location "uri" :location-name
                         "knowledgeBaseId")
                        (template-uri :initarg :template-uri :initform
                         (common-lisp:error ":templateuri is required") :type
                         (common-lisp:or uri common-lisp:null) :accessor
                         struct-shape-update-knowledge-base-template-uri-request-template-uri
                         :shape "Uri" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-knowledge-base-template-uri-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-knowledge-base-template-uri-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-knowledge-base-template-uri-request
                    'make-update-knowledge-base-template-uri-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-knowledge-base-template-uri-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-knowledge-base-template-uri-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-uri))
      (common-lisp:list
       (common-lisp:cons "templateUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-knowledge-base-template-uri-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-knowledge-base-template-uri-response
                       common-lisp:nil
                       ((knowledge-base :initarg :knowledge-base :initform
                         common-lisp:nil :type
                         (common-lisp:or knowledge-base-data common-lisp:null)
                         :accessor
                         struct-shape-update-knowledge-base-template-uri-response-knowledge-base
                         :shape "KnowledgeBaseData" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-knowledge-base-template-uri-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-knowledge-base-template-uri-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-knowledge-base-template-uri-response
                    'make-update-knowledge-base-template-uri-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-knowledge-base-template-uri-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-knowledge-base-template-uri-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base))
      (common-lisp:list
       (common-lisp:cons "knowledgeBase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-knowledge-base-template-uri-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-quick-response-request common-lisp:nil
                       ((channels :initarg :channels :initform common-lisp:nil
                         :type (common-lisp:or channels common-lisp:null)
                         :accessor
                         struct-shape-update-quick-response-request-channels
                         :shape "Channels" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (content :initarg :content :initform common-lisp:nil
                         :type
                         (common-lisp:or quick-response-data-provider
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-quick-response-request-content
                         :shape "QuickResponseDataProvider" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (content-type :initarg :content-type :initform
                         common-lisp:nil :type
                         (common-lisp:or quick-response-type common-lisp:null)
                         :accessor
                         struct-shape-update-quick-response-request-content-type
                         :shape "QuickResponseType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or quick-response-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-quick-response-request-description
                         :shape "QuickResponseDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (grouping-configuration :initarg
                         :grouping-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or grouping-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-quick-response-request-grouping-configuration
                         :shape "GroupingConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (is-active :initarg :is-active :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-update-quick-response-request-is-active
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (knowledge-base-id :initarg :knowledge-base-id
                         :initform
                         (common-lisp:error ":knowledgebaseid is required")
                         :type (common-lisp:or uuid-or-arn common-lisp:null)
                         :accessor
                         struct-shape-update-quick-response-request-knowledge-base-id
                         :shape "UuidOrArn" :location "uri" :location-name
                         "knowledgeBaseId")
                        (language :initarg :language :initform common-lisp:nil
                         :type (common-lisp:or language-code common-lisp:null)
                         :accessor
                         struct-shape-update-quick-response-request-language
                         :shape "LanguageCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or quick-response-name common-lisp:null)
                         :accessor
                         struct-shape-update-quick-response-request-name :shape
                         "QuickResponseName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (quick-response-id :initarg :quick-response-id
                         :initform
                         (common-lisp:error ":quickresponseid is required")
                         :type (common-lisp:or uuid-or-arn common-lisp:null)
                         :accessor
                         struct-shape-update-quick-response-request-quick-response-id
                         :shape "UuidOrArn" :location "uri" :location-name
                         "quickResponseId")
                        (remove-description :initarg :remove-description
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-update-quick-response-request-remove-description
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (remove-grouping-configuration :initarg
                         :remove-grouping-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-update-quick-response-request-remove-grouping-configuration
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (remove-shortcut-key :initarg :remove-shortcut-key
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-update-quick-response-request-remove-shortcut-key
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (shortcut-key :initarg :shortcut-key :initform
                         common-lisp:nil :type
                         (common-lisp:or short-cut-key common-lisp:null)
                         :accessor
                         struct-shape-update-quick-response-request-shortcut-key
                         :shape "ShortCutKey" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-quick-response-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-quick-response-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-quick-response-request
                    'make-update-quick-response-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-quick-response-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-quick-response-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channels))
      (common-lisp:list
       (common-lisp:cons "channels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "contentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'grouping-configuration))
      (common-lisp:list
       (common-lisp:cons "groupingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-active))
      (common-lisp:list
       (common-lisp:cons "isActive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language))
      (common-lisp:list
       (common-lisp:cons "language"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remove-description))
      (common-lisp:list
       (common-lisp:cons "removeDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remove-grouping-configuration))
      (common-lisp:list
       (common-lisp:cons "removeGroupingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remove-shortcut-key))
      (common-lisp:list
       (common-lisp:cons "removeShortcutKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shortcut-key))
      (common-lisp:list
       (common-lisp:cons "shortcutKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-quick-response-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-quick-response-response common-lisp:nil
                       ((quick-response :initarg :quick-response :initform
                         common-lisp:nil :type
                         (common-lisp:or quick-response-data common-lisp:null)
                         :accessor
                         struct-shape-update-quick-response-response-quick-response
                         :shape "QuickResponseData" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-quick-response-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-quick-response-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-quick-response-response
                    'make-update-quick-response-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-quick-response-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-quick-response-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quick-response))
      (common-lisp:list
       (common-lisp:cons "quickResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-quick-response-response))
   common-lisp:nil))
(common-lisp:deftype upload-id () 'common-lisp:string)
(common-lisp:deftype uri () 'common-lisp:string)
(common-lisp:deftype url () 'common-lisp:string)
(common-lisp:deftype uuid () 'common-lisp:string)
(common-lisp:deftype uuid-or-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (wisdom-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:deftype wait-time-seconds () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defun create-assistant
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token description name
                     server-side-encryption-configuration tags type)
   (common-lisp:declare
    (common-lisp:ignorable client-token description name
     server-side-encryption-configuration tags type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-assistant-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wisdom-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/assistants"
                                                        "CreateAssistant"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-assistant))
(common-lisp:progn
 (common-lisp:defun create-assistant-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assistant-id association association-type
                     client-token tags)
   (common-lisp:declare
    (common-lisp:ignorable assistant-id association association-type
     client-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-assistant-association-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wisdom-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assistants/~A/associations"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assistant-id))))
                                                        "CreateAssistantAssociation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-assistant-association))
(common-lisp:progn
 (common-lisp:defun create-content
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token knowledge-base-id metadata
                     name override-link-out-uri tags title upload-id)
   (common-lisp:declare
    (common-lisp:ignorable client-token knowledge-base-id metadata name
     override-link-out-uri tags title upload-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-content-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wisdom-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/knowledgeBases/~A/contents"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'knowledge-base-id))))
                                                        "CreateContent"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-content))
(common-lisp:progn
 (common-lisp:defun create-knowledge-base
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token description
                     knowledge-base-type name rendering-configuration
                     server-side-encryption-configuration source-configuration
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable client-token description knowledge-base-type name
     rendering-configuration server-side-encryption-configuration
     source-configuration tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-knowledge-base-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wisdom-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/knowledgeBases"
                                                        "CreateKnowledgeBase"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-knowledge-base))
(common-lisp:progn
 (common-lisp:defun create-quick-response
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channels client-token content
                     content-type description grouping-configuration is-active
                     knowledge-base-id language name shortcut-key tags)
   (common-lisp:declare
    (common-lisp:ignorable channels client-token content content-type
     description grouping-configuration is-active knowledge-base-id language
     name shortcut-key tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-quick-response-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wisdom-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/knowledgeBases/~A/quickResponses"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'knowledge-base-id))))
                                                        "CreateQuickResponse"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-quick-response))
(common-lisp:progn
 (common-lisp:defun create-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assistant-id client-token description
                     name tags)
   (common-lisp:declare
    (common-lisp:ignorable assistant-id client-token description name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-session-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wisdom-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assistants/~A/sessions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assistant-id))))
                                                        "CreateSession"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-session))
(common-lisp:progn
 (common-lisp:defun delete-assistant
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assistant-id)
   (common-lisp:declare (common-lisp:ignorable assistant-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-assistant-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wisdom-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assistants/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assistant-id))))
                                                        "DeleteAssistant"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-assistant))
(common-lisp:progn
 (common-lisp:defun delete-assistant-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assistant-association-id assistant-id)
   (common-lisp:declare
    (common-lisp:ignorable assistant-association-id assistant-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-assistant-association-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wisdom-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assistants/~A/associations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assistant-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assistant-association-id))))
                                                        "DeleteAssistantAssociation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-assistant-association))
(common-lisp:progn
 (common-lisp:defun delete-content
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key content-id knowledge-base-id)
   (common-lisp:declare (common-lisp:ignorable content-id knowledge-base-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-content-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wisdom-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/knowledgeBases/~A/contents/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'knowledge-base-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'content-id))))
                                                        "DeleteContent"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-content))
(common-lisp:progn
 (common-lisp:defun delete-import-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key import-job-id knowledge-base-id)
   (common-lisp:declare
    (common-lisp:ignorable import-job-id knowledge-base-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-import-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wisdom-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/knowledgeBases/~A/importJobs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'knowledge-base-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'import-job-id))))
                                                        "DeleteImportJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-import-job))
(common-lisp:progn
 (common-lisp:defun delete-knowledge-base
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key knowledge-base-id)
   (common-lisp:declare (common-lisp:ignorable knowledge-base-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-knowledge-base-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wisdom-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/knowledgeBases/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'knowledge-base-id))))
                                                        "DeleteKnowledgeBase"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-knowledge-base))
(common-lisp:progn
 (common-lisp:defun delete-quick-response
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key knowledge-base-id quick-response-id)
   (common-lisp:declare
    (common-lisp:ignorable knowledge-base-id quick-response-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-quick-response-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wisdom-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/knowledgeBases/~A/quickResponses/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'knowledge-base-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'quick-response-id))))
                                                        "DeleteQuickResponse"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-quick-response))
(common-lisp:progn
 (common-lisp:defun get-assistant
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assistant-id)
   (common-lisp:declare (common-lisp:ignorable assistant-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-assistant-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wisdom-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assistants/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assistant-id))))
                                                        "GetAssistant"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-assistant))
(common-lisp:progn
 (common-lisp:defun get-assistant-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assistant-association-id assistant-id)
   (common-lisp:declare
    (common-lisp:ignorable assistant-association-id assistant-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-assistant-association-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wisdom-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assistants/~A/associations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assistant-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assistant-association-id))))
                                                        "GetAssistantAssociation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-assistant-association))
(common-lisp:progn
 (common-lisp:defun get-content
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key content-id knowledge-base-id)
   (common-lisp:declare (common-lisp:ignorable content-id knowledge-base-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-content-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wisdom-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/knowledgeBases/~A/contents/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'knowledge-base-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'content-id))))
                                                        "GetContent"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-content))
(common-lisp:progn
 (common-lisp:defun get-content-summary
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key content-id knowledge-base-id)
   (common-lisp:declare (common-lisp:ignorable content-id knowledge-base-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-content-summary-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wisdom-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/knowledgeBases/~A/contents/~A/summary"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'knowledge-base-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'content-id))))
                                                        "GetContentSummary"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-content-summary))
(common-lisp:progn
 (common-lisp:defun get-import-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key import-job-id knowledge-base-id)
   (common-lisp:declare
    (common-lisp:ignorable import-job-id knowledge-base-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-import-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wisdom-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/knowledgeBases/~A/importJobs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'knowledge-base-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'import-job-id))))
                                                        "GetImportJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-import-job))
(common-lisp:progn
 (common-lisp:defun get-knowledge-base
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key knowledge-base-id)
   (common-lisp:declare (common-lisp:ignorable knowledge-base-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-knowledge-base-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wisdom-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/knowledgeBases/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'knowledge-base-id))))
                                                        "GetKnowledgeBase"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-knowledge-base))
(common-lisp:progn
 (common-lisp:defun get-quick-response
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key knowledge-base-id quick-response-id)
   (common-lisp:declare
    (common-lisp:ignorable knowledge-base-id quick-response-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-quick-response-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wisdom-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/knowledgeBases/~A/quickResponses/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'knowledge-base-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'quick-response-id))))
                                                        "GetQuickResponse"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-quick-response))
(common-lisp:progn
 (common-lisp:defun get-recommendations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assistant-id max-results session-id
                     wait-time-seconds)
   (common-lisp:declare
    (common-lisp:ignorable assistant-id max-results session-id
     wait-time-seconds))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-recommendations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wisdom-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assistants/~A/sessions/~A/recommendations"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assistant-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'session-id))))
                                                        "GetRecommendations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-recommendations))
(common-lisp:progn
 (common-lisp:defun get-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assistant-id session-id)
   (common-lisp:declare (common-lisp:ignorable assistant-id session-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-session-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wisdom-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assistants/~A/sessions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assistant-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'session-id))))
                                                        "GetSession"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-session))
(common-lisp:progn
 (common-lisp:defun list-assistant-associations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assistant-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable assistant-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-assistant-associations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wisdom-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assistants/~A/associations"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assistant-id))))
                                                        "ListAssistantAssociations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-assistant-associations))
(common-lisp:progn
 (common-lisp:defun list-assistants
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-assistants-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wisdom-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/assistants"
                                                        "ListAssistants"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-assistants))
(common-lisp:progn
 (common-lisp:defun list-contents
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key knowledge-base-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable knowledge-base-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-contents-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wisdom-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/knowledgeBases/~A/contents"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'knowledge-base-id))))
                                                        "ListContents"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-contents))
(common-lisp:progn
 (common-lisp:defun list-import-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key knowledge-base-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable knowledge-base-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-import-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wisdom-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/knowledgeBases/~A/importJobs"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'knowledge-base-id))))
                                                        "ListImportJobs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-import-jobs))
(common-lisp:progn
 (common-lisp:defun list-knowledge-bases
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-knowledge-bases-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wisdom-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/knowledgeBases"
                                                        "ListKnowledgeBases"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-knowledge-bases))
(common-lisp:progn
 (common-lisp:defun list-quick-responses
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key knowledge-base-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable knowledge-base-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-quick-responses-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wisdom-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/knowledgeBases/~A/quickResponses"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'knowledge-base-id))))
                                                        "ListQuickResponses"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-quick-responses))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wisdom-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun notify-recommendations-received
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assistant-id recommendation-ids
                     session-id)
   (common-lisp:declare
    (common-lisp:ignorable assistant-id recommendation-ids session-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-notify-recommendations-received-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wisdom-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assistants/~A/sessions/~A/recommendations/notify"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assistant-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'session-id))))
                                                        "NotifyRecommendationsReceived"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'notify-recommendations-received))
(common-lisp:progn
 (common-lisp:defun query-assistant
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assistant-id max-results next-token
                     query-text)
   (common-lisp:declare
    (common-lisp:ignorable assistant-id max-results next-token query-text))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-query-assistant-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wisdom-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assistants/~A/query"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assistant-id))))
                                                        "QueryAssistant"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'query-assistant))
(common-lisp:progn
 (common-lisp:defun remove-knowledge-base-template-uri
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key knowledge-base-id)
   (common-lisp:declare (common-lisp:ignorable knowledge-base-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-knowledge-base-template-uri-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wisdom-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/knowledgeBases/~A/templateUri"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'knowledge-base-id))))
                                                        "RemoveKnowledgeBaseTemplateUri"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'remove-knowledge-base-template-uri))
(common-lisp:progn
 (common-lisp:defun search-content
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key knowledge-base-id max-results next-token
                     search-expression)
   (common-lisp:declare
    (common-lisp:ignorable knowledge-base-id max-results next-token
     search-expression))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-content-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wisdom-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/knowledgeBases/~A/search"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'knowledge-base-id))))
                                                        "SearchContent"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'search-content))
(common-lisp:progn
 (common-lisp:defun search-quick-responses
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key attributes knowledge-base-id max-results
                     next-token search-expression)
   (common-lisp:declare
    (common-lisp:ignorable attributes knowledge-base-id max-results next-token
     search-expression))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-quick-responses-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wisdom-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/knowledgeBases/~A/search/quickResponses"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'knowledge-base-id))))
                                                        "SearchQuickResponses"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'search-quick-responses))
(common-lisp:progn
 (common-lisp:defun search-sessions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assistant-id max-results next-token
                     search-expression)
   (common-lisp:declare
    (common-lisp:ignorable assistant-id max-results next-token
     search-expression))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-sessions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wisdom-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assistants/~A/searchSessions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assistant-id))))
                                                        "SearchSessions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'search-sessions))
(common-lisp:progn
 (common-lisp:defun start-content-upload
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key content-type knowledge-base-id
                     presigned-url-time-to-live)
   (common-lisp:declare
    (common-lisp:ignorable content-type knowledge-base-id
     presigned-url-time-to-live))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-content-upload-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wisdom-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/knowledgeBases/~A/upload"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'knowledge-base-id))))
                                                        "StartContentUpload"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-content-upload))
(common-lisp:progn
 (common-lisp:defun start-import-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token
                     external-source-configuration import-job-type
                     knowledge-base-id metadata upload-id)
   (common-lisp:declare
    (common-lisp:ignorable client-token external-source-configuration
     import-job-type knowledge-base-id metadata upload-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-import-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wisdom-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/knowledgeBases/~A/importJobs"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'knowledge-base-id))))
                                                        "StartImportJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-import-job))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wisdom-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wisdom-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-content
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key content-id knowledge-base-id metadata
                     override-link-out-uri remove-override-link-out-uri
                     revision-id title upload-id)
   (common-lisp:declare
    (common-lisp:ignorable content-id knowledge-base-id metadata
     override-link-out-uri remove-override-link-out-uri revision-id title
     upload-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-content-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wisdom-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/knowledgeBases/~A/contents/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'knowledge-base-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'content-id))))
                                                        "UpdateContent"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-content))
(common-lisp:progn
 (common-lisp:defun update-knowledge-base-template-uri
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key knowledge-base-id template-uri)
   (common-lisp:declare (common-lisp:ignorable knowledge-base-id template-uri))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-knowledge-base-template-uri-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wisdom-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/knowledgeBases/~A/templateUri"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'knowledge-base-id))))
                                                        "UpdateKnowledgeBaseTemplateUri"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-knowledge-base-template-uri))
(common-lisp:progn
 (common-lisp:defun update-quick-response
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channels content content-type description
                     grouping-configuration is-active knowledge-base-id
                     language name quick-response-id remove-description
                     remove-grouping-configuration remove-shortcut-key
                     shortcut-key)
   (common-lisp:declare
    (common-lisp:ignorable channels content content-type description
     grouping-configuration is-active knowledge-base-id language name
     quick-response-id remove-description remove-grouping-configuration
     remove-shortcut-key shortcut-key))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-quick-response-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wisdom-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/knowledgeBases/~A/quickResponses/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'knowledge-base-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'quick-response-id))))
                                                        "UpdateQuickResponse"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-quick-response))
