;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/elasticache/api
  (:use)
  (:nicknames #:aws/elasticache)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/elasticache/api)
(common-lisp:progn
 (common-lisp:define-condition elasticache-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'elasticache-error))
(common-lisp:progn
 (common-lisp:defclass elasticache-request
                       (aws-sdk/query-request:query-request) common-lisp:nil
                       (:default-initargs :service "elasticache" :api-version
                        "2015-02-02" :host-prefix "elasticache" :signing-name
                        common-lisp:nil :global-host common-lisp:nil))
 (common-lisp:export 'elasticache-request))
(common-lisp:defvar *error-map*
  '(("APICallRateForCustomerExceededFault"
     . apicall-rate-for-customer-exceeded-fault)
    ("AuthorizationAlreadyExistsFault" . authorization-already-exists-fault)
    ("AuthorizationNotFoundFault" . authorization-not-found-fault)
    ("CacheClusterAlreadyExistsFault" . cache-cluster-already-exists-fault)
    ("CacheClusterNotFoundFault" . cache-cluster-not-found-fault)
    ("CacheParameterGroupAlreadyExistsFault"
     . cache-parameter-group-already-exists-fault)
    ("CacheParameterGroupNotFoundFault"
     . cache-parameter-group-not-found-fault)
    ("CacheParameterGroupQuotaExceededFault"
     . cache-parameter-group-quota-exceeded-fault)
    ("CacheSecurityGroupAlreadyExistsFault"
     . cache-security-group-already-exists-fault)
    ("CacheSecurityGroupNotFoundFault" . cache-security-group-not-found-fault)
    ("CacheSecurityGroupQuotaExceededFault"
     . cache-security-group-quota-exceeded-fault)
    ("CacheSubnetGroupAlreadyExistsFault"
     . cache-subnet-group-already-exists-fault)
    ("CacheSubnetGroupInUse" . cache-subnet-group-in-use)
    ("CacheSubnetGroupNotFoundFault" . cache-subnet-group-not-found-fault)
    ("CacheSubnetGroupQuotaExceededFault"
     . cache-subnet-group-quota-exceeded-fault)
    ("CacheSubnetQuotaExceededFault" . cache-subnet-quota-exceeded-fault)
    ("ClusterQuotaForCustomerExceededFault"
     . cluster-quota-for-customer-exceeded-fault)
    ("DefaultUserAssociatedToUserGroupFault"
     . default-user-associated-to-user-group-fault)
    ("DefaultUserRequired" . default-user-required)
    ("DuplicateUserNameFault" . duplicate-user-name-fault)
    ("GlobalReplicationGroupAlreadyExistsFault"
     . global-replication-group-already-exists-fault)
    ("GlobalReplicationGroupNotFoundFault"
     . global-replication-group-not-found-fault)
    ("InsufficientCacheClusterCapacityFault"
     . insufficient-cache-cluster-capacity-fault)
    ("InvalidARNFault" . invalid-arnfault)
    ("InvalidCacheClusterStateFault" . invalid-cache-cluster-state-fault)
    ("InvalidCacheParameterGroupStateFault"
     . invalid-cache-parameter-group-state-fault)
    ("InvalidCacheSecurityGroupStateFault"
     . invalid-cache-security-group-state-fault)
    ("InvalidCredentialsException" . invalid-credentials-exception)
    ("InvalidGlobalReplicationGroupStateFault"
     . invalid-global-replication-group-state-fault)
    ("InvalidKMSKeyFault" . invalid-kmskey-fault)
    ("InvalidParameterCombinationException"
     . invalid-parameter-combination-exception)
    ("InvalidParameterValueException" . invalid-parameter-value-exception)
    ("InvalidReplicationGroupStateFault"
     . invalid-replication-group-state-fault)
    ("InvalidServerlessCacheSnapshotStateFault"
     . invalid-serverless-cache-snapshot-state-fault)
    ("InvalidServerlessCacheStateFault" . invalid-serverless-cache-state-fault)
    ("InvalidSnapshotStateFault" . invalid-snapshot-state-fault)
    ("InvalidSubnet" . invalid-subnet)
    ("InvalidUserGroupStateFault" . invalid-user-group-state-fault)
    ("InvalidUserStateFault" . invalid-user-state-fault)
    ("InvalidVPCNetworkStateFault" . invalid-vpcnetwork-state-fault)
    ("NoOperationFault" . no-operation-fault)
    ("NodeGroupNotFoundFault" . node-group-not-found-fault)
    ("NodeGroupsPerReplicationGroupQuotaExceededFault"
     . node-groups-per-replication-group-quota-exceeded-fault)
    ("NodeQuotaForClusterExceededFault"
     . node-quota-for-cluster-exceeded-fault)
    ("NodeQuotaForCustomerExceededFault"
     . node-quota-for-customer-exceeded-fault)
    ("ReplicationGroupAlreadyExistsFault"
     . replication-group-already-exists-fault)
    ("ReplicationGroupAlreadyUnderMigrationFault"
     . replication-group-already-under-migration-fault)
    ("ReplicationGroupNotFoundFault" . replication-group-not-found-fault)
    ("ReplicationGroupNotUnderMigrationFault"
     . replication-group-not-under-migration-fault)
    ("ReservedCacheNodeAlreadyExistsFault"
     . reserved-cache-node-already-exists-fault)
    ("ReservedCacheNodeNotFoundFault" . reserved-cache-node-not-found-fault)
    ("ReservedCacheNodeQuotaExceededFault"
     . reserved-cache-node-quota-exceeded-fault)
    ("ReservedCacheNodesOfferingNotFoundFault"
     . reserved-cache-nodes-offering-not-found-fault)
    ("ServerlessCacheAlreadyExistsFault"
     . serverless-cache-already-exists-fault)
    ("ServerlessCacheNotFoundFault" . serverless-cache-not-found-fault)
    ("ServerlessCacheQuotaForCustomerExceededFault"
     . serverless-cache-quota-for-customer-exceeded-fault)
    ("ServerlessCacheSnapshotAlreadyExistsFault"
     . serverless-cache-snapshot-already-exists-fault)
    ("ServerlessCacheSnapshotNotFoundFault"
     . serverless-cache-snapshot-not-found-fault)
    ("ServerlessCacheSnapshotQuotaExceededFault"
     . serverless-cache-snapshot-quota-exceeded-fault)
    ("ServiceLinkedRoleNotFoundFault" . service-linked-role-not-found-fault)
    ("ServiceUpdateNotFoundFault" . service-update-not-found-fault)
    ("SnapshotAlreadyExistsFault" . snapshot-already-exists-fault)
    ("SnapshotFeatureNotSupportedFault" . snapshot-feature-not-supported-fault)
    ("SnapshotNotFoundFault" . snapshot-not-found-fault)
    ("SnapshotQuotaExceededFault" . snapshot-quota-exceeded-fault)
    ("SubnetInUse" . subnet-in-use)
    ("SubnetNotAllowedFault" . subnet-not-allowed-fault)
    ("TagNotFoundFault" . tag-not-found-fault)
    ("TagQuotaPerResourceExceeded" . tag-quota-per-resource-exceeded)
    ("TestFailoverNotAvailableFault" . test-failover-not-available-fault)
    ("UserAlreadyExistsFault" . user-already-exists-fault)
    ("UserGroupAlreadyExistsFault" . user-group-already-exists-fault)
    ("UserGroupNotFoundFault" . user-group-not-found-fault)
    ("UserGroupQuotaExceededFault" . user-group-quota-exceeded-fault)
    ("UserNotFoundFault" . user-not-found-fault)
    ("UserQuotaExceededFault" . user-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:define-condition apicall-rate-for-customer-exceeded-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'apicall-rate-for-customer-exceeded-fault)))
(common-lisp:deftype azmode () 'common-lisp:string)
(common-lisp:deftype access-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass add-tags-to-resource-message common-lisp:nil
                       ((resource-name :initarg :resource-name :initform
                         (common-lisp:error ":resource-name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-add-tags-to-resource-message-resource-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-add-tags-to-resource-message-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-tags-to-resource-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'add-tags-to-resource-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-tags-to-resource-message
                    'make-add-tags-to-resource-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-tags-to-resource-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-tags-to-resource-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-tags-to-resource-message))
   common-lisp:nil))
(common-lisp:deftype allowed-node-group-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass allowed-node-type-modifications-message common-lisp:nil
                       ((scale-up-modifications :initarg
                         :scale-up-modifications :initform common-lisp:nil
                         :type (common-lisp:or node-type-list common-lisp:null)
                         :accessor
                         struct-shape-allowed-node-type-modifications-message-scale-up-modifications
                         :shape "NodeTypeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scale-down-modifications :initarg
                         :scale-down-modifications :initform common-lisp:nil
                         :type (common-lisp:or node-type-list common-lisp:null)
                         :accessor
                         struct-shape-allowed-node-type-modifications-message-scale-down-modifications
                         :shape "NodeTypeList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-allowed-node-type-modifications-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'allowed-node-type-modifications-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'allowed-node-type-modifications-message
                    'make-allowed-node-type-modifications-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          allowed-node-type-modifications-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          allowed-node-type-modifications-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scale-up-modifications))
      (common-lisp:list
       (common-lisp:cons "ScaleUpModifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scale-down-modifications))
      (common-lisp:list
       (common-lisp:cons "ScaleDownModifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          allowed-node-type-modifications-message))
   common-lisp:nil))
(common-lisp:deftype auth-token-update-status () 'common-lisp:string)
(common-lisp:deftype auth-token-update-strategy-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass authentication common-lisp:nil
                       ((type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or authentication-type common-lisp:null)
                         :accessor struct-shape-authentication-type :shape
                         "AuthenticationType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (password-count :initarg :password-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-authentication-password-count
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-authentication
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'authentication
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'authentication 'make-authentication))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input authentication))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input authentication))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password-count))
      (common-lisp:list
       (common-lisp:cons "PasswordCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input authentication))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass authentication-mode common-lisp:nil
                       ((type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or input-authentication-type
                                         common-lisp:null)
                         :accessor struct-shape-authentication-mode-type :shape
                         "InputAuthenticationType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (passwords :initarg :passwords :initform
                         common-lisp:nil :type
                         (common-lisp:or password-list-input common-lisp:null)
                         :accessor struct-shape-authentication-mode-passwords
                         :shape "PasswordListInput" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-authentication-mode
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'authentication-mode
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'authentication-mode 'make-authentication-mode))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input authentication-mode))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input authentication-mode))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'passwords))
      (common-lisp:list
       (common-lisp:cons "Passwords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input authentication-mode))
   common-lisp:nil))
(common-lisp:deftype authentication-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition authorization-already-exists-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'authorization-already-exists-fault)))
(common-lisp:progn
 (common-lisp:define-condition authorization-not-found-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'authorization-not-found-fault)))
(common-lisp:progn
 (common-lisp:defclass authorize-cache-security-group-ingress-message
                       common-lisp:nil
                       ((cache-security-group-name :initarg
                         :cache-security-group-name :initform
                         (common-lisp:error
                          ":cache-security-group-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-authorize-cache-security-group-ingress-message-cache-security-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ec2security-group-name :initarg
                         :ec2security-group-name :initform
                         (common-lisp:error
                          ":ec2security-group-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-authorize-cache-security-group-ingress-message-ec2security-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ec2security-group-owner-id :initarg
                         :ec2security-group-owner-id :initform
                         (common-lisp:error
                          ":ec2security-group-owner-id is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-authorize-cache-security-group-ingress-message-ec2security-group-owner-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-authorize-cache-security-group-ingress-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'authorize-cache-security-group-ingress-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'authorize-cache-security-group-ingress-message
                    'make-authorize-cache-security-group-ingress-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          authorize-cache-security-group-ingress-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          authorize-cache-security-group-ingress-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-security-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheSecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-name))
      (common-lisp:list
       (common-lisp:cons "EC2SecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-owner-id))
      (common-lisp:list
       (common-lisp:cons "EC2SecurityGroupOwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          authorize-cache-security-group-ingress-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass authorize-cache-security-group-ingress-result
                       common-lisp:nil
                       ((cache-security-group :initarg :cache-security-group
                         :initform common-lisp:nil :type
                         (common-lisp:or cache-security-group common-lisp:null)
                         :accessor
                         struct-shape-authorize-cache-security-group-ingress-result-cache-security-group
                         :shape "CacheSecurityGroup" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-authorize-cache-security-group-ingress-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'authorize-cache-security-group-ingress-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'authorize-cache-security-group-ingress-result
                    'make-authorize-cache-security-group-ingress-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          authorize-cache-security-group-ingress-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          authorize-cache-security-group-ingress-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-security-group))
      (common-lisp:list
       (common-lisp:cons "CacheSecurityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          authorize-cache-security-group-ingress-result))
   common-lisp:nil))
(common-lisp:deftype automatic-failover-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass availability-zone common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-availability-zone-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-availability-zone
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'availability-zone
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'availability-zone 'make-availability-zone))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input availability-zone))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input availability-zone))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input availability-zone))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype availability-zones-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-availability-zones-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype aws-query-error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass batch-apply-update-action-message common-lisp:nil
                       ((replication-group-ids :initarg :replication-group-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or replication-group-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-apply-update-action-message-replication-group-ids
                         :shape "ReplicationGroupIdList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cache-cluster-ids :initarg :cache-cluster-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or cache-cluster-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-apply-update-action-message-cache-cluster-ids
                         :shape "CacheClusterIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-update-name :initarg :service-update-name
                         :initform
                         (common-lisp:error ":service-update-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-batch-apply-update-action-message-service-update-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-apply-update-action-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-apply-update-action-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-apply-update-action-message
                    'make-batch-apply-update-action-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-apply-update-action-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-apply-update-action-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-ids))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-cluster-ids))
      (common-lisp:list
       (common-lisp:cons "CacheClusterIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-update-name))
      (common-lisp:list
       (common-lisp:cons "ServiceUpdateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-apply-update-action-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-stop-update-action-message common-lisp:nil
                       ((replication-group-ids :initarg :replication-group-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or replication-group-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-stop-update-action-message-replication-group-ids
                         :shape "ReplicationGroupIdList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cache-cluster-ids :initarg :cache-cluster-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or cache-cluster-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-stop-update-action-message-cache-cluster-ids
                         :shape "CacheClusterIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-update-name :initarg :service-update-name
                         :initform
                         (common-lisp:error ":service-update-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-batch-stop-update-action-message-service-update-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-stop-update-action-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-stop-update-action-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-stop-update-action-message
                    'make-batch-stop-update-action-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-stop-update-action-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-stop-update-action-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-ids))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-cluster-ids))
      (common-lisp:list
       (common-lisp:cons "CacheClusterIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-update-name))
      (common-lisp:list
       (common-lisp:cons "ServiceUpdateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-stop-update-action-message))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype boolean-optional () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass cache-cluster common-lisp:nil
                       ((cache-cluster-id :initarg :cache-cluster-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cache-cluster-cache-cluster-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (configuration-endpoint :initarg
                         :configuration-endpoint :initform common-lisp:nil
                         :type (common-lisp:or endpoint common-lisp:null)
                         :accessor
                         struct-shape-cache-cluster-configuration-endpoint
                         :shape "Endpoint" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-download-landing-page :initarg
                         :client-download-landing-page :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cache-cluster-client-download-landing-page
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-node-type :initarg :cache-node-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cache-cluster-cache-node-type :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (engine :initarg :engine :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-cache-cluster-engine :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (engine-version :initarg :engine-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cache-cluster-engine-version :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cache-cluster-status :initarg :cache-cluster-status
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cache-cluster-cache-cluster-status :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (num-cache-nodes :initarg :num-cache-nodes :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-cache-cluster-num-cache-nodes
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (preferred-availability-zone :initarg
                         :preferred-availability-zone :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-cache-cluster-preferred-availability-zone
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (preferred-outpost-arn :initarg :preferred-outpost-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cache-cluster-preferred-outpost-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-cluster-create-time :initarg
                         :cache-cluster-create-time :initform common-lisp:nil
                         :type (common-lisp:or tstamp common-lisp:null)
                         :accessor
                         struct-shape-cache-cluster-cache-cluster-create-time
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (preferred-maintenance-window :initarg
                         :preferred-maintenance-window :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cache-cluster-preferred-maintenance-window
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pending-modified-values :initarg
                         :pending-modified-values :initform common-lisp:nil
                         :type
                         (common-lisp:or pending-modified-values
                                         common-lisp:null)
                         :accessor
                         struct-shape-cache-cluster-pending-modified-values
                         :shape "PendingModifiedValues" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (notification-configuration :initarg
                         :notification-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or notification-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-cache-cluster-notification-configuration
                         :shape "NotificationConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cache-security-groups :initarg :cache-security-groups
                         :initform common-lisp:nil :type
                         (common-lisp:or cache-security-group-membership-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-cache-cluster-cache-security-groups
                         :shape "CacheSecurityGroupMembershipList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cache-parameter-group :initarg :cache-parameter-group
                         :initform common-lisp:nil :type
                         (common-lisp:or cache-parameter-group-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-cache-cluster-cache-parameter-group
                         :shape "CacheParameterGroupStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cache-subnet-group-name :initarg
                         :cache-subnet-group-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-cache-cluster-cache-subnet-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-nodes :initarg :cache-nodes :initform
                         common-lisp:nil :type
                         (common-lisp:or cache-node-list common-lisp:null)
                         :accessor struct-shape-cache-cluster-cache-nodes
                         :shape "CacheNodeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-minor-version-upgrade :initarg
                         :auto-minor-version-upgrade :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-cache-cluster-auto-minor-version-upgrade
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (security-groups :initarg :security-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or security-group-membership-list
                                         common-lisp:null)
                         :accessor struct-shape-cache-cluster-security-groups
                         :shape "SecurityGroupMembershipList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (replication-group-id :initarg :replication-group-id
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cache-cluster-replication-group-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (snapshot-retention-limit :initarg
                         :snapshot-retention-limit :initform common-lisp:nil
                         :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-cache-cluster-snapshot-retention-limit
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-window :initarg :snapshot-window :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cache-cluster-snapshot-window :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (auth-token-enabled :initarg :auth-token-enabled
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-cache-cluster-auth-token-enabled :shape
                         "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auth-token-last-modified-date :initarg
                         :auth-token-last-modified-date :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-cache-cluster-auth-token-last-modified-date
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transit-encryption-enabled :initarg
                         :transit-encryption-enabled :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-cache-cluster-transit-encryption-enabled
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (at-rest-encryption-enabled :initarg
                         :at-rest-encryption-enabled :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-cache-cluster-at-rest-encryption-enabled
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cache-cluster-arn :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (replication-group-log-delivery-enabled :initarg
                         :replication-group-log-delivery-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-cache-cluster-replication-group-log-delivery-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-delivery-configurations :initarg
                         :log-delivery-configurations :initform common-lisp:nil
                         :type
                         (common-lisp:or log-delivery-configuration-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-cache-cluster-log-delivery-configurations
                         :shape "LogDeliveryConfigurationList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (network-type :initarg :network-type :initform
                         common-lisp:nil :type
                         (common-lisp:or network-type common-lisp:null)
                         :accessor struct-shape-cache-cluster-network-type
                         :shape "NetworkType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ip-discovery :initarg :ip-discovery :initform
                         common-lisp:nil :type
                         (common-lisp:or ip-discovery common-lisp:null)
                         :accessor struct-shape-cache-cluster-ip-discovery
                         :shape "IpDiscovery" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transit-encryption-mode :initarg
                         :transit-encryption-mode :initform common-lisp:nil
                         :type
                         (common-lisp:or transit-encryption-mode
                                         common-lisp:null)
                         :accessor
                         struct-shape-cache-cluster-transit-encryption-mode
                         :shape "TransitEncryptionMode" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cache-cluster
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cache-cluster
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'cache-cluster 'make-cache-cluster))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cache-cluster))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cache-cluster))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-cluster-id))
      (common-lisp:list
       (common-lisp:cons "CacheClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-endpoint))
      (common-lisp:list
       (common-lisp:cons "ConfigurationEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-download-landing-page))
      (common-lisp:list
       (common-lisp:cons "ClientDownloadLandingPage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-node-type))
      (common-lisp:list
       (common-lisp:cons "CacheNodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-cluster-status))
      (common-lisp:list
       (common-lisp:cons "CacheClusterStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-cache-nodes))
      (common-lisp:list
       (common-lisp:cons "NumCacheNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-availability-zone))
      (common-lisp:list
       (common-lisp:cons "PreferredAvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-outpost-arn))
      (common-lisp:list
       (common-lisp:cons "PreferredOutpostArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-cluster-create-time))
      (common-lisp:list
       (common-lisp:cons "CacheClusterCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pending-modified-values))
      (common-lisp:list
       (common-lisp:cons "PendingModifiedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-configuration))
      (common-lisp:list
       (common-lisp:cons "NotificationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-security-groups))
      (common-lisp:list
       (common-lisp:cons "CacheSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-parameter-group))
      (common-lisp:list
       (common-lisp:cons "CacheParameterGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-subnet-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-nodes))
      (common-lisp:list
       (common-lisp:cons "CacheNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-minor-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AutoMinorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-id))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-retention-limit))
      (common-lisp:list
       (common-lisp:cons "SnapshotRetentionLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-window))
      (common-lisp:list
       (common-lisp:cons "SnapshotWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-token-enabled))
      (common-lisp:list
       (common-lisp:cons "AuthTokenEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auth-token-last-modified-date))
      (common-lisp:list
       (common-lisp:cons "AuthTokenLastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-encryption-enabled))
      (common-lisp:list
       (common-lisp:cons "TransitEncryptionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'at-rest-encryption-enabled))
      (common-lisp:list
       (common-lisp:cons "AtRestEncryptionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-log-delivery-enabled))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupLogDeliveryEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-delivery-configurations))
      (common-lisp:list
       (common-lisp:cons "LogDeliveryConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-type))
      (common-lisp:list
       (common-lisp:cons "NetworkType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-discovery))
      (common-lisp:list
       (common-lisp:cons "IpDiscovery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-encryption-mode))
      (common-lisp:list
       (common-lisp:cons "TransitEncryptionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cache-cluster))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition cache-cluster-already-exists-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'cache-cluster-already-exists-fault)))
(common-lisp:progn
 (common-lisp:deftype cache-cluster-id-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-cache-cluster-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype cache-cluster-list ()
   '(trivial-types:proper-list cache-cluster))
 (common-lisp:defun make-cache-cluster-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cache-cluster))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass cache-cluster-message common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-cache-cluster-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-clusters :initarg :cache-clusters :initform
                         common-lisp:nil :type
                         (common-lisp:or cache-cluster-list common-lisp:null)
                         :accessor
                         struct-shape-cache-cluster-message-cache-clusters
                         :shape "CacheClusterList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cache-cluster-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cache-cluster-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cache-cluster-message 'make-cache-cluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cache-cluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cache-cluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-clusters))
      (common-lisp:list
       (common-lisp:cons "CacheClusters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cache-cluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition cache-cluster-not-found-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'cache-cluster-not-found-fault)))
(common-lisp:progn
 (common-lisp:defclass cache-engine-version common-lisp:nil
                       ((engine :initarg :engine :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-cache-engine-version-engine
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-version :initarg :engine-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cache-engine-version-engine-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-parameter-group-family :initarg
                         :cache-parameter-group-family :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cache-engine-version-cache-parameter-group-family
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-engine-description :initarg
                         :cache-engine-description :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-cache-engine-version-cache-engine-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-engine-version-description :initarg
                         :cache-engine-version-description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cache-engine-version-cache-engine-version-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cache-engine-version
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cache-engine-version
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cache-engine-version 'make-cache-engine-version))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cache-engine-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cache-engine-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-parameter-group-family))
      (common-lisp:list
       (common-lisp:cons "CacheParameterGroupFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-engine-description))
      (common-lisp:list
       (common-lisp:cons "CacheEngineDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-engine-version-description))
      (common-lisp:list
       (common-lisp:cons "CacheEngineVersionDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cache-engine-version))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cache-engine-version-list ()
   '(trivial-types:proper-list cache-engine-version))
 (common-lisp:defun make-cache-engine-version-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cache-engine-version))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass cache-engine-version-message common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-cache-engine-version-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-engine-versions :initarg :cache-engine-versions
                         :initform common-lisp:nil :type
                         (common-lisp:or cache-engine-version-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-cache-engine-version-message-cache-engine-versions
                         :shape "CacheEngineVersionList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cache-engine-version-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cache-engine-version-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cache-engine-version-message
                    'make-cache-engine-version-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cache-engine-version-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cache-engine-version-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-engine-versions))
      (common-lisp:list
       (common-lisp:cons "CacheEngineVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cache-engine-version-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cache-node common-lisp:nil
                       ((cache-node-id :initarg :cache-node-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cache-node-cache-node-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cache-node-status :initarg :cache-node-status
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cache-node-cache-node-status :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cache-node-create-time :initarg
                         :cache-node-create-time :initform common-lisp:nil
                         :type (common-lisp:or tstamp common-lisp:null)
                         :accessor
                         struct-shape-cache-node-cache-node-create-time :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (endpoint :initarg :endpoint :initform common-lisp:nil
                         :type (common-lisp:or endpoint common-lisp:null)
                         :accessor struct-shape-cache-node-endpoint :shape
                         "Endpoint" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (parameter-group-status :initarg
                         :parameter-group-status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-cache-node-parameter-group-status :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source-cache-node-id :initarg :source-cache-node-id
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cache-node-source-cache-node-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (customer-availability-zone :initarg
                         :customer-availability-zone :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-cache-node-customer-availability-zone
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (customer-outpost-arn :initarg :customer-outpost-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cache-node-customer-outpost-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cache-node
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cache-node
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'cache-node 'make-cache-node))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cache-node))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cache-node))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-node-id))
      (common-lisp:list
       (common-lisp:cons "CacheNodeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-node-status))
      (common-lisp:list
       (common-lisp:cons "CacheNodeStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-node-create-time))
      (common-lisp:list
       (common-lisp:cons "CacheNodeCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-status))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-cache-node-id))
      (common-lisp:list
       (common-lisp:cons "SourceCacheNodeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customer-availability-zone))
      (common-lisp:list
       (common-lisp:cons "CustomerAvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customer-outpost-arn))
      (common-lisp:list
       (common-lisp:cons "CustomerOutpostArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cache-node))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cache-node-ids-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-cache-node-ids-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype cache-node-list ()
   '(trivial-types:proper-list cache-node))
 (common-lisp:defun make-cache-node-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cache-node))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass cache-node-type-specific-parameter common-lisp:nil
                       ((parameter-name :initarg :parameter-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cache-node-type-specific-parameter-parameter-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cache-node-type-specific-parameter-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source :initarg :source :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-cache-node-type-specific-parameter-source
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-type :initarg :data-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cache-node-type-specific-parameter-data-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allowed-values :initarg :allowed-values :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cache-node-type-specific-parameter-allowed-values
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-modifiable :initarg :is-modifiable :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-cache-node-type-specific-parameter-is-modifiable
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (minimum-engine-version :initarg
                         :minimum-engine-version :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-cache-node-type-specific-parameter-minimum-engine-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-node-type-specific-values :initarg
                         :cache-node-type-specific-values :initform
                         common-lisp:nil :type
                         (common-lisp:or cache-node-type-specific-value-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-cache-node-type-specific-parameter-cache-node-type-specific-values
                         :shape "CacheNodeTypeSpecificValueList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (change-type :initarg :change-type :initform
                         common-lisp:nil :type
                         (common-lisp:or change-type common-lisp:null)
                         :accessor
                         struct-shape-cache-node-type-specific-parameter-change-type
                         :shape "ChangeType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cache-node-type-specific-parameter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cache-node-type-specific-parameter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cache-node-type-specific-parameter
                    'make-cache-node-type-specific-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cache-node-type-specific-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cache-node-type-specific-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-name))
      (common-lisp:list
       (common-lisp:cons "ParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "DataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-values))
      (common-lisp:list
       (common-lisp:cons "AllowedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-modifiable))
      (common-lisp:list
       (common-lisp:cons "IsModifiable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-engine-version))
      (common-lisp:list
       (common-lisp:cons "MinimumEngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-node-type-specific-values))
      (common-lisp:list
       (common-lisp:cons "CacheNodeTypeSpecificValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-type))
      (common-lisp:list
       (common-lisp:cons "ChangeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cache-node-type-specific-parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cache-node-type-specific-parameters-list ()
   '(trivial-types:proper-list cache-node-type-specific-parameter))
 (common-lisp:defun make-cache-node-type-specific-parameters-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cache-node-type-specific-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass cache-node-type-specific-value common-lisp:nil
                       ((cache-node-type :initarg :cache-node-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cache-node-type-specific-value-cache-node-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cache-node-type-specific-value-value
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cache-node-type-specific-value
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cache-node-type-specific-value
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cache-node-type-specific-value
                    'make-cache-node-type-specific-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cache-node-type-specific-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cache-node-type-specific-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-node-type))
      (common-lisp:list
       (common-lisp:cons "CacheNodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cache-node-type-specific-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cache-node-type-specific-value-list ()
   '(trivial-types:proper-list cache-node-type-specific-value))
 (common-lisp:defun make-cache-node-type-specific-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cache-node-type-specific-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass cache-node-update-status common-lisp:nil
                       ((cache-node-id :initarg :cache-node-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cache-node-update-status-cache-node-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (node-update-status :initarg :node-update-status
                         :initform common-lisp:nil :type
                         (common-lisp:or node-update-status common-lisp:null)
                         :accessor
                         struct-shape-cache-node-update-status-node-update-status
                         :shape "NodeUpdateStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (node-deletion-date :initarg :node-deletion-date
                         :initform common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-cache-node-update-status-node-deletion-date
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (node-update-start-date :initarg
                         :node-update-start-date :initform common-lisp:nil
                         :type (common-lisp:or tstamp common-lisp:null)
                         :accessor
                         struct-shape-cache-node-update-status-node-update-start-date
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (node-update-end-date :initarg :node-update-end-date
                         :initform common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-cache-node-update-status-node-update-end-date
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (node-update-initiated-by :initarg
                         :node-update-initiated-by :initform common-lisp:nil
                         :type
                         (common-lisp:or node-update-initiated-by
                                         common-lisp:null)
                         :accessor
                         struct-shape-cache-node-update-status-node-update-initiated-by
                         :shape "NodeUpdateInitiatedBy" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (node-update-initiated-date :initarg
                         :node-update-initiated-date :initform common-lisp:nil
                         :type (common-lisp:or tstamp common-lisp:null)
                         :accessor
                         struct-shape-cache-node-update-status-node-update-initiated-date
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (node-update-status-modified-date :initarg
                         :node-update-status-modified-date :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-cache-node-update-status-node-update-status-modified-date
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cache-node-update-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cache-node-update-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cache-node-update-status 'make-cache-node-update-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cache-node-update-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cache-node-update-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-node-id))
      (common-lisp:list
       (common-lisp:cons "CacheNodeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-update-status))
      (common-lisp:list
       (common-lisp:cons "NodeUpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-deletion-date))
      (common-lisp:list
       (common-lisp:cons "NodeDeletionDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'node-update-start-date))
      (common-lisp:list
       (common-lisp:cons "NodeUpdateStartDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'node-update-end-date))
      (common-lisp:list
       (common-lisp:cons "NodeUpdateEndDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'node-update-initiated-by))
      (common-lisp:list
       (common-lisp:cons "NodeUpdateInitiatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'node-update-initiated-date))
      (common-lisp:list
       (common-lisp:cons "NodeUpdateInitiatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'node-update-status-modified-date))
      (common-lisp:list
       (common-lisp:cons "NodeUpdateStatusModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cache-node-update-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cache-node-update-status-list ()
   '(trivial-types:proper-list cache-node-update-status))
 (common-lisp:defun make-cache-node-update-status-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cache-node-update-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass cache-parameter-group common-lisp:nil
                       ((cache-parameter-group-name :initarg
                         :cache-parameter-group-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-cache-parameter-group-cache-parameter-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-parameter-group-family :initarg
                         :cache-parameter-group-family :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cache-parameter-group-cache-parameter-group-family
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cache-parameter-group-description :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (is-global :initarg :is-global :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-cache-parameter-group-is-global :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cache-parameter-group-arn :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cache-parameter-group
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cache-parameter-group
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cache-parameter-group 'make-cache-parameter-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cache-parameter-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cache-parameter-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-parameter-group-family))
      (common-lisp:list
       (common-lisp:cons "CacheParameterGroupFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-global))
      (common-lisp:list
       (common-lisp:cons "IsGlobal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cache-parameter-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition cache-parameter-group-already-exists-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'cache-parameter-group-already-exists-fault)))
(common-lisp:progn
 (common-lisp:defclass cache-parameter-group-details common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-cache-parameter-group-details-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or parameters-list common-lisp:null)
                         :accessor
                         struct-shape-cache-parameter-group-details-parameters
                         :shape "ParametersList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-node-type-specific-parameters :initarg
                         :cache-node-type-specific-parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          cache-node-type-specific-parameters-list
                          common-lisp:null)
                         :accessor
                         struct-shape-cache-parameter-group-details-cache-node-type-specific-parameters
                         :shape "CacheNodeTypeSpecificParametersList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cache-parameter-group-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cache-parameter-group-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cache-parameter-group-details
                    'make-cache-parameter-group-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cache-parameter-group-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cache-parameter-group-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-node-type-specific-parameters))
      (common-lisp:list
       (common-lisp:cons "CacheNodeTypeSpecificParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cache-parameter-group-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cache-parameter-group-list ()
   '(trivial-types:proper-list cache-parameter-group))
 (common-lisp:defun make-cache-parameter-group-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cache-parameter-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass cache-parameter-group-name-message common-lisp:nil
                       ((cache-parameter-group-name :initarg
                         :cache-parameter-group-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-cache-parameter-group-name-message-cache-parameter-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cache-parameter-group-name-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cache-parameter-group-name-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cache-parameter-group-name-message
                    'make-cache-parameter-group-name-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cache-parameter-group-name-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cache-parameter-group-name-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cache-parameter-group-name-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition cache-parameter-group-not-found-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'cache-parameter-group-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition cache-parameter-group-quota-exceeded-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'cache-parameter-group-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defclass cache-parameter-group-status common-lisp:nil
                       ((cache-parameter-group-name :initarg
                         :cache-parameter-group-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-cache-parameter-group-status-cache-parameter-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameter-apply-status :initarg
                         :parameter-apply-status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-cache-parameter-group-status-parameter-apply-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-node-ids-to-reboot :initarg
                         :cache-node-ids-to-reboot :initform common-lisp:nil
                         :type
                         (common-lisp:or cache-node-ids-list common-lisp:null)
                         :accessor
                         struct-shape-cache-parameter-group-status-cache-node-ids-to-reboot
                         :shape "CacheNodeIdsList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cache-parameter-group-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cache-parameter-group-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cache-parameter-group-status
                    'make-cache-parameter-group-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cache-parameter-group-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cache-parameter-group-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-apply-status))
      (common-lisp:list
       (common-lisp:cons "ParameterApplyStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-node-ids-to-reboot))
      (common-lisp:list
       (common-lisp:cons "CacheNodeIdsToReboot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cache-parameter-group-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cache-parameter-groups-message common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-cache-parameter-groups-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-parameter-groups :initarg
                         :cache-parameter-groups :initform common-lisp:nil
                         :type
                         (common-lisp:or cache-parameter-group-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-cache-parameter-groups-message-cache-parameter-groups
                         :shape "CacheParameterGroupList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cache-parameter-groups-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cache-parameter-groups-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cache-parameter-groups-message
                    'make-cache-parameter-groups-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cache-parameter-groups-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cache-parameter-groups-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-parameter-groups))
      (common-lisp:list
       (common-lisp:cons "CacheParameterGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cache-parameter-groups-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cache-security-group common-lisp:nil
                       ((owner-id :initarg :owner-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-cache-security-group-owner-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-security-group-name :initarg
                         :cache-security-group-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-cache-security-group-cache-security-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cache-security-group-description :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ec2security-groups :initarg :ec2security-groups
                         :initform common-lisp:nil :type
                         (common-lisp:or ec2security-group-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-cache-security-group-ec2security-groups
                         :shape "EC2SecurityGroupList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cache-security-group-arn :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cache-security-group
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cache-security-group
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cache-security-group 'make-cache-security-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cache-security-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cache-security-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-id))
      (common-lisp:list
       (common-lisp:cons "OwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-security-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheSecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2security-groups))
      (common-lisp:list
       (common-lisp:cons "EC2SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cache-security-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition cache-security-group-already-exists-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'cache-security-group-already-exists-fault)))
(common-lisp:progn
 (common-lisp:defclass cache-security-group-membership common-lisp:nil
                       ((cache-security-group-name :initarg
                         :cache-security-group-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-cache-security-group-membership-cache-security-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-cache-security-group-membership-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cache-security-group-membership
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cache-security-group-membership
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cache-security-group-membership
                    'make-cache-security-group-membership))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cache-security-group-membership))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cache-security-group-membership))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-security-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheSecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cache-security-group-membership))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cache-security-group-membership-list ()
   '(trivial-types:proper-list cache-security-group-membership))
 (common-lisp:defun make-cache-security-group-membership-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cache-security-group-membership))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass cache-security-group-message common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-cache-security-group-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-security-groups :initarg :cache-security-groups
                         :initform common-lisp:nil :type
                         (common-lisp:or cache-security-groups
                                         common-lisp:null)
                         :accessor
                         struct-shape-cache-security-group-message-cache-security-groups
                         :shape "CacheSecurityGroups" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cache-security-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cache-security-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cache-security-group-message
                    'make-cache-security-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cache-security-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cache-security-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-security-groups))
      (common-lisp:list
       (common-lisp:cons "CacheSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cache-security-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cache-security-group-name-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-cache-security-group-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition cache-security-group-not-found-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'cache-security-group-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition cache-security-group-quota-exceeded-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'cache-security-group-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:deftype cache-security-groups ()
   '(trivial-types:proper-list cache-security-group))
 (common-lisp:defun make-cache-security-groups
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cache-security-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass cache-subnet-group common-lisp:nil
                       ((cache-subnet-group-name :initarg
                         :cache-subnet-group-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-cache-subnet-group-cache-subnet-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-subnet-group-description :initarg
                         :cache-subnet-group-description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cache-subnet-group-cache-subnet-group-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-id :initarg :vpc-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-cache-subnet-group-vpc-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subnets :initarg :subnets :initform common-lisp:nil
                         :type (common-lisp:or subnet-list common-lisp:null)
                         :accessor struct-shape-cache-subnet-group-subnets
                         :shape "SubnetList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cache-subnet-group-arn :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (supported-network-types :initarg
                         :supported-network-types :initform common-lisp:nil
                         :type
                         (common-lisp:or network-type-list common-lisp:null)
                         :accessor
                         struct-shape-cache-subnet-group-supported-network-types
                         :shape "NetworkTypeList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cache-subnet-group
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cache-subnet-group
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cache-subnet-group 'make-cache-subnet-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cache-subnet-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cache-subnet-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-subnet-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-subnet-group-description))
      (common-lisp:list
       (common-lisp:cons "CacheSubnetGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "Subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-network-types))
      (common-lisp:list
       (common-lisp:cons "SupportedNetworkTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cache-subnet-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition cache-subnet-group-already-exists-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'cache-subnet-group-already-exists-fault)))
(common-lisp:progn
 (common-lisp:define-condition cache-subnet-group-in-use
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'cache-subnet-group-in-use)))
(common-lisp:progn
 (common-lisp:defclass cache-subnet-group-message common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-cache-subnet-group-message-marker :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cache-subnet-groups :initarg :cache-subnet-groups
                         :initform common-lisp:nil :type
                         (common-lisp:or cache-subnet-groups common-lisp:null)
                         :accessor
                         struct-shape-cache-subnet-group-message-cache-subnet-groups
                         :shape "CacheSubnetGroups" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cache-subnet-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cache-subnet-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cache-subnet-group-message
                    'make-cache-subnet-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cache-subnet-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cache-subnet-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-subnet-groups))
      (common-lisp:list
       (common-lisp:cons "CacheSubnetGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cache-subnet-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition cache-subnet-group-not-found-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'cache-subnet-group-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition cache-subnet-group-quota-exceeded-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'cache-subnet-group-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:deftype cache-subnet-groups ()
   '(trivial-types:proper-list cache-subnet-group))
 (common-lisp:defun make-cache-subnet-groups
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cache-subnet-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition cache-subnet-quota-exceeded-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'cache-subnet-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defclass cache-usage-limits common-lisp:nil
                       ((data-storage :initarg :data-storage :initform
                         common-lisp:nil :type
                         (common-lisp:or data-storage common-lisp:null)
                         :accessor struct-shape-cache-usage-limits-data-storage
                         :shape "DataStorage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ecpuper-second :initarg :ecpuper-second :initform
                         common-lisp:nil :type
                         (common-lisp:or ecpuper-second common-lisp:null)
                         :accessor
                         struct-shape-cache-usage-limits-ecpuper-second :shape
                         "ECPUPerSecond" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cache-usage-limits
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cache-usage-limits
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cache-usage-limits 'make-cache-usage-limits))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cache-usage-limits))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cache-usage-limits))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-storage))
      (common-lisp:list
       (common-lisp:cons "DataStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ecpuper-second))
      (common-lisp:list
       (common-lisp:cons "ECPUPerSecond"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cache-usage-limits))
   common-lisp:nil))
(common-lisp:deftype change-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cloud-watch-logs-destination-details common-lisp:nil
                       ((log-group :initarg :log-group :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cloud-watch-logs-destination-details-log-group
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cloud-watch-logs-destination-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cloud-watch-logs-destination-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cloud-watch-logs-destination-details
                    'make-cloud-watch-logs-destination-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logs-destination-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logs-destination-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group))
      (common-lisp:list
       (common-lisp:cons "LogGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logs-destination-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cluster-id-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-cluster-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype cluster-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition cluster-quota-for-customer-exceeded-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'cluster-quota-for-customer-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defclass complete-migration-message common-lisp:nil
                       ((replication-group-id :initarg :replication-group-id
                         :initform
                         (common-lisp:error
                          ":replication-group-id is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-complete-migration-message-replication-group-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (force :initarg :force :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-complete-migration-message-force :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-complete-migration-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'complete-migration-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'complete-migration-message
                    'make-complete-migration-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          complete-migration-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          complete-migration-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-id))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force))
      (common-lisp:list
       (common-lisp:cons "Force"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          complete-migration-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass complete-migration-response common-lisp:nil
                       ((replication-group :initarg :replication-group
                         :initform common-lisp:nil :type
                         (common-lisp:or replication-group common-lisp:null)
                         :accessor
                         struct-shape-complete-migration-response-replication-group
                         :shape "ReplicationGroup" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-complete-migration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'complete-migration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'complete-migration-response
                    'make-complete-migration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          complete-migration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          complete-migration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-group))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          complete-migration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass configure-shard common-lisp:nil
                       ((node-group-id :initarg :node-group-id :initform
                         (common-lisp:error ":node-group-id is required") :type
                         (common-lisp:or allowed-node-group-id
                                         common-lisp:null)
                         :accessor struct-shape-configure-shard-node-group-id
                         :shape "AllowedNodeGroupId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (new-replica-count :initarg :new-replica-count
                         :initform
                         (common-lisp:error ":new-replica-count is required")
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-configure-shard-new-replica-count :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (preferred-availability-zones :initarg
                         :preferred-availability-zones :initform
                         common-lisp:nil :type
                         (common-lisp:or preferred-availability-zone-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-configure-shard-preferred-availability-zones
                         :shape "PreferredAvailabilityZoneList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (preferred-outpost-arns :initarg
                         :preferred-outpost-arns :initform common-lisp:nil
                         :type
                         (common-lisp:or preferred-outpost-arn-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-configure-shard-preferred-outpost-arns
                         :shape "PreferredOutpostArnList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-configure-shard
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'configure-shard
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'configure-shard 'make-configure-shard))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input configure-shard))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input configure-shard))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-group-id))
      (common-lisp:list
       (common-lisp:cons "NodeGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-replica-count))
      (common-lisp:list
       (common-lisp:cons "NewReplicaCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-availability-zones))
      (common-lisp:list
       (common-lisp:cons "PreferredAvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-outpost-arns))
      (common-lisp:list
       (common-lisp:cons "PreferredOutpostArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input configure-shard))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass copy-serverless-cache-snapshot-request common-lisp:nil
                       ((source-serverless-cache-snapshot-name :initarg
                         :source-serverless-cache-snapshot-name :initform
                         (common-lisp:error
                          ":source-serverless-cache-snapshot-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-copy-serverless-cache-snapshot-request-source-serverless-cache-snapshot-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-serverless-cache-snapshot-name :initarg
                         :target-serverless-cache-snapshot-name :initform
                         (common-lisp:error
                          ":target-serverless-cache-snapshot-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-copy-serverless-cache-snapshot-request-target-serverless-cache-snapshot-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-copy-serverless-cache-snapshot-request-kms-key-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-copy-serverless-cache-snapshot-request-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-copy-serverless-cache-snapshot-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'copy-serverless-cache-snapshot-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'copy-serverless-cache-snapshot-request
                    'make-copy-serverless-cache-snapshot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-serverless-cache-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-serverless-cache-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-serverless-cache-snapshot-name))
      (common-lisp:list
       (common-lisp:cons "SourceServerlessCacheSnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-serverless-cache-snapshot-name))
      (common-lisp:list
       (common-lisp:cons "TargetServerlessCacheSnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-serverless-cache-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass copy-serverless-cache-snapshot-response common-lisp:nil
                       ((serverless-cache-snapshot :initarg
                         :serverless-cache-snapshot :initform common-lisp:nil
                         :type
                         (common-lisp:or serverless-cache-snapshot
                                         common-lisp:null)
                         :accessor
                         struct-shape-copy-serverless-cache-snapshot-response-serverless-cache-snapshot
                         :shape "ServerlessCacheSnapshot" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-copy-serverless-cache-snapshot-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'copy-serverless-cache-snapshot-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'copy-serverless-cache-snapshot-response
                    'make-copy-serverless-cache-snapshot-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-serverless-cache-snapshot-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-serverless-cache-snapshot-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'serverless-cache-snapshot))
      (common-lisp:list
       (common-lisp:cons "ServerlessCacheSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-serverless-cache-snapshot-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass copy-snapshot-message common-lisp:nil
                       ((source-snapshot-name :initarg :source-snapshot-name
                         :initform
                         (common-lisp:error
                          ":source-snapshot-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-copy-snapshot-message-source-snapshot-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-snapshot-name :initarg :target-snapshot-name
                         :initform
                         (common-lisp:error
                          ":target-snapshot-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-copy-snapshot-message-target-snapshot-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-bucket :initarg :target-bucket :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-copy-snapshot-message-target-bucket
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-copy-snapshot-message-kms-key-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-copy-snapshot-message-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-copy-snapshot-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'copy-snapshot-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'copy-snapshot-message 'make-copy-snapshot-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-snapshot-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-snapshot-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-snapshot-name))
      (common-lisp:list
       (common-lisp:cons "SourceSnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-snapshot-name))
      (common-lisp:list
       (common-lisp:cons "TargetSnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-bucket))
      (common-lisp:list
       (common-lisp:cons "TargetBucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-snapshot-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass copy-snapshot-result common-lisp:nil
                       ((snapshot :initarg :snapshot :initform common-lisp:nil
                         :type (common-lisp:or snapshot common-lisp:null)
                         :accessor struct-shape-copy-snapshot-result-snapshot
                         :shape "Snapshot" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-copy-snapshot-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'copy-snapshot-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'copy-snapshot-result 'make-copy-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input copy-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input copy-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot))
      (common-lisp:list
       (common-lisp:cons "Snapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input copy-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-cache-cluster-message common-lisp:nil
                       ((cache-cluster-id :initarg :cache-cluster-id :initform
                         (common-lisp:error ":cache-cluster-id is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-cache-cluster-message-cache-cluster-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-group-id :initarg :replication-group-id
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-cache-cluster-message-replication-group-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (azmode :initarg :azmode :initform common-lisp:nil
                         :type (common-lisp:or azmode common-lisp:null)
                         :accessor
                         struct-shape-create-cache-cluster-message-azmode
                         :shape "AZMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (preferred-availability-zone :initarg
                         :preferred-availability-zone :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-cache-cluster-message-preferred-availability-zone
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (preferred-availability-zones :initarg
                         :preferred-availability-zones :initform
                         common-lisp:nil :type
                         (common-lisp:or preferred-availability-zone-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-cache-cluster-message-preferred-availability-zones
                         :shape "PreferredAvailabilityZoneList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (num-cache-nodes :initarg :num-cache-nodes :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-create-cache-cluster-message-num-cache-nodes
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-node-type :initarg :cache-node-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-cache-cluster-message-cache-node-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine :initarg :engine :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-cache-cluster-message-engine
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-version :initarg :engine-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-cache-cluster-message-engine-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-parameter-group-name :initarg
                         :cache-parameter-group-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-cache-cluster-message-cache-parameter-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-subnet-group-name :initarg
                         :cache-subnet-group-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-cache-cluster-message-cache-subnet-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-security-group-names :initarg
                         :cache-security-group-names :initform common-lisp:nil
                         :type
                         (common-lisp:or cache-security-group-name-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-cache-cluster-message-cache-security-group-names
                         :shape "CacheSecurityGroupNameList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (security-group-ids :initarg :security-group-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or security-group-ids-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-cache-cluster-message-security-group-ids
                         :shape "SecurityGroupIdsList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-cache-cluster-message-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (snapshot-arns :initarg :snapshot-arns :initform
                         common-lisp:nil :type
                         (common-lisp:or snapshot-arns-list common-lisp:null)
                         :accessor
                         struct-shape-create-cache-cluster-message-snapshot-arns
                         :shape "SnapshotArnsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-name :initarg :snapshot-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-cache-cluster-message-snapshot-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (preferred-maintenance-window :initarg
                         :preferred-maintenance-window :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-cache-cluster-message-preferred-maintenance-window
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-create-cache-cluster-message-port :shape
                         "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notification-topic-arn :initarg
                         :notification-topic-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-cache-cluster-message-notification-topic-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-minor-version-upgrade :initarg
                         :auto-minor-version-upgrade :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-cache-cluster-message-auto-minor-version-upgrade
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-retention-limit :initarg
                         :snapshot-retention-limit :initform common-lisp:nil
                         :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-create-cache-cluster-message-snapshot-retention-limit
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-window :initarg :snapshot-window :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-cache-cluster-message-snapshot-window
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auth-token :initarg :auth-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-cache-cluster-message-auth-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (outpost-mode :initarg :outpost-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or outpost-mode common-lisp:null)
                         :accessor
                         struct-shape-create-cache-cluster-message-outpost-mode
                         :shape "OutpostMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (preferred-outpost-arn :initarg :preferred-outpost-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-cache-cluster-message-preferred-outpost-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (preferred-outpost-arns :initarg
                         :preferred-outpost-arns :initform common-lisp:nil
                         :type
                         (common-lisp:or preferred-outpost-arn-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-cache-cluster-message-preferred-outpost-arns
                         :shape "PreferredOutpostArnList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (log-delivery-configurations :initarg
                         :log-delivery-configurations :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          log-delivery-configuration-request-list
                          common-lisp:null)
                         :accessor
                         struct-shape-create-cache-cluster-message-log-delivery-configurations
                         :shape "LogDeliveryConfigurationRequestList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (transit-encryption-enabled :initarg
                         :transit-encryption-enabled :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-cache-cluster-message-transit-encryption-enabled
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (network-type :initarg :network-type :initform
                         common-lisp:nil :type
                         (common-lisp:or network-type common-lisp:null)
                         :accessor
                         struct-shape-create-cache-cluster-message-network-type
                         :shape "NetworkType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ip-discovery :initarg :ip-discovery :initform
                         common-lisp:nil :type
                         (common-lisp:or ip-discovery common-lisp:null)
                         :accessor
                         struct-shape-create-cache-cluster-message-ip-discovery
                         :shape "IpDiscovery" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-cache-cluster-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-cache-cluster-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-cache-cluster-message
                    'make-create-cache-cluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cache-cluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cache-cluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-cluster-id))
      (common-lisp:list
       (common-lisp:cons "CacheClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-id))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'azmode))
      (common-lisp:list
       (common-lisp:cons "AZMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-availability-zone))
      (common-lisp:list
       (common-lisp:cons "PreferredAvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-availability-zones))
      (common-lisp:list
       (common-lisp:cons "PreferredAvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-cache-nodes))
      (common-lisp:list
       (common-lisp:cons "NumCacheNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-node-type))
      (common-lisp:list
       (common-lisp:cons "CacheNodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-subnet-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-security-group-names))
      (common-lisp:list
       (common-lisp:cons "CacheSecurityGroupNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-arns))
      (common-lisp:list
       (common-lisp:cons "SnapshotArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-name))
      (common-lisp:list
       (common-lisp:cons "SnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-topic-arn))
      (common-lisp:list
       (common-lisp:cons "NotificationTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-minor-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AutoMinorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-retention-limit))
      (common-lisp:list
       (common-lisp:cons "SnapshotRetentionLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-window))
      (common-lisp:list
       (common-lisp:cons "SnapshotWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-token))
      (common-lisp:list
       (common-lisp:cons "AuthToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outpost-mode))
      (common-lisp:list
       (common-lisp:cons "OutpostMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-outpost-arn))
      (common-lisp:list
       (common-lisp:cons "PreferredOutpostArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-outpost-arns))
      (common-lisp:list
       (common-lisp:cons "PreferredOutpostArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-delivery-configurations))
      (common-lisp:list
       (common-lisp:cons "LogDeliveryConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-encryption-enabled))
      (common-lisp:list
       (common-lisp:cons "TransitEncryptionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-type))
      (common-lisp:list
       (common-lisp:cons "NetworkType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-discovery))
      (common-lisp:list
       (common-lisp:cons "IpDiscovery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cache-cluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-cache-cluster-result common-lisp:nil
                       ((cache-cluster :initarg :cache-cluster :initform
                         common-lisp:nil :type
                         (common-lisp:or cache-cluster common-lisp:null)
                         :accessor
                         struct-shape-create-cache-cluster-result-cache-cluster
                         :shape "CacheCluster" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-cache-cluster-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-cache-cluster-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-cache-cluster-result
                    'make-create-cache-cluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cache-cluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cache-cluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-cluster))
      (common-lisp:list
       (common-lisp:cons "CacheCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cache-cluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-cache-parameter-group-message common-lisp:nil
                       ((cache-parameter-group-name :initarg
                         :cache-parameter-group-name :initform
                         (common-lisp:error
                          ":cache-parameter-group-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-cache-parameter-group-message-cache-parameter-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-parameter-group-family :initarg
                         :cache-parameter-group-family :initform
                         (common-lisp:error
                          ":cache-parameter-group-family is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-cache-parameter-group-message-cache-parameter-group-family
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         (common-lisp:error ":description is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-cache-parameter-group-message-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-cache-parameter-group-message-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-cache-parameter-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-cache-parameter-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-cache-parameter-group-message
                    'make-create-cache-parameter-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cache-parameter-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cache-parameter-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-parameter-group-family))
      (common-lisp:list
       (common-lisp:cons "CacheParameterGroupFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cache-parameter-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-cache-parameter-group-result common-lisp:nil
                       ((cache-parameter-group :initarg :cache-parameter-group
                         :initform common-lisp:nil :type
                         (common-lisp:or cache-parameter-group
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-cache-parameter-group-result-cache-parameter-group
                         :shape "CacheParameterGroup" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-cache-parameter-group-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-cache-parameter-group-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-cache-parameter-group-result
                    'make-create-cache-parameter-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cache-parameter-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cache-parameter-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-parameter-group))
      (common-lisp:list
       (common-lisp:cons "CacheParameterGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cache-parameter-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-cache-security-group-message common-lisp:nil
                       ((cache-security-group-name :initarg
                         :cache-security-group-name :initform
                         (common-lisp:error
                          ":cache-security-group-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-cache-security-group-message-cache-security-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         (common-lisp:error ":description is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-cache-security-group-message-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-cache-security-group-message-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-cache-security-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-cache-security-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-cache-security-group-message
                    'make-create-cache-security-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cache-security-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cache-security-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-security-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheSecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cache-security-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-cache-security-group-result common-lisp:nil
                       ((cache-security-group :initarg :cache-security-group
                         :initform common-lisp:nil :type
                         (common-lisp:or cache-security-group common-lisp:null)
                         :accessor
                         struct-shape-create-cache-security-group-result-cache-security-group
                         :shape "CacheSecurityGroup" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-cache-security-group-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-cache-security-group-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-cache-security-group-result
                    'make-create-cache-security-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cache-security-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cache-security-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-security-group))
      (common-lisp:list
       (common-lisp:cons "CacheSecurityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cache-security-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-cache-subnet-group-message common-lisp:nil
                       ((cache-subnet-group-name :initarg
                         :cache-subnet-group-name :initform
                         (common-lisp:error
                          ":cache-subnet-group-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-cache-subnet-group-message-cache-subnet-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-subnet-group-description :initarg
                         :cache-subnet-group-description :initform
                         (common-lisp:error
                          ":cache-subnet-group-description is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-cache-subnet-group-message-cache-subnet-group-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subnet-ids :initarg :subnet-ids :initform
                         (common-lisp:error ":subnet-ids is required") :type
                         (common-lisp:or subnet-identifier-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-cache-subnet-group-message-subnet-ids
                         :shape "SubnetIdentifierList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-cache-subnet-group-message-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-cache-subnet-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-cache-subnet-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-cache-subnet-group-message
                    'make-create-cache-subnet-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cache-subnet-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cache-subnet-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-subnet-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-subnet-group-description))
      (common-lisp:list
       (common-lisp:cons "CacheSubnetGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cache-subnet-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-cache-subnet-group-result common-lisp:nil
                       ((cache-subnet-group :initarg :cache-subnet-group
                         :initform common-lisp:nil :type
                         (common-lisp:or cache-subnet-group common-lisp:null)
                         :accessor
                         struct-shape-create-cache-subnet-group-result-cache-subnet-group
                         :shape "CacheSubnetGroup" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-cache-subnet-group-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-cache-subnet-group-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-cache-subnet-group-result
                    'make-create-cache-subnet-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cache-subnet-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cache-subnet-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-subnet-group))
      (common-lisp:list
       (common-lisp:cons "CacheSubnetGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cache-subnet-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-global-replication-group-message common-lisp:nil
                       ((global-replication-group-id-suffix :initarg
                         :global-replication-group-id-suffix :initform
                         (common-lisp:error
                          ":global-replication-group-id-suffix is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-global-replication-group-message-global-replication-group-id-suffix
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (global-replication-group-description :initarg
                         :global-replication-group-description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-global-replication-group-message-global-replication-group-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (primary-replication-group-id :initarg
                         :primary-replication-group-id :initform
                         (common-lisp:error
                          ":primary-replication-group-id is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-global-replication-group-message-primary-replication-group-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-global-replication-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-global-replication-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-global-replication-group-message
                    'make-create-global-replication-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-global-replication-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-global-replication-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-replication-group-id-suffix))
      (common-lisp:list
       (common-lisp:cons "GlobalReplicationGroupIdSuffix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-replication-group-description))
      (common-lisp:list
       (common-lisp:cons "GlobalReplicationGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'primary-replication-group-id))
      (common-lisp:list
       (common-lisp:cons "PrimaryReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-global-replication-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-global-replication-group-result common-lisp:nil
                       ((global-replication-group :initarg
                         :global-replication-group :initform common-lisp:nil
                         :type
                         (common-lisp:or global-replication-group
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-global-replication-group-result-global-replication-group
                         :shape "GlobalReplicationGroup" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-global-replication-group-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-global-replication-group-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-global-replication-group-result
                    'make-create-global-replication-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-global-replication-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-global-replication-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-replication-group))
      (common-lisp:list
       (common-lisp:cons "GlobalReplicationGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-global-replication-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-replication-group-message common-lisp:nil
                       ((replication-group-id :initarg :replication-group-id
                         :initform
                         (common-lisp:error
                          ":replication-group-id is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-replication-group-message-replication-group-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-group-description :initarg
                         :replication-group-description :initform
                         (common-lisp:error
                          ":replication-group-description is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-replication-group-message-replication-group-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (global-replication-group-id :initarg
                         :global-replication-group-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-replication-group-message-global-replication-group-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (primary-cluster-id :initarg :primary-cluster-id
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-replication-group-message-primary-cluster-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (automatic-failover-enabled :initarg
                         :automatic-failover-enabled :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-replication-group-message-automatic-failover-enabled
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (multi-azenabled :initarg :multi-azenabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-replication-group-message-multi-azenabled
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (num-cache-clusters :initarg :num-cache-clusters
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-create-replication-group-message-num-cache-clusters
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (preferred-cache-cluster-azs :initarg
                         :preferred-cache-cluster-azs :initform common-lisp:nil
                         :type
                         (common-lisp:or availability-zones-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-replication-group-message-preferred-cache-cluster-azs
                         :shape "AvailabilityZonesList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (num-node-groups :initarg :num-node-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-create-replication-group-message-num-node-groups
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replicas-per-node-group :initarg
                         :replicas-per-node-group :initform common-lisp:nil
                         :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-create-replication-group-message-replicas-per-node-group
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (node-group-configuration :initarg
                         :node-group-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or node-group-configuration-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-replication-group-message-node-group-configuration
                         :shape "NodeGroupConfigurationList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cache-node-type :initarg :cache-node-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-replication-group-message-cache-node-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine :initarg :engine :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-replication-group-message-engine
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-version :initarg :engine-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-replication-group-message-engine-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-parameter-group-name :initarg
                         :cache-parameter-group-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-replication-group-message-cache-parameter-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-subnet-group-name :initarg
                         :cache-subnet-group-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-replication-group-message-cache-subnet-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-security-group-names :initarg
                         :cache-security-group-names :initform common-lisp:nil
                         :type
                         (common-lisp:or cache-security-group-name-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-replication-group-message-cache-security-group-names
                         :shape "CacheSecurityGroupNameList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (security-group-ids :initarg :security-group-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or security-group-ids-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-replication-group-message-security-group-ids
                         :shape "SecurityGroupIdsList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-replication-group-message-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-arns :initarg :snapshot-arns :initform
                         common-lisp:nil :type
                         (common-lisp:or snapshot-arns-list common-lisp:null)
                         :accessor
                         struct-shape-create-replication-group-message-snapshot-arns
                         :shape "SnapshotArnsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-name :initarg :snapshot-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-replication-group-message-snapshot-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (preferred-maintenance-window :initarg
                         :preferred-maintenance-window :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-replication-group-message-preferred-maintenance-window
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-create-replication-group-message-port
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notification-topic-arn :initarg
                         :notification-topic-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-replication-group-message-notification-topic-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-minor-version-upgrade :initarg
                         :auto-minor-version-upgrade :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-replication-group-message-auto-minor-version-upgrade
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-retention-limit :initarg
                         :snapshot-retention-limit :initform common-lisp:nil
                         :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-create-replication-group-message-snapshot-retention-limit
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-window :initarg :snapshot-window :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-replication-group-message-snapshot-window
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auth-token :initarg :auth-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-replication-group-message-auth-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transit-encryption-enabled :initarg
                         :transit-encryption-enabled :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-replication-group-message-transit-encryption-enabled
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (at-rest-encryption-enabled :initarg
                         :at-rest-encryption-enabled :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-replication-group-message-at-rest-encryption-enabled
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-replication-group-message-kms-key-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-group-ids :initarg :user-group-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or user-group-id-list-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-replication-group-message-user-group-ids
                         :shape "UserGroupIdListInput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (log-delivery-configurations :initarg
                         :log-delivery-configurations :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          log-delivery-configuration-request-list
                          common-lisp:null)
                         :accessor
                         struct-shape-create-replication-group-message-log-delivery-configurations
                         :shape "LogDeliveryConfigurationRequestList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (data-tiering-enabled :initarg :data-tiering-enabled
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-replication-group-message-data-tiering-enabled
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (network-type :initarg :network-type :initform
                         common-lisp:nil :type
                         (common-lisp:or network-type common-lisp:null)
                         :accessor
                         struct-shape-create-replication-group-message-network-type
                         :shape "NetworkType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ip-discovery :initarg :ip-discovery :initform
                         common-lisp:nil :type
                         (common-lisp:or ip-discovery common-lisp:null)
                         :accessor
                         struct-shape-create-replication-group-message-ip-discovery
                         :shape "IpDiscovery" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transit-encryption-mode :initarg
                         :transit-encryption-mode :initform common-lisp:nil
                         :type
                         (common-lisp:or transit-encryption-mode
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-replication-group-message-transit-encryption-mode
                         :shape "TransitEncryptionMode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cluster-mode :initarg :cluster-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or cluster-mode common-lisp:null)
                         :accessor
                         struct-shape-create-replication-group-message-cluster-mode
                         :shape "ClusterMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (serverless-cache-snapshot-name :initarg
                         :serverless-cache-snapshot-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-replication-group-message-serverless-cache-snapshot-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-replication-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-replication-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-replication-group-message
                    'make-create-replication-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-id))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-description))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-replication-group-id))
      (common-lisp:list
       (common-lisp:cons "GlobalReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary-cluster-id))
      (common-lisp:list
       (common-lisp:cons "PrimaryClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automatic-failover-enabled))
      (common-lisp:list
       (common-lisp:cons "AutomaticFailoverEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-azenabled))
      (common-lisp:list
       (common-lisp:cons "MultiAZEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-cache-clusters))
      (common-lisp:list
       (common-lisp:cons "NumCacheClusters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-cache-cluster-azs))
      (common-lisp:list
       (common-lisp:cons "PreferredCacheClusterAZs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-node-groups))
      (common-lisp:list
       (common-lisp:cons "NumNodeGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replicas-per-node-group))
      (common-lisp:list
       (common-lisp:cons "ReplicasPerNodeGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'node-group-configuration))
      (common-lisp:list
       (common-lisp:cons "NodeGroupConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-node-type))
      (common-lisp:list
       (common-lisp:cons "CacheNodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-subnet-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-security-group-names))
      (common-lisp:list
       (common-lisp:cons "CacheSecurityGroupNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-arns))
      (common-lisp:list
       (common-lisp:cons "SnapshotArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-name))
      (common-lisp:list
       (common-lisp:cons "SnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-topic-arn))
      (common-lisp:list
       (common-lisp:cons "NotificationTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-minor-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AutoMinorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-retention-limit))
      (common-lisp:list
       (common-lisp:cons "SnapshotRetentionLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-window))
      (common-lisp:list
       (common-lisp:cons "SnapshotWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-token))
      (common-lisp:list
       (common-lisp:cons "AuthToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-encryption-enabled))
      (common-lisp:list
       (common-lisp:cons "TransitEncryptionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'at-rest-encryption-enabled))
      (common-lisp:list
       (common-lisp:cons "AtRestEncryptionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-group-ids))
      (common-lisp:list
       (common-lisp:cons "UserGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-delivery-configurations))
      (common-lisp:list
       (common-lisp:cons "LogDeliveryConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-tiering-enabled))
      (common-lisp:list
       (common-lisp:cons "DataTieringEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-type))
      (common-lisp:list
       (common-lisp:cons "NetworkType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-discovery))
      (common-lisp:list
       (common-lisp:cons "IpDiscovery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-encryption-mode))
      (common-lisp:list
       (common-lisp:cons "TransitEncryptionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-mode))
      (common-lisp:list
       (common-lisp:cons "ClusterMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'serverless-cache-snapshot-name))
      (common-lisp:list
       (common-lisp:cons "ServerlessCacheSnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-replication-group-result common-lisp:nil
                       ((replication-group :initarg :replication-group
                         :initform common-lisp:nil :type
                         (common-lisp:or replication-group common-lisp:null)
                         :accessor
                         struct-shape-create-replication-group-result-replication-group
                         :shape "ReplicationGroup" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-replication-group-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-replication-group-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-replication-group-result
                    'make-create-replication-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-group))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-serverless-cache-request common-lisp:nil
                       ((serverless-cache-name :initarg :serverless-cache-name
                         :initform
                         (common-lisp:error
                          ":serverless-cache-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-serverless-cache-request-serverless-cache-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-serverless-cache-request-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine :initarg :engine :initform
                         (common-lisp:error ":engine is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-serverless-cache-request-engine
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (major-engine-version :initarg :major-engine-version
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-serverless-cache-request-major-engine-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-usage-limits :initarg :cache-usage-limits
                         :initform common-lisp:nil :type
                         (common-lisp:or cache-usage-limits common-lisp:null)
                         :accessor
                         struct-shape-create-serverless-cache-request-cache-usage-limits
                         :shape "CacheUsageLimits" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-serverless-cache-request-kms-key-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (security-group-ids :initarg :security-group-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or security-group-ids-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-serverless-cache-request-security-group-ids
                         :shape "SecurityGroupIdsList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (snapshot-arns-to-restore :initarg
                         :snapshot-arns-to-restore :initform common-lisp:nil
                         :type
                         (common-lisp:or snapshot-arns-list common-lisp:null)
                         :accessor
                         struct-shape-create-serverless-cache-request-snapshot-arns-to-restore
                         :shape "SnapshotArnsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-serverless-cache-request-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-group-id :initarg :user-group-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-serverless-cache-request-user-group-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subnet-ids :initarg :subnet-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or subnet-ids-list common-lisp:null)
                         :accessor
                         struct-shape-create-serverless-cache-request-subnet-ids
                         :shape "SubnetIdsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-retention-limit :initarg
                         :snapshot-retention-limit :initform common-lisp:nil
                         :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-create-serverless-cache-request-snapshot-retention-limit
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (daily-snapshot-time :initarg :daily-snapshot-time
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-serverless-cache-request-daily-snapshot-time
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-serverless-cache-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-serverless-cache-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-serverless-cache-request
                    'make-create-serverless-cache-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-serverless-cache-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-serverless-cache-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'serverless-cache-name))
      (common-lisp:list
       (common-lisp:cons "ServerlessCacheName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'major-engine-version))
      (common-lisp:list
       (common-lisp:cons "MajorEngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-usage-limits))
      (common-lisp:list
       (common-lisp:cons "CacheUsageLimits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-arns-to-restore))
      (common-lisp:list
       (common-lisp:cons "SnapshotArnsToRestore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-group-id))
      (common-lisp:list
       (common-lisp:cons "UserGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-retention-limit))
      (common-lisp:list
       (common-lisp:cons "SnapshotRetentionLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'daily-snapshot-time))
      (common-lisp:list
       (common-lisp:cons "DailySnapshotTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-serverless-cache-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-serverless-cache-response common-lisp:nil
                       ((serverless-cache :initarg :serverless-cache :initform
                         common-lisp:nil :type
                         (common-lisp:or serverless-cache common-lisp:null)
                         :accessor
                         struct-shape-create-serverless-cache-response-serverless-cache
                         :shape "ServerlessCache" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-serverless-cache-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-serverless-cache-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-serverless-cache-response
                    'make-create-serverless-cache-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-serverless-cache-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-serverless-cache-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serverless-cache))
      (common-lisp:list
       (common-lisp:cons "ServerlessCache"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-serverless-cache-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-serverless-cache-snapshot-request common-lisp:nil
                       ((serverless-cache-snapshot-name :initarg
                         :serverless-cache-snapshot-name :initform
                         (common-lisp:error
                          ":serverless-cache-snapshot-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-serverless-cache-snapshot-request-serverless-cache-snapshot-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (serverless-cache-name :initarg :serverless-cache-name
                         :initform
                         (common-lisp:error
                          ":serverless-cache-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-serverless-cache-snapshot-request-serverless-cache-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-serverless-cache-snapshot-request-kms-key-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-serverless-cache-snapshot-request-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-serverless-cache-snapshot-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-serverless-cache-snapshot-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-serverless-cache-snapshot-request
                    'make-create-serverless-cache-snapshot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-serverless-cache-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-serverless-cache-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'serverless-cache-snapshot-name))
      (common-lisp:list
       (common-lisp:cons "ServerlessCacheSnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'serverless-cache-name))
      (common-lisp:list
       (common-lisp:cons "ServerlessCacheName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-serverless-cache-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-serverless-cache-snapshot-response
                       common-lisp:nil
                       ((serverless-cache-snapshot :initarg
                         :serverless-cache-snapshot :initform common-lisp:nil
                         :type
                         (common-lisp:or serverless-cache-snapshot
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-serverless-cache-snapshot-response-serverless-cache-snapshot
                         :shape "ServerlessCacheSnapshot" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-serverless-cache-snapshot-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-serverless-cache-snapshot-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-serverless-cache-snapshot-response
                    'make-create-serverless-cache-snapshot-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-serverless-cache-snapshot-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-serverless-cache-snapshot-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'serverless-cache-snapshot))
      (common-lisp:list
       (common-lisp:cons "ServerlessCacheSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-serverless-cache-snapshot-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-snapshot-message common-lisp:nil
                       ((replication-group-id :initarg :replication-group-id
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-snapshot-message-replication-group-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-cluster-id :initarg :cache-cluster-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-snapshot-message-cache-cluster-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-name :initarg :snapshot-name :initform
                         (common-lisp:error ":snapshot-name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-snapshot-message-snapshot-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-snapshot-message-kms-key-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-snapshot-message-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-snapshot-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-snapshot-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-snapshot-message 'make-create-snapshot-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-id))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-cluster-id))
      (common-lisp:list
       (common-lisp:cons "CacheClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-name))
      (common-lisp:list
       (common-lisp:cons "SnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-snapshot-result common-lisp:nil
                       ((snapshot :initarg :snapshot :initform common-lisp:nil
                         :type (common-lisp:or snapshot common-lisp:null)
                         :accessor struct-shape-create-snapshot-result-snapshot
                         :shape "Snapshot" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-snapshot-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-snapshot-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-snapshot-result 'make-create-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot))
      (common-lisp:list
       (common-lisp:cons "Snapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-user-group-message common-lisp:nil
                       ((user-group-id :initarg :user-group-id :initform
                         (common-lisp:error ":user-group-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-user-group-message-user-group-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine :initarg :engine :initform
                         (common-lisp:error ":engine is required") :type
                         (common-lisp:or engine-type common-lisp:null)
                         :accessor
                         struct-shape-create-user-group-message-engine :shape
                         "EngineType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (user-ids :initarg :user-ids :initform common-lisp:nil
                         :type
                         (common-lisp:or user-id-list-input common-lisp:null)
                         :accessor
                         struct-shape-create-user-group-message-user-ids :shape
                         "UserIdListInput" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-user-group-message-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-user-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-user-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-user-group-message
                    'make-create-user-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-user-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-user-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-group-id))
      (common-lisp:list
       (common-lisp:cons "UserGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-ids))
      (common-lisp:list
       (common-lisp:cons "UserIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-user-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-user-message common-lisp:nil
                       ((user-id :initarg :user-id :initform
                         (common-lisp:error ":user-id is required") :type
                         (common-lisp:or user-id common-lisp:null) :accessor
                         struct-shape-create-user-message-user-id :shape
                         "UserId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (user-name :initarg :user-name :initform
                         (common-lisp:error ":user-name is required") :type
                         (common-lisp:or user-name common-lisp:null) :accessor
                         struct-shape-create-user-message-user-name :shape
                         "UserName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (engine :initarg :engine :initform
                         (common-lisp:error ":engine is required") :type
                         (common-lisp:or engine-type common-lisp:null)
                         :accessor struct-shape-create-user-message-engine
                         :shape "EngineType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (passwords :initarg :passwords :initform
                         common-lisp:nil :type
                         (common-lisp:or password-list-input common-lisp:null)
                         :accessor struct-shape-create-user-message-passwords
                         :shape "PasswordListInput" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (access-string :initarg :access-string :initform
                         (common-lisp:error ":access-string is required") :type
                         (common-lisp:or access-string common-lisp:null)
                         :accessor
                         struct-shape-create-user-message-access-string :shape
                         "AccessString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (no-password-required :initarg :no-password-required
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-user-message-no-password-required
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-user-message-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (authentication-mode :initarg :authentication-mode
                         :initform common-lisp:nil :type
                         (common-lisp:or authentication-mode common-lisp:null)
                         :accessor
                         struct-shape-create-user-message-authentication-mode
                         :shape "AuthenticationMode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-user-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-user-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-user-message 'make-create-user-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-user-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-user-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'passwords))
      (common-lisp:list
       (common-lisp:cons "Passwords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-string))
      (common-lisp:list
       (common-lisp:cons "AccessString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'no-password-required))
      (common-lisp:list
       (common-lisp:cons "NoPasswordRequired"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication-mode))
      (common-lisp:list
       (common-lisp:cons "AuthenticationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-user-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass customer-node-endpoint common-lisp:nil
                       ((address :initarg :address :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-customer-node-endpoint-address
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-customer-node-endpoint-port
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-customer-node-endpoint
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'customer-node-endpoint
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'customer-node-endpoint 'make-customer-node-endpoint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          customer-node-endpoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          customer-node-endpoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          customer-node-endpoint))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype customer-node-endpoint-list ()
   '(trivial-types:proper-list customer-node-endpoint))
 (common-lisp:defun make-customer-node-endpoint-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list customer-node-endpoint))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass data-storage common-lisp:nil
                       ((maximum :initarg :maximum :initform
                         (common-lisp:error ":maximum is required") :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-data-storage-maximum :shape
                         "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unit :initarg :unit :initform
                         (common-lisp:error ":unit is required") :type
                         (common-lisp:or data-storage-unit common-lisp:null)
                         :accessor struct-shape-data-storage-unit :shape
                         "DataStorageUnit" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-storage
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-storage
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'data-storage 'make-data-storage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-storage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-storage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum))
      (common-lisp:list
       (common-lisp:cons "Maximum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "Unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-storage))
   common-lisp:nil))
(common-lisp:deftype data-storage-unit () 'common-lisp:string)
(common-lisp:deftype data-tiering-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass decrease-node-groups-in-global-replication-group-message
                       common-lisp:nil
                       ((global-replication-group-id :initarg
                         :global-replication-group-id :initform
                         (common-lisp:error
                          ":global-replication-group-id is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-decrease-node-groups-in-global-replication-group-message-global-replication-group-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (node-group-count :initarg :node-group-count :initform
                         (common-lisp:error ":node-group-count is required")
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-decrease-node-groups-in-global-replication-group-message-node-group-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (global-node-groups-to-remove :initarg
                         :global-node-groups-to-remove :initform
                         common-lisp:nil :type
                         (common-lisp:or global-node-group-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-decrease-node-groups-in-global-replication-group-message-global-node-groups-to-remove
                         :shape "GlobalNodeGroupIdList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (global-node-groups-to-retain :initarg
                         :global-node-groups-to-retain :initform
                         common-lisp:nil :type
                         (common-lisp:or global-node-group-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-decrease-node-groups-in-global-replication-group-message-global-node-groups-to-retain
                         :shape "GlobalNodeGroupIdList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (apply-immediately :initarg :apply-immediately
                         :initform
                         (common-lisp:error ":apply-immediately is required")
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-decrease-node-groups-in-global-replication-group-message-apply-immediately
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-decrease-node-groups-in-global-replication-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'decrease-node-groups-in-global-replication-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'decrease-node-groups-in-global-replication-group-message
                    'make-decrease-node-groups-in-global-replication-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          decrease-node-groups-in-global-replication-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          decrease-node-groups-in-global-replication-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-replication-group-id))
      (common-lisp:list
       (common-lisp:cons "GlobalReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-group-count))
      (common-lisp:list
       (common-lisp:cons "NodeGroupCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-node-groups-to-remove))
      (common-lisp:list
       (common-lisp:cons "GlobalNodeGroupsToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-node-groups-to-retain))
      (common-lisp:list
       (common-lisp:cons "GlobalNodeGroupsToRetain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-immediately))
      (common-lisp:list
       (common-lisp:cons "ApplyImmediately"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          decrease-node-groups-in-global-replication-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass decrease-node-groups-in-global-replication-group-result
                       common-lisp:nil
                       ((global-replication-group :initarg
                         :global-replication-group :initform common-lisp:nil
                         :type
                         (common-lisp:or global-replication-group
                                         common-lisp:null)
                         :accessor
                         struct-shape-decrease-node-groups-in-global-replication-group-result-global-replication-group
                         :shape "GlobalReplicationGroup" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-decrease-node-groups-in-global-replication-group-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'decrease-node-groups-in-global-replication-group-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'decrease-node-groups-in-global-replication-group-result
                    'make-decrease-node-groups-in-global-replication-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          decrease-node-groups-in-global-replication-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          decrease-node-groups-in-global-replication-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-replication-group))
      (common-lisp:list
       (common-lisp:cons "GlobalReplicationGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          decrease-node-groups-in-global-replication-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass decrease-replica-count-message common-lisp:nil
                       ((replication-group-id :initarg :replication-group-id
                         :initform
                         (common-lisp:error
                          ":replication-group-id is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-decrease-replica-count-message-replication-group-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (new-replica-count :initarg :new-replica-count
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-decrease-replica-count-message-new-replica-count
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replica-configuration :initarg :replica-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or replica-configuration-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-decrease-replica-count-message-replica-configuration
                         :shape "ReplicaConfigurationList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (replicas-to-remove :initarg :replicas-to-remove
                         :initform common-lisp:nil :type
                         (common-lisp:or remove-replicas-list common-lisp:null)
                         :accessor
                         struct-shape-decrease-replica-count-message-replicas-to-remove
                         :shape "RemoveReplicasList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (apply-immediately :initarg :apply-immediately
                         :initform
                         (common-lisp:error ":apply-immediately is required")
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-decrease-replica-count-message-apply-immediately
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-decrease-replica-count-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'decrease-replica-count-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'decrease-replica-count-message
                    'make-decrease-replica-count-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          decrease-replica-count-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          decrease-replica-count-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-id))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-replica-count))
      (common-lisp:list
       (common-lisp:cons "NewReplicaCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replica-configuration))
      (common-lisp:list
       (common-lisp:cons "ReplicaConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replicas-to-remove))
      (common-lisp:list
       (common-lisp:cons "ReplicasToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-immediately))
      (common-lisp:list
       (common-lisp:cons "ApplyImmediately"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          decrease-replica-count-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass decrease-replica-count-result common-lisp:nil
                       ((replication-group :initarg :replication-group
                         :initform common-lisp:nil :type
                         (common-lisp:or replication-group common-lisp:null)
                         :accessor
                         struct-shape-decrease-replica-count-result-replication-group
                         :shape "ReplicationGroup" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-decrease-replica-count-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'decrease-replica-count-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'decrease-replica-count-result
                    'make-decrease-replica-count-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          decrease-replica-count-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          decrease-replica-count-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-group))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          decrease-replica-count-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition default-user-associated-to-user-group-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'default-user-associated-to-user-group-fault)))
(common-lisp:progn
 (common-lisp:define-condition default-user-required
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'default-user-required)))
(common-lisp:progn
 (common-lisp:defclass delete-cache-cluster-message common-lisp:nil
                       ((cache-cluster-id :initarg :cache-cluster-id :initform
                         (common-lisp:error ":cache-cluster-id is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-cache-cluster-message-cache-cluster-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (final-snapshot-identifier :initarg
                         :final-snapshot-identifier :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-cache-cluster-message-final-snapshot-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-cache-cluster-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-cache-cluster-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-cache-cluster-message
                    'make-delete-cache-cluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cache-cluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cache-cluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-cluster-id))
      (common-lisp:list
       (common-lisp:cons "CacheClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'final-snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "FinalSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cache-cluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-cache-cluster-result common-lisp:nil
                       ((cache-cluster :initarg :cache-cluster :initform
                         common-lisp:nil :type
                         (common-lisp:or cache-cluster common-lisp:null)
                         :accessor
                         struct-shape-delete-cache-cluster-result-cache-cluster
                         :shape "CacheCluster" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-cache-cluster-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-cache-cluster-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-cache-cluster-result
                    'make-delete-cache-cluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cache-cluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cache-cluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-cluster))
      (common-lisp:list
       (common-lisp:cons "CacheCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cache-cluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-cache-parameter-group-message common-lisp:nil
                       ((cache-parameter-group-name :initarg
                         :cache-parameter-group-name :initform
                         (common-lisp:error
                          ":cache-parameter-group-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-cache-parameter-group-message-cache-parameter-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-cache-parameter-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-cache-parameter-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-cache-parameter-group-message
                    'make-delete-cache-parameter-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cache-parameter-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cache-parameter-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cache-parameter-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-cache-security-group-message common-lisp:nil
                       ((cache-security-group-name :initarg
                         :cache-security-group-name :initform
                         (common-lisp:error
                          ":cache-security-group-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-cache-security-group-message-cache-security-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-cache-security-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-cache-security-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-cache-security-group-message
                    'make-delete-cache-security-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cache-security-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cache-security-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-security-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheSecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cache-security-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-cache-subnet-group-message common-lisp:nil
                       ((cache-subnet-group-name :initarg
                         :cache-subnet-group-name :initform
                         (common-lisp:error
                          ":cache-subnet-group-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-cache-subnet-group-message-cache-subnet-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-cache-subnet-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-cache-subnet-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-cache-subnet-group-message
                    'make-delete-cache-subnet-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cache-subnet-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cache-subnet-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-subnet-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cache-subnet-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-global-replication-group-message common-lisp:nil
                       ((global-replication-group-id :initarg
                         :global-replication-group-id :initform
                         (common-lisp:error
                          ":global-replication-group-id is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-global-replication-group-message-global-replication-group-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (retain-primary-replication-group :initarg
                         :retain-primary-replication-group :initform
                         (common-lisp:error
                          ":retain-primary-replication-group is required")
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-delete-global-replication-group-message-retain-primary-replication-group
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-global-replication-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-global-replication-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-global-replication-group-message
                    'make-delete-global-replication-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-global-replication-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-global-replication-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-replication-group-id))
      (common-lisp:list
       (common-lisp:cons "GlobalReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'retain-primary-replication-group))
      (common-lisp:list
       (common-lisp:cons "RetainPrimaryReplicationGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-global-replication-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-global-replication-group-result common-lisp:nil
                       ((global-replication-group :initarg
                         :global-replication-group :initform common-lisp:nil
                         :type
                         (common-lisp:or global-replication-group
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-global-replication-group-result-global-replication-group
                         :shape "GlobalReplicationGroup" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-global-replication-group-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-global-replication-group-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-global-replication-group-result
                    'make-delete-global-replication-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-global-replication-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-global-replication-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-replication-group))
      (common-lisp:list
       (common-lisp:cons "GlobalReplicationGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-global-replication-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-replication-group-message common-lisp:nil
                       ((replication-group-id :initarg :replication-group-id
                         :initform
                         (common-lisp:error
                          ":replication-group-id is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-replication-group-message-replication-group-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (retain-primary-cluster :initarg
                         :retain-primary-cluster :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-delete-replication-group-message-retain-primary-cluster
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (final-snapshot-identifier :initarg
                         :final-snapshot-identifier :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-replication-group-message-final-snapshot-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-replication-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-replication-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-replication-group-message
                    'make-delete-replication-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-id))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'retain-primary-cluster))
      (common-lisp:list
       (common-lisp:cons "RetainPrimaryCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'final-snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "FinalSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-replication-group-result common-lisp:nil
                       ((replication-group :initarg :replication-group
                         :initform common-lisp:nil :type
                         (common-lisp:or replication-group common-lisp:null)
                         :accessor
                         struct-shape-delete-replication-group-result-replication-group
                         :shape "ReplicationGroup" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-replication-group-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-replication-group-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-replication-group-result
                    'make-delete-replication-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-group))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-serverless-cache-request common-lisp:nil
                       ((serverless-cache-name :initarg :serverless-cache-name
                         :initform
                         (common-lisp:error
                          ":serverless-cache-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-serverless-cache-request-serverless-cache-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (final-snapshot-name :initarg :final-snapshot-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-serverless-cache-request-final-snapshot-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-serverless-cache-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-serverless-cache-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-serverless-cache-request
                    'make-delete-serverless-cache-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-serverless-cache-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-serverless-cache-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'serverless-cache-name))
      (common-lisp:list
       (common-lisp:cons "ServerlessCacheName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'final-snapshot-name))
      (common-lisp:list
       (common-lisp:cons "FinalSnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-serverless-cache-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-serverless-cache-response common-lisp:nil
                       ((serverless-cache :initarg :serverless-cache :initform
                         common-lisp:nil :type
                         (common-lisp:or serverless-cache common-lisp:null)
                         :accessor
                         struct-shape-delete-serverless-cache-response-serverless-cache
                         :shape "ServerlessCache" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-serverless-cache-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-serverless-cache-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-serverless-cache-response
                    'make-delete-serverless-cache-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-serverless-cache-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-serverless-cache-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serverless-cache))
      (common-lisp:list
       (common-lisp:cons "ServerlessCache"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-serverless-cache-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-serverless-cache-snapshot-request common-lisp:nil
                       ((serverless-cache-snapshot-name :initarg
                         :serverless-cache-snapshot-name :initform
                         (common-lisp:error
                          ":serverless-cache-snapshot-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-serverless-cache-snapshot-request-serverless-cache-snapshot-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-serverless-cache-snapshot-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-serverless-cache-snapshot-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-serverless-cache-snapshot-request
                    'make-delete-serverless-cache-snapshot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-serverless-cache-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-serverless-cache-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'serverless-cache-snapshot-name))
      (common-lisp:list
       (common-lisp:cons "ServerlessCacheSnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-serverless-cache-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-serverless-cache-snapshot-response
                       common-lisp:nil
                       ((serverless-cache-snapshot :initarg
                         :serverless-cache-snapshot :initform common-lisp:nil
                         :type
                         (common-lisp:or serverless-cache-snapshot
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-serverless-cache-snapshot-response-serverless-cache-snapshot
                         :shape "ServerlessCacheSnapshot" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-serverless-cache-snapshot-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-serverless-cache-snapshot-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-serverless-cache-snapshot-response
                    'make-delete-serverless-cache-snapshot-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-serverless-cache-snapshot-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-serverless-cache-snapshot-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'serverless-cache-snapshot))
      (common-lisp:list
       (common-lisp:cons "ServerlessCacheSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-serverless-cache-snapshot-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-snapshot-message common-lisp:nil
                       ((snapshot-name :initarg :snapshot-name :initform
                         (common-lisp:error ":snapshot-name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-snapshot-message-snapshot-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-snapshot-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-snapshot-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-snapshot-message 'make-delete-snapshot-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-name))
      (common-lisp:list
       (common-lisp:cons "SnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-snapshot-result common-lisp:nil
                       ((snapshot :initarg :snapshot :initform common-lisp:nil
                         :type (common-lisp:or snapshot common-lisp:null)
                         :accessor struct-shape-delete-snapshot-result-snapshot
                         :shape "Snapshot" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-snapshot-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-snapshot-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-snapshot-result 'make-delete-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot))
      (common-lisp:list
       (common-lisp:cons "Snapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-user-group-message common-lisp:nil
                       ((user-group-id :initarg :user-group-id :initform
                         (common-lisp:error ":user-group-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-user-group-message-user-group-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-user-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-user-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-user-group-message
                    'make-delete-user-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-group-id))
      (common-lisp:list
       (common-lisp:cons "UserGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-user-message common-lisp:nil
                       ((user-id :initarg :user-id :initform
                         (common-lisp:error ":user-id is required") :type
                         (common-lisp:or user-id common-lisp:null) :accessor
                         struct-shape-delete-user-message-user-id :shape
                         "UserId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-user-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-user-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-user-message 'make-delete-user-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-user-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-user-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-user-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-cache-clusters-message common-lisp:nil
                       ((cache-cluster-id :initarg :cache-cluster-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-cache-clusters-message-cache-cluster-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-cache-clusters-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-cache-clusters-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (show-cache-node-info :initarg :show-cache-node-info
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-cache-clusters-message-show-cache-node-info
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (show-cache-clusters-not-in-replication-groups :initarg
                         :show-cache-clusters-not-in-replication-groups
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-cache-clusters-message-show-cache-clusters-not-in-replication-groups
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-cache-clusters-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-cache-clusters-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-cache-clusters-message
                    'make-describe-cache-clusters-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cache-clusters-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cache-clusters-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-cluster-id))
      (common-lisp:list
       (common-lisp:cons "CacheClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'show-cache-node-info))
      (common-lisp:list
       (common-lisp:cons "ShowCacheNodeInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'show-cache-clusters-not-in-replication-groups))
      (common-lisp:list
       (common-lisp:cons "ShowCacheClustersNotInReplicationGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cache-clusters-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-cache-engine-versions-message common-lisp:nil
                       ((engine :initarg :engine :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-cache-engine-versions-message-engine
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-version :initarg :engine-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-cache-engine-versions-message-engine-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-parameter-group-family :initarg
                         :cache-parameter-group-family :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-cache-engine-versions-message-cache-parameter-group-family
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-cache-engine-versions-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-cache-engine-versions-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-only :initarg :default-only :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-describe-cache-engine-versions-message-default-only
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-cache-engine-versions-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-cache-engine-versions-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-cache-engine-versions-message
                    'make-describe-cache-engine-versions-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cache-engine-versions-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cache-engine-versions-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-parameter-group-family))
      (common-lisp:list
       (common-lisp:cons "CacheParameterGroupFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-only))
      (common-lisp:list
       (common-lisp:cons "DefaultOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cache-engine-versions-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-cache-parameter-groups-message common-lisp:nil
                       ((cache-parameter-group-name :initarg
                         :cache-parameter-group-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-cache-parameter-groups-message-cache-parameter-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-cache-parameter-groups-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-cache-parameter-groups-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-cache-parameter-groups-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-cache-parameter-groups-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-cache-parameter-groups-message
                    'make-describe-cache-parameter-groups-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cache-parameter-groups-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cache-parameter-groups-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cache-parameter-groups-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-cache-parameters-message common-lisp:nil
                       ((cache-parameter-group-name :initarg
                         :cache-parameter-group-name :initform
                         (common-lisp:error
                          ":cache-parameter-group-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-cache-parameters-message-cache-parameter-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source :initarg :source :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-cache-parameters-message-source
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-cache-parameters-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-cache-parameters-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-cache-parameters-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-cache-parameters-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-cache-parameters-message
                    'make-describe-cache-parameters-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cache-parameters-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cache-parameters-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cache-parameters-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-cache-security-groups-message common-lisp:nil
                       ((cache-security-group-name :initarg
                         :cache-security-group-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-cache-security-groups-message-cache-security-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-cache-security-groups-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-cache-security-groups-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-cache-security-groups-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-cache-security-groups-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-cache-security-groups-message
                    'make-describe-cache-security-groups-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cache-security-groups-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cache-security-groups-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-security-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheSecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cache-security-groups-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-cache-subnet-groups-message common-lisp:nil
                       ((cache-subnet-group-name :initarg
                         :cache-subnet-group-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-cache-subnet-groups-message-cache-subnet-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-cache-subnet-groups-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-cache-subnet-groups-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-cache-subnet-groups-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-cache-subnet-groups-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-cache-subnet-groups-message
                    'make-describe-cache-subnet-groups-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cache-subnet-groups-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cache-subnet-groups-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-subnet-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cache-subnet-groups-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-engine-default-parameters-message
                       common-lisp:nil
                       ((cache-parameter-group-family :initarg
                         :cache-parameter-group-family :initform
                         (common-lisp:error
                          ":cache-parameter-group-family is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-engine-default-parameters-message-cache-parameter-group-family
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-engine-default-parameters-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-engine-default-parameters-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-engine-default-parameters-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-engine-default-parameters-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-engine-default-parameters-message
                    'make-describe-engine-default-parameters-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-default-parameters-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-default-parameters-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-parameter-group-family))
      (common-lisp:list
       (common-lisp:cons "CacheParameterGroupFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-default-parameters-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-engine-default-parameters-result
                       common-lisp:nil
                       ((engine-defaults :initarg :engine-defaults :initform
                         common-lisp:nil :type
                         (common-lisp:or engine-defaults common-lisp:null)
                         :accessor
                         struct-shape-describe-engine-default-parameters-result-engine-defaults
                         :shape "EngineDefaults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-engine-default-parameters-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-engine-default-parameters-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-engine-default-parameters-result
                    'make-describe-engine-default-parameters-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-default-parameters-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-default-parameters-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-defaults))
      (common-lisp:list
       (common-lisp:cons "EngineDefaults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-default-parameters-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-events-message common-lisp:nil
                       ((source-identifier :initarg :source-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-events-message-source-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-type :initarg :source-type :initform
                         common-lisp:nil :type
                         (common-lisp:or source-type common-lisp:null)
                         :accessor
                         struct-shape-describe-events-message-source-type
                         :shape "SourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-describe-events-message-start-time :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or tstamp common-lisp:null)
                         :accessor
                         struct-shape-describe-events-message-end-time :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (duration :initarg :duration :initform common-lisp:nil
                         :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-events-message-duration :shape
                         "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-events-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-describe-events-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-events-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-events-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-events-message 'make-describe-events-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-events-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-events-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-events-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-global-replication-groups-message
                       common-lisp:nil
                       ((global-replication-group-id :initarg
                         :global-replication-group-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-global-replication-groups-message-global-replication-group-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-global-replication-groups-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-global-replication-groups-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (show-member-info :initarg :show-member-info :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-global-replication-groups-message-show-member-info
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-global-replication-groups-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-global-replication-groups-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-global-replication-groups-message
                    'make-describe-global-replication-groups-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-global-replication-groups-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-global-replication-groups-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-replication-group-id))
      (common-lisp:list
       (common-lisp:cons "GlobalReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'show-member-info))
      (common-lisp:list
       (common-lisp:cons "ShowMemberInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-global-replication-groups-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-global-replication-groups-result
                       common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-global-replication-groups-result-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (global-replication-groups :initarg
                         :global-replication-groups :initform common-lisp:nil
                         :type
                         (common-lisp:or global-replication-group-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-global-replication-groups-result-global-replication-groups
                         :shape "GlobalReplicationGroupList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-global-replication-groups-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-global-replication-groups-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-global-replication-groups-result
                    'make-describe-global-replication-groups-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-global-replication-groups-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-global-replication-groups-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-replication-groups))
      (common-lisp:list
       (common-lisp:cons "GlobalReplicationGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-global-replication-groups-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-replication-groups-message common-lisp:nil
                       ((replication-group-id :initarg :replication-group-id
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-replication-groups-message-replication-group-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-replication-groups-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-replication-groups-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-replication-groups-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-replication-groups-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-replication-groups-message
                    'make-describe-replication-groups-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-groups-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-groups-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-id))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-groups-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-reserved-cache-nodes-message common-lisp:nil
                       ((reserved-cache-node-id :initarg
                         :reserved-cache-node-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-reserved-cache-nodes-message-reserved-cache-node-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reserved-cache-nodes-offering-id :initarg
                         :reserved-cache-nodes-offering-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-reserved-cache-nodes-message-reserved-cache-nodes-offering-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-node-type :initarg :cache-node-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-reserved-cache-nodes-message-cache-node-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (duration :initarg :duration :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-reserved-cache-nodes-message-duration
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (product-description :initarg :product-description
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-reserved-cache-nodes-message-product-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (offering-type :initarg :offering-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-reserved-cache-nodes-message-offering-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-reserved-cache-nodes-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-reserved-cache-nodes-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-reserved-cache-nodes-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-reserved-cache-nodes-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-reserved-cache-nodes-message
                    'make-describe-reserved-cache-nodes-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-cache-nodes-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-cache-nodes-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-cache-node-id))
      (common-lisp:list
       (common-lisp:cons "ReservedCacheNodeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-cache-nodes-offering-id))
      (common-lisp:list
       (common-lisp:cons "ReservedCacheNodesOfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-node-type))
      (common-lisp:list
       (common-lisp:cons "CacheNodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-description))
      (common-lisp:list
       (common-lisp:cons "ProductDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-type))
      (common-lisp:list
       (common-lisp:cons "OfferingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-cache-nodes-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-reserved-cache-nodes-offerings-message
                       common-lisp:nil
                       ((reserved-cache-nodes-offering-id :initarg
                         :reserved-cache-nodes-offering-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-reserved-cache-nodes-offerings-message-reserved-cache-nodes-offering-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-node-type :initarg :cache-node-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-reserved-cache-nodes-offerings-message-cache-node-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (duration :initarg :duration :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-reserved-cache-nodes-offerings-message-duration
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (product-description :initarg :product-description
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-reserved-cache-nodes-offerings-message-product-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (offering-type :initarg :offering-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-reserved-cache-nodes-offerings-message-offering-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-reserved-cache-nodes-offerings-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-reserved-cache-nodes-offerings-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-reserved-cache-nodes-offerings-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-reserved-cache-nodes-offerings-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-reserved-cache-nodes-offerings-message
                    'make-describe-reserved-cache-nodes-offerings-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-cache-nodes-offerings-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-cache-nodes-offerings-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-cache-nodes-offering-id))
      (common-lisp:list
       (common-lisp:cons "ReservedCacheNodesOfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-node-type))
      (common-lisp:list
       (common-lisp:cons "CacheNodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-description))
      (common-lisp:list
       (common-lisp:cons "ProductDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-type))
      (common-lisp:list
       (common-lisp:cons "OfferingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-cache-nodes-offerings-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-serverless-cache-snapshots-request
                       common-lisp:nil
                       ((serverless-cache-name :initarg :serverless-cache-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-serverless-cache-snapshots-request-serverless-cache-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (serverless-cache-snapshot-name :initarg
                         :serverless-cache-snapshot-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-serverless-cache-snapshots-request-serverless-cache-snapshot-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-type :initarg :snapshot-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-serverless-cache-snapshots-request-snapshot-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-serverless-cache-snapshots-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-serverless-cache-snapshots-request-max-results
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-serverless-cache-snapshots-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-serverless-cache-snapshots-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-serverless-cache-snapshots-request
                    'make-describe-serverless-cache-snapshots-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-serverless-cache-snapshots-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-serverless-cache-snapshots-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'serverless-cache-name))
      (common-lisp:list
       (common-lisp:cons "ServerlessCacheName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'serverless-cache-snapshot-name))
      (common-lisp:list
       (common-lisp:cons "ServerlessCacheSnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-type))
      (common-lisp:list
       (common-lisp:cons "SnapshotType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-serverless-cache-snapshots-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-serverless-cache-snapshots-response
                       common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-serverless-cache-snapshots-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (serverless-cache-snapshots :initarg
                         :serverless-cache-snapshots :initform common-lisp:nil
                         :type
                         (common-lisp:or serverless-cache-snapshot-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-serverless-cache-snapshots-response-serverless-cache-snapshots
                         :shape "ServerlessCacheSnapshotList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-serverless-cache-snapshots-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-serverless-cache-snapshots-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-serverless-cache-snapshots-response
                    'make-describe-serverless-cache-snapshots-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-serverless-cache-snapshots-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-serverless-cache-snapshots-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'serverless-cache-snapshots))
      (common-lisp:list
       (common-lisp:cons "ServerlessCacheSnapshots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-serverless-cache-snapshots-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-serverless-caches-request common-lisp:nil
                       ((serverless-cache-name :initarg :serverless-cache-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-serverless-caches-request-serverless-cache-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-serverless-caches-request-max-results
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-serverless-caches-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-serverless-caches-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-serverless-caches-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-serverless-caches-request
                    'make-describe-serverless-caches-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-serverless-caches-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-serverless-caches-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'serverless-cache-name))
      (common-lisp:list
       (common-lisp:cons "ServerlessCacheName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-serverless-caches-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-serverless-caches-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-serverless-caches-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (serverless-caches :initarg :serverless-caches
                         :initform common-lisp:nil :type
                         (common-lisp:or serverless-cache-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-serverless-caches-response-serverless-caches
                         :shape "ServerlessCacheList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-serverless-caches-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-serverless-caches-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-serverless-caches-response
                    'make-describe-serverless-caches-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-serverless-caches-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-serverless-caches-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serverless-caches))
      (common-lisp:list
       (common-lisp:cons "ServerlessCaches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-serverless-caches-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-service-updates-message common-lisp:nil
                       ((service-update-name :initarg :service-update-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-service-updates-message-service-update-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-update-status :initarg :service-update-status
                         :initform common-lisp:nil :type
                         (common-lisp:or service-update-status-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-service-updates-message-service-update-status
                         :shape "ServiceUpdateStatusList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-service-updates-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-service-updates-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-service-updates-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-service-updates-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-service-updates-message
                    'make-describe-service-updates-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-service-updates-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-service-updates-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-update-name))
      (common-lisp:list
       (common-lisp:cons "ServiceUpdateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-update-status))
      (common-lisp:list
       (common-lisp:cons "ServiceUpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-service-updates-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-snapshots-list-message common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-snapshots-list-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshots :initarg :snapshots :initform
                         common-lisp:nil :type
                         (common-lisp:or snapshot-list common-lisp:null)
                         :accessor
                         struct-shape-describe-snapshots-list-message-snapshots
                         :shape "SnapshotList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-snapshots-list-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-snapshots-list-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-snapshots-list-message
                    'make-describe-snapshots-list-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshots-list-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshots-list-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshots))
      (common-lisp:list
       (common-lisp:cons "Snapshots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshots-list-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-snapshots-message common-lisp:nil
                       ((replication-group-id :initarg :replication-group-id
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-snapshots-message-replication-group-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-cluster-id :initarg :cache-cluster-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-snapshots-message-cache-cluster-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-name :initarg :snapshot-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-snapshots-message-snapshot-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-source :initarg :snapshot-source :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-snapshots-message-snapshot-source
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-snapshots-message-marker :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-snapshots-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (show-node-group-config :initarg
                         :show-node-group-config :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-snapshots-message-show-node-group-config
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-snapshots-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-snapshots-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-snapshots-message
                    'make-describe-snapshots-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshots-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshots-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-id))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-cluster-id))
      (common-lisp:list
       (common-lisp:cons "CacheClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-name))
      (common-lisp:list
       (common-lisp:cons "SnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-source))
      (common-lisp:list
       (common-lisp:cons "SnapshotSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'show-node-group-config))
      (common-lisp:list
       (common-lisp:cons "ShowNodeGroupConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshots-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-update-actions-message common-lisp:nil
                       ((service-update-name :initarg :service-update-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-update-actions-message-service-update-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-group-ids :initarg :replication-group-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or replication-group-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-update-actions-message-replication-group-ids
                         :shape "ReplicationGroupIdList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cache-cluster-ids :initarg :cache-cluster-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or cache-cluster-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-update-actions-message-cache-cluster-ids
                         :shape "CacheClusterIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine :initarg :engine :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-update-actions-message-engine
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-update-status :initarg :service-update-status
                         :initform common-lisp:nil :type
                         (common-lisp:or service-update-status-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-update-actions-message-service-update-status
                         :shape "ServiceUpdateStatusList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (service-update-time-range :initarg
                         :service-update-time-range :initform common-lisp:nil
                         :type
                         (common-lisp:or time-range-filter common-lisp:null)
                         :accessor
                         struct-shape-describe-update-actions-message-service-update-time-range
                         :shape "TimeRangeFilter" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (update-action-status :initarg :update-action-status
                         :initform common-lisp:nil :type
                         (common-lisp:or update-action-status-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-update-actions-message-update-action-status
                         :shape "UpdateActionStatusList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (show-node-level-update-status :initarg
                         :show-node-level-update-status :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-update-actions-message-show-node-level-update-status
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-update-actions-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-update-actions-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-update-actions-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-update-actions-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-update-actions-message
                    'make-describe-update-actions-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-update-actions-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-update-actions-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-update-name))
      (common-lisp:list
       (common-lisp:cons "ServiceUpdateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-ids))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-cluster-ids))
      (common-lisp:list
       (common-lisp:cons "CacheClusterIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-update-status))
      (common-lisp:list
       (common-lisp:cons "ServiceUpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-update-time-range))
      (common-lisp:list
       (common-lisp:cons "ServiceUpdateTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'update-action-status))
      (common-lisp:list
       (common-lisp:cons "UpdateActionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'show-node-level-update-status))
      (common-lisp:list
       (common-lisp:cons "ShowNodeLevelUpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-update-actions-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-user-groups-message common-lisp:nil
                       ((user-group-id :initarg :user-group-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-user-groups-message-user-group-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-user-groups-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-user-groups-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-user-groups-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-user-groups-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-user-groups-message
                    'make-describe-user-groups-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-groups-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-groups-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-group-id))
      (common-lisp:list
       (common-lisp:cons "UserGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-groups-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-user-groups-result common-lisp:nil
                       ((user-groups :initarg :user-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or user-group-list common-lisp:null)
                         :accessor
                         struct-shape-describe-user-groups-result-user-groups
                         :shape "UserGroupList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-user-groups-result-marker :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-user-groups-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-user-groups-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-user-groups-result
                    'make-describe-user-groups-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-groups-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-groups-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-groups))
      (common-lisp:list
       (common-lisp:cons "UserGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-groups-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-users-message common-lisp:nil
                       ((engine :initarg :engine :initform common-lisp:nil
                         :type (common-lisp:or engine-type common-lisp:null)
                         :accessor struct-shape-describe-users-message-engine
                         :shape "EngineType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-id :initarg :user-id :initform common-lisp:nil
                         :type (common-lisp:or user-id common-lisp:null)
                         :accessor struct-shape-describe-users-message-user-id
                         :shape "UserId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor struct-shape-describe-users-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-users-message-max-records :shape
                         "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-describe-users-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-users-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-users-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-users-message 'make-describe-users-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-users-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-users-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-users-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-users-result common-lisp:nil
                       ((users :initarg :users :initform common-lisp:nil :type
                         (common-lisp:or user-list common-lisp:null) :accessor
                         struct-shape-describe-users-result-users :shape
                         "UserList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-describe-users-result-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-users-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-users-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-users-result 'make-describe-users-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-users-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-users-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'users))
      (common-lisp:list
       (common-lisp:cons "Users"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-users-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass destination-details common-lisp:nil
                       ((cloud-watch-logs-details :initarg
                         :cloud-watch-logs-details :initform common-lisp:nil
                         :type
                         (common-lisp:or cloud-watch-logs-destination-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-destination-details-cloud-watch-logs-details
                         :shape "CloudWatchLogsDestinationDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (kinesis-firehose-details :initarg
                         :kinesis-firehose-details :initform common-lisp:nil
                         :type
                         (common-lisp:or kinesis-firehose-destination-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-destination-details-kinesis-firehose-details
                         :shape "KinesisFirehoseDestinationDetails" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-destination-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'destination-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'destination-details 'make-destination-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input destination-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input destination-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logs-details))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLogsDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-firehose-details))
      (common-lisp:list
       (common-lisp:cons "KinesisFirehoseDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input destination-details))
   common-lisp:nil))
(common-lisp:deftype destination-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass disassociate-global-replication-group-message
                       common-lisp:nil
                       ((global-replication-group-id :initarg
                         :global-replication-group-id :initform
                         (common-lisp:error
                          ":global-replication-group-id is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-disassociate-global-replication-group-message-global-replication-group-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-group-id :initarg :replication-group-id
                         :initform
                         (common-lisp:error
                          ":replication-group-id is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-disassociate-global-replication-group-message-replication-group-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-group-region :initarg
                         :replication-group-region :initform
                         (common-lisp:error
                          ":replication-group-region is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-disassociate-global-replication-group-message-replication-group-region
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-global-replication-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-global-replication-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-global-replication-group-message
                    'make-disassociate-global-replication-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-global-replication-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-global-replication-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-replication-group-id))
      (common-lisp:list
       (common-lisp:cons "GlobalReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-id))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-region))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-global-replication-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-global-replication-group-result
                       common-lisp:nil
                       ((global-replication-group :initarg
                         :global-replication-group :initform common-lisp:nil
                         :type
                         (common-lisp:or global-replication-group
                                         common-lisp:null)
                         :accessor
                         struct-shape-disassociate-global-replication-group-result-global-replication-group
                         :shape "GlobalReplicationGroup" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-global-replication-group-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-global-replication-group-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-global-replication-group-result
                    'make-disassociate-global-replication-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-global-replication-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-global-replication-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-replication-group))
      (common-lisp:list
       (common-lisp:cons "GlobalReplicationGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-global-replication-group-result))
   common-lisp:nil))
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:define-condition duplicate-user-name-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'duplicate-user-name-fault)))
(common-lisp:progn
 (common-lisp:defclass ec2security-group common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-ec2security-group-status :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ec2security-group-name :initarg
                         :ec2security-group-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-ec2security-group-ec2security-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ec2security-group-owner-id :initarg
                         :ec2security-group-owner-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-ec2security-group-ec2security-group-owner-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ec2security-group
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ec2security-group
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ec2security-group 'make-ec2security-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ec2security-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ec2security-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-name))
      (common-lisp:list
       (common-lisp:cons "EC2SecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-owner-id))
      (common-lisp:list
       (common-lisp:cons "EC2SecurityGroupOwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ec2security-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ec2security-group-list ()
   '(trivial-types:proper-list ec2security-group))
 (common-lisp:defun make-ec2security-group-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ec2security-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass ecpuper-second common-lisp:nil
                       ((maximum :initarg :maximum :initform
                         (common-lisp:error ":maximum is required") :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-ecpuper-second-maximum :shape
                         "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ecpuper-second
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ecpuper-second
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'ecpuper-second 'make-ecpuper-second))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ecpuper-second))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ecpuper-second))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum))
      (common-lisp:list
       (common-lisp:cons "Maximum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ecpuper-second))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass endpoint common-lisp:nil
                       ((address :initarg :address :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-endpoint-address :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-endpoint-port :shape "Integer" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-endpoint
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'endpoint
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'endpoint 'make-endpoint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input endpoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input endpoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input endpoint))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass engine-defaults common-lisp:nil
                       ((cache-parameter-group-family :initarg
                         :cache-parameter-group-family :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-engine-defaults-cache-parameter-group-family
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-engine-defaults-marker :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or parameters-list common-lisp:null)
                         :accessor struct-shape-engine-defaults-parameters
                         :shape "ParametersList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-node-type-specific-parameters :initarg
                         :cache-node-type-specific-parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          cache-node-type-specific-parameters-list
                          common-lisp:null)
                         :accessor
                         struct-shape-engine-defaults-cache-node-type-specific-parameters
                         :shape "CacheNodeTypeSpecificParametersList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-engine-defaults
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'engine-defaults
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'engine-defaults 'make-engine-defaults))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input engine-defaults))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input engine-defaults))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-parameter-group-family))
      (common-lisp:list
       (common-lisp:cons "CacheParameterGroupFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-node-type-specific-parameters))
      (common-lisp:list
       (common-lisp:cons "CacheNodeTypeSpecificParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input engine-defaults))
   common-lisp:nil))
(common-lisp:deftype engine-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass event common-lisp:nil
                       ((source-identifier :initarg :source-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-event-source-identifier :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source-type :initarg :source-type :initform
                         common-lisp:nil :type
                         (common-lisp:or source-type common-lisp:null)
                         :accessor struct-shape-event-source-type :shape
                         "SourceType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-event-message :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (date :initarg :date :initform common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-event-date :shape "TStamp" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-event
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'event
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'event 'make-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date))
      (common-lisp:list
       (common-lisp:cons "Date"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype event-list () '(trivial-types:proper-list event))
 (common-lisp:defun make-event-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass events-message common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-events-message-marker :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (events :initarg :events :initform common-lisp:nil
                         :type (common-lisp:or event-list common-lisp:null)
                         :accessor struct-shape-events-message-events :shape
                         "EventList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-events-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'events-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'events-message 'make-events-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input events-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input events-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "Events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input events-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass export-serverless-cache-snapshot-request common-lisp:nil
                       ((serverless-cache-snapshot-name :initarg
                         :serverless-cache-snapshot-name :initform
                         (common-lisp:error
                          ":serverless-cache-snapshot-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-export-serverless-cache-snapshot-request-serverless-cache-snapshot-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3bucket-name :initarg :s3bucket-name :initform
                         (common-lisp:error ":s3bucket-name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-export-serverless-cache-snapshot-request-s3bucket-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-export-serverless-cache-snapshot-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'export-serverless-cache-snapshot-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'export-serverless-cache-snapshot-request
                    'make-export-serverless-cache-snapshot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-serverless-cache-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-serverless-cache-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'serverless-cache-snapshot-name))
      (common-lisp:list
       (common-lisp:cons "ServerlessCacheSnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "S3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-serverless-cache-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass export-serverless-cache-snapshot-response
                       common-lisp:nil
                       ((serverless-cache-snapshot :initarg
                         :serverless-cache-snapshot :initform common-lisp:nil
                         :type
                         (common-lisp:or serverless-cache-snapshot
                                         common-lisp:null)
                         :accessor
                         struct-shape-export-serverless-cache-snapshot-response-serverless-cache-snapshot
                         :shape "ServerlessCacheSnapshot" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-export-serverless-cache-snapshot-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'export-serverless-cache-snapshot-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'export-serverless-cache-snapshot-response
                    'make-export-serverless-cache-snapshot-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-serverless-cache-snapshot-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-serverless-cache-snapshot-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'serverless-cache-snapshot))
      (common-lisp:list
       (common-lisp:cons "ServerlessCacheSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-serverless-cache-snapshot-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass failover-global-replication-group-message
                       common-lisp:nil
                       ((global-replication-group-id :initarg
                         :global-replication-group-id :initform
                         (common-lisp:error
                          ":global-replication-group-id is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-failover-global-replication-group-message-global-replication-group-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (primary-region :initarg :primary-region :initform
                         (common-lisp:error ":primary-region is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-failover-global-replication-group-message-primary-region
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (primary-replication-group-id :initarg
                         :primary-replication-group-id :initform
                         (common-lisp:error
                          ":primary-replication-group-id is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-failover-global-replication-group-message-primary-replication-group-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-failover-global-replication-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'failover-global-replication-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'failover-global-replication-group-message
                    'make-failover-global-replication-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          failover-global-replication-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          failover-global-replication-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-replication-group-id))
      (common-lisp:list
       (common-lisp:cons "GlobalReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary-region))
      (common-lisp:list
       (common-lisp:cons "PrimaryRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'primary-replication-group-id))
      (common-lisp:list
       (common-lisp:cons "PrimaryReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          failover-global-replication-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass failover-global-replication-group-result common-lisp:nil
                       ((global-replication-group :initarg
                         :global-replication-group :initform common-lisp:nil
                         :type
                         (common-lisp:or global-replication-group
                                         common-lisp:null)
                         :accessor
                         struct-shape-failover-global-replication-group-result-global-replication-group
                         :shape "GlobalReplicationGroup" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-failover-global-replication-group-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'failover-global-replication-group-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'failover-global-replication-group-result
                    'make-failover-global-replication-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          failover-global-replication-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          failover-global-replication-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-replication-group))
      (common-lisp:list
       (common-lisp:cons "GlobalReplicationGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          failover-global-replication-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass filter common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or filter-name common-lisp:null)
                         :accessor struct-shape-filter-name :shape "FilterName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (values :initarg :values :initform
                         (common-lisp:error ":values is required") :type
                         (common-lisp:or filter-value-list common-lisp:null)
                         :accessor struct-shape-filter-values :shape
                         "FilterValueList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'filter 'make-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype filter-list () '(trivial-types:proper-list filter))
 (common-lisp:defun make-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype filter-name () 'common-lisp:string)
(common-lisp:deftype filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype filter-value-list ()
   '(trivial-types:proper-list filter-value))
 (common-lisp:defun make-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass global-node-group common-lisp:nil
                       ((global-node-group-id :initarg :global-node-group-id
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-global-node-group-global-node-group-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (slots :initarg :slots :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-global-node-group-slots :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-global-node-group
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'global-node-group
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'global-node-group 'make-global-node-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input global-node-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input global-node-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-node-group-id))
      (common-lisp:list
       (common-lisp:cons "GlobalNodeGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slots))
      (common-lisp:list
       (common-lisp:cons "Slots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input global-node-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype global-node-group-id-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-global-node-group-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype global-node-group-list ()
   '(trivial-types:proper-list global-node-group))
 (common-lisp:defun make-global-node-group-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list global-node-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass global-replication-group common-lisp:nil
                       ((global-replication-group-id :initarg
                         :global-replication-group-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-global-replication-group-global-replication-group-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (global-replication-group-description :initarg
                         :global-replication-group-description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-global-replication-group-global-replication-group-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-global-replication-group-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-node-type :initarg :cache-node-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-global-replication-group-cache-node-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine :initarg :engine :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-global-replication-group-engine
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-version :initarg :engine-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-global-replication-group-engine-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (members :initarg :members :initform common-lisp:nil
                         :type
                         (common-lisp:or global-replication-group-member-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-global-replication-group-members :shape
                         "GlobalReplicationGroupMemberList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cluster-enabled :initarg :cluster-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-global-replication-group-cluster-enabled
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (global-node-groups :initarg :global-node-groups
                         :initform common-lisp:nil :type
                         (common-lisp:or global-node-group-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-global-replication-group-global-node-groups
                         :shape "GlobalNodeGroupList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auth-token-enabled :initarg :auth-token-enabled
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-global-replication-group-auth-token-enabled
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transit-encryption-enabled :initarg
                         :transit-encryption-enabled :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-global-replication-group-transit-encryption-enabled
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (at-rest-encryption-enabled :initarg
                         :at-rest-encryption-enabled :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-global-replication-group-at-rest-encryption-enabled
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-global-replication-group-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-global-replication-group
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'global-replication-group
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'global-replication-group 'make-global-replication-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          global-replication-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          global-replication-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-replication-group-id))
      (common-lisp:list
       (common-lisp:cons "GlobalReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-replication-group-description))
      (common-lisp:list
       (common-lisp:cons "GlobalReplicationGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-node-type))
      (common-lisp:list
       (common-lisp:cons "CacheNodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'members))
      (common-lisp:list
       (common-lisp:cons "Members"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-enabled))
      (common-lisp:list
       (common-lisp:cons "ClusterEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global-node-groups))
      (common-lisp:list
       (common-lisp:cons "GlobalNodeGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-token-enabled))
      (common-lisp:list
       (common-lisp:cons "AuthTokenEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-encryption-enabled))
      (common-lisp:list
       (common-lisp:cons "TransitEncryptionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'at-rest-encryption-enabled))
      (common-lisp:list
       (common-lisp:cons "AtRestEncryptionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          global-replication-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition global-replication-group-already-exists-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'global-replication-group-already-exists-fault)))
(common-lisp:progn
 (common-lisp:defclass global-replication-group-info common-lisp:nil
                       ((global-replication-group-id :initarg
                         :global-replication-group-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-global-replication-group-info-global-replication-group-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (global-replication-group-member-role :initarg
                         :global-replication-group-member-role :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-global-replication-group-info-global-replication-group-member-role
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-global-replication-group-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'global-replication-group-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'global-replication-group-info
                    'make-global-replication-group-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          global-replication-group-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          global-replication-group-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-replication-group-id))
      (common-lisp:list
       (common-lisp:cons "GlobalReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-replication-group-member-role))
      (common-lisp:list
       (common-lisp:cons "GlobalReplicationGroupMemberRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          global-replication-group-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype global-replication-group-list ()
   '(trivial-types:proper-list global-replication-group))
 (common-lisp:defun make-global-replication-group-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            global-replication-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass global-replication-group-member common-lisp:nil
                       ((replication-group-id :initarg :replication-group-id
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-global-replication-group-member-replication-group-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-group-region :initarg
                         :replication-group-region :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-global-replication-group-member-replication-group-region
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role :initarg :role :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-global-replication-group-member-role
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (automatic-failover :initarg :automatic-failover
                         :initform common-lisp:nil :type
                         (common-lisp:or automatic-failover-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-global-replication-group-member-automatic-failover
                         :shape "AutomaticFailoverStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-global-replication-group-member-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-global-replication-group-member
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'global-replication-group-member
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'global-replication-group-member
                    'make-global-replication-group-member))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          global-replication-group-member))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          global-replication-group-member))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-id))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-region))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'automatic-failover))
      (common-lisp:list
       (common-lisp:cons "AutomaticFailover"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          global-replication-group-member))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype global-replication-group-member-list ()
   '(trivial-types:proper-list global-replication-group-member))
 (common-lisp:defun make-global-replication-group-member-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            global-replication-group-member))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition global-replication-group-not-found-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'global-replication-group-not-found-fault)))
(common-lisp:progn
 (common-lisp:defclass increase-node-groups-in-global-replication-group-message
                       common-lisp:nil
                       ((global-replication-group-id :initarg
                         :global-replication-group-id :initform
                         (common-lisp:error
                          ":global-replication-group-id is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-increase-node-groups-in-global-replication-group-message-global-replication-group-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (node-group-count :initarg :node-group-count :initform
                         (common-lisp:error ":node-group-count is required")
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-increase-node-groups-in-global-replication-group-message-node-group-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (regional-configurations :initarg
                         :regional-configurations :initform common-lisp:nil
                         :type
                         (common-lisp:or regional-configuration-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-increase-node-groups-in-global-replication-group-message-regional-configurations
                         :shape "RegionalConfigurationList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (apply-immediately :initarg :apply-immediately
                         :initform
                         (common-lisp:error ":apply-immediately is required")
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-increase-node-groups-in-global-replication-group-message-apply-immediately
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-increase-node-groups-in-global-replication-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'increase-node-groups-in-global-replication-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'increase-node-groups-in-global-replication-group-message
                    'make-increase-node-groups-in-global-replication-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          increase-node-groups-in-global-replication-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          increase-node-groups-in-global-replication-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-replication-group-id))
      (common-lisp:list
       (common-lisp:cons "GlobalReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-group-count))
      (common-lisp:list
       (common-lisp:cons "NodeGroupCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'regional-configurations))
      (common-lisp:list
       (common-lisp:cons "RegionalConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-immediately))
      (common-lisp:list
       (common-lisp:cons "ApplyImmediately"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          increase-node-groups-in-global-replication-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass increase-node-groups-in-global-replication-group-result
                       common-lisp:nil
                       ((global-replication-group :initarg
                         :global-replication-group :initform common-lisp:nil
                         :type
                         (common-lisp:or global-replication-group
                                         common-lisp:null)
                         :accessor
                         struct-shape-increase-node-groups-in-global-replication-group-result-global-replication-group
                         :shape "GlobalReplicationGroup" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-increase-node-groups-in-global-replication-group-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'increase-node-groups-in-global-replication-group-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'increase-node-groups-in-global-replication-group-result
                    'make-increase-node-groups-in-global-replication-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          increase-node-groups-in-global-replication-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          increase-node-groups-in-global-replication-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-replication-group))
      (common-lisp:list
       (common-lisp:cons "GlobalReplicationGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          increase-node-groups-in-global-replication-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass increase-replica-count-message common-lisp:nil
                       ((replication-group-id :initarg :replication-group-id
                         :initform
                         (common-lisp:error
                          ":replication-group-id is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-increase-replica-count-message-replication-group-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (new-replica-count :initarg :new-replica-count
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-increase-replica-count-message-new-replica-count
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replica-configuration :initarg :replica-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or replica-configuration-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-increase-replica-count-message-replica-configuration
                         :shape "ReplicaConfigurationList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (apply-immediately :initarg :apply-immediately
                         :initform
                         (common-lisp:error ":apply-immediately is required")
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-increase-replica-count-message-apply-immediately
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-increase-replica-count-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'increase-replica-count-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'increase-replica-count-message
                    'make-increase-replica-count-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          increase-replica-count-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          increase-replica-count-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-id))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-replica-count))
      (common-lisp:list
       (common-lisp:cons "NewReplicaCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replica-configuration))
      (common-lisp:list
       (common-lisp:cons "ReplicaConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-immediately))
      (common-lisp:list
       (common-lisp:cons "ApplyImmediately"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          increase-replica-count-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass increase-replica-count-result common-lisp:nil
                       ((replication-group :initarg :replication-group
                         :initform common-lisp:nil :type
                         (common-lisp:or replication-group common-lisp:null)
                         :accessor
                         struct-shape-increase-replica-count-result-replication-group
                         :shape "ReplicationGroup" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-increase-replica-count-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'increase-replica-count-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'increase-replica-count-result
                    'make-increase-replica-count-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          increase-replica-count-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          increase-replica-count-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-group))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          increase-replica-count-result))
   common-lisp:nil))
(common-lisp:deftype input-authentication-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition insufficient-cache-cluster-capacity-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'insufficient-cache-cluster-capacity-fault)))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:deftype integer-optional () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition invalid-arnfault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-arnfault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-cache-cluster-state-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-cache-cluster-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-cache-parameter-group-state-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-cache-parameter-group-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-cache-security-group-state-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-cache-security-group-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-credentials-exception
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-credentials-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-global-replication-group-state-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-global-replication-group-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-kmskey-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-kmskey-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-combination-exception
     (elasticache-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-parameter-combination-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-combination-exception
                    'invalid-parameter-combination-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-value-exception
     (elasticache-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-parameter-value-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-value-exception
                    'invalid-parameter-value-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-replication-group-state-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-replication-group-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-serverless-cache-snapshot-state-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-serverless-cache-snapshot-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-serverless-cache-state-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-serverless-cache-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-snapshot-state-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-snapshot-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-subnet
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-subnet)))
(common-lisp:progn
 (common-lisp:define-condition invalid-user-group-state-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-user-group-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-user-state-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-user-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-vpcnetwork-state-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-vpcnetwork-state-fault)))
(common-lisp:deftype ip-discovery () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype key-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass kinesis-firehose-destination-details common-lisp:nil
                       ((delivery-stream :initarg :delivery-stream :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-kinesis-firehose-destination-details-delivery-stream
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kinesis-firehose-destination-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'kinesis-firehose-destination-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'kinesis-firehose-destination-details
                    'make-kinesis-firehose-destination-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-destination-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-destination-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delivery-stream))
      (common-lisp:list
       (common-lisp:cons "DeliveryStream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-destination-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-allowed-node-type-modifications-message
                       common-lisp:nil
                       ((cache-cluster-id :initarg :cache-cluster-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-allowed-node-type-modifications-message-cache-cluster-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-group-id :initarg :replication-group-id
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-allowed-node-type-modifications-message-replication-group-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-allowed-node-type-modifications-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-allowed-node-type-modifications-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-allowed-node-type-modifications-message
                    'make-list-allowed-node-type-modifications-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-allowed-node-type-modifications-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-allowed-node-type-modifications-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-cluster-id))
      (common-lisp:list
       (common-lisp:cons "CacheClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-id))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-allowed-node-type-modifications-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-message common-lisp:nil
                       ((resource-name :initarg :resource-name :initform
                         (common-lisp:error ":resource-name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-message-resource-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-message
                    'make-list-tags-for-resource-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass log-delivery-configuration common-lisp:nil
                       ((log-type :initarg :log-type :initform common-lisp:nil
                         :type (common-lisp:or log-type common-lisp:null)
                         :accessor
                         struct-shape-log-delivery-configuration-log-type
                         :shape "LogType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (destination-type :initarg :destination-type :initform
                         common-lisp:nil :type
                         (common-lisp:or destination-type common-lisp:null)
                         :accessor
                         struct-shape-log-delivery-configuration-destination-type
                         :shape "DestinationType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (destination-details :initarg :destination-details
                         :initform common-lisp:nil :type
                         (common-lisp:or destination-details common-lisp:null)
                         :accessor
                         struct-shape-log-delivery-configuration-destination-details
                         :shape "DestinationDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-format :initarg :log-format :initform
                         common-lisp:nil :type
                         (common-lisp:or log-format common-lisp:null) :accessor
                         struct-shape-log-delivery-configuration-log-format
                         :shape "LogFormat" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or log-delivery-configuration-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-log-delivery-configuration-status :shape
                         "LogDeliveryConfigurationStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-log-delivery-configuration-message :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-log-delivery-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'log-delivery-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'log-delivery-configuration
                    'make-log-delivery-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          log-delivery-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          log-delivery-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-type))
      (common-lisp:list
       (common-lisp:cons "LogType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-type))
      (common-lisp:list
       (common-lisp:cons "DestinationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-details))
      (common-lisp:list
       (common-lisp:cons "DestinationDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-format))
      (common-lisp:list
       (common-lisp:cons "LogFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          log-delivery-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype log-delivery-configuration-list ()
   '(trivial-types:proper-list log-delivery-configuration))
 (common-lisp:defun make-log-delivery-configuration-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            log-delivery-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass log-delivery-configuration-request common-lisp:nil
                       ((log-type :initarg :log-type :initform common-lisp:nil
                         :type (common-lisp:or log-type common-lisp:null)
                         :accessor
                         struct-shape-log-delivery-configuration-request-log-type
                         :shape "LogType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (destination-type :initarg :destination-type :initform
                         common-lisp:nil :type
                         (common-lisp:or destination-type common-lisp:null)
                         :accessor
                         struct-shape-log-delivery-configuration-request-destination-type
                         :shape "DestinationType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (destination-details :initarg :destination-details
                         :initform common-lisp:nil :type
                         (common-lisp:or destination-details common-lisp:null)
                         :accessor
                         struct-shape-log-delivery-configuration-request-destination-details
                         :shape "DestinationDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-format :initarg :log-format :initform
                         common-lisp:nil :type
                         (common-lisp:or log-format common-lisp:null) :accessor
                         struct-shape-log-delivery-configuration-request-log-format
                         :shape "LogFormat" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enabled :initarg :enabled :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-log-delivery-configuration-request-enabled
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-log-delivery-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'log-delivery-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'log-delivery-configuration-request
                    'make-log-delivery-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          log-delivery-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          log-delivery-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-type))
      (common-lisp:list
       (common-lisp:cons "LogType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-type))
      (common-lisp:list
       (common-lisp:cons "DestinationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-details))
      (common-lisp:list
       (common-lisp:cons "DestinationDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-format))
      (common-lisp:list
       (common-lisp:cons "LogFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          log-delivery-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype log-delivery-configuration-request-list ()
   '(trivial-types:proper-list log-delivery-configuration-request))
 (common-lisp:defun make-log-delivery-configuration-request-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            log-delivery-configuration-request))
   aws-sdk/generator/shape::members))
(common-lisp:deftype log-delivery-configuration-status () 'common-lisp:string)
(common-lisp:deftype log-format () 'common-lisp:string)
(common-lisp:deftype log-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass modify-cache-cluster-message common-lisp:nil
                       ((cache-cluster-id :initarg :cache-cluster-id :initform
                         (common-lisp:error ":cache-cluster-id is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-cache-cluster-message-cache-cluster-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (num-cache-nodes :initarg :num-cache-nodes :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-cache-cluster-message-num-cache-nodes
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-node-ids-to-remove :initarg
                         :cache-node-ids-to-remove :initform common-lisp:nil
                         :type
                         (common-lisp:or cache-node-ids-list common-lisp:null)
                         :accessor
                         struct-shape-modify-cache-cluster-message-cache-node-ids-to-remove
                         :shape "CacheNodeIdsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (azmode :initarg :azmode :initform common-lisp:nil
                         :type (common-lisp:or azmode common-lisp:null)
                         :accessor
                         struct-shape-modify-cache-cluster-message-azmode
                         :shape "AZMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (new-availability-zones :initarg
                         :new-availability-zones :initform common-lisp:nil
                         :type
                         (common-lisp:or preferred-availability-zone-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-cache-cluster-message-new-availability-zones
                         :shape "PreferredAvailabilityZoneList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cache-security-group-names :initarg
                         :cache-security-group-names :initform common-lisp:nil
                         :type
                         (common-lisp:or cache-security-group-name-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-cache-cluster-message-cache-security-group-names
                         :shape "CacheSecurityGroupNameList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (security-group-ids :initarg :security-group-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or security-group-ids-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-cache-cluster-message-security-group-ids
                         :shape "SecurityGroupIdsList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (preferred-maintenance-window :initarg
                         :preferred-maintenance-window :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-cache-cluster-message-preferred-maintenance-window
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notification-topic-arn :initarg
                         :notification-topic-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-cache-cluster-message-notification-topic-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-parameter-group-name :initarg
                         :cache-parameter-group-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-cache-cluster-message-cache-parameter-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notification-topic-status :initarg
                         :notification-topic-status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-cache-cluster-message-notification-topic-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (apply-immediately :initarg :apply-immediately
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-modify-cache-cluster-message-apply-immediately
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-version :initarg :engine-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-cache-cluster-message-engine-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-minor-version-upgrade :initarg
                         :auto-minor-version-upgrade :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-cache-cluster-message-auto-minor-version-upgrade
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-retention-limit :initarg
                         :snapshot-retention-limit :initform common-lisp:nil
                         :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-cache-cluster-message-snapshot-retention-limit
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-window :initarg :snapshot-window :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-cache-cluster-message-snapshot-window
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-node-type :initarg :cache-node-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-cache-cluster-message-cache-node-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auth-token :initarg :auth-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-cache-cluster-message-auth-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auth-token-update-strategy :initarg
                         :auth-token-update-strategy :initform common-lisp:nil
                         :type
                         (common-lisp:or auth-token-update-strategy-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-cache-cluster-message-auth-token-update-strategy
                         :shape "AuthTokenUpdateStrategyType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (log-delivery-configurations :initarg
                         :log-delivery-configurations :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          log-delivery-configuration-request-list
                          common-lisp:null)
                         :accessor
                         struct-shape-modify-cache-cluster-message-log-delivery-configurations
                         :shape "LogDeliveryConfigurationRequestList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ip-discovery :initarg :ip-discovery :initform
                         common-lisp:nil :type
                         (common-lisp:or ip-discovery common-lisp:null)
                         :accessor
                         struct-shape-modify-cache-cluster-message-ip-discovery
                         :shape "IpDiscovery" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-cache-cluster-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'modify-cache-cluster-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-cache-cluster-message
                    'make-modify-cache-cluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-cache-cluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-cache-cluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-cluster-id))
      (common-lisp:list
       (common-lisp:cons "CacheClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-cache-nodes))
      (common-lisp:list
       (common-lisp:cons "NumCacheNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-node-ids-to-remove))
      (common-lisp:list
       (common-lisp:cons "CacheNodeIdsToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'azmode))
      (common-lisp:list
       (common-lisp:cons "AZMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'new-availability-zones))
      (common-lisp:list
       (common-lisp:cons "NewAvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-security-group-names))
      (common-lisp:list
       (common-lisp:cons "CacheSecurityGroupNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-topic-arn))
      (common-lisp:list
       (common-lisp:cons "NotificationTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-topic-status))
      (common-lisp:list
       (common-lisp:cons "NotificationTopicStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-immediately))
      (common-lisp:list
       (common-lisp:cons "ApplyImmediately"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-minor-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AutoMinorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-retention-limit))
      (common-lisp:list
       (common-lisp:cons "SnapshotRetentionLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-window))
      (common-lisp:list
       (common-lisp:cons "SnapshotWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-node-type))
      (common-lisp:list
       (common-lisp:cons "CacheNodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-token))
      (common-lisp:list
       (common-lisp:cons "AuthToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auth-token-update-strategy))
      (common-lisp:list
       (common-lisp:cons "AuthTokenUpdateStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-delivery-configurations))
      (common-lisp:list
       (common-lisp:cons "LogDeliveryConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-discovery))
      (common-lisp:list
       (common-lisp:cons "IpDiscovery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-cache-cluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-cache-cluster-result common-lisp:nil
                       ((cache-cluster :initarg :cache-cluster :initform
                         common-lisp:nil :type
                         (common-lisp:or cache-cluster common-lisp:null)
                         :accessor
                         struct-shape-modify-cache-cluster-result-cache-cluster
                         :shape "CacheCluster" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-cache-cluster-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'modify-cache-cluster-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-cache-cluster-result
                    'make-modify-cache-cluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-cache-cluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-cache-cluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-cluster))
      (common-lisp:list
       (common-lisp:cons "CacheCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-cache-cluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-cache-parameter-group-message common-lisp:nil
                       ((cache-parameter-group-name :initarg
                         :cache-parameter-group-name :initform
                         (common-lisp:error
                          ":cache-parameter-group-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-cache-parameter-group-message-cache-parameter-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameter-name-values :initarg :parameter-name-values
                         :initform
                         (common-lisp:error
                          ":parameter-name-values is required")
                         :type
                         (common-lisp:or parameter-name-value-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-cache-parameter-group-message-parameter-name-values
                         :shape "ParameterNameValueList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-cache-parameter-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-cache-parameter-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-cache-parameter-group-message
                    'make-modify-cache-parameter-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-cache-parameter-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-cache-parameter-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-name-values))
      (common-lisp:list
       (common-lisp:cons "ParameterNameValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-cache-parameter-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-cache-subnet-group-message common-lisp:nil
                       ((cache-subnet-group-name :initarg
                         :cache-subnet-group-name :initform
                         (common-lisp:error
                          ":cache-subnet-group-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-cache-subnet-group-message-cache-subnet-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-subnet-group-description :initarg
                         :cache-subnet-group-description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-cache-subnet-group-message-cache-subnet-group-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subnet-ids :initarg :subnet-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or subnet-identifier-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-cache-subnet-group-message-subnet-ids
                         :shape "SubnetIdentifierList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-cache-subnet-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-cache-subnet-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-cache-subnet-group-message
                    'make-modify-cache-subnet-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-cache-subnet-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-cache-subnet-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-subnet-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-subnet-group-description))
      (common-lisp:list
       (common-lisp:cons "CacheSubnetGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-cache-subnet-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-cache-subnet-group-result common-lisp:nil
                       ((cache-subnet-group :initarg :cache-subnet-group
                         :initform common-lisp:nil :type
                         (common-lisp:or cache-subnet-group common-lisp:null)
                         :accessor
                         struct-shape-modify-cache-subnet-group-result-cache-subnet-group
                         :shape "CacheSubnetGroup" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-cache-subnet-group-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-cache-subnet-group-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-cache-subnet-group-result
                    'make-modify-cache-subnet-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-cache-subnet-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-cache-subnet-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-subnet-group))
      (common-lisp:list
       (common-lisp:cons "CacheSubnetGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-cache-subnet-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-global-replication-group-message common-lisp:nil
                       ((global-replication-group-id :initarg
                         :global-replication-group-id :initform
                         (common-lisp:error
                          ":global-replication-group-id is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-global-replication-group-message-global-replication-group-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (apply-immediately :initarg :apply-immediately
                         :initform
                         (common-lisp:error ":apply-immediately is required")
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-modify-global-replication-group-message-apply-immediately
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-node-type :initarg :cache-node-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-global-replication-group-message-cache-node-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-version :initarg :engine-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-global-replication-group-message-engine-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-parameter-group-name :initarg
                         :cache-parameter-group-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-global-replication-group-message-cache-parameter-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (global-replication-group-description :initarg
                         :global-replication-group-description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-global-replication-group-message-global-replication-group-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (automatic-failover-enabled :initarg
                         :automatic-failover-enabled :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-global-replication-group-message-automatic-failover-enabled
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-global-replication-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-global-replication-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-global-replication-group-message
                    'make-modify-global-replication-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-global-replication-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-global-replication-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-replication-group-id))
      (common-lisp:list
       (common-lisp:cons "GlobalReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-immediately))
      (common-lisp:list
       (common-lisp:cons "ApplyImmediately"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-node-type))
      (common-lisp:list
       (common-lisp:cons "CacheNodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-replication-group-description))
      (common-lisp:list
       (common-lisp:cons "GlobalReplicationGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automatic-failover-enabled))
      (common-lisp:list
       (common-lisp:cons "AutomaticFailoverEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-global-replication-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-global-replication-group-result common-lisp:nil
                       ((global-replication-group :initarg
                         :global-replication-group :initform common-lisp:nil
                         :type
                         (common-lisp:or global-replication-group
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-global-replication-group-result-global-replication-group
                         :shape "GlobalReplicationGroup" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-global-replication-group-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-global-replication-group-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-global-replication-group-result
                    'make-modify-global-replication-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-global-replication-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-global-replication-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-replication-group))
      (common-lisp:list
       (common-lisp:cons "GlobalReplicationGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-global-replication-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-replication-group-message common-lisp:nil
                       ((replication-group-id :initarg :replication-group-id
                         :initform
                         (common-lisp:error
                          ":replication-group-id is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-replication-group-message-replication-group-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-group-description :initarg
                         :replication-group-description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-replication-group-message-replication-group-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (primary-cluster-id :initarg :primary-cluster-id
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-replication-group-message-primary-cluster-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshotting-cluster-id :initarg
                         :snapshotting-cluster-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-replication-group-message-snapshotting-cluster-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (automatic-failover-enabled :initarg
                         :automatic-failover-enabled :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-replication-group-message-automatic-failover-enabled
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (multi-azenabled :initarg :multi-azenabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-replication-group-message-multi-azenabled
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (node-group-id :initarg :node-group-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-replication-group-message-node-group-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-security-group-names :initarg
                         :cache-security-group-names :initform common-lisp:nil
                         :type
                         (common-lisp:or cache-security-group-name-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-replication-group-message-cache-security-group-names
                         :shape "CacheSecurityGroupNameList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (security-group-ids :initarg :security-group-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or security-group-ids-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-replication-group-message-security-group-ids
                         :shape "SecurityGroupIdsList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (preferred-maintenance-window :initarg
                         :preferred-maintenance-window :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-replication-group-message-preferred-maintenance-window
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notification-topic-arn :initarg
                         :notification-topic-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-replication-group-message-notification-topic-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-parameter-group-name :initarg
                         :cache-parameter-group-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-replication-group-message-cache-parameter-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notification-topic-status :initarg
                         :notification-topic-status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-replication-group-message-notification-topic-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (apply-immediately :initarg :apply-immediately
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-modify-replication-group-message-apply-immediately
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-version :initarg :engine-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-replication-group-message-engine-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-minor-version-upgrade :initarg
                         :auto-minor-version-upgrade :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-replication-group-message-auto-minor-version-upgrade
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-retention-limit :initarg
                         :snapshot-retention-limit :initform common-lisp:nil
                         :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-replication-group-message-snapshot-retention-limit
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-window :initarg :snapshot-window :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-replication-group-message-snapshot-window
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-node-type :initarg :cache-node-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-replication-group-message-cache-node-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auth-token :initarg :auth-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-replication-group-message-auth-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auth-token-update-strategy :initarg
                         :auth-token-update-strategy :initform common-lisp:nil
                         :type
                         (common-lisp:or auth-token-update-strategy-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-replication-group-message-auth-token-update-strategy
                         :shape "AuthTokenUpdateStrategyType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (user-group-ids-to-add :initarg :user-group-ids-to-add
                         :initform common-lisp:nil :type
                         (common-lisp:or user-group-id-list common-lisp:null)
                         :accessor
                         struct-shape-modify-replication-group-message-user-group-ids-to-add
                         :shape "UserGroupIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-group-ids-to-remove :initarg
                         :user-group-ids-to-remove :initform common-lisp:nil
                         :type
                         (common-lisp:or user-group-id-list common-lisp:null)
                         :accessor
                         struct-shape-modify-replication-group-message-user-group-ids-to-remove
                         :shape "UserGroupIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (remove-user-groups :initarg :remove-user-groups
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-replication-group-message-remove-user-groups
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-delivery-configurations :initarg
                         :log-delivery-configurations :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          log-delivery-configuration-request-list
                          common-lisp:null)
                         :accessor
                         struct-shape-modify-replication-group-message-log-delivery-configurations
                         :shape "LogDeliveryConfigurationRequestList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ip-discovery :initarg :ip-discovery :initform
                         common-lisp:nil :type
                         (common-lisp:or ip-discovery common-lisp:null)
                         :accessor
                         struct-shape-modify-replication-group-message-ip-discovery
                         :shape "IpDiscovery" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transit-encryption-enabled :initarg
                         :transit-encryption-enabled :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-replication-group-message-transit-encryption-enabled
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transit-encryption-mode :initarg
                         :transit-encryption-mode :initform common-lisp:nil
                         :type
                         (common-lisp:or transit-encryption-mode
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-replication-group-message-transit-encryption-mode
                         :shape "TransitEncryptionMode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cluster-mode :initarg :cluster-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or cluster-mode common-lisp:null)
                         :accessor
                         struct-shape-modify-replication-group-message-cluster-mode
                         :shape "ClusterMode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-replication-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-replication-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-replication-group-message
                    'make-modify-replication-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-replication-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-replication-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-id))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-description))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary-cluster-id))
      (common-lisp:list
       (common-lisp:cons "PrimaryClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshotting-cluster-id))
      (common-lisp:list
       (common-lisp:cons "SnapshottingClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automatic-failover-enabled))
      (common-lisp:list
       (common-lisp:cons "AutomaticFailoverEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-azenabled))
      (common-lisp:list
       (common-lisp:cons "MultiAZEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-group-id))
      (common-lisp:list
       (common-lisp:cons "NodeGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-security-group-names))
      (common-lisp:list
       (common-lisp:cons "CacheSecurityGroupNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-topic-arn))
      (common-lisp:list
       (common-lisp:cons "NotificationTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-topic-status))
      (common-lisp:list
       (common-lisp:cons "NotificationTopicStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-immediately))
      (common-lisp:list
       (common-lisp:cons "ApplyImmediately"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-minor-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AutoMinorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-retention-limit))
      (common-lisp:list
       (common-lisp:cons "SnapshotRetentionLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-window))
      (common-lisp:list
       (common-lisp:cons "SnapshotWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-node-type))
      (common-lisp:list
       (common-lisp:cons "CacheNodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-token))
      (common-lisp:list
       (common-lisp:cons "AuthToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auth-token-update-strategy))
      (common-lisp:list
       (common-lisp:cons "AuthTokenUpdateStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-group-ids-to-add))
      (common-lisp:list
       (common-lisp:cons "UserGroupIdsToAdd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-group-ids-to-remove))
      (common-lisp:list
       (common-lisp:cons "UserGroupIdsToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remove-user-groups))
      (common-lisp:list
       (common-lisp:cons "RemoveUserGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-delivery-configurations))
      (common-lisp:list
       (common-lisp:cons "LogDeliveryConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-discovery))
      (common-lisp:list
       (common-lisp:cons "IpDiscovery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-encryption-enabled))
      (common-lisp:list
       (common-lisp:cons "TransitEncryptionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-encryption-mode))
      (common-lisp:list
       (common-lisp:cons "TransitEncryptionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-mode))
      (common-lisp:list
       (common-lisp:cons "ClusterMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-replication-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-replication-group-result common-lisp:nil
                       ((replication-group :initarg :replication-group
                         :initform common-lisp:nil :type
                         (common-lisp:or replication-group common-lisp:null)
                         :accessor
                         struct-shape-modify-replication-group-result-replication-group
                         :shape "ReplicationGroup" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-replication-group-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-replication-group-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-replication-group-result
                    'make-modify-replication-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-replication-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-replication-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-group))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-replication-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-replication-group-shard-configuration-message
                       common-lisp:nil
                       ((replication-group-id :initarg :replication-group-id
                         :initform
                         (common-lisp:error
                          ":replication-group-id is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-replication-group-shard-configuration-message-replication-group-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (node-group-count :initarg :node-group-count :initform
                         (common-lisp:error ":node-group-count is required")
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-modify-replication-group-shard-configuration-message-node-group-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (apply-immediately :initarg :apply-immediately
                         :initform
                         (common-lisp:error ":apply-immediately is required")
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-modify-replication-group-shard-configuration-message-apply-immediately
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resharding-configuration :initarg
                         :resharding-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or resharding-configuration-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-replication-group-shard-configuration-message-resharding-configuration
                         :shape "ReshardingConfigurationList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (node-groups-to-remove :initarg :node-groups-to-remove
                         :initform common-lisp:nil :type
                         (common-lisp:or node-groups-to-remove-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-replication-group-shard-configuration-message-node-groups-to-remove
                         :shape "NodeGroupsToRemoveList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (node-groups-to-retain :initarg :node-groups-to-retain
                         :initform common-lisp:nil :type
                         (common-lisp:or node-groups-to-retain-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-replication-group-shard-configuration-message-node-groups-to-retain
                         :shape "NodeGroupsToRetainList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-replication-group-shard-configuration-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-replication-group-shard-configuration-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-replication-group-shard-configuration-message
                    'make-modify-replication-group-shard-configuration-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-replication-group-shard-configuration-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-replication-group-shard-configuration-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-id))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-group-count))
      (common-lisp:list
       (common-lisp:cons "NodeGroupCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-immediately))
      (common-lisp:list
       (common-lisp:cons "ApplyImmediately"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resharding-configuration))
      (common-lisp:list
       (common-lisp:cons "ReshardingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'node-groups-to-remove))
      (common-lisp:list
       (common-lisp:cons "NodeGroupsToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'node-groups-to-retain))
      (common-lisp:list
       (common-lisp:cons "NodeGroupsToRetain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-replication-group-shard-configuration-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-replication-group-shard-configuration-result
                       common-lisp:nil
                       ((replication-group :initarg :replication-group
                         :initform common-lisp:nil :type
                         (common-lisp:or replication-group common-lisp:null)
                         :accessor
                         struct-shape-modify-replication-group-shard-configuration-result-replication-group
                         :shape "ReplicationGroup" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-replication-group-shard-configuration-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-replication-group-shard-configuration-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-replication-group-shard-configuration-result
                    'make-modify-replication-group-shard-configuration-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-replication-group-shard-configuration-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-replication-group-shard-configuration-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-group))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-replication-group-shard-configuration-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-serverless-cache-request common-lisp:nil
                       ((serverless-cache-name :initarg :serverless-cache-name
                         :initform
                         (common-lisp:error
                          ":serverless-cache-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-serverless-cache-request-serverless-cache-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-serverless-cache-request-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-usage-limits :initarg :cache-usage-limits
                         :initform common-lisp:nil :type
                         (common-lisp:or cache-usage-limits common-lisp:null)
                         :accessor
                         struct-shape-modify-serverless-cache-request-cache-usage-limits
                         :shape "CacheUsageLimits" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (remove-user-group :initarg :remove-user-group
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-serverless-cache-request-remove-user-group
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-group-id :initarg :user-group-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-serverless-cache-request-user-group-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (security-group-ids :initarg :security-group-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or security-group-ids-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-serverless-cache-request-security-group-ids
                         :shape "SecurityGroupIdsList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (snapshot-retention-limit :initarg
                         :snapshot-retention-limit :initform common-lisp:nil
                         :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-serverless-cache-request-snapshot-retention-limit
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (daily-snapshot-time :initarg :daily-snapshot-time
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-serverless-cache-request-daily-snapshot-time
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-serverless-cache-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-serverless-cache-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-serverless-cache-request
                    'make-modify-serverless-cache-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-serverless-cache-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-serverless-cache-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'serverless-cache-name))
      (common-lisp:list
       (common-lisp:cons "ServerlessCacheName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-usage-limits))
      (common-lisp:list
       (common-lisp:cons "CacheUsageLimits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remove-user-group))
      (common-lisp:list
       (common-lisp:cons "RemoveUserGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-group-id))
      (common-lisp:list
       (common-lisp:cons "UserGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-retention-limit))
      (common-lisp:list
       (common-lisp:cons "SnapshotRetentionLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'daily-snapshot-time))
      (common-lisp:list
       (common-lisp:cons "DailySnapshotTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-serverless-cache-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-serverless-cache-response common-lisp:nil
                       ((serverless-cache :initarg :serverless-cache :initform
                         common-lisp:nil :type
                         (common-lisp:or serverless-cache common-lisp:null)
                         :accessor
                         struct-shape-modify-serverless-cache-response-serverless-cache
                         :shape "ServerlessCache" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-serverless-cache-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-serverless-cache-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-serverless-cache-response
                    'make-modify-serverless-cache-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-serverless-cache-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-serverless-cache-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serverless-cache))
      (common-lisp:list
       (common-lisp:cons "ServerlessCache"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-serverless-cache-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-user-group-message common-lisp:nil
                       ((user-group-id :initarg :user-group-id :initform
                         (common-lisp:error ":user-group-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-user-group-message-user-group-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-ids-to-add :initarg :user-ids-to-add :initform
                         common-lisp:nil :type
                         (common-lisp:or user-id-list-input common-lisp:null)
                         :accessor
                         struct-shape-modify-user-group-message-user-ids-to-add
                         :shape "UserIdListInput" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-ids-to-remove :initarg :user-ids-to-remove
                         :initform common-lisp:nil :type
                         (common-lisp:or user-id-list-input common-lisp:null)
                         :accessor
                         struct-shape-modify-user-group-message-user-ids-to-remove
                         :shape "UserIdListInput" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-user-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'modify-user-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-user-group-message
                    'make-modify-user-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-user-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-user-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-group-id))
      (common-lisp:list
       (common-lisp:cons "UserGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-ids-to-add))
      (common-lisp:list
       (common-lisp:cons "UserIdsToAdd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-ids-to-remove))
      (common-lisp:list
       (common-lisp:cons "UserIdsToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-user-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-user-message common-lisp:nil
                       ((user-id :initarg :user-id :initform
                         (common-lisp:error ":user-id is required") :type
                         (common-lisp:or user-id common-lisp:null) :accessor
                         struct-shape-modify-user-message-user-id :shape
                         "UserId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (access-string :initarg :access-string :initform
                         common-lisp:nil :type
                         (common-lisp:or access-string common-lisp:null)
                         :accessor
                         struct-shape-modify-user-message-access-string :shape
                         "AccessString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (append-access-string :initarg :append-access-string
                         :initform common-lisp:nil :type
                         (common-lisp:or access-string common-lisp:null)
                         :accessor
                         struct-shape-modify-user-message-append-access-string
                         :shape "AccessString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (passwords :initarg :passwords :initform
                         common-lisp:nil :type
                         (common-lisp:or password-list-input common-lisp:null)
                         :accessor struct-shape-modify-user-message-passwords
                         :shape "PasswordListInput" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (no-password-required :initarg :no-password-required
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-user-message-no-password-required
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (authentication-mode :initarg :authentication-mode
                         :initform common-lisp:nil :type
                         (common-lisp:or authentication-mode common-lisp:null)
                         :accessor
                         struct-shape-modify-user-message-authentication-mode
                         :shape "AuthenticationMode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-user-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'modify-user-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-user-message 'make-modify-user-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input modify-user-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input modify-user-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-string))
      (common-lisp:list
       (common-lisp:cons "AccessString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'append-access-string))
      (common-lisp:list
       (common-lisp:cons "AppendAccessString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'passwords))
      (common-lisp:list
       (common-lisp:cons "Passwords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'no-password-required))
      (common-lisp:list
       (common-lisp:cons "NoPasswordRequired"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication-mode))
      (common-lisp:list
       (common-lisp:cons "AuthenticationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input modify-user-message))
   common-lisp:nil))
(common-lisp:deftype multi-azstatus () 'common-lisp:string)
(common-lisp:deftype network-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype network-type-list ()
   '(trivial-types:proper-list network-type))
 (common-lisp:defun make-network-type-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list network-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition no-operation-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'no-operation-fault)))
(common-lisp:progn
 (common-lisp:defclass node-group common-lisp:nil
                       ((node-group-id :initarg :node-group-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-node-group-node-group-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-node-group-status :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (primary-endpoint :initarg :primary-endpoint :initform
                         common-lisp:nil :type
                         (common-lisp:or endpoint common-lisp:null) :accessor
                         struct-shape-node-group-primary-endpoint :shape
                         "Endpoint" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (reader-endpoint :initarg :reader-endpoint :initform
                         common-lisp:nil :type
                         (common-lisp:or endpoint common-lisp:null) :accessor
                         struct-shape-node-group-reader-endpoint :shape
                         "Endpoint" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (slots :initarg :slots :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-node-group-slots :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (node-group-members :initarg :node-group-members
                         :initform common-lisp:nil :type
                         (common-lisp:or node-group-member-list
                                         common-lisp:null)
                         :accessor struct-shape-node-group-node-group-members
                         :shape "NodeGroupMemberList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-node-group
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'node-group
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'node-group 'make-node-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input node-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input node-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-group-id))
      (common-lisp:list
       (common-lisp:cons "NodeGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary-endpoint))
      (common-lisp:list
       (common-lisp:cons "PrimaryEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reader-endpoint))
      (common-lisp:list
       (common-lisp:cons "ReaderEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slots))
      (common-lisp:list
       (common-lisp:cons "Slots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-group-members))
      (common-lisp:list
       (common-lisp:cons "NodeGroupMembers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input node-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass node-group-configuration common-lisp:nil
                       ((node-group-id :initarg :node-group-id :initform
                         common-lisp:nil :type
                         (common-lisp:or allowed-node-group-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-node-group-configuration-node-group-id
                         :shape "AllowedNodeGroupId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (slots :initarg :slots :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-node-group-configuration-slots :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (replica-count :initarg :replica-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-node-group-configuration-replica-count
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (primary-availability-zone :initarg
                         :primary-availability-zone :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-node-group-configuration-primary-availability-zone
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replica-availability-zones :initarg
                         :replica-availability-zones :initform common-lisp:nil
                         :type
                         (common-lisp:or availability-zones-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-node-group-configuration-replica-availability-zones
                         :shape "AvailabilityZonesList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (primary-outpost-arn :initarg :primary-outpost-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-node-group-configuration-primary-outpost-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replica-outpost-arns :initarg :replica-outpost-arns
                         :initform common-lisp:nil :type
                         (common-lisp:or outpost-arns-list common-lisp:null)
                         :accessor
                         struct-shape-node-group-configuration-replica-outpost-arns
                         :shape "OutpostArnsList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-node-group-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'node-group-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'node-group-configuration 'make-node-group-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          node-group-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          node-group-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-group-id))
      (common-lisp:list
       (common-lisp:cons "NodeGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slots))
      (common-lisp:list
       (common-lisp:cons "Slots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replica-count))
      (common-lisp:list
       (common-lisp:cons "ReplicaCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'primary-availability-zone))
      (common-lisp:list
       (common-lisp:cons "PrimaryAvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replica-availability-zones))
      (common-lisp:list
       (common-lisp:cons "ReplicaAvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary-outpost-arn))
      (common-lisp:list
       (common-lisp:cons "PrimaryOutpostArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replica-outpost-arns))
      (common-lisp:list
       (common-lisp:cons "ReplicaOutpostArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          node-group-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype node-group-configuration-list ()
   '(trivial-types:proper-list node-group-configuration))
 (common-lisp:defun make-node-group-configuration-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            node-group-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype node-group-list ()
   '(trivial-types:proper-list node-group))
 (common-lisp:defun make-node-group-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list node-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass node-group-member common-lisp:nil
                       ((cache-cluster-id :initarg :cache-cluster-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-node-group-member-cache-cluster-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cache-node-id :initarg :cache-node-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-node-group-member-cache-node-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (read-endpoint :initarg :read-endpoint :initform
                         common-lisp:nil :type
                         (common-lisp:or endpoint common-lisp:null) :accessor
                         struct-shape-node-group-member-read-endpoint :shape
                         "Endpoint" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (preferred-availability-zone :initarg
                         :preferred-availability-zone :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-node-group-member-preferred-availability-zone
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (preferred-outpost-arn :initarg :preferred-outpost-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-node-group-member-preferred-outpost-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (current-role :initarg :current-role :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-node-group-member-current-role :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-node-group-member
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'node-group-member
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'node-group-member 'make-node-group-member))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input node-group-member))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input node-group-member))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-cluster-id))
      (common-lisp:list
       (common-lisp:cons "CacheClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-node-id))
      (common-lisp:list
       (common-lisp:cons "CacheNodeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'read-endpoint))
      (common-lisp:list
       (common-lisp:cons "ReadEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-availability-zone))
      (common-lisp:list
       (common-lisp:cons "PreferredAvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-outpost-arn))
      (common-lisp:list
       (common-lisp:cons "PreferredOutpostArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-role))
      (common-lisp:list
       (common-lisp:cons "CurrentRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input node-group-member))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype node-group-member-list ()
   '(trivial-types:proper-list node-group-member))
 (common-lisp:defun make-node-group-member-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list node-group-member))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass node-group-member-update-status common-lisp:nil
                       ((cache-cluster-id :initarg :cache-cluster-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-node-group-member-update-status-cache-cluster-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-node-id :initarg :cache-node-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-node-group-member-update-status-cache-node-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (node-update-status :initarg :node-update-status
                         :initform common-lisp:nil :type
                         (common-lisp:or node-update-status common-lisp:null)
                         :accessor
                         struct-shape-node-group-member-update-status-node-update-status
                         :shape "NodeUpdateStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (node-deletion-date :initarg :node-deletion-date
                         :initform common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-node-group-member-update-status-node-deletion-date
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (node-update-start-date :initarg
                         :node-update-start-date :initform common-lisp:nil
                         :type (common-lisp:or tstamp common-lisp:null)
                         :accessor
                         struct-shape-node-group-member-update-status-node-update-start-date
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (node-update-end-date :initarg :node-update-end-date
                         :initform common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-node-group-member-update-status-node-update-end-date
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (node-update-initiated-by :initarg
                         :node-update-initiated-by :initform common-lisp:nil
                         :type
                         (common-lisp:or node-update-initiated-by
                                         common-lisp:null)
                         :accessor
                         struct-shape-node-group-member-update-status-node-update-initiated-by
                         :shape "NodeUpdateInitiatedBy" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (node-update-initiated-date :initarg
                         :node-update-initiated-date :initform common-lisp:nil
                         :type (common-lisp:or tstamp common-lisp:null)
                         :accessor
                         struct-shape-node-group-member-update-status-node-update-initiated-date
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (node-update-status-modified-date :initarg
                         :node-update-status-modified-date :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-node-group-member-update-status-node-update-status-modified-date
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-node-group-member-update-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'node-group-member-update-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'node-group-member-update-status
                    'make-node-group-member-update-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          node-group-member-update-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          node-group-member-update-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-cluster-id))
      (common-lisp:list
       (common-lisp:cons "CacheClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-node-id))
      (common-lisp:list
       (common-lisp:cons "CacheNodeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-update-status))
      (common-lisp:list
       (common-lisp:cons "NodeUpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-deletion-date))
      (common-lisp:list
       (common-lisp:cons "NodeDeletionDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'node-update-start-date))
      (common-lisp:list
       (common-lisp:cons "NodeUpdateStartDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'node-update-end-date))
      (common-lisp:list
       (common-lisp:cons "NodeUpdateEndDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'node-update-initiated-by))
      (common-lisp:list
       (common-lisp:cons "NodeUpdateInitiatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'node-update-initiated-date))
      (common-lisp:list
       (common-lisp:cons "NodeUpdateInitiatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'node-update-status-modified-date))
      (common-lisp:list
       (common-lisp:cons "NodeUpdateStatusModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          node-group-member-update-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype node-group-member-update-status-list ()
   '(trivial-types:proper-list node-group-member-update-status))
 (common-lisp:defun make-node-group-member-update-status-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            node-group-member-update-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition node-group-not-found-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'node-group-not-found-fault)))
(common-lisp:progn
 (common-lisp:defclass node-group-update-status common-lisp:nil
                       ((node-group-id :initarg :node-group-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-node-group-update-status-node-group-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (node-group-member-update-status :initarg
                         :node-group-member-update-status :initform
                         common-lisp:nil :type
                         (common-lisp:or node-group-member-update-status-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-node-group-update-status-node-group-member-update-status
                         :shape "NodeGroupMemberUpdateStatusList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-node-group-update-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'node-group-update-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'node-group-update-status 'make-node-group-update-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          node-group-update-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          node-group-update-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-group-id))
      (common-lisp:list
       (common-lisp:cons "NodeGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'node-group-member-update-status))
      (common-lisp:list
       (common-lisp:cons "NodeGroupMemberUpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          node-group-update-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype node-group-update-status-list ()
   '(trivial-types:proper-list node-group-update-status))
 (common-lisp:defun make-node-group-update-status-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            node-group-update-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition node-groups-per-replication-group-quota-exceeded-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'node-groups-per-replication-group-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:deftype node-groups-to-remove-list ()
   '(trivial-types:proper-list allowed-node-group-id))
 (common-lisp:defun make-node-groups-to-remove-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list allowed-node-group-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype node-groups-to-retain-list ()
   '(trivial-types:proper-list allowed-node-group-id))
 (common-lisp:defun make-node-groups-to-retain-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list allowed-node-group-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition node-quota-for-cluster-exceeded-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'node-quota-for-cluster-exceeded-fault)))
(common-lisp:progn
 (common-lisp:define-condition node-quota-for-customer-exceeded-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'node-quota-for-customer-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defclass node-snapshot common-lisp:nil
                       ((cache-cluster-id :initarg :cache-cluster-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-node-snapshot-cache-cluster-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (node-group-id :initarg :node-group-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-node-snapshot-node-group-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cache-node-id :initarg :cache-node-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-node-snapshot-cache-node-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (node-group-configuration :initarg
                         :node-group-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or node-group-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-node-snapshot-node-group-configuration
                         :shape "NodeGroupConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cache-size :initarg :cache-size :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-node-snapshot-cache-size :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cache-node-create-time :initarg
                         :cache-node-create-time :initform common-lisp:nil
                         :type (common-lisp:or tstamp common-lisp:null)
                         :accessor
                         struct-shape-node-snapshot-cache-node-create-time
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-create-time :initarg :snapshot-create-time
                         :initform common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-node-snapshot-snapshot-create-time :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-node-snapshot
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'node-snapshot
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'node-snapshot 'make-node-snapshot))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input node-snapshot))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input node-snapshot))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-cluster-id))
      (common-lisp:list
       (common-lisp:cons "CacheClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-group-id))
      (common-lisp:list
       (common-lisp:cons "NodeGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-node-id))
      (common-lisp:list
       (common-lisp:cons "CacheNodeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'node-group-configuration))
      (common-lisp:list
       (common-lisp:cons "NodeGroupConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-size))
      (common-lisp:list
       (common-lisp:cons "CacheSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-node-create-time))
      (common-lisp:list
       (common-lisp:cons "CacheNodeCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-create-time))
      (common-lisp:list
       (common-lisp:cons "SnapshotCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input node-snapshot))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype node-snapshot-list ()
   '(trivial-types:proper-list node-snapshot))
 (common-lisp:defun make-node-snapshot-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list node-snapshot))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype node-type-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-node-type-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype node-update-initiated-by () 'common-lisp:string)
(common-lisp:deftype node-update-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass notification-configuration common-lisp:nil
                       ((topic-arn :initarg :topic-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-notification-configuration-topic-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (topic-status :initarg :topic-status :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-notification-configuration-topic-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-notification-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'notification-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'notification-configuration
                    'make-notification-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-arn))
      (common-lisp:list
       (common-lisp:cons "TopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-status))
      (common-lisp:list
       (common-lisp:cons "TopicStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype outpost-arns-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-outpost-arns-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype outpost-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass parameter common-lisp:nil
                       ((parameter-name :initarg :parameter-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-parameter-parameter-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (parameter-value :initarg :parameter-value :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-parameter-parameter-value :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-parameter-description :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source :initarg :source :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-parameter-source :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (data-type :initarg :data-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-parameter-data-type :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (allowed-values :initarg :allowed-values :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-parameter-allowed-values :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (is-modifiable :initarg :is-modifiable :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-parameter-is-modifiable :shape "Boolean"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (minimum-engine-version :initarg
                         :minimum-engine-version :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-parameter-minimum-engine-version :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (change-type :initarg :change-type :initform
                         common-lisp:nil :type
                         (common-lisp:or change-type common-lisp:null)
                         :accessor struct-shape-parameter-change-type :shape
                         "ChangeType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-parameter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'parameter
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'parameter 'make-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-name))
      (common-lisp:list
       (common-lisp:cons "ParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-value))
      (common-lisp:list
       (common-lisp:cons "ParameterValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "DataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-values))
      (common-lisp:list
       (common-lisp:cons "AllowedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-modifiable))
      (common-lisp:list
       (common-lisp:cons "IsModifiable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-engine-version))
      (common-lisp:list
       (common-lisp:cons "MinimumEngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-type))
      (common-lisp:list
       (common-lisp:cons "ChangeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass parameter-name-value common-lisp:nil
                       ((parameter-name :initarg :parameter-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-parameter-name-value-parameter-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameter-value :initarg :parameter-value :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-parameter-name-value-parameter-value
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-parameter-name-value
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'parameter-name-value
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'parameter-name-value 'make-parameter-name-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input parameter-name-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input parameter-name-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-name))
      (common-lisp:list
       (common-lisp:cons "ParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-value))
      (common-lisp:list
       (common-lisp:cons "ParameterValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input parameter-name-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype parameter-name-value-list ()
   '(trivial-types:proper-list parameter-name-value))
 (common-lisp:defun make-parameter-name-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parameter-name-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype parameters-list ()
   '(trivial-types:proper-list parameter))
 (common-lisp:defun make-parameters-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parameter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype password-list-input ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-password-list-input
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype pending-automatic-failover-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass pending-log-delivery-configuration common-lisp:nil
                       ((log-type :initarg :log-type :initform common-lisp:nil
                         :type (common-lisp:or log-type common-lisp:null)
                         :accessor
                         struct-shape-pending-log-delivery-configuration-log-type
                         :shape "LogType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (destination-type :initarg :destination-type :initform
                         common-lisp:nil :type
                         (common-lisp:or destination-type common-lisp:null)
                         :accessor
                         struct-shape-pending-log-delivery-configuration-destination-type
                         :shape "DestinationType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (destination-details :initarg :destination-details
                         :initform common-lisp:nil :type
                         (common-lisp:or destination-details common-lisp:null)
                         :accessor
                         struct-shape-pending-log-delivery-configuration-destination-details
                         :shape "DestinationDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-format :initarg :log-format :initform
                         common-lisp:nil :type
                         (common-lisp:or log-format common-lisp:null) :accessor
                         struct-shape-pending-log-delivery-configuration-log-format
                         :shape "LogFormat" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-pending-log-delivery-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'pending-log-delivery-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'pending-log-delivery-configuration
                    'make-pending-log-delivery-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pending-log-delivery-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pending-log-delivery-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-type))
      (common-lisp:list
       (common-lisp:cons "LogType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-type))
      (common-lisp:list
       (common-lisp:cons "DestinationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-details))
      (common-lisp:list
       (common-lisp:cons "DestinationDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-format))
      (common-lisp:list
       (common-lisp:cons "LogFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pending-log-delivery-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype pending-log-delivery-configuration-list ()
   '(trivial-types:proper-list pending-log-delivery-configuration))
 (common-lisp:defun make-pending-log-delivery-configuration-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            pending-log-delivery-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass pending-modified-values common-lisp:nil
                       ((num-cache-nodes :initarg :num-cache-nodes :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-pending-modified-values-num-cache-nodes
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-node-ids-to-remove :initarg
                         :cache-node-ids-to-remove :initform common-lisp:nil
                         :type
                         (common-lisp:or cache-node-ids-list common-lisp:null)
                         :accessor
                         struct-shape-pending-modified-values-cache-node-ids-to-remove
                         :shape "CacheNodeIdsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-version :initarg :engine-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-pending-modified-values-engine-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-node-type :initarg :cache-node-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-pending-modified-values-cache-node-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auth-token-status :initarg :auth-token-status
                         :initform common-lisp:nil :type
                         (common-lisp:or auth-token-update-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-pending-modified-values-auth-token-status
                         :shape "AuthTokenUpdateStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (log-delivery-configurations :initarg
                         :log-delivery-configurations :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          pending-log-delivery-configuration-list
                          common-lisp:null)
                         :accessor
                         struct-shape-pending-modified-values-log-delivery-configurations
                         :shape "PendingLogDeliveryConfigurationList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (transit-encryption-enabled :initarg
                         :transit-encryption-enabled :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-pending-modified-values-transit-encryption-enabled
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transit-encryption-mode :initarg
                         :transit-encryption-mode :initform common-lisp:nil
                         :type
                         (common-lisp:or transit-encryption-mode
                                         common-lisp:null)
                         :accessor
                         struct-shape-pending-modified-values-transit-encryption-mode
                         :shape "TransitEncryptionMode" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-pending-modified-values
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'pending-modified-values
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'pending-modified-values 'make-pending-modified-values))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pending-modified-values))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pending-modified-values))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-cache-nodes))
      (common-lisp:list
       (common-lisp:cons "NumCacheNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-node-ids-to-remove))
      (common-lisp:list
       (common-lisp:cons "CacheNodeIdsToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-node-type))
      (common-lisp:list
       (common-lisp:cons "CacheNodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-token-status))
      (common-lisp:list
       (common-lisp:cons "AuthTokenStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-delivery-configurations))
      (common-lisp:list
       (common-lisp:cons "LogDeliveryConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-encryption-enabled))
      (common-lisp:list
       (common-lisp:cons "TransitEncryptionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-encryption-mode))
      (common-lisp:list
       (common-lisp:cons "TransitEncryptionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pending-modified-values))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype preferred-availability-zone-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-preferred-availability-zone-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype preferred-outpost-arn-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-preferred-outpost-arn-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass processed-update-action common-lisp:nil
                       ((replication-group-id :initarg :replication-group-id
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-processed-update-action-replication-group-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-cluster-id :initarg :cache-cluster-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-processed-update-action-cache-cluster-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-update-name :initarg :service-update-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-processed-update-action-service-update-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (update-action-status :initarg :update-action-status
                         :initform common-lisp:nil :type
                         (common-lisp:or update-action-status common-lisp:null)
                         :accessor
                         struct-shape-processed-update-action-update-action-status
                         :shape "UpdateActionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-processed-update-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'processed-update-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'processed-update-action 'make-processed-update-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          processed-update-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          processed-update-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-id))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-cluster-id))
      (common-lisp:list
       (common-lisp:cons "CacheClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-update-name))
      (common-lisp:list
       (common-lisp:cons "ServiceUpdateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'update-action-status))
      (common-lisp:list
       (common-lisp:cons "UpdateActionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          processed-update-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype processed-update-action-list ()
   '(trivial-types:proper-list processed-update-action))
 (common-lisp:defun make-processed-update-action-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list processed-update-action))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass purchase-reserved-cache-nodes-offering-message
                       common-lisp:nil
                       ((reserved-cache-nodes-offering-id :initarg
                         :reserved-cache-nodes-offering-id :initform
                         (common-lisp:error
                          ":reserved-cache-nodes-offering-id is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-purchase-reserved-cache-nodes-offering-message-reserved-cache-nodes-offering-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reserved-cache-node-id :initarg
                         :reserved-cache-node-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-purchase-reserved-cache-nodes-offering-message-reserved-cache-node-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-node-count :initarg :cache-node-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-purchase-reserved-cache-nodes-offering-message-cache-node-count
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-purchase-reserved-cache-nodes-offering-message-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-purchase-reserved-cache-nodes-offering-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'purchase-reserved-cache-nodes-offering-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'purchase-reserved-cache-nodes-offering-message
                    'make-purchase-reserved-cache-nodes-offering-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-cache-nodes-offering-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-cache-nodes-offering-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-cache-nodes-offering-id))
      (common-lisp:list
       (common-lisp:cons "ReservedCacheNodesOfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-cache-node-id))
      (common-lisp:list
       (common-lisp:cons "ReservedCacheNodeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-node-count))
      (common-lisp:list
       (common-lisp:cons "CacheNodeCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-cache-nodes-offering-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass purchase-reserved-cache-nodes-offering-result
                       common-lisp:nil
                       ((reserved-cache-node :initarg :reserved-cache-node
                         :initform common-lisp:nil :type
                         (common-lisp:or reserved-cache-node common-lisp:null)
                         :accessor
                         struct-shape-purchase-reserved-cache-nodes-offering-result-reserved-cache-node
                         :shape "ReservedCacheNode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-purchase-reserved-cache-nodes-offering-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'purchase-reserved-cache-nodes-offering-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'purchase-reserved-cache-nodes-offering-result
                    'make-purchase-reserved-cache-nodes-offering-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-cache-nodes-offering-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-cache-nodes-offering-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reserved-cache-node))
      (common-lisp:list
       (common-lisp:cons "ReservedCacheNode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-cache-nodes-offering-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass rebalance-slots-in-global-replication-group-message
                       common-lisp:nil
                       ((global-replication-group-id :initarg
                         :global-replication-group-id :initform
                         (common-lisp:error
                          ":global-replication-group-id is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-rebalance-slots-in-global-replication-group-message-global-replication-group-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (apply-immediately :initarg :apply-immediately
                         :initform
                         (common-lisp:error ":apply-immediately is required")
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-rebalance-slots-in-global-replication-group-message-apply-immediately
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rebalance-slots-in-global-replication-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'rebalance-slots-in-global-replication-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'rebalance-slots-in-global-replication-group-message
                    'make-rebalance-slots-in-global-replication-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rebalance-slots-in-global-replication-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rebalance-slots-in-global-replication-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-replication-group-id))
      (common-lisp:list
       (common-lisp:cons "GlobalReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-immediately))
      (common-lisp:list
       (common-lisp:cons "ApplyImmediately"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rebalance-slots-in-global-replication-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass rebalance-slots-in-global-replication-group-result
                       common-lisp:nil
                       ((global-replication-group :initarg
                         :global-replication-group :initform common-lisp:nil
                         :type
                         (common-lisp:or global-replication-group
                                         common-lisp:null)
                         :accessor
                         struct-shape-rebalance-slots-in-global-replication-group-result-global-replication-group
                         :shape "GlobalReplicationGroup" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rebalance-slots-in-global-replication-group-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'rebalance-slots-in-global-replication-group-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'rebalance-slots-in-global-replication-group-result
                    'make-rebalance-slots-in-global-replication-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rebalance-slots-in-global-replication-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rebalance-slots-in-global-replication-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-replication-group))
      (common-lisp:list
       (common-lisp:cons "GlobalReplicationGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rebalance-slots-in-global-replication-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reboot-cache-cluster-message common-lisp:nil
                       ((cache-cluster-id :initarg :cache-cluster-id :initform
                         (common-lisp:error ":cache-cluster-id is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-reboot-cache-cluster-message-cache-cluster-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-node-ids-to-reboot :initarg
                         :cache-node-ids-to-reboot :initform
                         (common-lisp:error
                          ":cache-node-ids-to-reboot is required")
                         :type
                         (common-lisp:or cache-node-ids-list common-lisp:null)
                         :accessor
                         struct-shape-reboot-cache-cluster-message-cache-node-ids-to-reboot
                         :shape "CacheNodeIdsList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reboot-cache-cluster-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reboot-cache-cluster-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reboot-cache-cluster-message
                    'make-reboot-cache-cluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reboot-cache-cluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reboot-cache-cluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-cluster-id))
      (common-lisp:list
       (common-lisp:cons "CacheClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-node-ids-to-reboot))
      (common-lisp:list
       (common-lisp:cons "CacheNodeIdsToReboot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reboot-cache-cluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reboot-cache-cluster-result common-lisp:nil
                       ((cache-cluster :initarg :cache-cluster :initform
                         common-lisp:nil :type
                         (common-lisp:or cache-cluster common-lisp:null)
                         :accessor
                         struct-shape-reboot-cache-cluster-result-cache-cluster
                         :shape "CacheCluster" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reboot-cache-cluster-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reboot-cache-cluster-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reboot-cache-cluster-result
                    'make-reboot-cache-cluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reboot-cache-cluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reboot-cache-cluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-cluster))
      (common-lisp:list
       (common-lisp:cons "CacheCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reboot-cache-cluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass recurring-charge common-lisp:nil
                       ((recurring-charge-amount :initarg
                         :recurring-charge-amount :initform common-lisp:nil
                         :type (common-lisp:or double common-lisp:null)
                         :accessor
                         struct-shape-recurring-charge-recurring-charge-amount
                         :shape "Double" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (recurring-charge-frequency :initarg
                         :recurring-charge-frequency :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-recurring-charge-recurring-charge-frequency
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-recurring-charge
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'recurring-charge
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'recurring-charge 'make-recurring-charge))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input recurring-charge))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input recurring-charge))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recurring-charge-amount))
      (common-lisp:list
       (common-lisp:cons "RecurringChargeAmount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recurring-charge-frequency))
      (common-lisp:list
       (common-lisp:cons "RecurringChargeFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input recurring-charge))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype recurring-charge-list ()
   '(trivial-types:proper-list recurring-charge))
 (common-lisp:defun make-recurring-charge-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list recurring-charge))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass regional-configuration common-lisp:nil
                       ((replication-group-id :initarg :replication-group-id
                         :initform
                         (common-lisp:error
                          ":replication-group-id is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-regional-configuration-replication-group-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-group-region :initarg
                         :replication-group-region :initform
                         (common-lisp:error
                          ":replication-group-region is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-regional-configuration-replication-group-region
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resharding-configuration :initarg
                         :resharding-configuration :initform
                         (common-lisp:error
                          ":resharding-configuration is required")
                         :type
                         (common-lisp:or resharding-configuration-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-regional-configuration-resharding-configuration
                         :shape "ReshardingConfigurationList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-regional-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'regional-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'regional-configuration 'make-regional-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          regional-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          regional-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-id))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-region))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resharding-configuration))
      (common-lisp:list
       (common-lisp:cons "ReshardingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          regional-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype regional-configuration-list ()
   '(trivial-types:proper-list regional-configuration))
 (common-lisp:defun make-regional-configuration-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list regional-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype remove-replicas-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-remove-replicas-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass remove-tags-from-resource-message common-lisp:nil
                       ((resource-name :initarg :resource-name :initform
                         (common-lisp:error ":resource-name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-remove-tags-from-resource-message-resource-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tag-keys is required") :type
                         (common-lisp:or key-list common-lisp:null) :accessor
                         struct-shape-remove-tags-from-resource-message-tag-keys
                         :shape "KeyList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-tags-from-resource-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-tags-from-resource-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-tags-from-resource-message
                    'make-remove-tags-from-resource-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-tags-from-resource-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-tags-from-resource-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-tags-from-resource-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype replica-configuration-list ()
   '(trivial-types:proper-list configure-shard))
 (common-lisp:defun make-replica-configuration-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list configure-shard))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass replication-group common-lisp:nil
                       ((replication-group-id :initarg :replication-group-id
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-replication-group-replication-group-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-replication-group-description :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (global-replication-group-info :initarg
                         :global-replication-group-info :initform
                         common-lisp:nil :type
                         (common-lisp:or global-replication-group-info
                                         common-lisp:null)
                         :accessor
                         struct-shape-replication-group-global-replication-group-info
                         :shape "GlobalReplicationGroupInfo" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-replication-group-status :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (pending-modified-values :initarg
                         :pending-modified-values :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          replication-group-pending-modified-values
                          common-lisp:null)
                         :accessor
                         struct-shape-replication-group-pending-modified-values
                         :shape "ReplicationGroupPendingModifiedValues"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (member-clusters :initarg :member-clusters :initform
                         common-lisp:nil :type
                         (common-lisp:or cluster-id-list common-lisp:null)
                         :accessor
                         struct-shape-replication-group-member-clusters :shape
                         "ClusterIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (node-groups :initarg :node-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or node-group-list common-lisp:null)
                         :accessor struct-shape-replication-group-node-groups
                         :shape "NodeGroupList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshotting-cluster-id :initarg
                         :snapshotting-cluster-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-replication-group-snapshotting-cluster-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (automatic-failover :initarg :automatic-failover
                         :initform common-lisp:nil :type
                         (common-lisp:or automatic-failover-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-replication-group-automatic-failover
                         :shape "AutomaticFailoverStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (multi-az :initarg :multi-az :initform common-lisp:nil
                         :type (common-lisp:or multi-azstatus common-lisp:null)
                         :accessor struct-shape-replication-group-multi-az
                         :shape "MultiAZStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (configuration-endpoint :initarg
                         :configuration-endpoint :initform common-lisp:nil
                         :type (common-lisp:or endpoint common-lisp:null)
                         :accessor
                         struct-shape-replication-group-configuration-endpoint
                         :shape "Endpoint" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-retention-limit :initarg
                         :snapshot-retention-limit :initform common-lisp:nil
                         :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-replication-group-snapshot-retention-limit
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-window :initarg :snapshot-window :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-replication-group-snapshot-window :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cluster-enabled :initarg :cluster-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-replication-group-cluster-enabled :shape
                         "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-node-type :initarg :cache-node-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-replication-group-cache-node-type :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (auth-token-enabled :initarg :auth-token-enabled
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-replication-group-auth-token-enabled
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auth-token-last-modified-date :initarg
                         :auth-token-last-modified-date :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-replication-group-auth-token-last-modified-date
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transit-encryption-enabled :initarg
                         :transit-encryption-enabled :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-replication-group-transit-encryption-enabled
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (at-rest-encryption-enabled :initarg
                         :at-rest-encryption-enabled :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-replication-group-at-rest-encryption-enabled
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (member-clusters-outpost-arns :initarg
                         :member-clusters-outpost-arns :initform
                         common-lisp:nil :type
                         (common-lisp:or replication-group-outpost-arn-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-replication-group-member-clusters-outpost-arns
                         :shape "ReplicationGroupOutpostArnList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-replication-group-kms-key-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-replication-group-arn :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (user-group-ids :initarg :user-group-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or user-group-id-list common-lisp:null)
                         :accessor
                         struct-shape-replication-group-user-group-ids :shape
                         "UserGroupIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-delivery-configurations :initarg
                         :log-delivery-configurations :initform common-lisp:nil
                         :type
                         (common-lisp:or log-delivery-configuration-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-replication-group-log-delivery-configurations
                         :shape "LogDeliveryConfigurationList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (replication-group-create-time :initarg
                         :replication-group-create-time :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-replication-group-replication-group-create-time
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-tiering :initarg :data-tiering :initform
                         common-lisp:nil :type
                         (common-lisp:or data-tiering-status common-lisp:null)
                         :accessor struct-shape-replication-group-data-tiering
                         :shape "DataTieringStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-minor-version-upgrade :initarg
                         :auto-minor-version-upgrade :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-replication-group-auto-minor-version-upgrade
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (network-type :initarg :network-type :initform
                         common-lisp:nil :type
                         (common-lisp:or network-type common-lisp:null)
                         :accessor struct-shape-replication-group-network-type
                         :shape "NetworkType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ip-discovery :initarg :ip-discovery :initform
                         common-lisp:nil :type
                         (common-lisp:or ip-discovery common-lisp:null)
                         :accessor struct-shape-replication-group-ip-discovery
                         :shape "IpDiscovery" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transit-encryption-mode :initarg
                         :transit-encryption-mode :initform common-lisp:nil
                         :type
                         (common-lisp:or transit-encryption-mode
                                         common-lisp:null)
                         :accessor
                         struct-shape-replication-group-transit-encryption-mode
                         :shape "TransitEncryptionMode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cluster-mode :initarg :cluster-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or cluster-mode common-lisp:null)
                         :accessor struct-shape-replication-group-cluster-mode
                         :shape "ClusterMode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-replication-group
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'replication-group
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'replication-group 'make-replication-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input replication-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input replication-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-id))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-replication-group-info))
      (common-lisp:list
       (common-lisp:cons "GlobalReplicationGroupInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pending-modified-values))
      (common-lisp:list
       (common-lisp:cons "PendingModifiedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-clusters))
      (common-lisp:list
       (common-lisp:cons "MemberClusters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-groups))
      (common-lisp:list
       (common-lisp:cons "NodeGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshotting-cluster-id))
      (common-lisp:list
       (common-lisp:cons "SnapshottingClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'automatic-failover))
      (common-lisp:list
       (common-lisp:cons "AutomaticFailover"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-az))
      (common-lisp:list
       (common-lisp:cons "MultiAZ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-endpoint))
      (common-lisp:list
       (common-lisp:cons "ConfigurationEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-retention-limit))
      (common-lisp:list
       (common-lisp:cons "SnapshotRetentionLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-window))
      (common-lisp:list
       (common-lisp:cons "SnapshotWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-enabled))
      (common-lisp:list
       (common-lisp:cons "ClusterEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-node-type))
      (common-lisp:list
       (common-lisp:cons "CacheNodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-token-enabled))
      (common-lisp:list
       (common-lisp:cons "AuthTokenEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auth-token-last-modified-date))
      (common-lisp:list
       (common-lisp:cons "AuthTokenLastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-encryption-enabled))
      (common-lisp:list
       (common-lisp:cons "TransitEncryptionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'at-rest-encryption-enabled))
      (common-lisp:list
       (common-lisp:cons "AtRestEncryptionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'member-clusters-outpost-arns))
      (common-lisp:list
       (common-lisp:cons "MemberClustersOutpostArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-group-ids))
      (common-lisp:list
       (common-lisp:cons "UserGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-delivery-configurations))
      (common-lisp:list
       (common-lisp:cons "LogDeliveryConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-create-time))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-tiering))
      (common-lisp:list
       (common-lisp:cons "DataTiering"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-minor-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AutoMinorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-type))
      (common-lisp:list
       (common-lisp:cons "NetworkType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-discovery))
      (common-lisp:list
       (common-lisp:cons "IpDiscovery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-encryption-mode))
      (common-lisp:list
       (common-lisp:cons "TransitEncryptionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-mode))
      (common-lisp:list
       (common-lisp:cons "ClusterMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input replication-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition replication-group-already-exists-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'replication-group-already-exists-fault)))
(common-lisp:progn
 (common-lisp:define-condition replication-group-already-under-migration-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'replication-group-already-under-migration-fault)))
(common-lisp:progn
 (common-lisp:deftype replication-group-id-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-replication-group-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype replication-group-list ()
   '(trivial-types:proper-list replication-group))
 (common-lisp:defun make-replication-group-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list replication-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass replication-group-message common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-replication-group-message-marker :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (replication-groups :initarg :replication-groups
                         :initform common-lisp:nil :type
                         (common-lisp:or replication-group-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-replication-group-message-replication-groups
                         :shape "ReplicationGroupList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-replication-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'replication-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'replication-group-message
                    'make-replication-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replication-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replication-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-groups))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replication-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition replication-group-not-found-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'replication-group-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition replication-group-not-under-migration-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'replication-group-not-under-migration-fault)))
(common-lisp:progn
 (common-lisp:deftype replication-group-outpost-arn-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-replication-group-outpost-arn-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass replication-group-pending-modified-values
                       common-lisp:nil
                       ((primary-cluster-id :initarg :primary-cluster-id
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-replication-group-pending-modified-values-primary-cluster-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (automatic-failover-status :initarg
                         :automatic-failover-status :initform common-lisp:nil
                         :type
                         (common-lisp:or pending-automatic-failover-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-replication-group-pending-modified-values-automatic-failover-status
                         :shape "PendingAutomaticFailoverStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (resharding :initarg :resharding :initform
                         common-lisp:nil :type
                         (common-lisp:or resharding-status common-lisp:null)
                         :accessor
                         struct-shape-replication-group-pending-modified-values-resharding
                         :shape "ReshardingStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auth-token-status :initarg :auth-token-status
                         :initform common-lisp:nil :type
                         (common-lisp:or auth-token-update-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-replication-group-pending-modified-values-auth-token-status
                         :shape "AuthTokenUpdateStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (user-groups :initarg :user-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or user-groups-update-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-replication-group-pending-modified-values-user-groups
                         :shape "UserGroupsUpdateStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (log-delivery-configurations :initarg
                         :log-delivery-configurations :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          pending-log-delivery-configuration-list
                          common-lisp:null)
                         :accessor
                         struct-shape-replication-group-pending-modified-values-log-delivery-configurations
                         :shape "PendingLogDeliveryConfigurationList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (transit-encryption-enabled :initarg
                         :transit-encryption-enabled :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-replication-group-pending-modified-values-transit-encryption-enabled
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transit-encryption-mode :initarg
                         :transit-encryption-mode :initform common-lisp:nil
                         :type
                         (common-lisp:or transit-encryption-mode
                                         common-lisp:null)
                         :accessor
                         struct-shape-replication-group-pending-modified-values-transit-encryption-mode
                         :shape "TransitEncryptionMode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cluster-mode :initarg :cluster-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or cluster-mode common-lisp:null)
                         :accessor
                         struct-shape-replication-group-pending-modified-values-cluster-mode
                         :shape "ClusterMode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-replication-group-pending-modified-values
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'replication-group-pending-modified-values
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'replication-group-pending-modified-values
                    'make-replication-group-pending-modified-values))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replication-group-pending-modified-values))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replication-group-pending-modified-values))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary-cluster-id))
      (common-lisp:list
       (common-lisp:cons "PrimaryClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automatic-failover-status))
      (common-lisp:list
       (common-lisp:cons "AutomaticFailoverStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resharding))
      (common-lisp:list
       (common-lisp:cons "Resharding"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-token-status))
      (common-lisp:list
       (common-lisp:cons "AuthTokenStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-groups))
      (common-lisp:list
       (common-lisp:cons "UserGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-delivery-configurations))
      (common-lisp:list
       (common-lisp:cons "LogDeliveryConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-encryption-enabled))
      (common-lisp:list
       (common-lisp:cons "TransitEncryptionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-encryption-mode))
      (common-lisp:list
       (common-lisp:cons "TransitEncryptionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-mode))
      (common-lisp:list
       (common-lisp:cons "ClusterMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replication-group-pending-modified-values))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reserved-cache-node common-lisp:nil
                       ((reserved-cache-node-id :initarg
                         :reserved-cache-node-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-reserved-cache-node-reserved-cache-node-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reserved-cache-nodes-offering-id :initarg
                         :reserved-cache-nodes-offering-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-reserved-cache-node-reserved-cache-nodes-offering-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-node-type :initarg :cache-node-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-reserved-cache-node-cache-node-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-reserved-cache-node-start-time :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (duration :initarg :duration :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor struct-shape-reserved-cache-node-duration
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (fixed-price :initarg :fixed-price :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-reserved-cache-node-fixed-price :shape
                         "Double" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (usage-price :initarg :usage-price :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-reserved-cache-node-usage-price :shape
                         "Double" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cache-node-count :initarg :cache-node-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-reserved-cache-node-cache-node-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (product-description :initarg :product-description
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-reserved-cache-node-product-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (offering-type :initarg :offering-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-reserved-cache-node-offering-type :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-reserved-cache-node-state :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (recurring-charges :initarg :recurring-charges
                         :initform common-lisp:nil :type
                         (common-lisp:or recurring-charge-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-reserved-cache-node-recurring-charges
                         :shape "RecurringChargeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reservation-arn :initarg :reservation-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-reserved-cache-node-reservation-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reserved-cache-node
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reserved-cache-node
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reserved-cache-node 'make-reserved-cache-node))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input reserved-cache-node))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input reserved-cache-node))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-cache-node-id))
      (common-lisp:list
       (common-lisp:cons "ReservedCacheNodeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-cache-nodes-offering-id))
      (common-lisp:list
       (common-lisp:cons "ReservedCacheNodesOfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-node-type))
      (common-lisp:list
       (common-lisp:cons "CacheNodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fixed-price))
      (common-lisp:list
       (common-lisp:cons "FixedPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-price))
      (common-lisp:list
       (common-lisp:cons "UsagePrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-node-count))
      (common-lisp:list
       (common-lisp:cons "CacheNodeCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-description))
      (common-lisp:list
       (common-lisp:cons "ProductDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-type))
      (common-lisp:list
       (common-lisp:cons "OfferingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recurring-charges))
      (common-lisp:list
       (common-lisp:cons "RecurringCharges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservation-arn))
      (common-lisp:list
       (common-lisp:cons "ReservationARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input reserved-cache-node))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition reserved-cache-node-already-exists-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'reserved-cache-node-already-exists-fault)))
(common-lisp:progn
 (common-lisp:deftype reserved-cache-node-list ()
   '(trivial-types:proper-list reserved-cache-node))
 (common-lisp:defun make-reserved-cache-node-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list reserved-cache-node))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass reserved-cache-node-message common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-reserved-cache-node-message-marker :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (reserved-cache-nodes :initarg :reserved-cache-nodes
                         :initform common-lisp:nil :type
                         (common-lisp:or reserved-cache-node-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-reserved-cache-node-message-reserved-cache-nodes
                         :shape "ReservedCacheNodeList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reserved-cache-node-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reserved-cache-node-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reserved-cache-node-message
                    'make-reserved-cache-node-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reserved-cache-node-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reserved-cache-node-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-cache-nodes))
      (common-lisp:list
       (common-lisp:cons "ReservedCacheNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reserved-cache-node-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition reserved-cache-node-not-found-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'reserved-cache-node-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition reserved-cache-node-quota-exceeded-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'reserved-cache-node-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defclass reserved-cache-nodes-offering common-lisp:nil
                       ((reserved-cache-nodes-offering-id :initarg
                         :reserved-cache-nodes-offering-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-reserved-cache-nodes-offering-reserved-cache-nodes-offering-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-node-type :initarg :cache-node-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-reserved-cache-nodes-offering-cache-node-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (duration :initarg :duration :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-reserved-cache-nodes-offering-duration
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (fixed-price :initarg :fixed-price :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-reserved-cache-nodes-offering-fixed-price
                         :shape "Double" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (usage-price :initarg :usage-price :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-reserved-cache-nodes-offering-usage-price
                         :shape "Double" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (product-description :initarg :product-description
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-reserved-cache-nodes-offering-product-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (offering-type :initarg :offering-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-reserved-cache-nodes-offering-offering-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (recurring-charges :initarg :recurring-charges
                         :initform common-lisp:nil :type
                         (common-lisp:or recurring-charge-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-reserved-cache-nodes-offering-recurring-charges
                         :shape "RecurringChargeList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reserved-cache-nodes-offering
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'reserved-cache-nodes-offering
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reserved-cache-nodes-offering
                    'make-reserved-cache-nodes-offering))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reserved-cache-nodes-offering))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reserved-cache-nodes-offering))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-cache-nodes-offering-id))
      (common-lisp:list
       (common-lisp:cons "ReservedCacheNodesOfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-node-type))
      (common-lisp:list
       (common-lisp:cons "CacheNodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fixed-price))
      (common-lisp:list
       (common-lisp:cons "FixedPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-price))
      (common-lisp:list
       (common-lisp:cons "UsagePrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-description))
      (common-lisp:list
       (common-lisp:cons "ProductDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-type))
      (common-lisp:list
       (common-lisp:cons "OfferingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recurring-charges))
      (common-lisp:list
       (common-lisp:cons "RecurringCharges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reserved-cache-nodes-offering))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype reserved-cache-nodes-offering-list ()
   '(trivial-types:proper-list reserved-cache-nodes-offering))
 (common-lisp:defun make-reserved-cache-nodes-offering-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            reserved-cache-nodes-offering))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass reserved-cache-nodes-offering-message common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-reserved-cache-nodes-offering-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reserved-cache-nodes-offerings :initarg
                         :reserved-cache-nodes-offerings :initform
                         common-lisp:nil :type
                         (common-lisp:or reserved-cache-nodes-offering-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-reserved-cache-nodes-offering-message-reserved-cache-nodes-offerings
                         :shape "ReservedCacheNodesOfferingList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reserved-cache-nodes-offering-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'reserved-cache-nodes-offering-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reserved-cache-nodes-offering-message
                    'make-reserved-cache-nodes-offering-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reserved-cache-nodes-offering-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reserved-cache-nodes-offering-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-cache-nodes-offerings))
      (common-lisp:list
       (common-lisp:cons "ReservedCacheNodesOfferings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reserved-cache-nodes-offering-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition reserved-cache-nodes-offering-not-found-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'reserved-cache-nodes-offering-not-found-fault)))
(common-lisp:progn
 (common-lisp:defclass reset-cache-parameter-group-message common-lisp:nil
                       ((cache-parameter-group-name :initarg
                         :cache-parameter-group-name :initform
                         (common-lisp:error
                          ":cache-parameter-group-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-reset-cache-parameter-group-message-cache-parameter-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reset-all-parameters :initarg :reset-all-parameters
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-reset-cache-parameter-group-message-reset-all-parameters
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameter-name-values :initarg :parameter-name-values
                         :initform common-lisp:nil :type
                         (common-lisp:or parameter-name-value-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-reset-cache-parameter-group-message-parameter-name-values
                         :shape "ParameterNameValueList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reset-cache-parameter-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'reset-cache-parameter-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reset-cache-parameter-group-message
                    'make-reset-cache-parameter-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reset-cache-parameter-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reset-cache-parameter-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reset-all-parameters))
      (common-lisp:list
       (common-lisp:cons "ResetAllParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-name-values))
      (common-lisp:list
       (common-lisp:cons "ParameterNameValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reset-cache-parameter-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resharding-configuration common-lisp:nil
                       ((node-group-id :initarg :node-group-id :initform
                         common-lisp:nil :type
                         (common-lisp:or allowed-node-group-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-resharding-configuration-node-group-id
                         :shape "AllowedNodeGroupId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (preferred-availability-zones :initarg
                         :preferred-availability-zones :initform
                         common-lisp:nil :type
                         (common-lisp:or availability-zones-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-resharding-configuration-preferred-availability-zones
                         :shape "AvailabilityZonesList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resharding-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resharding-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resharding-configuration 'make-resharding-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resharding-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resharding-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-group-id))
      (common-lisp:list
       (common-lisp:cons "NodeGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-availability-zones))
      (common-lisp:list
       (common-lisp:cons "PreferredAvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resharding-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resharding-configuration-list ()
   '(trivial-types:proper-list resharding-configuration))
 (common-lisp:defun make-resharding-configuration-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            resharding-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass resharding-status common-lisp:nil
                       ((slot-migration :initarg :slot-migration :initform
                         common-lisp:nil :type
                         (common-lisp:or slot-migration common-lisp:null)
                         :accessor
                         struct-shape-resharding-status-slot-migration :shape
                         "SlotMigration" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resharding-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resharding-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resharding-status 'make-resharding-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resharding-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resharding-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-migration))
      (common-lisp:list
       (common-lisp:cons "SlotMigration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resharding-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass revoke-cache-security-group-ingress-message
                       common-lisp:nil
                       ((cache-security-group-name :initarg
                         :cache-security-group-name :initform
                         (common-lisp:error
                          ":cache-security-group-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-revoke-cache-security-group-ingress-message-cache-security-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ec2security-group-name :initarg
                         :ec2security-group-name :initform
                         (common-lisp:error
                          ":ec2security-group-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-revoke-cache-security-group-ingress-message-ec2security-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ec2security-group-owner-id :initarg
                         :ec2security-group-owner-id :initform
                         (common-lisp:error
                          ":ec2security-group-owner-id is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-revoke-cache-security-group-ingress-message-ec2security-group-owner-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-revoke-cache-security-group-ingress-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'revoke-cache-security-group-ingress-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'revoke-cache-security-group-ingress-message
                    'make-revoke-cache-security-group-ingress-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          revoke-cache-security-group-ingress-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          revoke-cache-security-group-ingress-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-security-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheSecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-name))
      (common-lisp:list
       (common-lisp:cons "EC2SecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-owner-id))
      (common-lisp:list
       (common-lisp:cons "EC2SecurityGroupOwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          revoke-cache-security-group-ingress-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass revoke-cache-security-group-ingress-result
                       common-lisp:nil
                       ((cache-security-group :initarg :cache-security-group
                         :initform common-lisp:nil :type
                         (common-lisp:or cache-security-group common-lisp:null)
                         :accessor
                         struct-shape-revoke-cache-security-group-ingress-result-cache-security-group
                         :shape "CacheSecurityGroup" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-revoke-cache-security-group-ingress-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'revoke-cache-security-group-ingress-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'revoke-cache-security-group-ingress-result
                    'make-revoke-cache-security-group-ingress-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          revoke-cache-security-group-ingress-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          revoke-cache-security-group-ingress-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-security-group))
      (common-lisp:list
       (common-lisp:cons "CacheSecurityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          revoke-cache-security-group-ingress-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype security-group-ids-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-security-group-ids-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass security-group-membership common-lisp:nil
                       ((security-group-id :initarg :security-group-id
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-security-group-membership-security-group-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-security-group-membership-status :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-security-group-membership
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'security-group-membership
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'security-group-membership
                    'make-security-group-membership))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          security-group-membership))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          security-group-membership))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-id))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          security-group-membership))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype security-group-membership-list ()
   '(trivial-types:proper-list security-group-membership))
 (common-lisp:defun make-security-group-membership-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            security-group-membership))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass serverless-cache common-lisp:nil
                       ((serverless-cache-name :initarg :serverless-cache-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-serverless-cache-serverless-cache-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-serverless-cache-description :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (create-time :initarg :create-time :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-serverless-cache-create-time :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-serverless-cache-status :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (engine :initarg :engine :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-serverless-cache-engine :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (major-engine-version :initarg :major-engine-version
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-serverless-cache-major-engine-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (full-engine-version :initarg :full-engine-version
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-serverless-cache-full-engine-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-usage-limits :initarg :cache-usage-limits
                         :initform common-lisp:nil :type
                         (common-lisp:or cache-usage-limits common-lisp:null)
                         :accessor
                         struct-shape-serverless-cache-cache-usage-limits
                         :shape "CacheUsageLimits" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-serverless-cache-kms-key-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (security-group-ids :initarg :security-group-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or security-group-ids-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-serverless-cache-security-group-ids
                         :shape "SecurityGroupIdsList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (endpoint :initarg :endpoint :initform common-lisp:nil
                         :type (common-lisp:or endpoint common-lisp:null)
                         :accessor struct-shape-serverless-cache-endpoint
                         :shape "Endpoint" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reader-endpoint :initarg :reader-endpoint :initform
                         common-lisp:nil :type
                         (common-lisp:or endpoint common-lisp:null) :accessor
                         struct-shape-serverless-cache-reader-endpoint :shape
                         "Endpoint" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-serverless-cache-arn :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (user-group-id :initarg :user-group-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-serverless-cache-user-group-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (subnet-ids :initarg :subnet-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or subnet-ids-list common-lisp:null)
                         :accessor struct-shape-serverless-cache-subnet-ids
                         :shape "SubnetIdsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-retention-limit :initarg
                         :snapshot-retention-limit :initform common-lisp:nil
                         :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-serverless-cache-snapshot-retention-limit
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (daily-snapshot-time :initarg :daily-snapshot-time
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-serverless-cache-daily-snapshot-time
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-serverless-cache
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'serverless-cache
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'serverless-cache 'make-serverless-cache))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input serverless-cache))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input serverless-cache))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'serverless-cache-name))
      (common-lisp:list
       (common-lisp:cons "ServerlessCacheName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'major-engine-version))
      (common-lisp:list
       (common-lisp:cons "MajorEngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'full-engine-version))
      (common-lisp:list
       (common-lisp:cons "FullEngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-usage-limits))
      (common-lisp:list
       (common-lisp:cons "CacheUsageLimits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reader-endpoint))
      (common-lisp:list
       (common-lisp:cons "ReaderEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-group-id))
      (common-lisp:list
       (common-lisp:cons "UserGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-retention-limit))
      (common-lisp:list
       (common-lisp:cons "SnapshotRetentionLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'daily-snapshot-time))
      (common-lisp:list
       (common-lisp:cons "DailySnapshotTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input serverless-cache))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition serverless-cache-already-exists-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'serverless-cache-already-exists-fault)))
(common-lisp:progn
 (common-lisp:defclass serverless-cache-configuration common-lisp:nil
                       ((serverless-cache-name :initarg :serverless-cache-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-serverless-cache-configuration-serverless-cache-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine :initarg :engine :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-serverless-cache-configuration-engine
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (major-engine-version :initarg :major-engine-version
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-serverless-cache-configuration-major-engine-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-serverless-cache-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'serverless-cache-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'serverless-cache-configuration
                    'make-serverless-cache-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          serverless-cache-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          serverless-cache-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'serverless-cache-name))
      (common-lisp:list
       (common-lisp:cons "ServerlessCacheName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'major-engine-version))
      (common-lisp:list
       (common-lisp:cons "MajorEngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          serverless-cache-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype serverless-cache-list ()
   '(trivial-types:proper-list serverless-cache))
 (common-lisp:defun make-serverless-cache-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list serverless-cache))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition serverless-cache-not-found-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'serverless-cache-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition serverless-cache-quota-for-customer-exceeded-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'serverless-cache-quota-for-customer-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defclass serverless-cache-snapshot common-lisp:nil
                       ((serverless-cache-snapshot-name :initarg
                         :serverless-cache-snapshot-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-serverless-cache-snapshot-serverless-cache-snapshot-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-serverless-cache-snapshot-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-serverless-cache-snapshot-kms-key-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-type :initarg :snapshot-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-serverless-cache-snapshot-snapshot-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-serverless-cache-snapshot-status :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (create-time :initarg :create-time :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-serverless-cache-snapshot-create-time
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (expiry-time :initarg :expiry-time :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-serverless-cache-snapshot-expiry-time
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bytes-used-for-cache :initarg :bytes-used-for-cache
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-serverless-cache-snapshot-bytes-used-for-cache
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (serverless-cache-configuration :initarg
                         :serverless-cache-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or serverless-cache-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-serverless-cache-snapshot-serverless-cache-configuration
                         :shape "ServerlessCacheConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-serverless-cache-snapshot
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'serverless-cache-snapshot
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'serverless-cache-snapshot
                    'make-serverless-cache-snapshot))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          serverless-cache-snapshot))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          serverless-cache-snapshot))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'serverless-cache-snapshot-name))
      (common-lisp:list
       (common-lisp:cons "ServerlessCacheSnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-type))
      (common-lisp:list
       (common-lisp:cons "SnapshotType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiry-time))
      (common-lisp:list
       (common-lisp:cons "ExpiryTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bytes-used-for-cache))
      (common-lisp:list
       (common-lisp:cons "BytesUsedForCache"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'serverless-cache-configuration))
      (common-lisp:list
       (common-lisp:cons "ServerlessCacheConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          serverless-cache-snapshot))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition serverless-cache-snapshot-already-exists-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'serverless-cache-snapshot-already-exists-fault)))
(common-lisp:progn
 (common-lisp:deftype serverless-cache-snapshot-list ()
   '(trivial-types:proper-list serverless-cache-snapshot))
 (common-lisp:defun make-serverless-cache-snapshot-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            serverless-cache-snapshot))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition serverless-cache-snapshot-not-found-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'serverless-cache-snapshot-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition serverless-cache-snapshot-quota-exceeded-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'serverless-cache-snapshot-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:define-condition service-linked-role-not-found-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'service-linked-role-not-found-fault)))
(common-lisp:progn
 (common-lisp:defclass service-update common-lisp:nil
                       ((service-update-name :initarg :service-update-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-service-update-service-update-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (service-update-release-date :initarg
                         :service-update-release-date :initform common-lisp:nil
                         :type (common-lisp:or tstamp common-lisp:null)
                         :accessor
                         struct-shape-service-update-service-update-release-date
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-update-end-date :initarg
                         :service-update-end-date :initform common-lisp:nil
                         :type (common-lisp:or tstamp common-lisp:null)
                         :accessor
                         struct-shape-service-update-service-update-end-date
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-update-severity :initarg
                         :service-update-severity :initform common-lisp:nil
                         :type
                         (common-lisp:or service-update-severity
                                         common-lisp:null)
                         :accessor
                         struct-shape-service-update-service-update-severity
                         :shape "ServiceUpdateSeverity" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (service-update-recommended-apply-by-date :initarg
                         :service-update-recommended-apply-by-date :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-service-update-service-update-recommended-apply-by-date
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-update-status :initarg :service-update-status
                         :initform common-lisp:nil :type
                         (common-lisp:or service-update-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-service-update-service-update-status
                         :shape "ServiceUpdateStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-update-description :initarg
                         :service-update-description :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-service-update-service-update-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-update-type :initarg :service-update-type
                         :initform common-lisp:nil :type
                         (common-lisp:or service-update-type common-lisp:null)
                         :accessor
                         struct-shape-service-update-service-update-type :shape
                         "ServiceUpdateType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine :initarg :engine :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-service-update-engine :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (engine-version :initarg :engine-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-service-update-engine-version :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (auto-update-after-recommended-apply-by-date :initarg
                         :auto-update-after-recommended-apply-by-date :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-service-update-auto-update-after-recommended-apply-by-date
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (estimated-update-time :initarg :estimated-update-time
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-service-update-estimated-update-time
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-service-update
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'service-update
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'service-update 'make-service-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input service-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input service-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-update-name))
      (common-lisp:list
       (common-lisp:cons "ServiceUpdateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-update-release-date))
      (common-lisp:list
       (common-lisp:cons "ServiceUpdateReleaseDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-update-end-date))
      (common-lisp:list
       (common-lisp:cons "ServiceUpdateEndDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-update-severity))
      (common-lisp:list
       (common-lisp:cons "ServiceUpdateSeverity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-update-recommended-apply-by-date))
      (common-lisp:list
       (common-lisp:cons "ServiceUpdateRecommendedApplyByDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-update-status))
      (common-lisp:list
       (common-lisp:cons "ServiceUpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-update-description))
      (common-lisp:list
       (common-lisp:cons "ServiceUpdateDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-update-type))
      (common-lisp:list
       (common-lisp:cons "ServiceUpdateType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-update-after-recommended-apply-by-date))
      (common-lisp:list
       (common-lisp:cons "AutoUpdateAfterRecommendedApplyByDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-update-time))
      (common-lisp:list
       (common-lisp:cons "EstimatedUpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input service-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype service-update-list ()
   '(trivial-types:proper-list service-update))
 (common-lisp:defun make-service-update-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list service-update))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition service-update-not-found-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'service-update-not-found-fault)))
(common-lisp:deftype service-update-severity () 'common-lisp:string)
(common-lisp:deftype service-update-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype service-update-status-list ()
   '(trivial-types:proper-list service-update-status))
 (common-lisp:defun make-service-update-status-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list service-update-status))
   aws-sdk/generator/shape::members))
(common-lisp:deftype service-update-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass service-updates-message common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-service-updates-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-updates :initarg :service-updates :initform
                         common-lisp:nil :type
                         (common-lisp:or service-update-list common-lisp:null)
                         :accessor
                         struct-shape-service-updates-message-service-updates
                         :shape "ServiceUpdateList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-service-updates-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'service-updates-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'service-updates-message 'make-service-updates-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-updates-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-updates-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-updates))
      (common-lisp:list
       (common-lisp:cons "ServiceUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-updates-message))
   common-lisp:nil))
(common-lisp:deftype sla-met () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass slot-migration common-lisp:nil
                       ((progress-percentage :initarg :progress-percentage
                         :initform common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-slot-migration-progress-percentage :shape
                         "Double" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-slot-migration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'slot-migration
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'slot-migration 'make-slot-migration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input slot-migration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input slot-migration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'progress-percentage))
      (common-lisp:list
       (common-lisp:cons "ProgressPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input slot-migration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass snapshot common-lisp:nil
                       ((snapshot-name :initarg :snapshot-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-snapshot-snapshot-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (replication-group-id :initarg :replication-group-id
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-snapshot-replication-group-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (replication-group-description :initarg
                         :replication-group-description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-snapshot-replication-group-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-cluster-id :initarg :cache-cluster-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-snapshot-cache-cluster-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (snapshot-status :initarg :snapshot-status :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-snapshot-snapshot-status :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (snapshot-source :initarg :snapshot-source :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-snapshot-snapshot-source :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cache-node-type :initarg :cache-node-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-snapshot-cache-node-type :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (engine :initarg :engine :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-snapshot-engine :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (engine-version :initarg :engine-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-snapshot-engine-version :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (num-cache-nodes :initarg :num-cache-nodes :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-snapshot-num-cache-nodes :shape
                         "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (preferred-availability-zone :initarg
                         :preferred-availability-zone :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-snapshot-preferred-availability-zone
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (preferred-outpost-arn :initarg :preferred-outpost-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-snapshot-preferred-outpost-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cache-cluster-create-time :initarg
                         :cache-cluster-create-time :initform common-lisp:nil
                         :type (common-lisp:or tstamp common-lisp:null)
                         :accessor
                         struct-shape-snapshot-cache-cluster-create-time :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (preferred-maintenance-window :initarg
                         :preferred-maintenance-window :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-snapshot-preferred-maintenance-window
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (topic-arn :initarg :topic-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-snapshot-topic-arn :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-snapshot-port :shape
                         "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-parameter-group-name :initarg
                         :cache-parameter-group-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-snapshot-cache-parameter-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-subnet-group-name :initarg
                         :cache-subnet-group-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-snapshot-cache-subnet-group-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (vpc-id :initarg :vpc-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-snapshot-vpc-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (auto-minor-version-upgrade :initarg
                         :auto-minor-version-upgrade :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-snapshot-auto-minor-version-upgrade
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-retention-limit :initarg
                         :snapshot-retention-limit :initform common-lisp:nil
                         :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-snapshot-snapshot-retention-limit :shape
                         "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-window :initarg :snapshot-window :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-snapshot-snapshot-window :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (num-node-groups :initarg :num-node-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-snapshot-num-node-groups :shape
                         "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (automatic-failover :initarg :automatic-failover
                         :initform common-lisp:nil :type
                         (common-lisp:or automatic-failover-status
                                         common-lisp:null)
                         :accessor struct-shape-snapshot-automatic-failover
                         :shape "AutomaticFailoverStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (node-snapshots :initarg :node-snapshots :initform
                         common-lisp:nil :type
                         (common-lisp:or node-snapshot-list common-lisp:null)
                         :accessor struct-shape-snapshot-node-snapshots :shape
                         "NodeSnapshotList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-snapshot-kms-key-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-snapshot-arn :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (data-tiering :initarg :data-tiering :initform
                         common-lisp:nil :type
                         (common-lisp:or data-tiering-status common-lisp:null)
                         :accessor struct-shape-snapshot-data-tiering :shape
                         "DataTieringStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-snapshot
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'snapshot
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'snapshot 'make-snapshot))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input snapshot))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input snapshot))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-name))
      (common-lisp:list
       (common-lisp:cons "SnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-id))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-description))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-cluster-id))
      (common-lisp:list
       (common-lisp:cons "CacheClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-status))
      (common-lisp:list
       (common-lisp:cons "SnapshotStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-source))
      (common-lisp:list
       (common-lisp:cons "SnapshotSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-node-type))
      (common-lisp:list
       (common-lisp:cons "CacheNodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-cache-nodes))
      (common-lisp:list
       (common-lisp:cons "NumCacheNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-availability-zone))
      (common-lisp:list
       (common-lisp:cons "PreferredAvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-outpost-arn))
      (common-lisp:list
       (common-lisp:cons "PreferredOutpostArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-cluster-create-time))
      (common-lisp:list
       (common-lisp:cons "CacheClusterCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-arn))
      (common-lisp:list
       (common-lisp:cons "TopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-subnet-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-minor-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AutoMinorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-retention-limit))
      (common-lisp:list
       (common-lisp:cons "SnapshotRetentionLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-window))
      (common-lisp:list
       (common-lisp:cons "SnapshotWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-node-groups))
      (common-lisp:list
       (common-lisp:cons "NumNodeGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'automatic-failover))
      (common-lisp:list
       (common-lisp:cons "AutomaticFailover"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-snapshots))
      (common-lisp:list
       (common-lisp:cons "NodeSnapshots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-tiering))
      (common-lisp:list
       (common-lisp:cons "DataTiering"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input snapshot))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition snapshot-already-exists-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'snapshot-already-exists-fault)))
(common-lisp:progn
 (common-lisp:deftype snapshot-arns-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-snapshot-arns-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition snapshot-feature-not-supported-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'snapshot-feature-not-supported-fault)))
(common-lisp:progn
 (common-lisp:deftype snapshot-list () '(trivial-types:proper-list snapshot))
 (common-lisp:defun make-snapshot-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list snapshot))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition snapshot-not-found-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'snapshot-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition snapshot-quota-exceeded-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'snapshot-quota-exceeded-fault)))
(common-lisp:deftype source-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass start-migration-message common-lisp:nil
                       ((replication-group-id :initarg :replication-group-id
                         :initform
                         (common-lisp:error
                          ":replication-group-id is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-start-migration-message-replication-group-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (customer-node-endpoint-list :initarg
                         :customer-node-endpoint-list :initform
                         (common-lisp:error
                          ":customer-node-endpoint-list is required")
                         :type
                         (common-lisp:or customer-node-endpoint-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-migration-message-customer-node-endpoint-list
                         :shape "CustomerNodeEndpointList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-migration-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-migration-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-migration-message 'make-start-migration-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-migration-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-migration-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-id))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customer-node-endpoint-list))
      (common-lisp:list
       (common-lisp:cons "CustomerNodeEndpointList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-migration-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-migration-response common-lisp:nil
                       ((replication-group :initarg :replication-group
                         :initform common-lisp:nil :type
                         (common-lisp:or replication-group common-lisp:null)
                         :accessor
                         struct-shape-start-migration-response-replication-group
                         :shape "ReplicationGroup" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-migration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-migration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-migration-response 'make-start-migration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-migration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-migration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-group))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-migration-response))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass subnet common-lisp:nil
                       ((subnet-identifier :initarg :subnet-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-subnet-subnet-identifier :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (subnet-availability-zone :initarg
                         :subnet-availability-zone :initform common-lisp:nil
                         :type
                         (common-lisp:or availability-zone common-lisp:null)
                         :accessor struct-shape-subnet-subnet-availability-zone
                         :shape "AvailabilityZone" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subnet-outpost :initarg :subnet-outpost :initform
                         common-lisp:nil :type
                         (common-lisp:or subnet-outpost common-lisp:null)
                         :accessor struct-shape-subnet-subnet-outpost :shape
                         "SubnetOutpost" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (supported-network-types :initarg
                         :supported-network-types :initform common-lisp:nil
                         :type
                         (common-lisp:or network-type-list common-lisp:null)
                         :accessor struct-shape-subnet-supported-network-types
                         :shape "NetworkTypeList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-subnet
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'subnet
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'subnet 'make-subnet))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input subnet))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input subnet))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-identifier))
      (common-lisp:list
       (common-lisp:cons "SubnetIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subnet-availability-zone))
      (common-lisp:list
       (common-lisp:cons "SubnetAvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-outpost))
      (common-lisp:list
       (common-lisp:cons "SubnetOutpost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-network-types))
      (common-lisp:list
       (common-lisp:cons "SupportedNetworkTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input subnet))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype subnet-identifier-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-subnet-identifier-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype subnet-ids-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-subnet-ids-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition subnet-in-use
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'subnet-in-use)))
(common-lisp:progn
 (common-lisp:deftype subnet-list () '(trivial-types:proper-list subnet))
 (common-lisp:defun make-subnet-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subnet))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition subnet-not-allowed-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'subnet-not-allowed-fault)))
(common-lisp:progn
 (common-lisp:defclass subnet-outpost common-lisp:nil
                       ((subnet-outpost-arn :initarg :subnet-outpost-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-subnet-outpost-subnet-outpost-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-subnet-outpost
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'subnet-outpost
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'subnet-outpost 'make-subnet-outpost))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input subnet-outpost))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input subnet-outpost))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-outpost-arn))
      (common-lisp:list
       (common-lisp:cons "SubnetOutpostArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input subnet-outpost))
   common-lisp:nil))
(common-lisp:deftype tstamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((key :initarg :key :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-tag-key :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-tag-value :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-list-message common-lisp:nil
                       ((tag-list :initarg :tag-list :initform common-lisp:nil
                         :type (common-lisp:or tag-list common-lisp:null)
                         :accessor struct-shape-tag-list-message-tag-list
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-list-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-list-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-list-message 'make-tag-list-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-list-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-list-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "TagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-list-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition tag-not-found-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'tag-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition tag-quota-per-resource-exceeded
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'tag-quota-per-resource-exceeded)))
(common-lisp:progn
 (common-lisp:defclass test-failover-message common-lisp:nil
                       ((replication-group-id :initarg :replication-group-id
                         :initform
                         (common-lisp:error
                          ":replication-group-id is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-test-failover-message-replication-group-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (node-group-id :initarg :node-group-id :initform
                         (common-lisp:error ":node-group-id is required") :type
                         (common-lisp:or allowed-node-group-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-test-failover-message-node-group-id
                         :shape "AllowedNodeGroupId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-test-failover-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'test-failover-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'test-failover-message 'make-test-failover-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-failover-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-failover-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-id))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-group-id))
      (common-lisp:list
       (common-lisp:cons "NodeGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-failover-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition test-failover-not-available-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'test-failover-not-available-fault)))
(common-lisp:progn
 (common-lisp:defclass test-failover-result common-lisp:nil
                       ((replication-group :initarg :replication-group
                         :initform common-lisp:nil :type
                         (common-lisp:or replication-group common-lisp:null)
                         :accessor
                         struct-shape-test-failover-result-replication-group
                         :shape "ReplicationGroup" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-test-failover-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'test-failover-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'test-failover-result 'make-test-failover-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input test-failover-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input test-failover-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-group))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input test-failover-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass test-migration-message common-lisp:nil
                       ((replication-group-id :initarg :replication-group-id
                         :initform
                         (common-lisp:error
                          ":replication-group-id is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-test-migration-message-replication-group-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (customer-node-endpoint-list :initarg
                         :customer-node-endpoint-list :initform
                         (common-lisp:error
                          ":customer-node-endpoint-list is required")
                         :type
                         (common-lisp:or customer-node-endpoint-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-test-migration-message-customer-node-endpoint-list
                         :shape "CustomerNodeEndpointList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-test-migration-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'test-migration-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'test-migration-message 'make-test-migration-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-migration-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-migration-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-id))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customer-node-endpoint-list))
      (common-lisp:list
       (common-lisp:cons "CustomerNodeEndpointList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-migration-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass test-migration-response common-lisp:nil
                       ((replication-group :initarg :replication-group
                         :initform common-lisp:nil :type
                         (common-lisp:or replication-group common-lisp:null)
                         :accessor
                         struct-shape-test-migration-response-replication-group
                         :shape "ReplicationGroup" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-test-migration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'test-migration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'test-migration-response 'make-test-migration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-migration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-migration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-group))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-migration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass time-range-filter common-lisp:nil
                       ((start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-time-range-filter-start-time :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or tstamp common-lisp:null)
                         :accessor struct-shape-time-range-filter-end-time
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-time-range-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'time-range-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'time-range-filter 'make-time-range-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input time-range-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input time-range-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input time-range-filter))
   common-lisp:nil))
(common-lisp:deftype transit-encryption-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ugreplication-group-id-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-ugreplication-group-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype ugserverless-cache-id-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-ugserverless-cache-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass unprocessed-update-action common-lisp:nil
                       ((replication-group-id :initarg :replication-group-id
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-unprocessed-update-action-replication-group-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-cluster-id :initarg :cache-cluster-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-unprocessed-update-action-cache-cluster-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-update-name :initarg :service-update-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-unprocessed-update-action-service-update-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-type :initarg :error-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-unprocessed-update-action-error-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-unprocessed-update-action-error-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-unprocessed-update-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'unprocessed-update-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'unprocessed-update-action
                    'make-unprocessed-update-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-update-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-update-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-id))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-cluster-id))
      (common-lisp:list
       (common-lisp:cons "CacheClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-update-name))
      (common-lisp:list
       (common-lisp:cons "ServiceUpdateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-type))
      (common-lisp:list
       (common-lisp:cons "ErrorType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-update-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype unprocessed-update-action-list ()
   '(trivial-types:proper-list unprocessed-update-action))
 (common-lisp:defun make-unprocessed-update-action-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            unprocessed-update-action))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass update-action common-lisp:nil
                       ((replication-group-id :initarg :replication-group-id
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-action-replication-group-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cache-cluster-id :initarg :cache-cluster-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-action-cache-cluster-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (service-update-name :initarg :service-update-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-action-service-update-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (service-update-release-date :initarg
                         :service-update-release-date :initform common-lisp:nil
                         :type (common-lisp:or tstamp common-lisp:null)
                         :accessor
                         struct-shape-update-action-service-update-release-date
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-update-severity :initarg
                         :service-update-severity :initform common-lisp:nil
                         :type
                         (common-lisp:or service-update-severity
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-action-service-update-severity
                         :shape "ServiceUpdateSeverity" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (service-update-status :initarg :service-update-status
                         :initform common-lisp:nil :type
                         (common-lisp:or service-update-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-action-service-update-status
                         :shape "ServiceUpdateStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-update-recommended-apply-by-date :initarg
                         :service-update-recommended-apply-by-date :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-update-action-service-update-recommended-apply-by-date
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-update-type :initarg :service-update-type
                         :initform common-lisp:nil :type
                         (common-lisp:or service-update-type common-lisp:null)
                         :accessor
                         struct-shape-update-action-service-update-type :shape
                         "ServiceUpdateType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (update-action-available-date :initarg
                         :update-action-available-date :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-update-action-update-action-available-date
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (update-action-status :initarg :update-action-status
                         :initform common-lisp:nil :type
                         (common-lisp:or update-action-status common-lisp:null)
                         :accessor
                         struct-shape-update-action-update-action-status :shape
                         "UpdateActionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (nodes-updated :initarg :nodes-updated :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-action-nodes-updated :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (update-action-status-modified-date :initarg
                         :update-action-status-modified-date :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-update-action-update-action-status-modified-date
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sla-met :initarg :sla-met :initform common-lisp:nil
                         :type (common-lisp:or sla-met common-lisp:null)
                         :accessor struct-shape-update-action-sla-met :shape
                         "SlaMet" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (node-group-update-status :initarg
                         :node-group-update-status :initform common-lisp:nil
                         :type
                         (common-lisp:or node-group-update-status-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-action-node-group-update-status
                         :shape "NodeGroupUpdateStatusList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cache-node-update-status :initarg
                         :cache-node-update-status :initform common-lisp:nil
                         :type
                         (common-lisp:or cache-node-update-status-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-action-cache-node-update-status
                         :shape "CacheNodeUpdateStatusList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (estimated-update-time :initarg :estimated-update-time
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-action-estimated-update-time
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine :initarg :engine :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-update-action-engine :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'update-action 'make-update-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-id))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-cluster-id))
      (common-lisp:list
       (common-lisp:cons "CacheClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-update-name))
      (common-lisp:list
       (common-lisp:cons "ServiceUpdateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-update-release-date))
      (common-lisp:list
       (common-lisp:cons "ServiceUpdateReleaseDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-update-severity))
      (common-lisp:list
       (common-lisp:cons "ServiceUpdateSeverity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-update-status))
      (common-lisp:list
       (common-lisp:cons "ServiceUpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-update-recommended-apply-by-date))
      (common-lisp:list
       (common-lisp:cons "ServiceUpdateRecommendedApplyByDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-update-type))
      (common-lisp:list
       (common-lisp:cons "ServiceUpdateType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'update-action-available-date))
      (common-lisp:list
       (common-lisp:cons "UpdateActionAvailableDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'update-action-status))
      (common-lisp:list
       (common-lisp:cons "UpdateActionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nodes-updated))
      (common-lisp:list
       (common-lisp:cons "NodesUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'update-action-status-modified-date))
      (common-lisp:list
       (common-lisp:cons "UpdateActionStatusModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sla-met))
      (common-lisp:list
       (common-lisp:cons "SlaMet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'node-group-update-status))
      (common-lisp:list
       (common-lisp:cons "NodeGroupUpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-node-update-status))
      (common-lisp:list
       (common-lisp:cons "CacheNodeUpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-update-time))
      (common-lisp:list
       (common-lisp:cons "EstimatedUpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype update-action-list ()
   '(trivial-types:proper-list update-action))
 (common-lisp:defun make-update-action-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list update-action))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass update-action-results-message common-lisp:nil
                       ((processed-update-actions :initarg
                         :processed-update-actions :initform common-lisp:nil
                         :type
                         (common-lisp:or processed-update-action-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-action-results-message-processed-update-actions
                         :shape "ProcessedUpdateActionList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (unprocessed-update-actions :initarg
                         :unprocessed-update-actions :initform common-lisp:nil
                         :type
                         (common-lisp:or unprocessed-update-action-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-action-results-message-unprocessed-update-actions
                         :shape "UnprocessedUpdateActionList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-action-results-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-action-results-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-action-results-message
                    'make-update-action-results-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-action-results-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-action-results-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'processed-update-actions))
      (common-lisp:list
       (common-lisp:cons "ProcessedUpdateActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-update-actions))
      (common-lisp:list
       (common-lisp:cons "UnprocessedUpdateActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-action-results-message))
   common-lisp:nil))
(common-lisp:deftype update-action-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype update-action-status-list ()
   '(trivial-types:proper-list update-action-status))
 (common-lisp:defun make-update-action-status-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list update-action-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass update-actions-message common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-update-actions-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (update-actions :initarg :update-actions :initform
                         common-lisp:nil :type
                         (common-lisp:or update-action-list common-lisp:null)
                         :accessor
                         struct-shape-update-actions-message-update-actions
                         :shape "UpdateActionList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-actions-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-actions-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-actions-message 'make-update-actions-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-actions-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-actions-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-actions))
      (common-lisp:list
       (common-lisp:cons "UpdateActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-actions-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass user common-lisp:nil
                       ((user-id :initarg :user-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-user-user-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (user-name :initarg :user-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-user-user-name :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-user-status :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (engine :initarg :engine :initform common-lisp:nil
                         :type (common-lisp:or engine-type common-lisp:null)
                         :accessor struct-shape-user-engine :shape "EngineType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (minimum-engine-version :initarg
                         :minimum-engine-version :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-user-minimum-engine-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (access-string :initarg :access-string :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-user-access-string :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (user-group-ids :initarg :user-group-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or user-group-id-list common-lisp:null)
                         :accessor struct-shape-user-user-group-ids :shape
                         "UserGroupIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (authentication :initarg :authentication :initform
                         common-lisp:nil :type
                         (common-lisp:or authentication common-lisp:null)
                         :accessor struct-shape-user-authentication :shape
                         "Authentication" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-user-arn :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-user (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'user
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'user 'make-user))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-engine-version))
      (common-lisp:list
       (common-lisp:cons "MinimumEngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-string))
      (common-lisp:list
       (common-lisp:cons "AccessString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-group-ids))
      (common-lisp:list
       (common-lisp:cons "UserGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication))
      (common-lisp:list
       (common-lisp:cons "Authentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition user-already-exists-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'user-already-exists-fault)))
(common-lisp:progn
 (common-lisp:defclass user-group common-lisp:nil
                       ((user-group-id :initarg :user-group-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-user-group-user-group-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-user-group-status :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (engine :initarg :engine :initform common-lisp:nil
                         :type (common-lisp:or engine-type common-lisp:null)
                         :accessor struct-shape-user-group-engine :shape
                         "EngineType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (user-ids :initarg :user-ids :initform common-lisp:nil
                         :type (common-lisp:or user-id-list common-lisp:null)
                         :accessor struct-shape-user-group-user-ids :shape
                         "UserIdList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (minimum-engine-version :initarg
                         :minimum-engine-version :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-user-group-minimum-engine-version :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (pending-changes :initarg :pending-changes :initform
                         common-lisp:nil :type
                         (common-lisp:or user-group-pending-changes
                                         common-lisp:null)
                         :accessor struct-shape-user-group-pending-changes
                         :shape "UserGroupPendingChanges" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (replication-groups :initarg :replication-groups
                         :initform common-lisp:nil :type
                         (common-lisp:or ugreplication-group-id-list
                                         common-lisp:null)
                         :accessor struct-shape-user-group-replication-groups
                         :shape "UGReplicationGroupIdList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (serverless-caches :initarg :serverless-caches
                         :initform common-lisp:nil :type
                         (common-lisp:or ugserverless-cache-id-list
                                         common-lisp:null)
                         :accessor struct-shape-user-group-serverless-caches
                         :shape "UGServerlessCacheIdList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-user-group-arn :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-user-group
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'user-group
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'user-group 'make-user-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-group-id))
      (common-lisp:list
       (common-lisp:cons "UserGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-ids))
      (common-lisp:list
       (common-lisp:cons "UserIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-engine-version))
      (common-lisp:list
       (common-lisp:cons "MinimumEngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pending-changes))
      (common-lisp:list
       (common-lisp:cons "PendingChanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-groups))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serverless-caches))
      (common-lisp:list
       (common-lisp:cons "ServerlessCaches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition user-group-already-exists-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'user-group-already-exists-fault)))
(common-lisp:deftype user-group-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype user-group-id-list ()
   '(trivial-types:proper-list user-group-id))
 (common-lisp:defun make-user-group-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user-group-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype user-group-id-list-input ()
   '(trivial-types:proper-list user-group-id))
 (common-lisp:defun make-user-group-id-list-input
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user-group-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype user-group-list ()
   '(trivial-types:proper-list user-group))
 (common-lisp:defun make-user-group-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition user-group-not-found-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'user-group-not-found-fault)))
(common-lisp:progn
 (common-lisp:defclass user-group-pending-changes common-lisp:nil
                       ((user-ids-to-remove :initarg :user-ids-to-remove
                         :initform common-lisp:nil :type
                         (common-lisp:or user-id-list common-lisp:null)
                         :accessor
                         struct-shape-user-group-pending-changes-user-ids-to-remove
                         :shape "UserIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-ids-to-add :initarg :user-ids-to-add :initform
                         common-lisp:nil :type
                         (common-lisp:or user-id-list common-lisp:null)
                         :accessor
                         struct-shape-user-group-pending-changes-user-ids-to-add
                         :shape "UserIdList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-user-group-pending-changes
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'user-group-pending-changes
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'user-group-pending-changes
                    'make-user-group-pending-changes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          user-group-pending-changes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          user-group-pending-changes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-ids-to-remove))
      (common-lisp:list
       (common-lisp:cons "UserIdsToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-ids-to-add))
      (common-lisp:list
       (common-lisp:cons "UserIdsToAdd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          user-group-pending-changes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition user-group-quota-exceeded-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'user-group-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defclass user-groups-update-status common-lisp:nil
                       ((user-group-ids-to-add :initarg :user-group-ids-to-add
                         :initform common-lisp:nil :type
                         (common-lisp:or user-group-id-list common-lisp:null)
                         :accessor
                         struct-shape-user-groups-update-status-user-group-ids-to-add
                         :shape "UserGroupIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-group-ids-to-remove :initarg
                         :user-group-ids-to-remove :initform common-lisp:nil
                         :type
                         (common-lisp:or user-group-id-list common-lisp:null)
                         :accessor
                         struct-shape-user-groups-update-status-user-group-ids-to-remove
                         :shape "UserGroupIdList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-user-groups-update-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'user-groups-update-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'user-groups-update-status
                    'make-user-groups-update-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          user-groups-update-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          user-groups-update-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-group-ids-to-add))
      (common-lisp:list
       (common-lisp:cons "UserGroupIdsToAdd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-group-ids-to-remove))
      (common-lisp:list
       (common-lisp:cons "UserGroupIdsToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          user-groups-update-status))
   common-lisp:nil))
(common-lisp:deftype user-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype user-id-list () '(trivial-types:proper-list user-id))
 (common-lisp:defun make-user-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype user-id-list-input ()
   '(trivial-types:proper-list user-id))
 (common-lisp:defun make-user-id-list-input
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype user-list () '(trivial-types:proper-list user))
 (common-lisp:defun make-user-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user))
   aws-sdk/generator/shape::members))
(common-lisp:deftype user-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition user-not-found-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'user-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition user-quota-exceeded-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'user-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defun add-tags-to-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-name tags)
   (common-lisp:declare (common-lisp:ignorable resource-name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-tags-to-resource-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AddTagsToResource"))
      common-lisp:nil "AddTagsToResourceResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'add-tags-to-resource))
(common-lisp:progn
 (common-lisp:defun authorize-cache-security-group-ingress
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cache-security-group-name
                     ec2security-group-name ec2security-group-owner-id)
   (common-lisp:declare
    (common-lisp:ignorable cache-security-group-name ec2security-group-name
     ec2security-group-owner-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-authorize-cache-security-group-ingress-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AuthorizeCacheSecurityGroupIngress"))
      common-lisp:nil "AuthorizeCacheSecurityGroupIngressResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'authorize-cache-security-group-ingress))
(common-lisp:progn
 (common-lisp:defun batch-apply-update-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-group-ids cache-cluster-ids
                     service-update-name)
   (common-lisp:declare
    (common-lisp:ignorable replication-group-ids cache-cluster-ids
     service-update-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-apply-update-action-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchApplyUpdateAction"))
      common-lisp:nil "BatchApplyUpdateActionResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'batch-apply-update-action))
(common-lisp:progn
 (common-lisp:defun batch-stop-update-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-group-ids cache-cluster-ids
                     service-update-name)
   (common-lisp:declare
    (common-lisp:ignorable replication-group-ids cache-cluster-ids
     service-update-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-stop-update-action-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchStopUpdateAction"))
      common-lisp:nil "BatchStopUpdateActionResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'batch-stop-update-action))
(common-lisp:progn
 (common-lisp:defun complete-migration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-group-id force)
   (common-lisp:declare (common-lisp:ignorable replication-group-id force))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-complete-migration-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CompleteMigration"))
      common-lisp:nil "CompleteMigrationResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'complete-migration))
(common-lisp:progn
 (common-lisp:defun copy-serverless-cache-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-serverless-cache-snapshot-name
                     target-serverless-cache-snapshot-name kms-key-id tags)
   (common-lisp:declare
    (common-lisp:ignorable source-serverless-cache-snapshot-name
     target-serverless-cache-snapshot-name kms-key-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-copy-serverless-cache-snapshot-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CopyServerlessCacheSnapshot"))
      common-lisp:nil "CopyServerlessCacheSnapshotResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'copy-serverless-cache-snapshot))
(common-lisp:progn
 (common-lisp:defun copy-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-snapshot-name target-snapshot-name
                     target-bucket kms-key-id tags)
   (common-lisp:declare
    (common-lisp:ignorable source-snapshot-name target-snapshot-name
     target-bucket kms-key-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-copy-snapshot-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CopySnapshot"))
      common-lisp:nil "CopySnapshotResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'copy-snapshot))
(common-lisp:progn
 (common-lisp:defun create-cache-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cache-cluster-id replication-group-id
                     azmode preferred-availability-zone
                     preferred-availability-zones num-cache-nodes
                     cache-node-type engine engine-version
                     cache-parameter-group-name cache-subnet-group-name
                     cache-security-group-names security-group-ids tags
                     snapshot-arns snapshot-name preferred-maintenance-window
                     port notification-topic-arn auto-minor-version-upgrade
                     snapshot-retention-limit snapshot-window auth-token
                     outpost-mode preferred-outpost-arn preferred-outpost-arns
                     log-delivery-configurations transit-encryption-enabled
                     network-type ip-discovery)
   (common-lisp:declare
    (common-lisp:ignorable cache-cluster-id replication-group-id azmode
     preferred-availability-zone preferred-availability-zones num-cache-nodes
     cache-node-type engine engine-version cache-parameter-group-name
     cache-subnet-group-name cache-security-group-names security-group-ids tags
     snapshot-arns snapshot-name preferred-maintenance-window port
     notification-topic-arn auto-minor-version-upgrade snapshot-retention-limit
     snapshot-window auth-token outpost-mode preferred-outpost-arn
     preferred-outpost-arns log-delivery-configurations
     transit-encryption-enabled network-type ip-discovery))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-cache-cluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateCacheCluster"))
      common-lisp:nil "CreateCacheClusterResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'create-cache-cluster))
(common-lisp:progn
 (common-lisp:defun create-cache-parameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cache-parameter-group-name
                     cache-parameter-group-family description tags)
   (common-lisp:declare
    (common-lisp:ignorable cache-parameter-group-name
     cache-parameter-group-family description tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-cache-parameter-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateCacheParameterGroup"))
      common-lisp:nil "CreateCacheParameterGroupResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'create-cache-parameter-group))
(common-lisp:progn
 (common-lisp:defun create-cache-security-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cache-security-group-name description
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable cache-security-group-name description tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-cache-security-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateCacheSecurityGroup"))
      common-lisp:nil "CreateCacheSecurityGroupResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'create-cache-security-group))
(common-lisp:progn
 (common-lisp:defun create-cache-subnet-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cache-subnet-group-name
                     cache-subnet-group-description subnet-ids tags)
   (common-lisp:declare
    (common-lisp:ignorable cache-subnet-group-name
     cache-subnet-group-description subnet-ids tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-cache-subnet-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateCacheSubnetGroup"))
      common-lisp:nil "CreateCacheSubnetGroupResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'create-cache-subnet-group))
(common-lisp:progn
 (common-lisp:defun create-global-replication-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-replication-group-id-suffix
                     global-replication-group-description
                     primary-replication-group-id)
   (common-lisp:declare
    (common-lisp:ignorable global-replication-group-id-suffix
     global-replication-group-description primary-replication-group-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-global-replication-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateGlobalReplicationGroup"))
      common-lisp:nil "CreateGlobalReplicationGroupResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'create-global-replication-group))
(common-lisp:progn
 (common-lisp:defun create-replication-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-group-id
                     replication-group-description global-replication-group-id
                     primary-cluster-id automatic-failover-enabled
                     multi-azenabled num-cache-clusters
                     preferred-cache-cluster-azs num-node-groups
                     replicas-per-node-group node-group-configuration
                     cache-node-type engine engine-version
                     cache-parameter-group-name cache-subnet-group-name
                     cache-security-group-names security-group-ids tags
                     snapshot-arns snapshot-name preferred-maintenance-window
                     port notification-topic-arn auto-minor-version-upgrade
                     snapshot-retention-limit snapshot-window auth-token
                     transit-encryption-enabled at-rest-encryption-enabled
                     kms-key-id user-group-ids log-delivery-configurations
                     data-tiering-enabled network-type ip-discovery
                     transit-encryption-mode cluster-mode
                     serverless-cache-snapshot-name)
   (common-lisp:declare
    (common-lisp:ignorable replication-group-id replication-group-description
     global-replication-group-id primary-cluster-id automatic-failover-enabled
     multi-azenabled num-cache-clusters preferred-cache-cluster-azs
     num-node-groups replicas-per-node-group node-group-configuration
     cache-node-type engine engine-version cache-parameter-group-name
     cache-subnet-group-name cache-security-group-names security-group-ids tags
     snapshot-arns snapshot-name preferred-maintenance-window port
     notification-topic-arn auto-minor-version-upgrade snapshot-retention-limit
     snapshot-window auth-token transit-encryption-enabled
     at-rest-encryption-enabled kms-key-id user-group-ids
     log-delivery-configurations data-tiering-enabled network-type ip-discovery
     transit-encryption-mode cluster-mode serverless-cache-snapshot-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-replication-group-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateReplicationGroup"))
      common-lisp:nil "CreateReplicationGroupResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'create-replication-group))
(common-lisp:progn
 (common-lisp:defun create-serverless-cache
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key serverless-cache-name description engine
                     major-engine-version cache-usage-limits kms-key-id
                     security-group-ids snapshot-arns-to-restore tags
                     user-group-id subnet-ids snapshot-retention-limit
                     daily-snapshot-time)
   (common-lisp:declare
    (common-lisp:ignorable serverless-cache-name description engine
     major-engine-version cache-usage-limits kms-key-id security-group-ids
     snapshot-arns-to-restore tags user-group-id subnet-ids
     snapshot-retention-limit daily-snapshot-time))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-serverless-cache-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateServerlessCache"))
      common-lisp:nil "CreateServerlessCacheResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'create-serverless-cache))
(common-lisp:progn
 (common-lisp:defun create-serverless-cache-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key serverless-cache-snapshot-name
                     serverless-cache-name kms-key-id tags)
   (common-lisp:declare
    (common-lisp:ignorable serverless-cache-snapshot-name serverless-cache-name
     kms-key-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-serverless-cache-snapshot-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateServerlessCacheSnapshot"))
      common-lisp:nil "CreateServerlessCacheSnapshotResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'create-serverless-cache-snapshot))
(common-lisp:progn
 (common-lisp:defun create-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-group-id cache-cluster-id
                     snapshot-name kms-key-id tags)
   (common-lisp:declare
    (common-lisp:ignorable replication-group-id cache-cluster-id snapshot-name
     kms-key-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-snapshot-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateSnapshot"))
      common-lisp:nil "CreateSnapshotResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'create-snapshot))
(common-lisp:progn
 (common-lisp:defun create-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-id user-name engine passwords
                     access-string no-password-required tags
                     authentication-mode)
   (common-lisp:declare
    (common-lisp:ignorable user-id user-name engine passwords access-string
     no-password-required tags authentication-mode))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-user-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateUser"))
      common-lisp:nil "CreateUserResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'create-user))
(common-lisp:progn
 (common-lisp:defun create-user-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-group-id engine user-ids tags)
   (common-lisp:declare
    (common-lisp:ignorable user-group-id engine user-ids tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-user-group-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateUserGroup"))
      common-lisp:nil "CreateUserGroupResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'create-user-group))
(common-lisp:progn
 (common-lisp:defun decrease-node-groups-in-global-replication-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-replication-group-id
                     node-group-count global-node-groups-to-remove
                     global-node-groups-to-retain apply-immediately)
   (common-lisp:declare
    (common-lisp:ignorable global-replication-group-id node-group-count
     global-node-groups-to-remove global-node-groups-to-retain
     apply-immediately))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-decrease-node-groups-in-global-replication-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DecreaseNodeGroupsInGlobalReplicationGroup"))
      common-lisp:nil "DecreaseNodeGroupsInGlobalReplicationGroupResult"
      *error-map* common-lisp:nil)))
 (common-lisp:export 'decrease-node-groups-in-global-replication-group))
(common-lisp:progn
 (common-lisp:defun decrease-replica-count
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-group-id new-replica-count
                     replica-configuration replicas-to-remove
                     apply-immediately)
   (common-lisp:declare
    (common-lisp:ignorable replication-group-id new-replica-count
     replica-configuration replicas-to-remove apply-immediately))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-decrease-replica-count-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DecreaseReplicaCount"))
      common-lisp:nil "DecreaseReplicaCountResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'decrease-replica-count))
(common-lisp:progn
 (common-lisp:defun delete-cache-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cache-cluster-id
                     final-snapshot-identifier)
   (common-lisp:declare
    (common-lisp:ignorable cache-cluster-id final-snapshot-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-cache-cluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteCacheCluster"))
      common-lisp:nil "DeleteCacheClusterResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-cache-cluster))
(common-lisp:progn
 (common-lisp:defun delete-cache-parameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cache-parameter-group-name)
   (common-lisp:declare (common-lisp:ignorable cache-parameter-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-cache-parameter-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteCacheParameterGroup"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-cache-parameter-group))
(common-lisp:progn
 (common-lisp:defun delete-cache-security-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cache-security-group-name)
   (common-lisp:declare (common-lisp:ignorable cache-security-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-cache-security-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteCacheSecurityGroup"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-cache-security-group))
(common-lisp:progn
 (common-lisp:defun delete-cache-subnet-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cache-subnet-group-name)
   (common-lisp:declare (common-lisp:ignorable cache-subnet-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-cache-subnet-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteCacheSubnetGroup"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-cache-subnet-group))
(common-lisp:progn
 (common-lisp:defun delete-global-replication-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-replication-group-id
                     retain-primary-replication-group)
   (common-lisp:declare
    (common-lisp:ignorable global-replication-group-id
     retain-primary-replication-group))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-global-replication-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteGlobalReplicationGroup"))
      common-lisp:nil "DeleteGlobalReplicationGroupResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'delete-global-replication-group))
(common-lisp:progn
 (common-lisp:defun delete-replication-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-group-id
                     retain-primary-cluster final-snapshot-identifier)
   (common-lisp:declare
    (common-lisp:ignorable replication-group-id retain-primary-cluster
     final-snapshot-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-replication-group-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteReplicationGroup"))
      common-lisp:nil "DeleteReplicationGroupResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'delete-replication-group))
(common-lisp:progn
 (common-lisp:defun delete-serverless-cache
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key serverless-cache-name
                     final-snapshot-name)
   (common-lisp:declare
    (common-lisp:ignorable serverless-cache-name final-snapshot-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-serverless-cache-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteServerlessCache"))
      common-lisp:nil "DeleteServerlessCacheResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'delete-serverless-cache))
(common-lisp:progn
 (common-lisp:defun delete-serverless-cache-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key serverless-cache-snapshot-name)
   (common-lisp:declare (common-lisp:ignorable serverless-cache-snapshot-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-serverless-cache-snapshot-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteServerlessCacheSnapshot"))
      common-lisp:nil "DeleteServerlessCacheSnapshotResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'delete-serverless-cache-snapshot))
(common-lisp:progn
 (common-lisp:defun delete-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key snapshot-name)
   (common-lisp:declare (common-lisp:ignorable snapshot-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-snapshot-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteSnapshot"))
      common-lisp:nil "DeleteSnapshotResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-snapshot))
(common-lisp:progn
 (common-lisp:defun delete-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-id)
   (common-lisp:declare (common-lisp:ignorable user-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-user-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteUser"))
      common-lisp:nil "DeleteUserResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-user))
(common-lisp:progn
 (common-lisp:defun delete-user-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-group-id)
   (common-lisp:declare (common-lisp:ignorable user-group-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-user-group-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteUserGroup"))
      common-lisp:nil "DeleteUserGroupResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-user-group))
(common-lisp:progn
 (common-lisp:defun describe-cache-clusters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cache-cluster-id max-records marker
                     show-cache-node-info
                     show-cache-clusters-not-in-replication-groups)
   (common-lisp:declare
    (common-lisp:ignorable cache-cluster-id max-records marker
     show-cache-node-info show-cache-clusters-not-in-replication-groups))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-cache-clusters-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeCacheClusters"))
      common-lisp:nil "DescribeCacheClustersResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-cache-clusters))
(common-lisp:progn
 (common-lisp:defun describe-cache-engine-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key engine engine-version
                     cache-parameter-group-family max-records marker
                     default-only)
   (common-lisp:declare
    (common-lisp:ignorable engine engine-version cache-parameter-group-family
     max-records marker default-only))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-cache-engine-versions-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeCacheEngineVersions"))
      common-lisp:nil "DescribeCacheEngineVersionsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-cache-engine-versions))
(common-lisp:progn
 (common-lisp:defun describe-cache-parameter-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cache-parameter-group-name max-records
                     marker)
   (common-lisp:declare
    (common-lisp:ignorable cache-parameter-group-name max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-cache-parameter-groups-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeCacheParameterGroups"))
      common-lisp:nil "DescribeCacheParameterGroupsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-cache-parameter-groups))
(common-lisp:progn
 (common-lisp:defun describe-cache-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cache-parameter-group-name source
                     max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable cache-parameter-group-name source max-records
     marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-cache-parameters-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeCacheParameters"))
      common-lisp:nil "DescribeCacheParametersResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-cache-parameters))
(common-lisp:progn
 (common-lisp:defun describe-cache-security-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cache-security-group-name max-records
                     marker)
   (common-lisp:declare
    (common-lisp:ignorable cache-security-group-name max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-cache-security-groups-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeCacheSecurityGroups"))
      common-lisp:nil "DescribeCacheSecurityGroupsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-cache-security-groups))
(common-lisp:progn
 (common-lisp:defun describe-cache-subnet-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cache-subnet-group-name max-records
                     marker)
   (common-lisp:declare
    (common-lisp:ignorable cache-subnet-group-name max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-cache-subnet-groups-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeCacheSubnetGroups"))
      common-lisp:nil "DescribeCacheSubnetGroupsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-cache-subnet-groups))
(common-lisp:progn
 (common-lisp:defun describe-engine-default-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cache-parameter-group-family max-records
                     marker)
   (common-lisp:declare
    (common-lisp:ignorable cache-parameter-group-family max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-engine-default-parameters-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeEngineDefaultParameters"))
      common-lisp:nil "DescribeEngineDefaultParametersResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-engine-default-parameters))
(common-lisp:progn
 (common-lisp:defun describe-events
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-identifier source-type start-time
                     end-time duration max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable source-identifier source-type start-time end-time
     duration max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-events-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeEvents"))
      common-lisp:nil "DescribeEventsResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'describe-events))
(common-lisp:progn
 (common-lisp:defun describe-global-replication-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-replication-group-id max-records
                     marker show-member-info)
   (common-lisp:declare
    (common-lisp:ignorable global-replication-group-id max-records marker
     show-member-info))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-global-replication-groups-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeGlobalReplicationGroups"))
      common-lisp:nil "DescribeGlobalReplicationGroupsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-global-replication-groups))
(common-lisp:progn
 (common-lisp:defun describe-replication-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-group-id max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable replication-group-id max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-replication-groups-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeReplicationGroups"))
      common-lisp:nil "DescribeReplicationGroupsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-replication-groups))
(common-lisp:progn
 (common-lisp:defun describe-reserved-cache-nodes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key reserved-cache-node-id
                     reserved-cache-nodes-offering-id cache-node-type duration
                     product-description offering-type max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable reserved-cache-node-id
     reserved-cache-nodes-offering-id cache-node-type duration
     product-description offering-type max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-reserved-cache-nodes-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeReservedCacheNodes"))
      common-lisp:nil "DescribeReservedCacheNodesResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-reserved-cache-nodes))
(common-lisp:progn
 (common-lisp:defun describe-reserved-cache-nodes-offerings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key reserved-cache-nodes-offering-id
                     cache-node-type duration product-description offering-type
                     max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable reserved-cache-nodes-offering-id cache-node-type
     duration product-description offering-type max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-reserved-cache-nodes-offerings-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeReservedCacheNodesOfferings"))
      common-lisp:nil "DescribeReservedCacheNodesOfferingsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-reserved-cache-nodes-offerings))
(common-lisp:progn
 (common-lisp:defun describe-serverless-cache-snapshots
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key serverless-cache-name
                     serverless-cache-snapshot-name snapshot-type next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable serverless-cache-name serverless-cache-snapshot-name
     snapshot-type next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-serverless-cache-snapshots-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeServerlessCacheSnapshots"))
      common-lisp:nil "DescribeServerlessCacheSnapshotsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-serverless-cache-snapshots))
(common-lisp:progn
 (common-lisp:defun describe-serverless-caches
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key serverless-cache-name max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable serverless-cache-name max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-serverless-caches-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeServerlessCaches"))
      common-lisp:nil "DescribeServerlessCachesResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-serverless-caches))
(common-lisp:progn
 (common-lisp:defun describe-service-updates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-update-name service-update-status
                     max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable service-update-name service-update-status
     max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-service-updates-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeServiceUpdates"))
      common-lisp:nil "DescribeServiceUpdatesResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-service-updates))
(common-lisp:progn
 (common-lisp:defun describe-snapshots
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-group-id cache-cluster-id
                     snapshot-name snapshot-source marker max-records
                     show-node-group-config)
   (common-lisp:declare
    (common-lisp:ignorable replication-group-id cache-cluster-id snapshot-name
     snapshot-source marker max-records show-node-group-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-snapshots-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeSnapshots"))
      common-lisp:nil "DescribeSnapshotsResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'describe-snapshots))
(common-lisp:progn
 (common-lisp:defun describe-update-actions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-update-name replication-group-ids
                     cache-cluster-ids engine service-update-status
                     service-update-time-range update-action-status
                     show-node-level-update-status max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable service-update-name replication-group-ids
     cache-cluster-ids engine service-update-status service-update-time-range
     update-action-status show-node-level-update-status max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-update-actions-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeUpdateActions"))
      common-lisp:nil "DescribeUpdateActionsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-update-actions))
(common-lisp:progn
 (common-lisp:defun describe-user-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-group-id max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable user-group-id max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-user-groups-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeUserGroups"))
      common-lisp:nil "DescribeUserGroupsResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'describe-user-groups))
(common-lisp:progn
 (common-lisp:defun describe-users
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key engine user-id filters max-records
                     marker)
   (common-lisp:declare
    (common-lisp:ignorable engine user-id filters max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-users-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeUsers"))
      common-lisp:nil "DescribeUsersResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'describe-users))
(common-lisp:progn
 (common-lisp:defun disassociate-global-replication-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-replication-group-id
                     replication-group-id replication-group-region)
   (common-lisp:declare
    (common-lisp:ignorable global-replication-group-id replication-group-id
     replication-group-region))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-global-replication-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DisassociateGlobalReplicationGroup"))
      common-lisp:nil "DisassociateGlobalReplicationGroupResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'disassociate-global-replication-group))
(common-lisp:progn
 (common-lisp:defun export-serverless-cache-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key serverless-cache-snapshot-name
                     s3bucket-name)
   (common-lisp:declare
    (common-lisp:ignorable serverless-cache-snapshot-name s3bucket-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-export-serverless-cache-snapshot-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ExportServerlessCacheSnapshot"))
      common-lisp:nil "ExportServerlessCacheSnapshotResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'export-serverless-cache-snapshot))
(common-lisp:progn
 (common-lisp:defun failover-global-replication-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-replication-group-id
                     primary-region primary-replication-group-id)
   (common-lisp:declare
    (common-lisp:ignorable global-replication-group-id primary-region
     primary-replication-group-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-failover-global-replication-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "FailoverGlobalReplicationGroup"))
      common-lisp:nil "FailoverGlobalReplicationGroupResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'failover-global-replication-group))
(common-lisp:progn
 (common-lisp:defun increase-node-groups-in-global-replication-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-replication-group-id
                     node-group-count regional-configurations
                     apply-immediately)
   (common-lisp:declare
    (common-lisp:ignorable global-replication-group-id node-group-count
     regional-configurations apply-immediately))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-increase-node-groups-in-global-replication-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "IncreaseNodeGroupsInGlobalReplicationGroup"))
      common-lisp:nil "IncreaseNodeGroupsInGlobalReplicationGroupResult"
      *error-map* common-lisp:nil)))
 (common-lisp:export 'increase-node-groups-in-global-replication-group))
(common-lisp:progn
 (common-lisp:defun increase-replica-count
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-group-id new-replica-count
                     replica-configuration apply-immediately)
   (common-lisp:declare
    (common-lisp:ignorable replication-group-id new-replica-count
     replica-configuration apply-immediately))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-increase-replica-count-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "IncreaseReplicaCount"))
      common-lisp:nil "IncreaseReplicaCountResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'increase-replica-count))
(common-lisp:progn
 (common-lisp:defun list-allowed-node-type-modifications
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cache-cluster-id replication-group-id)
   (common-lisp:declare
    (common-lisp:ignorable cache-cluster-id replication-group-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-allowed-node-type-modifications-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListAllowedNodeTypeModifications"))
      common-lisp:nil "ListAllowedNodeTypeModificationsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'list-allowed-node-type-modifications))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-name)
   (common-lisp:declare (common-lisp:ignorable resource-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTagsForResource"))
      common-lisp:nil "ListTagsForResourceResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun modify-cache-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cache-cluster-id num-cache-nodes
                     cache-node-ids-to-remove azmode new-availability-zones
                     cache-security-group-names security-group-ids
                     preferred-maintenance-window notification-topic-arn
                     cache-parameter-group-name notification-topic-status
                     apply-immediately engine-version
                     auto-minor-version-upgrade snapshot-retention-limit
                     snapshot-window cache-node-type auth-token
                     auth-token-update-strategy log-delivery-configurations
                     ip-discovery)
   (common-lisp:declare
    (common-lisp:ignorable cache-cluster-id num-cache-nodes
     cache-node-ids-to-remove azmode new-availability-zones
     cache-security-group-names security-group-ids preferred-maintenance-window
     notification-topic-arn cache-parameter-group-name
     notification-topic-status apply-immediately engine-version
     auto-minor-version-upgrade snapshot-retention-limit snapshot-window
     cache-node-type auth-token auth-token-update-strategy
     log-delivery-configurations ip-discovery))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-cache-cluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyCacheCluster"))
      common-lisp:nil "ModifyCacheClusterResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'modify-cache-cluster))
(common-lisp:progn
 (common-lisp:defun modify-cache-parameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cache-parameter-group-name
                     parameter-name-values)
   (common-lisp:declare
    (common-lisp:ignorable cache-parameter-group-name parameter-name-values))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-cache-parameter-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyCacheParameterGroup"))
      common-lisp:nil "ModifyCacheParameterGroupResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'modify-cache-parameter-group))
(common-lisp:progn
 (common-lisp:defun modify-cache-subnet-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cache-subnet-group-name
                     cache-subnet-group-description subnet-ids)
   (common-lisp:declare
    (common-lisp:ignorable cache-subnet-group-name
     cache-subnet-group-description subnet-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-cache-subnet-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyCacheSubnetGroup"))
      common-lisp:nil "ModifyCacheSubnetGroupResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'modify-cache-subnet-group))
(common-lisp:progn
 (common-lisp:defun modify-global-replication-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-replication-group-id
                     apply-immediately cache-node-type engine-version
                     cache-parameter-group-name
                     global-replication-group-description
                     automatic-failover-enabled)
   (common-lisp:declare
    (common-lisp:ignorable global-replication-group-id apply-immediately
     cache-node-type engine-version cache-parameter-group-name
     global-replication-group-description automatic-failover-enabled))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-global-replication-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyGlobalReplicationGroup"))
      common-lisp:nil "ModifyGlobalReplicationGroupResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'modify-global-replication-group))
(common-lisp:progn
 (common-lisp:defun modify-replication-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-group-id
                     replication-group-description primary-cluster-id
                     snapshotting-cluster-id automatic-failover-enabled
                     multi-azenabled node-group-id cache-security-group-names
                     security-group-ids preferred-maintenance-window
                     notification-topic-arn cache-parameter-group-name
                     notification-topic-status apply-immediately engine-version
                     auto-minor-version-upgrade snapshot-retention-limit
                     snapshot-window cache-node-type auth-token
                     auth-token-update-strategy user-group-ids-to-add
                     user-group-ids-to-remove remove-user-groups
                     log-delivery-configurations ip-discovery
                     transit-encryption-enabled transit-encryption-mode
                     cluster-mode)
   (common-lisp:declare
    (common-lisp:ignorable replication-group-id replication-group-description
     primary-cluster-id snapshotting-cluster-id automatic-failover-enabled
     multi-azenabled node-group-id cache-security-group-names
     security-group-ids preferred-maintenance-window notification-topic-arn
     cache-parameter-group-name notification-topic-status apply-immediately
     engine-version auto-minor-version-upgrade snapshot-retention-limit
     snapshot-window cache-node-type auth-token auth-token-update-strategy
     user-group-ids-to-add user-group-ids-to-remove remove-user-groups
     log-delivery-configurations ip-discovery transit-encryption-enabled
     transit-encryption-mode cluster-mode))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-replication-group-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyReplicationGroup"))
      common-lisp:nil "ModifyReplicationGroupResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'modify-replication-group))
(common-lisp:progn
 (common-lisp:defun modify-replication-group-shard-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-group-id node-group-count
                     apply-immediately resharding-configuration
                     node-groups-to-remove node-groups-to-retain)
   (common-lisp:declare
    (common-lisp:ignorable replication-group-id node-group-count
     apply-immediately resharding-configuration node-groups-to-remove
     node-groups-to-retain))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-replication-group-shard-configuration-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyReplicationGroupShardConfiguration"))
      common-lisp:nil "ModifyReplicationGroupShardConfigurationResult"
      *error-map* common-lisp:nil)))
 (common-lisp:export 'modify-replication-group-shard-configuration))
(common-lisp:progn
 (common-lisp:defun modify-serverless-cache
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key serverless-cache-name description
                     cache-usage-limits remove-user-group user-group-id
                     security-group-ids snapshot-retention-limit
                     daily-snapshot-time)
   (common-lisp:declare
    (common-lisp:ignorable serverless-cache-name description cache-usage-limits
     remove-user-group user-group-id security-group-ids
     snapshot-retention-limit daily-snapshot-time))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-serverless-cache-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyServerlessCache"))
      common-lisp:nil "ModifyServerlessCacheResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'modify-serverless-cache))
(common-lisp:progn
 (common-lisp:defun modify-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-id access-string
                     append-access-string passwords no-password-required
                     authentication-mode)
   (common-lisp:declare
    (common-lisp:ignorable user-id access-string append-access-string passwords
     no-password-required authentication-mode))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-user-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyUser"))
      common-lisp:nil "ModifyUserResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'modify-user))
(common-lisp:progn
 (common-lisp:defun modify-user-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-group-id user-ids-to-add
                     user-ids-to-remove)
   (common-lisp:declare
    (common-lisp:ignorable user-group-id user-ids-to-add user-ids-to-remove))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-user-group-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyUserGroup"))
      common-lisp:nil "ModifyUserGroupResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'modify-user-group))
(common-lisp:progn
 (common-lisp:defun purchase-reserved-cache-nodes-offering
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key reserved-cache-nodes-offering-id
                     reserved-cache-node-id cache-node-count tags)
   (common-lisp:declare
    (common-lisp:ignorable reserved-cache-nodes-offering-id
     reserved-cache-node-id cache-node-count tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-purchase-reserved-cache-nodes-offering-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PurchaseReservedCacheNodesOffering"))
      common-lisp:nil "PurchaseReservedCacheNodesOfferingResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'purchase-reserved-cache-nodes-offering))
(common-lisp:progn
 (common-lisp:defun rebalance-slots-in-global-replication-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-replication-group-id
                     apply-immediately)
   (common-lisp:declare
    (common-lisp:ignorable global-replication-group-id apply-immediately))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-rebalance-slots-in-global-replication-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RebalanceSlotsInGlobalReplicationGroup"))
      common-lisp:nil "RebalanceSlotsInGlobalReplicationGroupResult"
      *error-map* common-lisp:nil)))
 (common-lisp:export 'rebalance-slots-in-global-replication-group))
(common-lisp:progn
 (common-lisp:defun reboot-cache-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cache-cluster-id
                     cache-node-ids-to-reboot)
   (common-lisp:declare
    (common-lisp:ignorable cache-cluster-id cache-node-ids-to-reboot))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reboot-cache-cluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RebootCacheCluster"))
      common-lisp:nil "RebootCacheClusterResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'reboot-cache-cluster))
(common-lisp:progn
 (common-lisp:defun remove-tags-from-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-name tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-name tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-tags-from-resource-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RemoveTagsFromResource"))
      common-lisp:nil "RemoveTagsFromResourceResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'remove-tags-from-resource))
(common-lisp:progn
 (common-lisp:defun reset-cache-parameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cache-parameter-group-name
                     reset-all-parameters parameter-name-values)
   (common-lisp:declare
    (common-lisp:ignorable cache-parameter-group-name reset-all-parameters
     parameter-name-values))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-reset-cache-parameter-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ResetCacheParameterGroup"))
      common-lisp:nil "ResetCacheParameterGroupResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'reset-cache-parameter-group))
(common-lisp:progn
 (common-lisp:defun revoke-cache-security-group-ingress
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cache-security-group-name
                     ec2security-group-name ec2security-group-owner-id)
   (common-lisp:declare
    (common-lisp:ignorable cache-security-group-name ec2security-group-name
     ec2security-group-owner-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-revoke-cache-security-group-ingress-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RevokeCacheSecurityGroupIngress"))
      common-lisp:nil "RevokeCacheSecurityGroupIngressResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'revoke-cache-security-group-ingress))
(common-lisp:progn
 (common-lisp:defun start-migration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-group-id
                     customer-node-endpoint-list)
   (common-lisp:declare
    (common-lisp:ignorable replication-group-id customer-node-endpoint-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-migration-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartMigration"))
      common-lisp:nil "StartMigrationResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'start-migration))
(common-lisp:progn
 (common-lisp:defun test-failover
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-group-id node-group-id)
   (common-lisp:declare
    (common-lisp:ignorable replication-group-id node-group-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-test-failover-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TestFailover"))
      common-lisp:nil "TestFailoverResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'test-failover))
(common-lisp:progn
 (common-lisp:defun test-migration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-group-id
                     customer-node-endpoint-list)
   (common-lisp:declare
    (common-lisp:ignorable replication-group-id customer-node-endpoint-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-test-migration-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TestMigration"))
      common-lisp:nil "TestMigrationResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'test-migration))
